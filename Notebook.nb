(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2621555,      51155]
NotebookOptionsPosition[   2609050,      50941]
NotebookOutlinePosition[   2609488,      50958]
CellTagsIndexPosition[   2609445,      50955]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Enter title here", "Title",ExpressionUUID->"3d5c901c-528e-40ea-bfb5-6cae8602de3b"],

Cell["Enter subtitle here", "Subtitle",ExpressionUUID->"e7479a40-b674-4689-a1e6-7937b2c177d6"],

Cell["Enter subsubtitle here", "Subsubtitle",ExpressionUUID->"439ae915-0578-422b-b930-d6d3dc9f7065"],

Cell[CellGroupData[{

Cell["Data Loading & Cleaning", "Section",
 CellChangeTimes->{{3.877882042179366*^9, 3.877882055356389*^9}, {
  3.8778893815568857`*^9, 
  3.877889387854753*^9}},ExpressionUUID->"7dace181-d0f9-4283-b4a9-\
94e43c143822"],

Cell[CellGroupData[{

Cell["Data Loading", "Subsection",
 CellChangeTimes->{{3.877882058823523*^9, 
  3.877882061508025*^9}},ExpressionUUID->"94903ccb-4645-43a4-b5e5-\
28857714dfcf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ds", " ", "=", " ", 
    RowBox[{"Import", "[", 
     RowBox[{
     "\"\<https://raw.githubusercontent.com/scalabrindario/predicting-climate-\
risks/main/data/dataset_sample.csv\>\"", ",", " ", "\"\<Dataset\>\"", ",", 
      " ", 
      RowBox[{"\"\<HeaderLines\>\"", " ", "\[Rule]", " ", "1"}]}], "]"}]}], 
   ";"}], 
  RowBox[{"(*", 
   RowBox[{"Import", " ", "dataset", " ", "sample"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"comp", " ", "=", " ", 
    RowBox[{"Import", "[", 
     RowBox[{
     "\"\<https://raw.githubusercontent.com/scalabrindario/predicting-climate-\
risks/main/data/company_information.csv\>\"", ",", " ", "\"\<Dataset\>\"", 
      ",", " ", 
      RowBox[{"\"\<HeaderLines\>\"", " ", "\[Rule]", " ", "1"}]}], "]"}]}], 
   ";"}], 
  RowBox[{"(*", 
   RowBox[{"Import", " ", "company", " ", "information"}], "*)"}]}]}], "Input",\

 CellChangeTimes->{{3.877882155173353*^9, 3.877882233086768*^9}, {
   3.877889276711831*^9, 3.877889320051159*^9}, {3.877889368631003*^9, 
   3.8778893690756893`*^9}, 3.8784898834160337`*^9, {3.878489924575973*^9, 
   3.878489955668668*^9}, {3.878490108390555*^9, 3.878490113641554*^9}, {
   3.878490505952305*^9, 3.878490508768412*^9}, {3.87849066090661*^9, 
   3.878490670695458*^9}, {3.878492856576652*^9, 3.8784928608632383`*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"fc7511cd-d7b9-430d-bc85-259db4bc506b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data Cleaning", "Subsection",
 CellChangeTimes->{{3.877882058823523*^9, 3.877882061508025*^9}, {
   3.877889406517935*^9, 3.877889407751175*^9}, 
   3.8784911565823393`*^9},ExpressionUUID->"35896a36-bc89-45d7-aa4c-\
67e8432be11c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ds", " ", "=", " ", 
    RowBox[{
     RowBox[{"KeyDrop", "[", 
      RowBox[{"{", "\"\<\>\"", "}"}], "]"}], "@", "ds"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Drop", " ", "emtpy", " ", "column"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ds", " ", "=", " ", 
    RowBox[{
     RowBox[{"KeyDrop", "[", 
      RowBox[{"{", "\"\<Activity Description\>\"", "}"}], "]"}], "@", 
     "ds"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Drop", " ", "activity", " ", "column"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ds", " ", "=", " ", 
    RowBox[{"ds", "[", 
     RowBox[{"All", ",", 
      RowBox[{"KeyMap", "[", 
       RowBox[{"Replace", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Ultimate Parent Name\>\"", "->", "\"\<Company\>\""}], 
          ",", " ", 
          RowBox[{"\"\<Ultimate Parent ISIN\>\"", "->", "\"\<ISIN\>\""}], ",", 
          RowBox[{
          "\"\<ExposureScore_Composite_ModerateHigh_2020\>\"", " ", "->", 
           " ", "\"\<Risk2020\>\""}], ",", "\[IndentingNewLine]", 
          RowBox[{
          "\"\<ExposureScore_Composite_ModerateHigh_2030\>\"", " ", "->", 
           " ", "\"\<Risk2030\>\""}], ",", 
          RowBox[{
          "\"\<ExposureScore_Composite_ModerateHigh_2040\>\"", " ", "->", 
           " ", "\"\<Risk2040\>\""}], ",", 
          RowBox[{
          "\"\<ExposureScore_Composite_ModerateHigh_2050\>\"", " ", "->", 
           " ", "\"\<Risk2050\>\""}], ",", 
          RowBox[{
          "\"\<ExposureScore_Composite_ModerateHigh_2060\>\"", " ", "->", 
           "\"\<Risk2060\>\""}], ",", "\[IndentingNewLine]", 
          RowBox[{
          "\"\<ExposureScore_Composite_ModerateHigh_2070\>\"", " ", "->", 
           " ", "\"\<Risk2070\>\""}], ",", 
          RowBox[{
          "\"\<ExposureScore_Composite_ModerateHigh_2080\>\"", " ", "->", 
           " ", "\"\<Risk2080\>\""}], ",", "\[IndentingNewLine]", 
          RowBox[{
          "\"\<ExposureScore_Composite_ModerateHigh_2090\>\"", "->", " ", 
           "\"\<Risk2090\>\""}]}], "}"}], "]"}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Rename", " ", "columns", " ", "name"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"ds", ",", " ", "5"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"comp", " ", "=", " ", 
    RowBox[{
     RowBox[{"KeyDrop", "[", 
      RowBox[{"{", "\"\<\>\"", "}"}], "]"}], "@", "comp"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Drop", " ", "emtpy", " ", "column"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"comp", ",", " ", "5"}], "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.877882155173353*^9, 3.877882233086768*^9}, {
   3.877889276711831*^9, 3.877889320051159*^9}, {3.877889368631003*^9, 
   3.8778893690756893`*^9}, {3.8778894126624193`*^9, 3.877889423407289*^9}, {
   3.877889459383305*^9, 3.8778894845215483`*^9}, {3.877889566017929*^9, 
   3.877889588273754*^9}, {3.877889627649275*^9, 3.877889817726323*^9}, {
   3.877889863794015*^9, 3.877889867382916*^9}, {3.877889963648498*^9, 
   3.8778899642708073`*^9}, 3.877890035751668*^9, {3.8784901464207277`*^9, 
   3.878490159646762*^9}, 3.8784902110953283`*^9, {3.878490551607078*^9, 
   3.878490552886361*^9}, {3.878491133677877*^9, 3.878491152768239*^9}, {
   3.878492863880169*^9, 3.878492878427312*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"64e06684-09ba-41b9-8f8e-61ae4922557f"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Company" -> "China", "ISIN" -> "", "Asset ID" -> 416548, "Latitude" -> 
        34.10186, "Longitude" -> 114.2079, "Risk2020" -> 75, "Risk2030" -> 80,
         "Risk2040" -> 80, "Risk2050" -> 81, "Risk2060" -> 82, "Risk2070" -> 
        82, "Risk2080" -> 84, "Risk2090" -> 85, "elevation" -> 60|>, <|
       "Company" -> "China", "ISIN" -> "", "Asset ID" -> 421690, "Latitude" -> 
        25.86544, "Longitude" -> 115.0111, "Risk2020" -> 66, "Risk2030" -> 67,
         "Risk2040" -> 67, "Risk2050" -> 70, "Risk2060" -> 72, "Risk2070" -> 
        75, "Risk2080" -> 77, "Risk2090" -> 76, "elevation" -> 128|>, <|
       "Company" -> "China", "ISIN" -> "", "Asset ID" -> 445424, "Latitude" -> 
        45.25386, "Longitude" -> 131.153, "Risk2020" -> 70, "Risk2030" -> 68, 
        "Risk2040" -> 72, "Risk2050" -> 77, "Risk2060" -> 79, "Risk2070" -> 
        79, "Risk2080" -> 85, "Risk2090" -> 84, "elevation" -> 171|>, <|
       "Company" -> "Bank of Guangzhou Co.Ltd", "ISIN" -> "", "Asset ID" -> 
        811358, "Latitude" -> 23.66553, "Longitude" -> 113.0587, "Risk2020" -> 
        66, "Risk2030" -> 68, "Risk2040" -> 68, "Risk2050" -> 69, "Risk2060" -> 
        71, "Risk2070" -> 73, "Risk2080" -> 76, "Risk2090" -> 78, "elevation" -> 
        9|>, <|"Company" -> "Bank of Comms Co. Ltd.", "ISIN" -> 
        "CNE100000205", "Asset ID" -> 358795, "Latitude" -> 29.37464, 
        "Longitude" -> 113.1221, "Risk2020" -> 64, "Risk2030" -> 66, 
        "Risk2040" -> 67, "Risk2050" -> 68, "Risk2060" -> 72, "Risk2070" -> 
        71, "Risk2080" -> 73, "Risk2090" -> 76, "elevation" -> 50|>}, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "Asset ID"} -> 1, {All, "Latitude"} -> 
        1, {All, "Longitude"} -> 1, {All, "Risk2020"} -> 1, {All, "Risk2030"} -> 
        1, {All, "Risk2040"} -> 1, {All, "Risk2050"} -> 1, {All, "Risk2060"} -> 
        1, {All, "Risk2070"} -> 1, {All, "Risk2080"} -> 1, {All, "Risk2090"} -> 
        1, {All, "elevation"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> TypeSystem`PackageScope`AtomShape[252.], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[126.], "Asset ID" -> 
            TypeSystem`PackageScope`AtomShape[34], "Latitude" -> 
            TypeSystem`PackageScope`AtomShape[60], "Longitude" -> 
            TypeSystem`PackageScope`AtomShape[60], "Risk2020" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2030" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2040" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2050" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2060" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2070" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2080" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2090" -> 
            TypeSystem`PackageScope`AtomShape[34], "elevation" -> 
            TypeSystem`PackageScope`AtomShape[34]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "ISIN", "Asset ID", "Latitude", "Longitude", "Risk2020", 
         "Risk2030", "Risk2040", "Risk2050", "Risk2060", "Risk2070", 
         "Risk2080", "Risk2090", "elevation"}, {
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Bank of Comms Co. Ltd.", "Bank of Guangzhou Co.Ltd", "China"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["", "CNE100000205"]], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer]}], 5], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "Asset ID"} -> 1, {All, "Latitude"} -> 
        1, {All, "Longitude"} -> 1, {All, "Risk2020"} -> 1, {All, "Risk2030"} -> 
        1, {All, "Risk2040"} -> 1, {All, "Risk2050"} -> 1, {All, "Risk2060"} -> 
        1, {All, "Risk2070"} -> 1, {All, "Risk2080"} -> 1, {All, "Risk2090"} -> 
        1, {All, "elevation"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> TypeSystem`PackageScope`AtomShape[252.], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[126.], "Asset ID" -> 
            TypeSystem`PackageScope`AtomShape[34], "Latitude" -> 
            TypeSystem`PackageScope`AtomShape[60], "Longitude" -> 
            TypeSystem`PackageScope`AtomShape[60], "Risk2020" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2030" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2040" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2050" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2060" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2070" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2080" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2090" -> 
            TypeSystem`PackageScope`AtomShape[34], "elevation" -> 
            TypeSystem`PackageScope`AtomShape[34]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "ISIN", "Asset ID", "Latitude", "Longitude", "Risk2020", 
         "Risk2030", "Risk2040", "Risk2050", "Risk2060", "Risk2070", 
         "Risk2080", "Risk2090", "elevation"}, {
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Bank of Comms Co. Ltd.", "Bank of Guangzhou Co.Ltd", "China"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["", "CNE100000205"]], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer]}], 5], "Path" -> {}, "DisplayedRowCount" -> 
     5, "DisplayedColumnCount" -> 10, "DataRowCount" -> 5, "DataColumnCount" -> 
     14, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Company", 
                  Style[
                  "Company", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Company"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Company"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ISIN", 
                  Style[
                  "ISIN", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ISIN"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ISIN"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Asset ID", 
                  Style[
                  "Asset ID", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Asset ID"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Asset ID"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Latitude", 
                  Style[
                  "Latitude", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Latitude"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Latitude"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Longitude", 
                  Style[
                  "Longitude", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Longitude"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Longitude"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2020", 
                  Style[
                  "Risk2020", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2020"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2020"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2030", 
                  Style[
                  "Risk2030", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2030"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2030"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2040", 
                  Style[
                  "Risk2040", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2040"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2040"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2050", 
                  Style[
                  "Risk2050", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2050"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2050"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2060", 
                  Style[
                  "Risk2060", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2060"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2060"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["China", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{252., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["416548"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Asset ID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["34.1019"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["114.208"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["75"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["80"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["80"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["81"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["82"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["China", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{252., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["421690"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Asset ID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["25.8654"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["115.011"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["66"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["67"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["67"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["70"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["72"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["China", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{252., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["445424"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Asset ID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["45.2539"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["131.153"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["70"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["68"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["72"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["77"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["79"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Bank of Guangzhou Co.Ltd", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{252., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["811358"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Asset ID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["23.6655"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["113.059"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["66"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["68"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["68"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["69"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["71"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Bank of Comms Co. Ltd.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{252., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["CNE100000205", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["358795"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Asset ID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["29.3746"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["113.122"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["64"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["66"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["67"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["68"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["72"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[True, 14, 1], {1, 14 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[False, 14, 1], {1, 14 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[14, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[14, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 2 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 2, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 5 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 5, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 100000000, {}]], MenuEvaluator -> Automatic]}],
                     " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[False, 14, 1], {1, 14 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[True, 14, 1], {1, 14 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{886., {108.134033203125, 113.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{886., {108.134033203125, 113.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.878492879714177*^9, 3.878617216432308*^9, 
  3.878715008748741*^9, 3.878805382545115*^9, 3.879148942302202*^9, 
  3.879155098450674*^9},
 CellLabel->
  "Out[100]=",ExpressionUUID->"6594553f-0a03-4904-a3e8-69227a7a8a6e"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "TCUID" -> 239272, "Company" -> "Unilumin Group Co., Ltd", "ISIN" -> 
        "CNE100001518", "GICS Sector Name" -> "Information Technology", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 26134.966, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 22790.288, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 115209.708, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 36.352, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 31.699, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 160.247, 
        "Carbon Disclosure" -> "Estimated data", "Revenue (USD mn)" -> 
        718.9496|>, <|
       "TCUID" -> 245528, "Company" -> 
        "Shanghai Sinyang Semiconductor Materials Co., Ltd.", "ISIN" -> 
        "CNE100001542", "GICS Sector Name" -> "Information Technology", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 4100.371, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 2830.617, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 23877.115, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 40.783, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 28.154, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 237.485, 
        "Carbon Disclosure" -> "Estimated data", "Revenue (USD mn)" -> 
        100.54167661878|>, <|
       "TCUID" -> 108815, "Company" -> 
        "China Shineway Pharmaceutical Group Limited", "ISIN" -> 
        "KYG2110P1000", "GICS Sector Name" -> "Health Care", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 100252., 
        "Carbon-Scope 2  (tonnes CO2e)" -> 9055.694, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 34851.087, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 260.529, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 23.533, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 90.569, 
        "Carbon Disclosure" -> 
        "Value derived from data provided in Environmental/CSR", 
        "Revenue (USD mn)" -> 384.802388412164|>, <|
       "TCUID" -> 239412, "Company" -> "CanSino Biologics Inc.", "ISIN" -> 
        "CNE100003F01", "GICS Sector Name" -> "Health Care", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 50.302, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 75.633, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 313.069, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 13.948, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 20.971, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 86.807, 
        "Carbon Disclosure" -> "Estimated data", "Revenue (USD mn)" -> 
        3.606499891395|>, <|
       "TCUID" -> 230617, "Company" -> "Glodon Company Limited", "ISIN" -> 
        "CNE100000PH8", "GICS Sector Name" -> "Information Technology", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 21191.772, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 25188., 
        "Carbon-Scope 3 (tonnes CO2e)" -> 20475.35, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 36.52, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 43.406, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 35.285, 
        "Carbon Disclosure" -> "Derived from previous year", 
        "Revenue (USD mn)" -> 580.282382525532|>}, "AllowEmbedding" -> True, 
     "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "TCUID"} -> 
        1, {All, "Company"} -> 1, {All, "ISIN"} -> 
        1, {All, "GICS Sector Name"} -> 
        1, {All, "Carbon-Scope 1  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 2  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 3 (tonnes CO2e)"} -> 
        1, {All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Disclosure"} -> 1, {All, "Revenue (USD mn)"} -> 1|>, 
       
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "TCUID" -> TypeSystem`PackageScope`AtomShape[34], "Company" -> 
            TypeSystem`PackageScope`AtomShape[560.], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "GICS Sector Name" -> 
            TypeSystem`PackageScope`AtomShape[231.], 
            "Carbon-Scope 1  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 2  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 3 (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "Carbon Disclosure" -> 
            TypeSystem`PackageScope`AtomShape[556.5], "Revenue (USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "TCUID", "Company", "ISIN", "GICS Sector Name", 
         "Carbon-Scope 1  (tonnes CO2e)", "Carbon-Scope 2  (tonnes CO2e)", 
         "Carbon-Scope 3 (tonnes CO2e)", 
         "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", "Carbon Disclosure",
          "Revenue (USD mn)"}, {
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Health Care", "Information Technology"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Derived from previous year", "Estimated data", 
           "Value derived from data provided in Environmental/CSR"]], 
         TypeSystem`Atom[Real]}], 5], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "TCUID"} -> 
        1, {All, "Company"} -> 1, {All, "ISIN"} -> 
        1, {All, "GICS Sector Name"} -> 
        1, {All, "Carbon-Scope 1  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 2  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 3 (tonnes CO2e)"} -> 
        1, {All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Disclosure"} -> 1, {All, "Revenue (USD mn)"} -> 1|>, 
       
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "TCUID" -> TypeSystem`PackageScope`AtomShape[34], "Company" -> 
            TypeSystem`PackageScope`AtomShape[560.], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "GICS Sector Name" -> 
            TypeSystem`PackageScope`AtomShape[231.], 
            "Carbon-Scope 1  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 2  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 3 (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "Carbon Disclosure" -> 
            TypeSystem`PackageScope`AtomShape[556.5], "Revenue (USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "TCUID", "Company", "ISIN", "GICS Sector Name", 
         "Carbon-Scope 1  (tonnes CO2e)", "Carbon-Scope 2  (tonnes CO2e)", 
         "Carbon-Scope 3 (tonnes CO2e)", 
         "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", "Carbon Disclosure",
          "Revenue (USD mn)"}, {
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Health Care", "Information Technology"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Derived from previous year", "Estimated data", 
           "Value derived from data provided in Environmental/CSR"]], 
         TypeSystem`Atom[Real]}], 5], "Path" -> {}, "DisplayedRowCount" -> 5, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 5, "DataColumnCount" -> 
     12, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["TCUID", 
                  Style[
                  "TCUID", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "TCUID"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "TCUID"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Company", 
                  Style[
                  "Company", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Company"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Company"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ISIN", 
                  Style[
                  "ISIN", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ISIN"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ISIN"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["GICS Sector Name", 
                  Style[
                  "GICS Sector Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "GICS Sector Name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "GICS Sector Name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 1  (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 1  (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 1  (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 1  (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 2  (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 2  (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 2  (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 2  (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 3 (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 3 (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 3 (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 3 (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                  Style[
                  "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                  Style[
                  "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"}, 
                "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                  Style[
                  "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"}, 
                "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["239272"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Unilumin Group Co., Ltd", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["CNE100001518", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Information Technology", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{231., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["26135.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["22790.3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["115210."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["36.352"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["31.699"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["160.247"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["245528"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Shanghai Sinyang Semiconductor Materials Co., Ltd.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["CNE100001542", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Information Technology", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{231., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4100.37"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2830.62"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["23877.1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["40.783"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["28.154"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["237.485"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["108815"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["China Shineway Pharmaceutical Group Limited", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["KYG2110P1000", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Health Care", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{231., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["100252."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["9055.69"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["34851.1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["260.529"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["23.533"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["90.569"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["239412"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["CanSino Biologics Inc.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["CNE100003F01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Health Care", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{231., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["50.302"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["75.633"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["313.069"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["13.948"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["20.971"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["86.807"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["230617"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Glodon Company Limited", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["CNE100000PH8", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Information Technology", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{231., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["21191.8"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["25188.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["20475.4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["36.52"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["43.406"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["35.285"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[True, 12, 1], {1, 12 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[False, 12, 1], {1, 12 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[12, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[12, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 2 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 2, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 5 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 5, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 100000000, {}]], MenuEvaluator -> Automatic]}],
                     " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[False, 12, 1], {1, 12 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[True, 12, 1], {1, 12 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{1402., {108.134033203125, 113.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{1402., {108.134033203125, 113.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.878492879714177*^9, 3.878617216432308*^9, 
  3.878715008748741*^9, 3.878805382545115*^9, 3.879148942302202*^9, 
  3.879155098575616*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"5d947c5c-cf83-43f2-8bf3-13cc19e3d9d7"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Feature Engineering", "Section",
 CellChangeTimes->{{3.877882042179366*^9, 3.877882055356389*^9}, {
  3.8778893815568857`*^9, 3.877889387854753*^9}, {3.8784907159983683`*^9, 
  3.878490721079863*^9}},ExpressionUUID->"09b8ec3b-6ad4-4052-b6db-\
39219809bea4"],

Cell[CellGroupData[{

Cell["Integral Score ", "Subsection",
 CellChangeTimes->{
  3.878095202888431*^9},ExpressionUUID->"718b3489-2255-4bf6-9e53-\
6fbf72095c28"],

Cell["\<\
Our goal it to give a summary of the risk approximation by decade into one \
scalar statistic, called Integral Score. 
We first visualise several options for this score, given the risk values by \
decade.
One can fit a function given the risk approximation for several years, and \
then integrate the resulting curve.
The choice of score then boils down to the choice of approximation.\
\>", "Text",
 CellChangeTimes->{{3.878095305913897*^9, 3.878095370787418*^9}, {
  3.8781074730571938`*^9, 3.878107496759869*^9}, {3.878107594724197*^9, 
  3.878107668134574*^9}, {3.878110381495985*^9, 3.878110396451376*^9}, {
  3.8781104565792303`*^9, 
  3.878110566684598*^9}},ExpressionUUID->"709f453a-bbea-4521-b17e-\
2c6be2d07fba"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "2020", ",", " ", "2030", ",", " ", "2040", ",", "2050", ",", "2060", ",",
      "2070", ",", " ", "2080", ",", " ", "2090"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"yRandom", " ", "=", " ", 
   RowBox[{"Normal", "@", 
    RowBox[{"Values", "@", 
     RowBox[{
      RowBox[{"RandomSample", "[", 
       RowBox[{
        RowBox[{"ds", "[", 
         RowBox[{"All", ",", " ", 
          RowBox[{"{", 
           RowBox[{"6", ";;", "13"}], "}"}]}], "]"}], ",", "1"}], "]"}], "[", 
      
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}]}]}]}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "We", " ", "pick", " ", "one", " ", "row", " ", "at", " ", "random", " ", 
    "to", " ", "illustrate", " ", "all", " ", "the", " ", "possible", " ", 
    "scores"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{"Transpose", "@", 
    RowBox[{"Normal", "@", 
     RowBox[{"{", 
      RowBox[{"x", ",", "yRandom"}], "}"}]}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"line", " ", "=", " ", 
   RowBox[{"Fit", "[", 
    RowBox[{"data", ",", " ", 
     RowBox[{"{", 
      RowBox[{"1", ",", "z"}], "}"}], ",", " ", "z"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"parabola", " ", "=", " ", 
   RowBox[{"Fit", "[", 
    RowBox[{"data", ",", " ", 
     RowBox[{"{", 
      RowBox[{"1", ",", "z", ",", 
       RowBox[{"z", "^", "2"}]}], "}"}], ",", " ", "z"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"polynomial3", " ", "=", " ", 
   RowBox[{"Fit", "[", 
    RowBox[{"data", ",", " ", 
     RowBox[{"{", 
      RowBox[{"1", ",", "z", ",", 
       RowBox[{"z", "^", "2"}], ",", 
       RowBox[{"z", "^", "3"}]}], "}"}], ",", " ", "z"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{"data", ",", 
     RowBox[{"PlotStyle", "->", "Red"}]}], "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"line", ",", " ", "parabola", ",", " ", "polynomial3"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"z", ",", "2010", ",", "2100"}], "}"}], ",", " ", 
     RowBox[{"PlotLegends", "->", "\"\<Expressions\>\""}]}], "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"BarChart", "[", "yRandom", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", 
  RowBox[{"\"\<Linear approximation (line): \>\"", ",", " ", 
   RowBox[{"Integrate", "[", 
    RowBox[{"line", ",", 
     RowBox[{"{", 
      RowBox[{"z", ",", "2020", ",", "2100"}], "}"}]}], "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", 
  RowBox[{"\"\<Quardatic approximation (parabola): \>\"", ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{"parabola", ",", 
     RowBox[{"{", 
      RowBox[{"z", ",", "2020", ",", "2100"}], "}"}]}], "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", 
  RowBox[{"\"\<Third degree approximation (polynomial3): \>\"", ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{"polynomial3", ",", 
     RowBox[{"{", 
      RowBox[{"z", ",", "2020", ",", "2100"}], "}"}]}], "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", 
  RowBox[{"\"\<Rectangle approximation (barchart): \>\"", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"Total", "@", "yRandom"}], ")"}], "*", "10"}]}], "]"}]}], "Input",\

 CellChangeTimes->{{3.878095988419815*^9, 3.878096008451264*^9}, {
   3.878096246426421*^9, 3.878096249028542*^9}, {3.87809736728378*^9, 
   3.8780973906733418`*^9}, 3.878097432467164*^9, {3.878097478162343*^9, 
   3.8780974995002832`*^9}, {3.8780983570920067`*^9, 3.878098417799266*^9}, {
   3.878098491380351*^9, 3.87809849395568*^9}, {3.87809898606929*^9, 
   3.8780989909869013`*^9}, {3.878107175408936*^9, 3.878107175612001*^9}, {
   3.878107205692005*^9, 3.878107358687537*^9}, {3.8781074188971367`*^9, 
   3.878107421340673*^9}, {3.878109452000227*^9, 3.878109498076082*^9}, {
   3.878109557921968*^9, 3.8781096290645742`*^9}, {3.878109816628388*^9, 
   3.878109816734045*^9}, {3.878110581079624*^9, 3.8781106177289267`*^9}, {
   3.87849120512105*^9, 3.878491209011669*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"2de772f5-4145-4495-9373-d8e224bc076d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "64", ",", "68", ",", "68", ",", "70", ",", "72", ",", "75", ",", "72", ",",
    "75"}], "}"}]], "Output",
 CellChangeTimes->{
  3.878098992066743*^9, 3.878099331598818*^9, 3.878099368325416*^9, {
   3.878107182896913*^9, 3.87810720691947*^9}, {3.87810723821165*^9, 
   3.878107276352625*^9}, 3.8781073240250177`*^9, {3.878107422738969*^9, 
   3.878107453848839*^9}, {3.878107756105233*^9, 3.878107760910823*^9}, 
   3.87810783859802*^9, {3.8781080362344112`*^9, 3.878108065411766*^9}, 
   3.8781094596677227`*^9, {3.878109571943493*^9, 3.87810959893552*^9}, 
   3.878109630289406*^9, {3.8781097915711803`*^9, 3.8781098474344463`*^9}, {
   3.878110619585442*^9, 3.878110622826226*^9}, {3.878490683574058*^9, 
   3.878490686083373*^9}, 3.87849085128356*^9, 3.878490941270187*^9, {
   3.8784911611531076`*^9, 3.8784911727022753`*^9}, {3.878491209407058*^9, 
   3.878491211387108*^9}, 3.878492609902875*^9, 3.878617218535305*^9, 
   3.878715011509631*^9, 3.8788053848095617`*^9, 3.879148945149165*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"759a7a49-0be5-483a-a445-601f7fc30034"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          AbsoluteThickness[1.6], 
          RGBColor[1, 0, 0]], 
         PointBox[{{2020., 64.}, {2030., 68.}, {2040., 68.}, {2050., 70.}, {
          2060., 72.}, {2070., 75.}, {2080., 72.}, {2090., 
          75.}}]}}}, {{}, {}}}, {{{{}, {}, 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwV0HtUzGkcBvCp7bYiXZBNCi1FJm2mi2blEYVK/S6IKXaNQhwl0dmaDZGK
GETbaYvfu0MuNZu0otKmi2hXSrEdjS2Uy7icdGpcNluz7/7xnvd8zve87/Oc
71R5HBdtKBKJltPz/93lrxCJNguoCfMLyjZicM5Tvtieur1hx/N26liXZZk+
1D3e5/faGDMYGWNrGU9tMsXy2knqKZ1ljj3Uq/qfOuWaMJDHvfa7GSOg79iB
4XwzBtr8NSmZWwU4tDeXFo5mMKDzHrKME7B7RYRt5TgGO1Okk6sSBfgOZZRK
ZzCIMRcHPU0RsEX9QJrjxeDro3uynqXR+ZLj6oJABiGvJn7Yc1iA4f61r/Th
DF4uJVvyTgjwv7Nsou9mBv27Y82C8wUkXwmwuZfE4EbRqaqHKgFc+uVBmywG
or+rEp9dFHA6av4tt3wGl3odIjMvC3jR+zCqUM2grX97cFEFncedfD9QzaBy
0Cnswg0BQ703tvY1M7C4O/lHv9sCQv8Z+jWgm0FHsfFvXIsAu0mrehL6GJiv
l9jo/xKg6artGdYzMB19MyOjS4DfwfwmTysWu6oXmiifCZiw8CeyeCoLdpFJ
yey3ND+PLL7kwYK0Vny3bFCAm/5PTb8/i0iPMt+RIQGxxsbzlStYxAWY5Cwx
IAjVlaR1RrOI2Vlk1WpEoHr3Q83nXSx+thhQqcwI+rK4m0kZLA4Uu8/zHE1Q
JgmpbsllwTcIneVjCSbcKs9rO88iPLBMuc+GYMcnt0XulSzGN19famFLEOjd
1B39B4svf99s+8KOwMI2PvCjhsVTl8D+YgeC5McHT3i9ZbEj167FfRqB7Ep9
e8i/LHzjs2sNZhB4zTLvrhnD4fpyg4rjMwnS1QmPTB04OBaSyrFimmcbUjMi
5lC1qbe1052+d5JsYxdwsBBPfiOXEFyVfmuhCOOQt3bIzseH5r/nFaL1HLqO
tYQ1Swk6qrI0kfEcjBbcV4YuIPCLmeu4KZWDfLWix34R3UfF6zl3szkk7bST
FgXSvuPqPUad4XD7c+SF/UF0f1YXDc5c4fBpuNUxOJSg5oO+/FUjh15D34I2
luCcNjHStIP+n7BEfHYl7a8Ybtn7ksPj58ENnmsIuu3Ozm37yOHU/b0byiNp
H1VVSqspj+zZayamfk9w686TEzO/4oFMl3bzKIJZBs4Fspk88t51qyZRv9h6
RKuiHliVk+BKreoYlLyhLpxuOD6Y2kFde1cxi8eohkfhh6itw2X6AlceD4aV
XWbRBB/UR+SPxTxiEt5rjTcS1K/WuUR58KjXFFeOp97dINulprb3lx+aTu3n
Vleno26xbHUNoL76hVJ2YC4PScmF2DTqohLnw+ckPEa0ETrDTQTZRhHvtF48
whnrRmvqoLg66TfePEqvNeVMozbROGcmUW9I9/T2p953STdllA+PJqexyanU
iTIl5zqPx9SsxqDj1B6NutMJ1MkDikm/UL+eE/HmOrW4TltdS73R2CUtxJdH
uotw5B71tO3Keyepnxxdue4JdY9GZ99FPe+j+Zx+6tMBETHTpXTf6+r1empZ
aV35Nur/AMKJMhw=
           "]]}, Annotation[#, "Charting`Private`Tag$18200#1"]& ], 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwV1Hs0lHkYB/BhsTZFN5clUrqwGasQaelZ1hA15n1zLcQgRFRi111bMbuF
3LqwMk2kaLXZ3KaL1621uQzblmhHckuL5dioldjn98ecOZ/z/T7P753fnJl1
/Ag6UJbFYp3EF3mX2sSxWMGFwBrykGP1c+G6Gf+bNehkN57hIjpcf7fAguQ+
SbDwigsLy9SXHyM2PM2eH+SCbk/F2gHSb9HXfPeaC/yIv62bQtDzUqs3k1wY
zfdMEISi3d+XP1zkwvRb87nlETjfPW5utNYZTiTs1BZHo5sGaHu+M4QosR1f
JWB/dbz9lUJn2JCRdHboNNrwH/eUXmfY80ZjNulcIcBw+qcpS3nw2kF4+HI2
zjsG719mwIOpxHBFp3zsC9n1tvY8qCstED8XEUfnbg/gAesvcfTQTexnGu3L
SeTB7UEdL8Ed3LfV6XpMHg+6po46ldYUAvNyIFb6Kw9q/9VzvlGHPq42saGN
B8rt2vHWv2Ffz+Ro+zAPnpXJ/0p34L7mTUOff+SBkp/pqsWn2GdvZUpUKfh0
aVNqqhTPd1i1fhmbgqj7XyukD+F8xXDrVzYUULYK5Ybj2LfTiUvxoEAoqTm4
+1/Maff5n8Mo8NpWYbkwh25KrZScpCDCTiHXXkYIyedXSrpzKQg5UbpCIocO
SrUaKqEgT3laJFJES81dGsUUnCkz3mG2VAgsuVO+4lYK9jUW9lSqoDt/UK57
QYE7pyL9+1VCgE1rJBHjFKi23XNQVhfi8/jJ+3yg4LMHweojmugi/4vPl9Dw
Sp8zVaaD88sUyl0+p+H4Rc0O4/WYdxqLTDfRYHksi5HZhHmlSWKMCQ339srU
ZBqgSyIfm+2iYW2xsFaFjecpPGA0HWkQBw1KeoxxXk1+o7UrDcps7TG+Kdo5
3WfBh4bL3nOaFhbYDx0NlAbTID3f4dy2E/f99Xws7BgNcruepHN3Yb8r+plJ
DA18j7iBNbboFTKj08k0xJzQ3FnKwfnZGUVBKg2/ffC6ccoRPbr03EwaDe8/
StY6cdFuPlR6Ng2DspY/dVF4f8a3ruhdoqHIInGkHw1dSzZsRweENxhPoZlv
nxY4oEd6HJuVaew/Kw8/gh795cA/TmhW77EzVehxnwR4RDxnkcq5TMNbMTMk
3ofzBa0vvPPw+SPt2UWuuD9K9veQn2joPF0YWUEcr+n7HTr/wrtaBs3S0ppI
QW8Tl3CkaEbn2eg1tK+Moq+aG/ZtTIKk6HsZLVkCNPP+hyRuAX4/t3a/D3PH
59O9qWNwhYaXw06NZp64z69cjSmk4UJtW70tOnl291grek/aXoYiefW2qm60
2NT5wRE0UzNmNEn6p+jqYpI3fijTFtLAXedZprof87HsP79DP/Q6lD2Dhpyi
l5uv0hBl/DrzkwO4P204YRvaUC74/Ao03IlcaYXOKwtJY6NZcd/q0OjoubDU
QJKv0m6IQxtdiox7Sub395u3owueJPtXeqGt7KXBIhpYZi5ZTcQenBWR6IAL
m+ufEA/27khAG3p26EwTc5qCM9H3+7R6jbzxvG8uWdWie99U8W6gQceuUeEa
DRqsCat8H+zvqbC+jI73Y8JK0Qx1UF6E7m/Izq9Fsx5dZUrRJWcs/+sm+fzI
6vvo7UqCu6sPYn71uGkf2lVNb0s6mmlJd9YtoiHL0FPjpC86q3cmHy1zGGwz
iGXru0TooyWbwwt8yf1UXbuJ3rt+trGW+LHEoBqtqJEdMU08XvOwC534Sfsj
fz88b/KQknwxDSG9EMXh4/NPbjUOQD9X1xe6oFmmrI4QNMdVpZWPZqqkfhHo
DZ1S3SSSxzwKjUX3Nce2VaNhgqt4Hu1y566egT/uy9kZUIsGgf4fSgHY7ztV
Incdf5+TfSItNFPXLvgMPe2WG7mF+Oxdb2V08UZZVSd08iuPAXX0ksYX7j8S
p8y7fYH+82O6VDGQ/F/cntiDZgfalWugwaJFkUKntH1I1EczxQnqrugd+cG6
DsTWdSre6CsWNv6p6OTDBaFh6JDImVH5Q+ji5k4BuqG3rFaV+PGtjefQa2z4
P25EMz3G4RnojuWSLXYkr1TpzUWblt8IP42GIH1tETpN9eCuHDRLOqtcjB6J
V11eROa/4r8tIZ/f6fs7jWRerJL3M3ph9MBb2SDs327m1aDdeSubV6KTo+Je
itG/VLfkrg8i/7cdfg/Q/ilm5jYkt3P8ugHdoqcSe5LMJxSEtqLXnW12zCR5
juXFdnTsdJzWVeLcE1UScl/1o/cZss+tTvKE3Jd+YVonsVrn70/R/RmuPv3E
TEJ1N7m/d0pfTpH9Li2XetBZPg2Li8R/3D7yAv0/IH6sgw==
           "]]}, Annotation[#, "Charting`Private`Tag$18200#2"]& ], 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.560181, 0.691569, 0.194885], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwdz3001XcYAPDL0U0RUsZEJi/Zck93GyV29Iwo5N77+1okl3FDYZGXbCOZ
DTkSS7PkPaPhOld5y1uRl7Exl2oOmS0v2aVWjpcxce357o/nPOdznpfzPIai
MBKgyGKxXDFoHrOLZbHOFgJrrlWJ1caD25aiI3rUU8uStx7yINTMKcWKuvLu
R5x2Hsi3aWuEU8uqFE918uCdkWqDCeq1davqHh6IwmZtO4PQDZoC70EeyHI9
41JC0FY17xdM8GB+8eCqRhi6Nkq9V4kPUXE2+k3R6JWBKpErH4JUOM7jceiS
giWSwQfjjPgrU4loJZGXfT8fjs/o/BOfhmaHnHJTFsBfx4qCb15HczWcQ00F
MHcpVNklFy3RWtZ3FEBrRX7TcDG6fkjs5C8A1u9N0VPl6DvdT3PiBVA1uVuY
cpf2m2a55wlgcO68S0UDOnh2zb1eAI0LRvyyVrTt+dHtUgGo/ap/0bYb/dM9
TY0ZAQyJN9WQfvQT1vFUFgMqfhY7Nn5DR/Hb9r7NwGbVzsuXx9DT2Uwcl4EL
LR+z06fQ/mxRkgMDjD1bYv4SHS2ySPNioEja8KnTAlo43esXxoDwg2pr+So6
MH9AJ5GBMAd21lGFImB97+tefoOBoKiK7VIldMzMkk05Azlq88XFymjzN1sz
mhlIEnMPWaqi5/6dlvcy4NZROFKnjjZdvB03yoCHY3X61zvQ/srighcMaPU1
H1PTRgs+N1RZZWDL/bPa07poK4mxwhYC42aOc+LddH4kk61NIOKGbj93D607
qScZEbAOz2xTMEWX7BwO5xJodlVouPYu+sBo2GsbAgalRY3qHHRg3prYkUDT
mUnpCBedp2n5gCGgxtF/IbJAV2Z7pnoRuOm9qmtlhU6zZmcHEBj7tp/fZ4Me
Zv98IZSA0uHH6bzDaPl4U2U0AdHJ2Ak9e3TEglw9nsCXUbo2FY5oO1W/oGQC
3W+EZd84o32rWseuElhZlxq48NDvudVIviMwqWidN8igj9xKysnB/ZFHOSUn
0LZ1jhlFBP587tJh6YkOHjKuLiWQ//ir03VC+o9Q/2QFgUxzT50EX3SizHtZ
QgBSzB6p+KPbYw88r8Z/Xv9RvIu6uOjVEnrePStyH7VGbiG7hkCpiaKWC7Vw
58u96K0dox6p1EMf7g9GP1lPH1MOQLet+fyNDopckm0KpPefC3lVS6D9qbhR
i/oTA5Cj9exEqSbULV3b1OoI9GtI9zlQKy5c56AtJGWhidS1sy6foeUyr0XF
M2glkxAZ2kOg2aVJrZouXUbfudeTtYe6YtV8cz2B08mWB+2oIyYemaB7jNRj
Eqi5m3tFaMMrXc7XqB/8uByOjpmP3XWL+pKbfgKa81DW0vb/vgG3QnSyWeHV
AeqVH/wl6GcZJ3yeUfskh95HH1pW2T9H/csX4X3oTJ/2jQ1q64vnRtH/AVfZ
EDY=
           "]]}, Annotation[#, "Charting`Private`Tag$18200#3"]& ]}}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, 
     AxesOrigin -> {2018.5416666666713`, 63.38888888888903}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{2018.5416666666713`, 2090.}, {63.38888888888903, 75.}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"line", "parabola", "polynomial3"}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.560181, 0.691569, 0.194885]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm], ",", 
               TagBox[#3, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.878098992066743*^9, 3.878099331598818*^9, 3.878099368325416*^9, {
   3.878107182896913*^9, 3.87810720691947*^9}, {3.87810723821165*^9, 
   3.878107276352625*^9}, 3.8781073240250177`*^9, {3.878107422738969*^9, 
   3.878107453848839*^9}, {3.878107756105233*^9, 3.878107760910823*^9}, 
   3.87810783859802*^9, {3.8781080362344112`*^9, 3.878108065411766*^9}, 
   3.8781094596677227`*^9, {3.878109571943493*^9, 3.87810959893552*^9}, 
   3.878109630289406*^9, {3.8781097915711803`*^9, 3.8781098474344463`*^9}, {
   3.878110619585442*^9, 3.878110622826226*^9}, {3.878490683574058*^9, 
   3.878490686083373*^9}, 3.87849085128356*^9, 3.878490941270187*^9, {
   3.8784911611531076`*^9, 3.8784911727022753`*^9}, {3.878491209407058*^9, 
   3.878491211387108*^9}, 3.878492609902875*^9, 3.878617218535305*^9, 
   3.878715011509631*^9, 3.8788053848095617`*^9, 3.879148945288974*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"b633ea02-2342-4947-91fc-622b8d1c7e49"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{0.39075018208302986`, 0.}, {8.451201747997086, 0.}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
     Thickness[Small]}], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 64.},
              "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{20.24671633359226, 
            57.840870883457754`}, {-72.19435739946096, 100.97172611871375`}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, 64]& ,
         TagBoxNote->"64"],
        StyleBox["64", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[64, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
             68.}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{61.352668066413344`, 
            98.94682261627884}, {-82.98598761934687, 100.97172611871375`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 68]& ,
         TagBoxNote->"68"],
        StyleBox["68", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[68, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
             68.}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{102.45861979923443`, 
            140.05277434909993`}, {-82.98598761934687, 100.97172611871375`}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, 68]& ,
         TagBoxNote->"68"],
        StyleBox["68", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[68, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 70.}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{143.5645715320555, 
            181.158726081921}, {-88.38180272928983, 100.97172611871375`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 70]& ,
         TagBoxNote->"70"],
        StyleBox["70", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[70, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 72.}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{184.67052326487658`, 
            222.2646778147421}, {-93.77761783923279, 100.97172611871375`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 72]& ,
         TagBoxNote->"72"],
        StyleBox["72", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[72, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{5.548798252002913, 0.}, {6.451201747997087, 75.}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{225.77647499769768`, 
            263.3706295475632}, {-101.87134050414724`, 100.97172611871375`}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, 75]& ,
         TagBoxNote->"75"],
        StyleBox["75", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[75, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{6.548798252002913, 0.}, {7.451201747997087, 72.}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{266.8824267305188, 
            304.47658128038427`}, {-93.77761783923279, 100.97172611871375`}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, 72]& ,
         TagBoxNote->"72"],
        StyleBox["72", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[72, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{7.548798252002913, 0.}, {8.451201747997086, 75.}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{307.9883784633398, 
            345.5825330132053}, {-101.87134050414724`, 100.97172611871375`}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, 75]& ,
         TagBoxNote->"75"],
        StyleBox["75", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[75, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
   StyleBox[
    StyleBox[{
      {Thickness[Tiny], 
       LineBox[{{0.39075018208302986`, 0.}, {8.612410779315367, 0.}}], 
       StyleBox[{}, "GraphicsLabel",
        StripOnInput->False]}, 
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0.5487982520029133, 0.}, 
           Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 0.}]}],
          LineBox[{{8.451201747997086, 0.}, 
           Offset[{-1.102182119232618*^-15, -6.}, {8.451201747997086, 
            0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
        StyleBox[{}, "GraphicsLabel",
         StripOnInput->False]}, "GraphicsTicks",
       StripOnInput->False]},
     Antialiasing->False], "GraphicsAxes",
    StripOnInput->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.39075018208302986`, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{
  3.878098992066743*^9, 3.878099331598818*^9, 3.878099368325416*^9, {
   3.878107182896913*^9, 3.87810720691947*^9}, {3.87810723821165*^9, 
   3.878107276352625*^9}, 3.8781073240250177`*^9, {3.878107422738969*^9, 
   3.878107453848839*^9}, {3.878107756105233*^9, 3.878107760910823*^9}, 
   3.87810783859802*^9, {3.8781080362344112`*^9, 3.878108065411766*^9}, 
   3.8781094596677227`*^9, {3.878109571943493*^9, 3.87810959893552*^9}, 
   3.878109630289406*^9, {3.8781097915711803`*^9, 3.8781098474344463`*^9}, {
   3.878110619585442*^9, 3.878110622826226*^9}, {3.878490683574058*^9, 
   3.878490686083373*^9}, 3.87849085128356*^9, 3.878490941270187*^9, {
   3.8784911611531076`*^9, 3.8784911727022753`*^9}, {3.878491209407058*^9, 
   3.878491211387108*^9}, 3.878492609902875*^9, 3.878617218535305*^9, 
   3.878715011509631*^9, 3.8788053848095617`*^9, 3.8791489453702917`*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"0df3c1dd-8376-46a4-bd0c-e4c125296705"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Linear approximation (line): \"\>", "\[InvisibleSpace]", 
   "5697.14285714287`"}],
  SequenceForm["Linear approximation (line): ", 5697.14285714287],
  Editable->False]], "Print",
 CellChangeTimes->{{3.878107238329743*^9, 3.878107276508223*^9}, 
   3.878107324138131*^9, {3.8781074228993597`*^9, 3.878107454003121*^9}, {
   3.878107756220397*^9, 3.87810776106087*^9}, 3.878107838740787*^9, {
   3.8781080364435863`*^9, 3.8781080655675163`*^9}, 3.8781094601917057`*^9, {
   3.8781095726128073`*^9, 3.878109599220655*^9}, 3.878109630566448*^9, {
   3.8781097918409157`*^9, 3.878109847741796*^9}, {3.87811061987574*^9, 
   3.8781106231039658`*^9}, {3.878490683843603*^9, 3.8784906861542788`*^9}, 
   3.878490851355443*^9, 3.878490941341604*^9, {3.8784911612271547`*^9, 
   3.878491172773608*^9}, {3.878491209476358*^9, 3.878491211457273*^9}, 
   3.8784926100106277`*^9, 3.878617218677796*^9, 3.878715011801186*^9, 
   3.878805385108643*^9, 3.879148945384584*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"466109ad-4feb-44c8-99e9-dbe54e674d99"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Quardatic approximation (parabola): \"\>", "\[InvisibleSpace]",
    "5693.015873016324`"}],
  SequenceForm["Quardatic approximation (parabola): ", 5693.015873016324],
  Editable->False]], "Print",
 CellChangeTimes->{{3.878107238329743*^9, 3.878107276508223*^9}, 
   3.878107324138131*^9, {3.8781074228993597`*^9, 3.878107454003121*^9}, {
   3.878107756220397*^9, 3.87810776106087*^9}, 3.878107838740787*^9, {
   3.8781080364435863`*^9, 3.8781080655675163`*^9}, 3.8781094601917057`*^9, {
   3.8781095726128073`*^9, 3.878109599220655*^9}, 3.878109630566448*^9, {
   3.8781097918409157`*^9, 3.878109847741796*^9}, {3.87811061987574*^9, 
   3.8781106231039658`*^9}, {3.878490683843603*^9, 3.8784906861542788`*^9}, 
   3.878490851355443*^9, 3.878490941341604*^9, {3.8784911612271547`*^9, 
   3.878491172773608*^9}, {3.878491209476358*^9, 3.878491211457273*^9}, 
   3.8784926100106277`*^9, 3.878617218677796*^9, 3.878715011801186*^9, 
   3.878805385108643*^9, 3.879148945386157*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"fb897a89-962f-42cc-a7c7-eae155a40bce"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Third degree approximation (polynomial3): \"\>", 
   "\[InvisibleSpace]", "5694.430014424026`"}],
  SequenceForm[
  "Third degree approximation (polynomial3): ", 5694.430014424026],
  Editable->False]], "Print",
 CellChangeTimes->{{3.878107238329743*^9, 3.878107276508223*^9}, 
   3.878107324138131*^9, {3.8781074228993597`*^9, 3.878107454003121*^9}, {
   3.878107756220397*^9, 3.87810776106087*^9}, 3.878107838740787*^9, {
   3.8781080364435863`*^9, 3.8781080655675163`*^9}, 3.8781094601917057`*^9, {
   3.8781095726128073`*^9, 3.878109599220655*^9}, 3.878109630566448*^9, {
   3.8781097918409157`*^9, 3.878109847741796*^9}, {3.87811061987574*^9, 
   3.8781106231039658`*^9}, {3.878490683843603*^9, 3.8784906861542788`*^9}, 
   3.878490851355443*^9, 3.878490941341604*^9, {3.8784911612271547`*^9, 
   3.878491172773608*^9}, {3.878491209476358*^9, 3.878491211457273*^9}, 
   3.8784926100106277`*^9, 3.878617218677796*^9, 3.878715011801186*^9, 
   3.878805385108643*^9, 3.87914894538804*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"ae7e5938-3c18-48af-a979-2c8fb2649a77"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Rectangle approximation (barchart): \"\>", "\[InvisibleSpace]",
    "5640"}],
  SequenceForm["Rectangle approximation (barchart): ", 5640],
  Editable->False]], "Print",
 CellChangeTimes->{{3.878107238329743*^9, 3.878107276508223*^9}, 
   3.878107324138131*^9, {3.8781074228993597`*^9, 3.878107454003121*^9}, {
   3.878107756220397*^9, 3.87810776106087*^9}, 3.878107838740787*^9, {
   3.8781080364435863`*^9, 3.8781080655675163`*^9}, 3.8781094601917057`*^9, {
   3.8781095726128073`*^9, 3.878109599220655*^9}, 3.878109630566448*^9, {
   3.8781097918409157`*^9, 3.878109847741796*^9}, {3.87811061987574*^9, 
   3.8781106231039658`*^9}, {3.878490683843603*^9, 3.8784906861542788`*^9}, 
   3.878490851355443*^9, 3.878490941341604*^9, {3.8784911612271547`*^9, 
   3.878491172773608*^9}, {3.878491209476358*^9, 3.878491211457273*^9}, 
   3.8784926100106277`*^9, 3.878617218677796*^9, 3.878715011801186*^9, 
   3.878805385108643*^9, 3.879148945389278*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"75c72ed6-5422-4573-88e7-166b71a4bdda"]
}, Open  ]]
}, Open  ]],

Cell["\<\
We note that all the approximations are in the same order of magnitude. For \
the sake of simplicity and to avoid overfitting, we choose the linear \
approximation. We add the chosen Integral Score to the dataset.\
\>", "Text",
 CellChangeTimes->{{3.878107677086873*^9, 3.878107708192883*^9}, {
  3.87810802196667*^9, 3.878108027717223*^9}, {3.8781096481332808`*^9, 
  3.8781096662372627`*^9}, {3.8781106655916853`*^9, 
  3.878110686574559*^9}},ExpressionUUID->"1a6fc14d-0418-469d-b9d5-\
9f5a2764ee89"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"intColumn", " ", "=", 
   RowBox[{"ds", "[", 
    RowBox[{"All", ",", 
     RowBox[{
      RowBox[{"<|", 
       RowBox[{"\"\<integralScore\>\"", "->", 
        RowBox[{"Integrate", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Fit", "[", 
           RowBox[{
            RowBox[{"Transpose", "@", 
             RowBox[{"Normal", "@", 
              RowBox[{"{", 
               RowBox[{"x", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "#Risk2020", ",", "#Risk2030", ",", "#Risk2040", ",", 
                  "#Risk2050", ",", "#Risk2060", ",", "#Risk2070", ",", 
                  "#Risk2080", ",", "#Risk2090"}], "}"}]}], "}"}]}]}], ",", 
            " ", 
            RowBox[{"{", 
             RowBox[{"1", ",", "z"}], "}"}], ",", " ", "z"}], "]"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"z", ",", "2020", ",", "2100"}], "}"}]}], "]"}]}], "|>"}], 
      "&"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"newds", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"ds", ",", "intColumn", ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"newds", ",", " ", "5"}], "]"}]}], "Input",
 CellChangeTimes->{{3.878108591025799*^9, 3.878108736379463*^9}, {
   3.878109366113057*^9, 3.878109404653481*^9}, 3.878109680564666*^9, {
   3.878490953016451*^9, 3.8784909537716618`*^9}, {3.8784925335551987`*^9, 
   3.878492533615432*^9}, {3.878492578793417*^9, 3.8784925827181873`*^9}, {
   3.878492846193266*^9, 3.878492848609735*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"2e930372-2ce5-4b8c-89e1-74e90910d3f2"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Company" -> "Saha-Union Public Co.", "ISIN" -> "TH0010010005", 
        "Asset ID" -> 72291, "Latitude" -> 30.13952, "Longitude" -> 120.87252,
         "Risk2020" -> 72, "Risk2030" -> 74, "Risk2040" -> 76, "Risk2050" -> 
        81, "Risk2060" -> 83, "Risk2070" -> 83, "Risk2080" -> 85, "Risk2090" -> 
        87, "elevation" -> 7, "integralScore" -> 6497.142857142873|>, <|
       "Company" -> "China", "ISIN" -> "", "Asset ID" -> 386121, "Latitude" -> 
        30.27773, "Longitude" -> 105.0298, "Risk2020" -> 73, "Risk2030" -> 79,
         "Risk2040" -> 78, "Risk2050" -> 84, "Risk2060" -> 87, "Risk2070" -> 
        91, "Risk2080" -> 91, "Risk2090" -> 92, "elevation" -> 436, 
        "integralScore" -> 6861.904761904771|>, <|
       "Company" -> "SASAC of Shanxi Province", "ISIN" -> "", "Asset ID" -> 
        69657, "Latitude" -> 36.33765, "Longitude" -> 112.8789, "Risk2020" -> 
        74, "Risk2030" -> 76, "Risk2040" -> 78, "Risk2050" -> 73, "Risk2060" -> 
        76, "Risk2070" -> 78, "Risk2080" -> 80, "Risk2090" -> 80, "elevation" -> 
        921, "integralScore" -> 6180.9523809523835`|>, <|
       "Company" -> "China", "ISIN" -> "", "Asset ID" -> 388414, "Latitude" -> 
        26.25494, "Longitude" -> 107.5164, "Risk2020" -> 68, "Risk2030" -> 73,
         "Risk2040" -> 74, "Risk2050" -> 78, "Risk2060" -> 84, "Risk2070" -> 
        88, "Risk2080" -> 88, "Risk2090" -> 90, "elevation" -> 771, 
        "integralScore" -> 6561.904761904771|>, <|
       "Company" -> "China", "ISIN" -> "", "Asset ID" -> 608963, "Latitude" -> 
        28.00951, "Longitude" -> 120.6641, "Risk2020" -> 75, "Risk2030" -> 76,
         "Risk2040" -> 77, "Risk2050" -> 78, "Risk2060" -> 81, "Risk2070" -> 
        83, "Risk2080" -> 83, "Risk2090" -> 85, "elevation" -> 14, 
        "integralScore" -> 6440.000000000004|>}, "AllowEmbedding" -> True, 
     "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "Asset ID"} -> 1, {All, "Latitude"} -> 
        1, {All, "Longitude"} -> 1, {All, "Risk2020"} -> 1, {All, "Risk2030"} -> 
        1, {All, "Risk2040"} -> 1, {All, "Risk2050"} -> 1, {All, "Risk2060"} -> 
        1, {All, "Risk2070"} -> 1, {All, "Risk2080"} -> 1, {All, "Risk2090"} -> 
        1, {All, "elevation"} -> 1, {All, "integralScore"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> TypeSystem`PackageScope`AtomShape[252.], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[126.], "Asset ID" -> 
            TypeSystem`PackageScope`AtomShape[34], "Latitude" -> 
            TypeSystem`PackageScope`AtomShape[60], "Longitude" -> 
            TypeSystem`PackageScope`AtomShape[60], "Risk2020" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2030" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2040" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2050" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2060" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2070" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2080" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2090" -> 
            TypeSystem`PackageScope`AtomShape[34], "elevation" -> 
            TypeSystem`PackageScope`AtomShape[34], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "ISIN", "Asset ID", "Latitude", "Longitude", "Risk2020", 
         "Risk2030", "Risk2040", "Risk2050", "Risk2060", "Risk2070", 
         "Risk2080", "Risk2090", "elevation", "integralScore"}, {
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "China", "Saha-Union Public Co.", "SASAC of Shanxi Province"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["", "TH0010010005"]], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Real]}], 5], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "Asset ID"} -> 1, {All, "Latitude"} -> 
        1, {All, "Longitude"} -> 1, {All, "Risk2020"} -> 1, {All, "Risk2030"} -> 
        1, {All, "Risk2040"} -> 1, {All, "Risk2050"} -> 1, {All, "Risk2060"} -> 
        1, {All, "Risk2070"} -> 1, {All, "Risk2080"} -> 1, {All, "Risk2090"} -> 
        1, {All, "elevation"} -> 1, {All, "integralScore"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> TypeSystem`PackageScope`AtomShape[252.], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[126.], "Asset ID" -> 
            TypeSystem`PackageScope`AtomShape[34], "Latitude" -> 
            TypeSystem`PackageScope`AtomShape[60], "Longitude" -> 
            TypeSystem`PackageScope`AtomShape[60], "Risk2020" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2030" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2040" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2050" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2060" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2070" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2080" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2090" -> 
            TypeSystem`PackageScope`AtomShape[34], "elevation" -> 
            TypeSystem`PackageScope`AtomShape[34], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "ISIN", "Asset ID", "Latitude", "Longitude", "Risk2020", 
         "Risk2030", "Risk2040", "Risk2050", "Risk2060", "Risk2070", 
         "Risk2080", "Risk2090", "elevation", "integralScore"}, {
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "China", "Saha-Union Public Co.", "SASAC of Shanxi Province"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["", "TH0010010005"]], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Real]}], 5], "Path" -> {}, "DisplayedRowCount" -> 5, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 5, "DataColumnCount" -> 
     15, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Company", 
                  Style[
                  "Company", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Company"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Company"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ISIN", 
                  Style[
                  "ISIN", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ISIN"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ISIN"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Asset ID", 
                  Style[
                  "Asset ID", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Asset ID"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Asset ID"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Latitude", 
                  Style[
                  "Latitude", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Latitude"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Latitude"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Longitude", 
                  Style[
                  "Longitude", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Longitude"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Longitude"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2020", 
                  Style[
                  "Risk2020", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2020"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2020"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2030", 
                  Style[
                  "Risk2030", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2030"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2030"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2040", 
                  Style[
                  "Risk2040", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2040"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2040"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2050", 
                  Style[
                  "Risk2050", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2050"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2050"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2060", 
                  Style[
                  "Risk2060", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2060"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2060"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["Saha-Union Public Co.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{252., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["TH0010010005", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["72291"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Asset ID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["30.1395"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["120.873"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["72"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["74"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["76"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["81"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["83"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["China", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{252., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["386121"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Asset ID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["30.2777"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["105.03"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["73"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["79"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["78"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["84"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["87"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["SASAC of Shanxi Province", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{252., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["69657"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Asset ID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["36.3376"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["112.879"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["74"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["76"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["78"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["73"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["76"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["China", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{252., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["388414"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Asset ID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["26.2549"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["107.516"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["68"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["73"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["74"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["78"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["84"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["China", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{252., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["608963"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Asset ID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["28.0095"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["120.664"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["75"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["76"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["77"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["78"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["81"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[True, 15, 1], {1, 15 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[False, 15, 1], {1, 15 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[15, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[15, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 2 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 2, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 5 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 5, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 100000000, {}]], MenuEvaluator -> Automatic]}],
                     " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[False, 15, 1], {1, 15 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[True, 15, 1], {1, 15 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{886., {108.134033203125, 113.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{886., {108.134033203125, 113.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8784928496142683`*^9, 3.878617221117325*^9, 
  3.87871501453109*^9, 3.878805387280489*^9, 3.879148951112846*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"5b018c09-6354-461e-9ad5-09863ba8ede4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computing Average of Integral Score", "Subsection",
 CellChangeTimes->{
  3.878095202888431*^9, {3.878490751754402*^9, 3.878490760860165*^9}, {
   3.8784908151806507`*^9, 3.878490819061284*^9}, {3.878715022061735*^9, 
   3.878715028092407*^9}},ExpressionUUID->"056fde69-d6a3-4d9e-a2ac-\
b269c1f5fc2c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{"avgds", "=", " ", 
     RowBox[{"newds", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"GroupBy", "[", 
         RowBox[{
          RowBox[{"{", "#Company", "}"}], "&"}], "]"}], "/*", "Values"}], ",", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<Company\>\"", "->", 
          RowBox[{"Query", "[", 
           RowBox[{"First", ",", "\"\<Company\>\""}], "]"}]}], ",", 
         RowBox[{"\"\<ISIN\>\"", "->", 
          RowBox[{"Query", "[", 
           RowBox[{"First", ",", "\"\<ISIN\>\""}], "]"}]}], ",", 
         RowBox[{"\"\<integralScore\>\"", "->", 
          RowBox[{"Query", "[", 
           RowBox[{"Mean", ",", "\"\<integralScore\>\""}], "]"}]}]}], 
        "|>"}]}], "]"}]}], " ", ";"}], 
   RowBox[{"(*", 
    RowBox[{
    "Grouped", " ", "and", " ", "computed", " ", "operations", " ", "on", " ",
      "some", " ", "columns"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"avgds", ",", " ", "5"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8784908252724667`*^9, 3.878490859549131*^9}, {
  3.878490919998516*^9, 3.878490962787115*^9}, {3.8784925322187567`*^9, 
  3.8784926038952293`*^9}, {3.878492921017454*^9, 3.878492940468293*^9}, {
  3.878492972636957*^9, 3.878492985774609*^9}, {3.87849308816151*^9, 
  3.878493092286625*^9}, {3.878493399368621*^9, 3.878493401413369*^9}, {
  3.878619908928514*^9, 3.878619996059414*^9}, {3.8786200326366796`*^9, 
  3.878620054537904*^9}, {3.879154728021397*^9, 3.879154753671281*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"750190a8-3600-4615-bbeb-0c8e1dcd2654"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Company" -> "En+ Grp Intl public joint-stoc", "ISIN" -> 
        "US29355E2081", "integralScore" -> 6183.809523809523|>, <|
       "Company" -> "Guangzhou R&F Properties Co.", "ISIN" -> "CNE100000569", 
        "integralScore" -> 5998.095238095249|>, <|
       "Company" -> "Korea Investment Hldgs Co. Ltd", "ISIN" -> 
        "KR7071050009", "integralScore" -> 5823.80952380953|>, <|
       "Company" -> "Corteva Inc.", "ISIN" -> "US22052L1044", "integralScore" -> 
        6197.14285714287|>, <|
       "Company" -> "Yanlord Land Group Limited", "ISIN" -> "SG1T57930854", 
        "integralScore" -> 5591.428571428575|>}, "AllowEmbedding" -> True, 
     "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "integralScore"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> 
            TypeSystem`PackageScope`AtomShape[336.00000000000006`], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 3, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Company", "ISIN", "integralScore"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real]}], 5], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "integralScore"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> 
            TypeSystem`PackageScope`AtomShape[336.00000000000006`], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 3, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Company", "ISIN", "integralScore"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real]}], 5], "Path" -> {}, "DisplayedRowCount" -> 5, 
     "DisplayedColumnCount" -> 3, "DataRowCount" -> 5, "DataColumnCount" -> 3,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Company", 
                  Style[
                  "Company", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Company"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Company"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ISIN", 
                  Style[
                  "ISIN", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ISIN"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ISIN"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["integralScore", 
                  Style[
                  "integralScore", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "integralScore"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "integralScore"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["En+ Grp Intl public joint-stoc", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["US29355E2081", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6183.81"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Guangzhou R&F Properties Co.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["CNE100000569", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5998.1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Korea Investment Hldgs Co. Ltd", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["KR7071050009", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5823.81"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Corteva Inc.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["US22052L1044", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6197.14"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Yanlord Land Group Limited", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["SG1T57930854", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5591.43"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{577., {87.634033203125, 93.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{577., {87.634033203125, 93.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.878492604113213*^9, 3.878492615513929*^9}, 
   3.878492925618964*^9, 3.8784929782031727`*^9, {3.878493099243601*^9, 
   3.8784931045623503`*^9}, 3.8784934031612453`*^9, 3.8786172233522177`*^9, {
   3.878620048849023*^9, 3.878620055252098*^9}, 3.878715029289898*^9, 
   3.878805388889771*^9, 3.8791489526821136`*^9, 3.879155113490831*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"605e6967-8cf3-408f-a1f3-aeb7069b5223"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Merge the two datasets", "Subsection",
 CellChangeTimes->{
  3.878095202888431*^9, {3.878490751754402*^9, 3.878490760860165*^9}, {
   3.8784908151806507`*^9, 3.878490819061284*^9}, {3.8784927152585287`*^9, 
   3.878492724398346*^9}},ExpressionUUID->"c2596125-a273-4404-a475-\
df67a84893ae"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"merged", " ", "=", " ", 
    RowBox[{"JoinAcross", "[", 
     RowBox[{"avgds", ",", "comp", ",", 
      RowBox[{"Key", "[", "\"\<ISIN\>\"", "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "Merged", " ", "two", " ", "datasets", " ", "and", " ", "dropped", " ", 
    "rows", " ", "without", " ", "ISIN", " ", "value"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"merged", ",", "5"}], "]"}]}], "Input",
 CellChangeTimes->{{3.8784908252724667`*^9, 3.878490859549131*^9}, {
  3.878490919998516*^9, 3.878490962787115*^9}, {3.8784925322187567`*^9, 
  3.8784926038952293`*^9}, {3.8784927320593*^9, 3.878492824701557*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"71b43137-8fd0-4fca-a3e2-e31cd7015633"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Company" -> "China Untd Ntwrk Comms Ltd", "ISIN" -> "CNE000001CS2", 
        "integralScore" -> 5968.57142857143, "Elevation" -> 
        28.333333333333332`, "TCUID" -> 124519, "GICS Sector Name" -> 
        "Communication Services", "Carbon-Scope 1  (tonnes CO2e)" -> 200000., 
        "Carbon-Scope 2  (tonnes CO2e)" -> 1.403*^7, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 2.204122441*^6, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 4.543, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 318.682, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 50.065, 
        "Carbon Disclosure" -> 
        "Value derived from data provided in Environmental/CSR", 
        "Revenue (USD mn)" -> 44025.1468742385|>, <|
       "Company" -> "Xinjiang Tianye Co.", "ISIN" -> "CNE000000R10", 
        "integralScore" -> 6240.952380952377, "Elevation" -> 482., "TCUID" -> 
        239630, "GICS Sector Name" -> "Materials", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 1.01800149*^6, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 571198.598, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 370308.308, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 781.278, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 438.373, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 284.198, 
        "Carbon Disclosure" -> "Estimated data", "Revenue (USD mn)" -> 
        1302.9955998697|>, <|
       "Company" -> "Weimob Inc.", "ISIN" -> "KYG9T20A1060", "integralScore" -> 
        6206.666666666675, "Elevation" -> 2., "TCUID" -> 238838, 
        "GICS Sector Name" -> "Information Technology", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 2038.864, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 2313.691, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 10048.32, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 7.147, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 8.11, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 35.223, 
        "Carbon Disclosure" -> "Estimated data", "Revenue (USD mn)" -> 
        285.274794393021|>, <|
       "Company" -> "Bank of Comms Co. Ltd.", "ISIN" -> "CNE100000205", 
        "integralScore" -> 5957.753818508539, "Elevation" -> 
        144.24528301886792`, "TCUID" -> 51827, "GICS Sector Name" -> 
        "Financials", "Carbon-Scope 1  (tonnes CO2e)" -> 18787.926, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 101742.864, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 607326.219, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 0.702, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 3.802, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 22.698, 
        "Carbon Disclosure" -> 
        "Estimate based on partial data disclosure in Environmental/CSR", 
        "Revenue (USD mn)" -> 26757.35508364572|>, <|
       "Company" -> "SOHO China Ltd.", "ISIN" -> "KYG826001003", 
        "integralScore" -> 6737.142857142859, "Elevation" -> 5., "TCUID" -> 
        54635, "GICS Sector Name" -> "Real Estate", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 3239.13, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 195251.62, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 57991.845, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 10.2, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 614.847, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 182.616, 
        "Carbon Disclosure" -> 
        "Value derived from data provided in Annual Report/Financial Accounts \
Disclosure", "Revenue (USD mn)" -> 317.56109043705|>}, "AllowEmbedding" -> 
     True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "integralScore"} -> 
        1, {All, "Elevation"} -> 1, {All, "TCUID"} -> 
        1, {All, "GICS Sector Name"} -> 
        1, {All, "Carbon-Scope 1  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 2  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 3 (tonnes CO2e)"} -> 
        1, {All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Disclosure"} -> 1, {All, "Revenue (USD mn)"} -> 1|>, 
       
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> 
            TypeSystem`PackageScope`AtomShape[291.20000000000005`], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60], "Elevation" -> 
            TypeSystem`PackageScope`AtomShape[60], "TCUID" -> 
            TypeSystem`PackageScope`AtomShape[34], "GICS Sector Name" -> 
            TypeSystem`PackageScope`AtomShape[246.40000000000003`], 
            "Carbon-Scope 1  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 2  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 3 (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "Carbon Disclosure" -> 
            TypeSystem`PackageScope`AtomShape[560.], "Revenue (USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "ISIN", "integralScore", "Elevation", "TCUID", 
         "GICS Sector Name", "Carbon-Scope 1  (tonnes CO2e)", 
         "Carbon-Scope 2  (tonnes CO2e)", "Carbon-Scope 3 (tonnes CO2e)", 
         "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", "Carbon Disclosure",
          "Revenue (USD mn)"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real]}], 5], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "integralScore"} -> 
        1, {All, "Elevation"} -> 1, {All, "TCUID"} -> 
        1, {All, "GICS Sector Name"} -> 
        1, {All, "Carbon-Scope 1  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 2  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 3 (tonnes CO2e)"} -> 
        1, {All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Disclosure"} -> 1, {All, "Revenue (USD mn)"} -> 1|>, 
       
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> 
            TypeSystem`PackageScope`AtomShape[291.20000000000005`], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60], "Elevation" -> 
            TypeSystem`PackageScope`AtomShape[60], "TCUID" -> 
            TypeSystem`PackageScope`AtomShape[34], "GICS Sector Name" -> 
            TypeSystem`PackageScope`AtomShape[246.40000000000003`], 
            "Carbon-Scope 1  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 2  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 3 (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "Carbon Disclosure" -> 
            TypeSystem`PackageScope`AtomShape[560.], "Revenue (USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "ISIN", "integralScore", "Elevation", "TCUID", 
         "GICS Sector Name", "Carbon-Scope 1  (tonnes CO2e)", 
         "Carbon-Scope 2  (tonnes CO2e)", "Carbon-Scope 3 (tonnes CO2e)", 
         "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", "Carbon Disclosure",
          "Revenue (USD mn)"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real]}], 5], "Path" -> {}, "DisplayedRowCount" -> 5, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 5, "DataColumnCount" -> 
     14, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Company", 
                  Style[
                  "Company", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Company"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Company"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ISIN", 
                  Style[
                  "ISIN", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ISIN"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ISIN"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["integralScore", 
                  Style[
                  "integralScore", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "integralScore"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "integralScore"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Elevation", 
                  Style[
                  "Elevation", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Elevation"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Elevation"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["TCUID", 
                  Style[
                  "TCUID", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "TCUID"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "TCUID"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["GICS Sector Name", 
                  Style[
                  "GICS Sector Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "GICS Sector Name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "GICS Sector Name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 1  (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 1  (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 1  (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 1  (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 2  (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 2  (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 2  (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 2  (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 3 (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 3 (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 3 (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 3 (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                  Style[
                  "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["China Untd Ntwrk Comms Ltd", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["CNE000001CS2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5968.57"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["28.3333"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Elevation"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["124519"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Communication Services", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["200000."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["14030000."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2204122."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4.543"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Xinjiang Tianye Co.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["CNE000000R10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6240.95"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["482.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Elevation"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["239630"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Materials", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1018001."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["571199."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["370308."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["781.278"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Weimob Inc.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["KYG9T20A1060", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6206.67"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Elevation"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["238838"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Information Technology", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2038.86"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2313.69"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["10048.3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["7.147"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Bank of Comms Co. Ltd.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["CNE100000205", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5957.75"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["144.245"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Elevation"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["51827"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Financials", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["18787.9"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["101743."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["607326."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.702"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["SOHO China Ltd.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["KYG826001003", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6737.14"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Elevation"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["54635"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Real Estate", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3239.13"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["195252."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["57991.8"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["10.2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[True, 14, 1], {1, 14 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[False, 14, 1], {1, 14 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[14, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[14, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 2 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 2, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 5 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 5, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 100000000, {}]], MenuEvaluator -> Automatic]}],
                     " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[False, 14, 1], {1, 14 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[True, 14, 1], {1, 14 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{1306., {108.134033203125, 113.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{1306., {108.134033203125, 113.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.878492604113213*^9, 3.878492615513929*^9}, 
   3.8784927477738037`*^9, {3.878492795346176*^9, 3.878492824983602*^9}, {
   3.878492900694974*^9, 3.878492935514345*^9}, 3.878493415460045*^9, 
   3.878495273252953*^9, 3.8786200576404467`*^9, 3.878715031327244*^9, 
   3.878805390742227*^9, 3.879148953914688*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"7401c444-e85b-4d94-9a9c-d6be2a62b23e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create Ratings", "Subsection",
 CellChangeTimes->{
  3.878095202888431*^9, {3.878490751754402*^9, 3.878490760860165*^9}, {
   3.8784908151806507`*^9, 3.878490819061284*^9}, {3.8784927152585287`*^9, 
   3.878492724398346*^9}, {3.878493542826058*^9, 
   3.878493549686611*^9}},ExpressionUUID->"13e1a9e6-dd50-4c06-9ec7-\
817728819780"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MinMaxScaler", "[", "value_", "]"}], ":=", 
   RowBox[{"Rescale", "[", 
    RowBox[{"value", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Min", "[", 
        RowBox[{"merged", "[", 
         RowBox[{"All", ",", " ", "\"\<integralScore\>\""}], "]"}], "]"}], 
       ",", 
       RowBox[{"Max", "[", 
        RowBox[{"merged", "[", 
         RowBox[{"All", ",", " ", "\"\<integralScore\>\""}], "]"}], "]"}]}], 
      "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MinMaxScaledList", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"MinMaxScaler", ",", " ", 
     RowBox[{"merged", "[", 
      RowBox[{"All", ",", " ", "\"\<integralScore\>\""}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"RatingCreator", "[", "value_", "]"}], ":=", " ", 
    "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"Between", "[", 
       RowBox[{"value", ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0.2"}], "}"}]}], "]"}], ",", " ", "\"\<A\>\"", 
      ",", " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Between", "[", 
         RowBox[{"value", ",", 
          RowBox[{"{", 
           RowBox[{"0.2", ",", "0.4"}], "}"}]}], "]"}], ",", " ", "\"\<B\>\"",
         ",", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Between", "[", 
           RowBox[{"value", ",", 
            RowBox[{"{", 
             RowBox[{"0.4", ",", "0.6"}], "}"}]}], "]"}], ",", " ", 
          "\"\<C\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Between", "[", 
             RowBox[{"value", ",", 
              RowBox[{"{", 
               RowBox[{"0.6", ",", "0.8"}], "}"}]}], "]"}], ",", " ", 
            "\"\<D\>\"", ",", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Between", "[", 
               RowBox[{"value", ",", 
                RowBox[{"{", 
                 RowBox[{"0.8", ",", "1"}], "}"}]}], "]"}], ",", " ", 
              "\"\<E\>\"", ","}], "   ", "\[IndentingNewLine]", "]"}]}], 
           "]"}]}], "]"}]}], "]"}]}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Convert", " ", "a", " ", "numerical", " ", "variable", " ", "into", " ", 
    "a", " ", "category"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RatingsList", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"RatingCreator", ",", " ", "MinMaxScaledList"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"IntScaledDat", "=", 
    RowBox[{"Dataset", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"<|", 
        RowBox[{"\"\<IntScaled\>\"", "->", "#"}], "|>"}], "&"}], "/@", 
      RowBox[{"Normal", "[", "MinMaxScaledList", "]"}]}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Convert", " ", "the", " ", "list", " ", "into", " ", "a", " ", 
    "dataset"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RatingsDat", "=", 
    RowBox[{"Dataset", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"<|", 
        RowBox[{"\"\<Ratings\>\"", "->", "#"}], "|>"}], "&"}], "/@", 
      RowBox[{"Normal", "[", "RatingsList", "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "Convert", " ", "the", " ", "list", " ", "into", " ", "a", " ", 
    "dataset"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"finalds", " ", "=", " ", 
    RowBox[{"Join", "[", 
     RowBox[{"merged", ",", "IntScaledDat", ",", "2"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Add", " ", "Scaled", " ", "Integral", " ", "column", " ", "to", " ", 
    "the", " ", "dataset"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"finalds", " ", "=", " ", 
    RowBox[{"Join", "[", 
     RowBox[{"finalds", ",", "RatingsDat", ",", "2"}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "Add", " ", "Rating", " ", "column", " ", "to", " ", "the", " ", 
    "dataset"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"finalds", ",", " ", "5"}], "]"}]}], "Input",
 CellChangeTimes->{{3.8784908252724667`*^9, 3.878490859549131*^9}, {
   3.878490919998516*^9, 3.878490962787115*^9}, {3.8784925322187567`*^9, 
   3.8784926038952293`*^9}, {3.8784927320593*^9, 3.878492824701557*^9}, {
   3.878493559212455*^9, 3.8784935891839933`*^9}, {3.8784936472366467`*^9, 
   3.8784936492084208`*^9}, {3.878493698086041*^9, 3.878493699127733*^9}, {
   3.8784938213563004`*^9, 3.878493898608631*^9}, {3.8784939465591927`*^9, 
   3.878493963332162*^9}, {3.878494335528428*^9, 3.878494372239007*^9}, {
   3.878494649208815*^9, 3.878494840715115*^9}, 3.878494880956595*^9, {
   3.878494921764689*^9, 3.878494941321616*^9}, {3.878495002471055*^9, 
   3.878495005993518*^9}, {3.878495546235155*^9, 3.878495626059207*^9}, {
   3.878495676259441*^9, 3.87849578178084*^9}, {3.878495849965911*^9, 
   3.8784960294861317`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"aca8cf41-acc7-4aa4-b9d0-698571a4bee2"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Company" -> "Beijing Easpring Material Tech", "ISIN" -> 
        "CNE100000NN1", "integralScore" -> 6183.809523809523, "Elevation" -> 
        50., "TCUID" -> 188452, "GICS Sector Name" -> "Materials", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 182604.649, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 98996.615, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 119435.828, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 395.889, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 214.626, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 258.938, 
        "Carbon Disclosure" -> "Estimated data", "Revenue (USD mn)" -> 
        461.252299953875, "IntScaled" -> 0.5954907161803691, "Ratings" -> 
        "C"|>, <|"Company" -> "GDS Holdings Ltd.", "ISIN" -> "US36165L1089", 
        "integralScore" -> 6230.000000000005, "Elevation" -> 9.5, "TCUID" -> 
        233321, "GICS Sector Name" -> "Information Technology", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 3063.218, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 6805.07, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 39424.814, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 3.684, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 8.184, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 47.411, 
        "Carbon Disclosure" -> "Estimated data", "Revenue (USD mn)" -> 
        831.55835428598, "IntScaled" -> 0.6276525198939007, "Ratings" -> 
        "D"|>, <|"Company" -> "Harbin Bank Co. Ltd.", "ISIN" -> 
        "CNE100001SB3", "integralScore" -> 5742.142857142863, "Elevation" -> 
        171.25, "TCUID" -> 228400, "GICS Sector Name" -> "Financials", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 474.933, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 3403.314, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 22818.826, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 0.52, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 3.725, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 24.978, 
        "Carbon Disclosure" -> 
        "Value derived from fuel use provided in Environmental/CSR", 
        "Revenue (USD mn)" -> 913.555868032001, "IntScaled" -> 
        0.2879641909814348, "Ratings" -> "B"|>, <|
       "Company" -> "VNET Group", "ISIN" -> "US90138A1034", "integralScore" -> 
        5850.4761904761945`, "Elevation" -> 9., "TCUID" -> 213900, 
        "GICS Sector Name" -> "Information Technology", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 303., 
        "Carbon-Scope 2  (tonnes CO2e)" -> 389940., 
        "Carbon-Scope 3 (tonnes CO2e)" -> 33194.693, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 0.433, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 557.289, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 47.441, 
        "Carbon Disclosure" -> 
        "Value derived from data provided in Environmental/CSR", 
        "Revenue (USD mn)" -> 699.709078929148, "IntScaled" -> 
        0.3633952254641919, "Ratings" -> "B"|>, <|
       "Company" -> "Sunyard Technology Co.Ltd", "ISIN" -> "CNE000001CZ7", 
        "integralScore" -> 5846.6666666666715`, "Elevation" -> 10., "TCUID" -> 
        230035, "GICS Sector Name" -> "Information Technology", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 970.194, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 1189.632, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 9845.714, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 5.288, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 6.484, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 53.664, 
        "Carbon Disclosure" -> "Estimated data", "Revenue (USD mn)" -> 
        183.469994456687, "IntScaled" -> 0.36074270557029386`, "Ratings" -> 
        "B"|>}, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "integralScore"} -> 
        1, {All, "Elevation"} -> 1, {All, "TCUID"} -> 
        1, {All, "GICS Sector Name"} -> 
        1, {All, "Carbon-Scope 1  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 2  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 3 (tonnes CO2e)"} -> 
        1, {All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Disclosure"} -> 1, {All, "Revenue (USD mn)"} -> 
        1, {All, "IntScaled"} -> 1, {All, "Ratings"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> 
            TypeSystem`PackageScope`AtomShape[336.00000000000006`], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60], "Elevation" -> 
            TypeSystem`PackageScope`AtomShape[60], "TCUID" -> 
            TypeSystem`PackageScope`AtomShape[34], "GICS Sector Name" -> 
            TypeSystem`PackageScope`AtomShape[231.], 
            "Carbon-Scope 1  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 2  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 3 (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "Carbon Disclosure" -> 
            TypeSystem`PackageScope`AtomShape[598.5], "Revenue (USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "IntScaled" -> 
            TypeSystem`PackageScope`AtomShape[60], "Ratings" -> 
            TypeSystem`PackageScope`AtomShape[31.5]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "ISIN", "integralScore", "Elevation", "TCUID", 
         "GICS Sector Name", "Carbon-Scope 1  (tonnes CO2e)", 
         "Carbon-Scope 2  (tonnes CO2e)", "Carbon-Scope 3 (tonnes CO2e)", 
         "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", "Carbon Disclosure",
          "Revenue (USD mn)", "IntScaled", "Ratings"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Financials", "Information Technology", "Materials"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Estimated data", 
           "Value derived from data provided in Environmental/CSR", 
           "Value derived from fuel use provided in Environmental/CSR"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["B", "C", "D"]]}], 5], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "integralScore"} -> 
        1, {All, "Elevation"} -> 1, {All, "TCUID"} -> 
        1, {All, "GICS Sector Name"} -> 
        1, {All, "Carbon-Scope 1  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 2  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 3 (tonnes CO2e)"} -> 
        1, {All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Disclosure"} -> 1, {All, "Revenue (USD mn)"} -> 
        1, {All, "IntScaled"} -> 1, {All, "Ratings"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> 
            TypeSystem`PackageScope`AtomShape[336.00000000000006`], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60], "Elevation" -> 
            TypeSystem`PackageScope`AtomShape[60], "TCUID" -> 
            TypeSystem`PackageScope`AtomShape[34], "GICS Sector Name" -> 
            TypeSystem`PackageScope`AtomShape[231.], 
            "Carbon-Scope 1  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 2  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 3 (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "Carbon Disclosure" -> 
            TypeSystem`PackageScope`AtomShape[598.5], "Revenue (USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "IntScaled" -> 
            TypeSystem`PackageScope`AtomShape[60], "Ratings" -> 
            TypeSystem`PackageScope`AtomShape[31.5]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "ISIN", "integralScore", "Elevation", "TCUID", 
         "GICS Sector Name", "Carbon-Scope 1  (tonnes CO2e)", 
         "Carbon-Scope 2  (tonnes CO2e)", "Carbon-Scope 3 (tonnes CO2e)", 
         "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", "Carbon Disclosure",
          "Revenue (USD mn)", "IntScaled", "Ratings"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Financials", "Information Technology", "Materials"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Estimated data", 
           "Value derived from data provided in Environmental/CSR", 
           "Value derived from fuel use provided in Environmental/CSR"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["B", "C", "D"]]}], 5], "Path" -> {}, 
     "DisplayedRowCount" -> 5, "DisplayedColumnCount" -> 10, "DataRowCount" -> 
     5, "DataColumnCount" -> 16, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Company", 
                  Style[
                  "Company", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Company"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Company"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ISIN", 
                  Style[
                  "ISIN", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ISIN"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ISIN"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["integralScore", 
                  Style[
                  "integralScore", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "integralScore"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "integralScore"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Elevation", 
                  Style[
                  "Elevation", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Elevation"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Elevation"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["TCUID", 
                  Style[
                  "TCUID", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "TCUID"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "TCUID"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["GICS Sector Name", 
                  Style[
                  "GICS Sector Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "GICS Sector Name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "GICS Sector Name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 1  (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 1  (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 1  (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 1  (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 2  (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 2  (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 2  (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 2  (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 3 (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 3 (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 3 (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 3 (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                  Style[
                  "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["Beijing Easpring Material Tech", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["CNE100000NN1", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6183.81"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["50.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Elevation"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["188452"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Materials", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{231., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["182605."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["98996.6"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["119436."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["395.889"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["GDS Holdings Ltd.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["US36165L1089", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6230.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["9.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Elevation"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["233321"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Information Technology", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{231., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3063.22"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6805.07"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["39424.8"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3.684"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Harbin Bank Co. Ltd.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["CNE100001SB3", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5742.14"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["171.25"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Elevation"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["228400"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Financials", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{231., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["474.933"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3403.31"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["22818.8"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.52"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["VNET Group", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["US90138A1034", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5850.48"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["9.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Elevation"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["213900"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Information Technology", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{231., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["303.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["389940."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["33194.7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.433"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Sunyard Technology Co.Ltd", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["CNE000001CZ7", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5846.67"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["10.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Elevation"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["230035"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Information Technology", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{231., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["970.194"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1189.63"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["9845.71"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5.288"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[True, 16, 1], {1, 16 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[False, 16, 1], {1, 16 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[16, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[16, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 2 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 2, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 5 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 5, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 100000000, {}]], MenuEvaluator -> Automatic]}],
                     " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[False, 16, 1], {1, 16 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[True, 16, 1], {1, 16 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{1307., {108.134033203125, 113.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{1307., {108.134033203125, 113.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.878496029715033*^9, 3.87861722563971*^9, 
  3.878620059554048*^9, 3.878715034646832*^9, 3.87871584130048*^9, 
  3.878715883845355*^9, 3.87871626622314*^9, 3.878805392352337*^9, 
  3.879148955639336*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"0c0fd10b-1622-4030-94a5-c13aaeabc8e6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Add to the dataset the Total Carbon Intensity", "Subsection",
 CellChangeTimes->{
  3.878095202888431*^9, {3.878490751754402*^9, 3.878490760860165*^9}, {
   3.8784908151806507`*^9, 3.878490819061284*^9}, {3.8784927152585287`*^9, 
   3.878492724398346*^9}, {3.8787162065270653`*^9, 
   3.87871624908082*^9}},ExpressionUUID->"2841fd97-a03b-47f0-825e-\
747d3de9d265"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"CI1L", " ", "=", " ", 
   RowBox[{"Normal", "[", 
    RowBox[{"finalds", "[", 
     RowBox[{
     "All", ",", " ", 
      "\"\<Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\>\""}], "]"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"CI2L", " ", "=", " ", 
   RowBox[{"Normal", "[", 
    RowBox[{"finalds", "[", 
     RowBox[{
     "All", ",", "  ", 
      "\"\<Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\>\""}], "]"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"CI3L", " ", "=", " ", 
   RowBox[{"Normal", "[", 
    RowBox[{"finalds", "[", 
     RowBox[{
     "All", ",", "  ", 
      "\"\<Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\>\""}], "]"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"CItotDat", "=", 
    RowBox[{"Dataset", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"<|", 
        RowBox[{
        "\"\<Carbon Intensity Total (tonnes CO2e/USD mn)\>\"", "->", "#"}], 
        "|>"}], "&"}], "/@", 
      RowBox[{"Normal", "[", 
       RowBox[{"Total", "[", 
        RowBox[{"{", 
         RowBox[{"CI1L", ",", " ", "CI2L", ",", " ", "CI3L"}], "}"}], "]"}], 
       "]"}]}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Convert", " ", "the", " ", "list", " ", "into", " ", "a", " ", 
    "dataset"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"finalds", " ", "=", " ", 
    RowBox[{"Join", "[", 
     RowBox[{"finalds", ",", "CItotDat", ",", "2"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Add", " ", "Carbon", " ", "Intensity"}], "-", 
    RowBox[{
    "Scope", " ", "Total", " ", "column", " ", "to", " ", "the", " ", 
     "dataset"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"finalds", ",", "5"}], "]"}]}], "Input",
 CellChangeTimes->{{3.8784908252724667`*^9, 3.878490859549131*^9}, {
  3.878490919998516*^9, 3.878490962787115*^9}, {3.8784925322187567`*^9, 
  3.8784926038952293`*^9}, {3.8784927320593*^9, 3.878492824701557*^9}, {
  3.8787162247281437`*^9, 3.878716252711678*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"89c65a73-b4ee-4482-9bc9-332b9a5ea9b8"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Company" -> "China VAST Industrial Urban", "ISIN" -> "KYG216301013", 
        "integralScore" -> 5820.952380952374, "Elevation" -> 15., "TCUID" -> 
        232900, "GICS Sector Name" -> "Real Estate", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 7483.297, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 4231.769, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 62713.45, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 21.531, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 12.176, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 180.443, 
        "Carbon Disclosure" -> 
        "Estimate used instead of disclosure - data does not cover global \
operations", "Revenue (USD mn)" -> 347.553385221974, "IntScaled" -> 
        0.3428381962864657, "Ratings" -> "B", 
        "Carbon Intensity Total (tonnes CO2e/USD mn)" -> 214.15|>, <|
       "Company" -> "Bank of Suzhou Co. Ltd.", "ISIN" -> "CNE100003LQ2", 
        "integralScore" -> 6728.333333333339, "Elevation" -> 4., "TCUID" -> 
        245145, "GICS Sector Name" -> "Financials", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 548.192, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 3511.39, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 23311.593, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 0.588, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 3.769, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 25.02, 
        "Carbon Disclosure" -> "Estimated data", "Revenue (USD mn)" -> 
        931.700548204765, "IntScaled" -> 0.974635278514592, "Ratings" -> "E", 
        "Carbon Intensity Total (tonnes CO2e/USD mn)" -> 29.377|>, <|
       "Company" -> "Pacfc Shuanglin Bio-pharmacy C", "ISIN" -> 
        "CNE000000F14", "integralScore" -> 6343.809523809525, "Elevation" -> 
        790., "TCUID" -> 247600, "GICS Sector Name" -> "Health Care", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 2989.73, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 3402.227, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 11421.121, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 19.652, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 22.364, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 75.073, 
        "Carbon Disclosure" -> "Estimated data", "Revenue (USD mn)" -> 
        152.132551947102, "IntScaled" -> 0.706896551724137, "Ratings" -> "D", 
        "Carbon Intensity Total (tonnes CO2e/USD mn)" -> 117.089|>, <|
       "Company" -> "KWG Group Holdings Ltd.", "ISIN" -> "KYG532241042", 
        "integralScore" -> 6360., "Elevation" -> 28.6, "TCUID" -> 52855, 
        "GICS Sector Name" -> "Real Estate", "Carbon-Scope 1  (tonnes CO2e)" -> 
        96258.377, "Carbon-Scope 2  (tonnes CO2e)" -> 62388.944, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 707260.636, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 22.336, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 14.477, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 164.116, 
        "Carbon Disclosure" -> 
        "Estimate used instead of disclosure - data does not cover global \
operations", "Revenue (USD mn)" -> 4309.52806361342, "IntScaled" -> 
        0.7181697612732085, "Ratings" -> "D", 
        "Carbon Intensity Total (tonnes CO2e/USD mn)" -> 
        200.92900000000003`|>, <|
       "Company" -> "Bank of Comms Co. Ltd.", "ISIN" -> "CNE100000205", 
        "integralScore" -> 5957.753818508539, "Elevation" -> 
        144.24528301886792`, "TCUID" -> 51827, "GICS Sector Name" -> 
        "Financials", "Carbon-Scope 1  (tonnes CO2e)" -> 18787.926, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 101742.864, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 607326.219, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 0.702, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 3.802, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 22.698, 
        "Carbon Disclosure" -> 
        "Estimate based on partial data disclosure in Environmental/CSR", 
        "Revenue (USD mn)" -> 26757.35508364572, "IntScaled" -> 
        0.43809118662729674`, "Ratings" -> "C", 
        "Carbon Intensity Total (tonnes CO2e/USD mn)" -> 
        27.201999999999998`|>}, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "integralScore"} -> 
        1, {All, "Elevation"} -> 1, {All, "TCUID"} -> 
        1, {All, "GICS Sector Name"} -> 
        1, {All, "Carbon-Scope 1  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 2  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 3 (tonnes CO2e)"} -> 
        1, {All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Disclosure"} -> 1, {All, "Revenue (USD mn)"} -> 
        1, {All, "IntScaled"} -> 1, {All, "Ratings"} -> 
        1, {All, "Carbon Intensity Total (tonnes CO2e/USD mn)"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> 
            TypeSystem`PackageScope`AtomShape[336.00000000000006`], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60], "Elevation" -> 
            TypeSystem`PackageScope`AtomShape[60], "TCUID" -> 
            TypeSystem`PackageScope`AtomShape[34], "GICS Sector Name" -> 
            TypeSystem`PackageScope`AtomShape[115.5], 
            "Carbon-Scope 1  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 2  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 3 (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "Carbon Disclosure" -> 
            TypeSystem`PackageScope`AtomShape[787.5], "Revenue (USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "IntScaled" -> 
            TypeSystem`PackageScope`AtomShape[60], "Ratings" -> 
            TypeSystem`PackageScope`AtomShape[33.6], 
            "Carbon Intensity Total (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "ISIN", "integralScore", "Elevation", "TCUID", 
         "GICS Sector Name", "Carbon-Scope 1  (tonnes CO2e)", 
         "Carbon-Scope 2  (tonnes CO2e)", "Carbon-Scope 3 (tonnes CO2e)", 
         "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", "Carbon Disclosure",
          "Revenue (USD mn)", "IntScaled", "Ratings", 
         "Carbon Intensity Total (tonnes CO2e/USD mn)"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Financials", "Health Care", "Real Estate"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Estimate based on partial data disclosure in Environmental/CSR", 
           "Estimated data", 
           "Estimate used instead of disclosure - data does not cover global \
operations"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real]}], 5], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "integralScore"} -> 
        1, {All, "Elevation"} -> 1, {All, "TCUID"} -> 
        1, {All, "GICS Sector Name"} -> 
        1, {All, "Carbon-Scope 1  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 2  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 3 (tonnes CO2e)"} -> 
        1, {All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Disclosure"} -> 1, {All, "Revenue (USD mn)"} -> 
        1, {All, "IntScaled"} -> 1, {All, "Ratings"} -> 
        1, {All, "Carbon Intensity Total (tonnes CO2e/USD mn)"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> 
            TypeSystem`PackageScope`AtomShape[336.00000000000006`], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60], "Elevation" -> 
            TypeSystem`PackageScope`AtomShape[60], "TCUID" -> 
            TypeSystem`PackageScope`AtomShape[34], "GICS Sector Name" -> 
            TypeSystem`PackageScope`AtomShape[115.5], 
            "Carbon-Scope 1  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 2  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 3 (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "Carbon Disclosure" -> 
            TypeSystem`PackageScope`AtomShape[787.5], "Revenue (USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "IntScaled" -> 
            TypeSystem`PackageScope`AtomShape[60], "Ratings" -> 
            TypeSystem`PackageScope`AtomShape[33.6], 
            "Carbon Intensity Total (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "ISIN", "integralScore", "Elevation", "TCUID", 
         "GICS Sector Name", "Carbon-Scope 1  (tonnes CO2e)", 
         "Carbon-Scope 2  (tonnes CO2e)", "Carbon-Scope 3 (tonnes CO2e)", 
         "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", "Carbon Disclosure",
          "Revenue (USD mn)", "IntScaled", "Ratings", 
         "Carbon Intensity Total (tonnes CO2e/USD mn)"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Financials", "Health Care", "Real Estate"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Estimate based on partial data disclosure in Environmental/CSR", 
           "Estimated data", 
           "Estimate used instead of disclosure - data does not cover global \
operations"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real]}], 5], "Path" -> {}, "DisplayedRowCount" -> 5, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 5, "DataColumnCount" -> 
     17, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Company", 
                  Style[
                  "Company", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Company"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Company"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ISIN", 
                  Style[
                  "ISIN", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ISIN"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ISIN"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["integralScore", 
                  Style[
                  "integralScore", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "integralScore"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "integralScore"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Elevation", 
                  Style[
                  "Elevation", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Elevation"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Elevation"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["TCUID", 
                  Style[
                  "TCUID", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "TCUID"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "TCUID"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["GICS Sector Name", 
                  Style[
                  "GICS Sector Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "GICS Sector Name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "GICS Sector Name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 1  (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 1  (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 1  (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 1  (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 2  (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 2  (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 2  (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 2  (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 3 (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 3 (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 3 (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 3 (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                  Style[
                  "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["China VAST Industrial Urban", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["KYG216301013", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5820.95"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["15.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Elevation"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["232900"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Real Estate", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{115.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["7483.3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4231.77"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["62713.4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["21.531"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Bank of Suzhou Co. Ltd.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["CNE100003LQ2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6728.33"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Elevation"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["245145"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Financials", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{115.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["548.192"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3511.39"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["23311.6"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.588"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Pacfc Shuanglin Bio-pharmacy C", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["CNE000000F14", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6343.81"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["790.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Elevation"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["247600"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Health Care", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{115.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2989.73"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3402.23"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["11421.1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["19.652"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["KWG Group Holdings Ltd.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["KYG532241042", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6360.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["28.6"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Elevation"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["52855"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Real Estate", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{115.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["96258.4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["62388.9"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["707261."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["22.336"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Bank of Comms Co. Ltd.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["CNE100000205", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5957.75"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["144.245"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Elevation"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["51827"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Financials", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{115.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["18787.9"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["101743."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["607326."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.702"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[True, 17, 1], {1, 17 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[False, 17, 1], {1, 17 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[17, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[17, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 2 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 2, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 5 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 5, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 100000000, {}]], MenuEvaluator -> Automatic]}],
                     " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[False, 17, 1], {1, 17 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[True, 17, 1], {1, 17 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{1308., {108.134033203125, 113.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{1308., {108.134033203125, 113.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.878492604113213*^9, 3.878492615513929*^9}, 
   3.8784927477738037`*^9, {3.878492795346176*^9, 3.878492824983602*^9}, {
   3.878492900694974*^9, 3.878492935514345*^9}, 3.878493415460045*^9, 
   3.878495273252953*^9, 3.8786200576404467`*^9, 3.878715031327244*^9, {
   3.878716255009305*^9, 3.878716270015567*^9}, 3.878805394207941*^9, 
   3.879148976154166*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"16a879e6-a176-42b0-b30f-319cd2467be0"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Machine Learning ", "Section",
 CellChangeTimes->{{3.878617887960531*^9, 3.8786178922249804`*^9}, {
  3.8786180177480707`*^9, 
  3.8786180230148277`*^9}},ExpressionUUID->"9cfeceee-578b-479e-9e2b-\
6bb082aed526"],

Cell[CellGroupData[{

Cell["Dataset Preparation", "Subsection",
 CellChangeTimes->{{3.878618033222563*^9, 
  3.87861805478168*^9}},ExpressionUUID->"23ccf5ee-bcae-4dce-ad62-\
cf12062b8105"],

Cell[TextData[{
 "Prepare the dataset to use as an input for the machine learning models that \
we are going to create. In particular, we are going to divide the dataset in \
two new dataset: ",
 StyleBox["Training set",
  FontWeight->"Bold"],
 ", which includes 80% of all the rows of the dataset, while the ",
 StyleBox["Test",
  FontWeight->"Bold"],
 " ",
 StyleBox["set",
  FontWeight->"Bold"],
 ", which includes the remaining 20%.\nThe training set will be used to train \
our models, while the test set in order to understand the accuracy of our \
models."
}], "Text",
 CellChangeTimes->{{3.8788059084200363`*^9, 3.87880591594809*^9}, {
  3.878805982484206*^9, 
  3.878806133455037*^9}},ExpressionUUID->"6b2ba3af-bd0c-404b-9a30-\
d5bc7bfff9d7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"datasetML", " ", "=", " ", 
    RowBox[{
     RowBox[{"KeyDrop", "[", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Company\>\"", ",", " ", "\"\<ISIN\>\"", ",", " ", "\"\<TCUID\>\"",
         ",", " ", "\"\<integralScore\>\"", ",", " ", "\"\<IntScaled\>\"", 
        ",", "\"\<Carbon-Scope 1  (tonnes CO2e)\>\"", ",", " ", 
        "\"\<Carbon-Scope 2  (tonnes CO2e)\>\"", ",", " ", 
        "\"\<Carbon-Scope 3 (tonnes CO2e)\>\"", ",", " ", 
        "\"\<Carbon Intensity Total (tonnes CO2e/USD mn)\>\""}], "}"}], "]"}],
      "@", "finalds"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Drop", " ", "columns", " ", "that", " ", "are", " ", "not", " ", "needed",
     " ", "for", " ", "machine", " ", "learning", " ", "techniques"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"nobs", ",", "ncol"}], "}"}], "=", 
    RowBox[{"Dimensions", "[", "datasetML", "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "Retrieve", " ", "the", " ", "number", " ", "of", " ", "rows", " ", "and", 
    " ", "columns", " ", "of", " ", "the", " ", "dataset"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"trainingset", ",", "testset"}], "}"}], "=", 
    RowBox[{"TakeDrop", "[", 
     RowBox[{
      RowBox[{"RandomSample", "[", "datasetML", "]"}], ",", 
      RowBox[{"Round", "[", 
       RowBox[{
        RowBox[{"nobs", "*", "0.8"}], ",", "1"}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "Divide", " ", "the", " ", "dataset", " ", "in", " ", "training", " ", 
    "set", " ", "and", " ", "test", " ", "set"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"AccuracyAss", " ", "=", " ", 
    RowBox[{"Association", "[", "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Create", " ", "an", " ", "empty", " ", "association"}], ",", " ", 
    RowBox[{
    "to", " ", "fill", " ", "in", " ", "with", " ", "accuracy", " ", "of", 
     " ", "our", " ", "models"}]}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.878715124656487*^9, 3.878715136895567*^9}, {
   3.878715194002536*^9, 3.8787152977820997`*^9}, {3.878715337211686*^9, 
   3.878715485597872*^9}, {3.8787155917356863`*^9, 3.878715703697961*^9}, {
   3.8787158328798227`*^9, 3.878715837466886*^9}, {3.878715876319783*^9, 
   3.878715876667737*^9}, {3.878715910812853*^9, 3.878715927813305*^9}, {
   3.878716260609582*^9, 3.8787162755669003`*^9}, {3.8788059306470003`*^9, 
   3.878805973430365*^9}, 3.878806341120471*^9, {3.8788063865547953`*^9, 
   3.878806441769845*^9}, {3.878806493253716*^9, 3.878806503942992*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"7d247cef-d508-4632-b82d-0c996ff173ab"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classification", "Subsection",
 CellChangeTimes->{{3.878618143305781*^9, 3.878618144962409*^9}, {
  3.8786189939708767`*^9, 
  3.8786190030333223`*^9}},ExpressionUUID->"cd9d058a-068e-49c5-a54a-\
179c014ccdab"],

Cell[CellGroupData[{

Cell["Logistic Regression", "Subsubsection",
 CellChangeTimes->{{3.878805416699134*^9, 3.878805417721744*^9}, {
  3.878806962177305*^9, 
  3.8788069673045464`*^9}},ExpressionUUID->"919c1118-c19d-49c2-b1cb-\
cdc52c16953a"],

Cell["\<\
Train a classifier using probabilities from linear combinations of features\
\>", "Text",
 CellChangeTimes->{{3.878805704170437*^9, 3.8788057223306637`*^9}, {
  3.878805766632689*^9, 3.87880578974465*^9}, {3.878806943975576*^9, 
  3.878806946422574*^9}},ExpressionUUID->"358fc56b-581c-400b-a2cb-\
e1fe47c98ca6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cRisk", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainingset", "->", "\"\<Ratings\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<LogisticRegression\>\""}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Information", "[", "cRisk", "]"}]}], "Input",
 CellChangeTimes->{{3.8786185865414057`*^9, 3.878618597824006*^9}, {
  3.878618646892776*^9, 3.878618648994371*^9}, {3.878618877270843*^9, 
  3.878618880432907*^9}, {3.878618998083866*^9, 3.878619004451974*^9}, {
  3.8786191510115213`*^9, 3.878619159945651*^9}, {3.8786192237272882`*^9, 
  3.878619223941098*^9}, {3.878806954912199*^9, 3.878806959223152*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"e494084e-deed-4ffe-a42a-57f607634d26"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"A\"", "\"B\"", "\"C\"", "\"D\"", "\"E\""},
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"A\"", "\"B\"", "\"C\"", "\"D\"", "\"E\""},
                    "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["75", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 75, "ClassNumber" -> 5, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "Elevation" -> <|"Type" -> "Numerical"|>, 
           "GICS Sector Name" -> <|"Type" -> "Nominal"|>, 
           "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Disclosure" -> <|"Type" -> "Text"|>, 
           "Revenue (USD mn)" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
           "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|
               "FeatureNames" -> {
                 "Elevation", "GICS Sector Name", 
                  "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                  "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                  "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                  "Carbon Disclosure", "Revenue (USD mn)"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 7|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Numerical", "Nominal", "Numerical", "Numerical", 
                  "Numerical", "Text", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6", "f7"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
           "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|"(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
              "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 75, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>, 
                    "f6" -> <|"Type" -> "Text"|>, 
                    "f7" -> <|"Type" -> "Numerical"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 1621909218748444882|>], 
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>, 
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2074781423290265366|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 20679206186753951|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>, <|"" -> 1|>}, 
                    "MissingCode" -> Indeterminate, "Version" -> {13.1, 0}, 
                    "ID" -> 4023015169247141483, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "LogRescaleNumericalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Indices" -> {2, 4, 5}, 
                    "Centers" -> {0.43, 23.052, 256.593674903342}, 
                    "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
                    620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
                    3527897072513609120, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {146.57391774891778`, 3.693542625490828, 
                    68.22157333333334, 3.504982149660075, 
                    1.4086804722859232`}, 
                    "StandardDeviation" -> {253.37495961794207`, 
                    3.1699732836017724`, 118.62403407631172`, 
                    2.423277341145054, 1.2610287731963699`}, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2274174826257793629|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {11, 1}|>|>, 
                    "Boundaries" -> {{-0.5, -0.40909090909090906`, \
-0.3181818181818182, -0.2272727272727273, -0.13636363636363635`, \
-0.04545454545454547, 0.045454545454545414`, 0.13636363636363635`, 
                    0.2272727272727273, 0.31818181818181823`, 
                    0.40909090909090906`, 0.5}, {-0.5, 0.5}}, 
                    "Version" -> {13.1, 0}, "ID" -> 8505008840132824157, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>, 
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
                    Span[1, 2], 
                    Span[3, 7]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {13.1, 0}, "ID" -> 
                    373596144042670943|>]}, "Invertibility" -> "Approximate", 
                   "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBmQFm/iFib1JlAgAAAAcAAAAHAAAANBt6Fr3csL/lG+Yz4ESRP7hBka92
l6I/3+CsXPnbnb8juBQyj++mPyQSP5BqJYY/vak1fWbb7z9Exb6rXA+mP3bs
bygIL6y/qBWDW9y8oz+sdTB+ZCFvP+M3K7whyrK/oZKNG3/O7792PFDDUfyQ
P9/U3bojxJC/o5bbS9uw5z8WAjGjisXkP97C+Aj2NcU/OamW7DSFoj9l4xTQ
yZiTv+5YNgcGV6G/JjWbdhS247/4DI4+z4GiP+damijBtq0/AUhvWGOt0r+S
UyYwEkrnv7xCV9Xbd5o/7dmZYqsIlL+U6TKOWh/fvyeCdPr2xcm/z+izHsbw
ab/DCMuYpSLrPyWlgzDxQ68/IU0Nlm9mh79gtGMp7lp6v5IjpI1bXuO/gG3Q
78EAir9w8Q54CT+tPz6D4J3Vndm/VLWB566j5T+EcC9VEICzv/LeOJ47T7W/
77C3YnYxuz+XzXfud2fkvwL5lh2DJOg/lXZTGNvFtb8Pcd+T9BKZv2lvrRrr
CbI/A8vXaYtBiL/H/s72
                   "], 
                  "Precisions" -> {0.4602875814560013, 0.9399443097653287, 
                   1.0616808801506838`, 1.6265466434380347`, 
                   4.517522263650691, 10.595148643942485`, 23.23460552022561},
                   "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781967`, 0.012269055622142968`, 
                    0.0013959895289638008`, -0.0005267240067510293, \
-0.00032143499611032286`, -0.00013378352049829329`, 0.0005265431937281588}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 6648082896216031031|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7.|>,
                     "Key" -> "((f2f6)(f1f3f4f5f7))", "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 7, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                    "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1557841622946289758|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                   "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                   "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 7, 
                   "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   1557841622946289758|>], "InputDimension" -> 0, 
                "OutputDimension" -> 7, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, 
                    "ID" -> 2988406535272383851|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"Information Technology"}, "ID" -> 
                    8211126643196690843|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369},
                     "ID" -> 220143977676884624|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {23.778}, "ID" -> 8845109505593024510|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {100.249}, "ID" -> 827490798644983815|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 4409963340497863227|>, 
                    "f7" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {256.9105}, "ID" -> 5236914127772614391|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.078606, "MaxTrainingMemory" -> 5319392, 
                  "DataMemory" -> 22976, "FunctionMemory" -> 86128, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 12, 4, 14, 23, 22.270712`8.100309084914047}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, 
                  "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-7.173238193477166, -7.173238193477166, \
-5.957762682813879, -5.505343391085791, -5.137053644875943, \
-4.839361849432994, -4.800994757869588, -4.736339520600383, \
-4.720994010399741, -4.71905825007799, -4.703766525124256}, 
                   "LeftBoundary" -> -5.957762682813879, "LeftScale" -> 
                   0.6077377553316436, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[36.60573897803041, 1.772055230348638], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 8833432794738512184|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>, 
               "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                 "Version" -> {13.1, 0}, "ID" -> 8812518305512619507|>], 
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Version" -> {13.1, 0}, "ID" -> 7405342354547017736|>]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"|>], 
           MachineLearning`MLProcessor[
           "LogRescaleNumericalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Indices" -> {2, 4, 5}, 
             "Centers" -> {0.43, 23.052, 256.593674903342}, 
             "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
              620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
             7299988401548215772, 
             "Output" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Mean" -> {146.57391774891778`, 3.693542625490828, 
              68.22157333333334, 3.504982149660075, 1.4086804722859232`}, 
             "StandardDeviation" -> {253.37495961794207`, 3.1699732836017724`,
               118.62403407631172`, 2.423277341145054, 1.2610287731963699`}, 
             "Output" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 1400194064660864776|>], 
           MachineLearning`MLProcessor[
           "ToLowerCase", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 3080611390123234620, 
             "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "RemoveDiacritics", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 8393247813432535084, 
             "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
               "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Index" -> {<|
                   "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>}, 
                 "Output" -> <|
                  "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> CompressedData["
1:eJxTTMoPSmVmYGBgBGIeIGZlwAANaDSyuINV5XF7IP0gJG/3fiC9wNDnNIjf
ICJ2FcR/IHn3Poi/gM/rKZgf6n8QrC7ZZSuIdtjqegMk77C36wKYvzLrFVje
m+cMWP3c+/vBtN3JS2D6yeWLYPkZKy+D+S8/gO0/YOZ2E2wP0+lLIJrBWOIc
WPzO1IcgdQ2LGjeB3TUp+SKYVtMFuy+h+e8TEH0gZu8JsL6j5o/B5gcFgd1z
QGXZU7D77ga+BKv/OBtsr0L9dYg7eOPvguXTp10Gm/vmJDgcFDacBZvv4HF9
Ith+wUiwvgajkndgfdOYHoHDbXHBcxCdECkFdndCbOtXsD9uJB4Bq1v48ybY
HTsegP3PYPvzEVi8+NYWsHv2tz0Em2N16SiY72lzDWzP1gO3wPoMs46A5BW2
L5wMlt+n82o/AO0BofY=
                  "], "Version" -> {13.1, 0}, "ID" -> 436956950344966148|>], 
               MachineLearning`MLProcessor[
               "Sequence", <|
                "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Processors" -> {
                   MachineLearning`MLProcessor[
                   "TextToNominalSequence", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {13.1, 0}, "ID" -> 9037232907786629142, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                   MachineLearning`MLProcessor[
                   "NominalSequenceToTFIDFVector", <|
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> {-9125122986955958911, \
-8920710729279180450, -8515397617198652367, -8156047279148961366, \
-5900137721653868194, -5516340669880835636, -4691435917638705529, \
-4484112905383790136, -3872414778415116274, -3607098371778122975, \
-3443150737398804539, -3355080348777836050, -2509905740948760720, \
-2159536488856785732, 242552411836269492, 450553210381435687, 
                    539691877398804025, 950421020428451240, 
                    1561895621580759179, 1579009397565082067, 
                    1671416204203290022, 2799484578252825308, 
                    3287432777910049379, 3477167097823690523, 
                    3576478456825362866, 4539722962543247872, 
                    5070765454536077049, 5138905625963890559, 
                    6058376361354581924, 6694985464746702812, 
                    6748311694457965250, 7603334142034012365, 
                    7731804819316663270, 8918825649307280967}, "Values" -> 
                    None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {13.1, 0}|>], 
                    "InverseDocumentFrequency" -> {1.91959284073794, 
                    3.624340932976365, 1.3217558399823195`, 
                    2.0149030205422647`, 2.0149030205422647`, 
                    2.120263536200091, 1.3217558399823195`, 
                    2.9311937524164198`, 1.2729656758128873`, 
                    1.91959284073794, 4.31748811353631, 2.120263536200091, 
                    4.31748811353631, 2.0149030205422647`, 
                    1.4842747694800942`, 2.0149030205422647`, 
                    2.120263536200091, 1.5448993912965292`, 
                    2.0149030205422647`, 1.3730491343698699`, 
                    2.0149030205422647`, 3.624340932976365, 0., 
                    0.11279549414534427`, 2.0149030205422647`, 
                    3.2188758248682006`, 1.4842747694800942`, 
                    2.9311937524164198`, 2.0149030205422647`, 
                    2.0149030205422647`, 0.5332984796180493, 
                    2.120263536200091, 4.31748811353631, 2.0149030205422647`},
                     "Version" -> {13.1, 0}, "ID" -> 7526152790873636702, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                 "Invertibility" -> "Impossible", "StructurePreserving" -> 
                 True, "Missing" -> "Forbidden"|>]}, "Invertibility" -> 
             "Impossible", "StructurePreserving" -> True, "Missing" -> 
             "Forbidden"|>], 
           MachineLearning`MLProcessor[
           "MergeVectors", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
               "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
               Span[1, 5], 
               Span[6, 39], 
               Span[40, 44]}, "Wrappers" -> {Identity, SparseArray, Identity},
              "Output" -> <|
              "(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
                  "], "Type" -> "NumericalVector"|>|>, "Version" -> {13.1, 0},
              "ID" -> 613954820935696947|>]}, "Invertibility" -> "Impossible",
          "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 9119616879012754245|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|
               "A" -> 1, "B" -> 2, "C" -> 3, "D" -> 4, "E" -> 5|>}, 
             "MissingCode" -> 0, "Version" -> {13.1, 0}, "ID" -> 
             1482488055587057283, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {5}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 4789940262906318728|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 5|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "A" -> 0.08750000000000001, "B" -> 0.2625, "C" -> 0.325, "D" -> 
        0.21250000000000002`, "E" -> 0.1125|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Ratings", 
          "Order" -> {
           "Elevation", "GICS Sector Name", 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
            "Carbon Disclosure", "Revenue (USD mn)", "Ratings"}|>], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {5, 6}, 0., {
      1, {{0, 1, 2, 3, 4, 5}, {{2}, {3}, {4}, {5}, {6}}}, {1., 1., 1., 1., 
       1.}}], "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "LogProbabilitiesFunction" -> 
      LinearLayer[<|
        "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIFiHWAuF7Qyu57
7RPb8wkGdh2TfPetS2G06+8+ZO1fE2y9+tSyPUsX6ViDcMDlJ3vSAqP2xBW2
7HpzxG0PSE36Q2mwOIgGqXmtfHk3TO27T2/A7IaqVrAZIPOA1jFMuS8FVnsr
ZvoekHqQeTA7uvv8bEB6Ox33gPUEa7vY/ex3tNM6K7ovI3abrcIGjX0fTU7t
5bqsbvtErcPOwYlxX94Rhn3PC37bOEfk25yummkzM4jHFoTb94vavD5320Zv
CYdtm8kJG5Aao/uzd4PEQTRIDfcXWbjanLfMYHbW7vdgM0DmgdzrYyG+B8Tf
cmrqHpB6kHkwOwKOle8F6bVZeQOshin6pM2z6152kilb960+07w32Gnj3v8P
1Oy4z062jXzHZC9qsGDvfSHNfX9/s9s+/Cm4x2r+pN1RS7RtQNh+xes9SwoW
Wl9bxmdTX5dgA1Lz+N4PsDiIBqlh+70Mrjb3t5AtiG3lYLMHRIPMA7k32jAX
rGbfK+a9IPUg82B2PK0rtQXpPTPxN1iPdMosW6kNZnZvL+jtk7g1dd+mnx/s
du/9bev7v8FW0GCPre6r/fsal8jbPbRUsU1/v9LmZ0jErvbmLBsQ1lrPvvfL
18fWn2dY7G4z2m0NUrM6L3o3SBxEg9SEaSrsgak1mbUUzD60wh5Mg8wDp4dv
NmDzgqxkbEHqQebB7PgmH2ML0ptpewGsx+hIp53Kqqm7LOXf7GHh/LenRTfQ
FgDVf0xw
            "], "Biases" -> 
           RawArray["Real32",{-0.09899067133665085, 0.41835859417915344`, 
             0.5401719212532043, 0.38337385654449463`}]|>, 
         "Parameters" -> <|
          "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 44, 
           "$InputDimensions" -> {44}|>, 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{44}, NeuralNetworks`AtomT]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
        "Version" -> "13.1.4", "Unstable" -> False|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "FirstValues", <|"Info" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQBeJJKp5AdMie+4P4HVP9kwTpZRcFjBhOzxqlofScqfMF
0p++J0gDAFQ8nbU=
            "], "Type" -> "NumericalVector"|>, "Key" -> "(f2f6(f1f3f4f5f7))", 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
      "LogisticRegression", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> 10., "Options" -> <||>|>, 
        "OptimizationMethod" -> <|"Value" -> "LBFGS", "Options" -> <||>|>, 
        MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 1.069395`6.480683142703456, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[1.5666877412283875`, 0.08701380463081607], "Accuracy" -> 
         Around[0.3263837789328387, 0.10424965159763006`], "EvaluationTime" -> 
         9.11720892455432*^-6, "TestSize" -> 30, "ModelMemory" -> 10944., 
         "ModelUtility" -> -1.1532017783481066`, "TrainingSize" -> 60, 
         "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
         202154.66666666666`, "ExperimentCount" -> 2, 
         "MeanCrossEntropyHistory" -> {
           Around[1.5044283963484177`, 0.07082190969902308], 
           Around[1.628947086108357, 0.11846908470932856`]}, 
         "AccuracyHistory" -> {
           Around[0.2638837789328387, 0.11248117430350343`], 
           Around[0.3888837789328387, 0.12441482134936328`]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           10., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 75|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 1.*^-6|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[26.535117271189197`, 8.657973134855041], "Accuracy" -> 
              Around[0.23063849186250643`, 0.039686161056801963`], 
              "EvaluationTime" -> 5.390103577878153*^-6, "TestSize" -> 195, 
              "ModelMemory" -> 10944., "ModelUtility" -> -4.03487620196157, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.011294627058970835`, 
              "TrainingMemory" -> 248062., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[20.965058315959872`, 2.5015773008165434`], 
                Around[43.318160328790945`, 5.400512062514612], 
                Around[15.322133168816773`, 1.727203179498002]}, 
              "AccuracyHistory" -> {
                Around[0.185183946407961, 0.04805264252125852], 
                Around[0.2760930373170519, 0.05530379367625932], 
                Around[0.2306384918625064, 0.0521095042496065]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.280157373057965, 1.1443340308043957`], "Accuracy" -> 
              Around[0.2638837789328387, 0.15907240221166663`], 
              "EvaluationTime" -> 0.000010565954616407417`, "TestSize" -> 15, 
              "ModelMemory" -> 10944, "ModelUtility" -> -1.948529340045009, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 202096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.280157373057965, 0.8091663531243237]}, 
              "AccuracyHistory" -> {
                Around[0.2638837789328387, 0.11248117430350343`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000010565954616407417`, "MeanCrossEntropy" -> 
             Around[3.280157373057965, 1.1443340308043957`], "ModelMemory" -> 
             10944, "TrainingMemory" -> 202096, "TrainingTime" -> 
             0.02073656764742709|>, "Index" -> 1|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.1|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[3.3878895445377473`, 0.20276955384317286`], "Accuracy" -> 
              Around[0.22558798681200135`, 0.03262724601779188], 
              "EvaluationTime" -> 3.268335914006237*^-6, "TestSize" -> 195, 
              "ModelMemory" -> 10944., "ModelUtility" -> -1.9252977006009515`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.009999999999999998, 
              "TrainingMemory" -> 163124., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[3.3687321156276413`, 0.3616141271305912], 
                Around[3.315718449622531, 0.3272324852725308], 
                Around[3.4792180683630685`, 0.33729593092597676`]}, 
              "AccuracyHistory" -> {
                Around[0.20033546155947612`, 0.049512933032235605`], 
                Around[0.2306384918625064, 0.0521095042496065], 
                Around[0.2457900070140216, 0.05326158319695422]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.829621354488002, 0.19848783965280065`], "Accuracy" -> 
              Around[0.3263837789328387, 0.0846166551907291], 
              "EvaluationTime" -> 9.841581770480868*^-6, "TestSize" -> 30, 
              "ModelMemory" -> 10944., "ModelUtility" -> -1.318765504028398, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 202082.66666666666`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[1.743242183056376, 0.2331652805864454], 
                Around[1.9160005259196282`, 0.27822109092360475`]}, 
              "AccuracyHistory" -> {
                Around[0.3263837789328387, 0.11966602137337683`], 
                Around[0.3263837789328387, 0.11966602137337685`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 9.841581770480868*^-6, "MeanCrossEntropy" -> 
             Around[1.829621354488002, 0.19848783965280065`], "ModelMemory" -> 
             10944., "TrainingMemory" -> 202082.66666666666`, "TrainingTime" -> 
             0.01944194058845625|>, "Index" -> 2|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 1000.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.6048595575842828`, 0.005470785982827526], "Accuracy" -> 
              Around[0.2306384918625064, 0.03468328392521391], 
              "EvaluationTime" -> 3.069634330721352*^-6, "TestSize" -> 195, 
              "ModelMemory" -> 10944., "ModelUtility" -> -1.1669091402648606`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.003981071705534968, 
              "TrainingMemory" -> 103452., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[1.6043240184678498`, 0.009455868581908597], 
                Around[1.60502581116219, 0.009464602074309098], 
                Around[1.605228843122809, 0.009470880839040118]}, 
              "AccuracyHistory" -> {
                Around[0.26094152216553673`, 0.05432463497587059], 
                Around[0.20033546155947612`, 0.049512933032235605`], 
                Around[0.2306384918625064, 0.0521095042496065]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.5891715870093148`, 0.02563392786093837], "Accuracy" -> 
              Around[0.3263837789328387, 0.10424965159763006`], 
              "EvaluationTime" -> 0.000010565954616407415`, "TestSize" -> 30, 
              "ModelMemory" -> 10944., "ModelUtility" -> -1.1596251004957883`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 150282.66666666666`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[1.5878173551807269`, 0.03612796854844177], 
                Around[1.590525818837903, 0.036274927111717474`]}, 
              "AccuracyHistory" -> {
                Around[0.2638837789328387, 0.11248117430350343`], 
                Around[0.3888837789328387, 0.12441482134936328`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000010565954616407415`, "MeanCrossEntropy" -> 
             Around[1.5891715870093148`, 0.02563392786093837], "ModelMemory" -> 
             10944., "TrainingMemory" -> 150282.66666666666`, "TrainingTime" -> 
             0.007739975957739508|>, "Index" -> 3|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 10000.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.604550490065626, 0.005458177973681336], "Accuracy" -> 
              Around[0.2306384918625064, 0.03468328392521391], 
              "EvaluationTime" -> 2.9526673582310326`*^-6, "TestSize" -> 195, 
              "ModelMemory" -> 10944., "ModelUtility" -> -1.1667151000899634`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.003981071705534968, 
              "TrainingMemory" -> 99384., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[1.6044967808273711`, 0.009453242485012201], 
                Around[1.6045671347952117`, 0.009453853577591832], 
                Around[1.6045875545742956`, 0.009454068880334263]}, 
              "AccuracyHistory" -> {
                Around[0.26094152216553673`, 0.05432463497587059], 
                Around[0.20033546155947612`, 0.049512933032235605`], 
                Around[0.2306384918625064, 0.0521095042496065]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.5907316217813783`, 0.02557974876286342], "Accuracy" -> 
              Around[0.3263837789328387, 0.10424965159763006`], 
              "EvaluationTime" -> 9.11720892455432*^-6, "TestSize" -> 30, 
              "ModelMemory" -> 10944., "ModelUtility" -> -1.1605963392983465`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 142248., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.590594162743537, 0.03616999372143662], 
                Around[1.5908690808192194`, 0.03617941872099356]}, 
              "AccuracyHistory" -> {
                Around[0.2638837789328387, 0.11248117430350343`], 
                Around[0.3888837789328387, 0.12441482134936328`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 9.11720892455432*^-6, "MeanCrossEntropy" -> 
             Around[1.5907316217813783`, 0.02557974876286342], "ModelMemory" -> 
             10944., "TrainingMemory" -> 142248., "TrainingTime" -> 
             0.007739975957739508|>, "Index" -> 4|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 100000.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.6045197956179083`, 0.005457919295674566], "Accuracy" -> 
              Around[0.2306384918625064, 0.03468328392521391], 
              "EvaluationTime" -> 2.9118000528337493`*^-6, "TestSize" -> 195, 
              "ModelMemory" -> 10944., "ModelUtility" -> -1.1666959510262793`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.003981071705534968, 
              "TrainingMemory" -> 95372., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[1.6045144231441841`, 0.009453347573708878], 
                Around[1.6045214602897955`, 0.009453406023799817], 
                Around[1.6045235034197454`, 0.009453423373663358]}, 
              "AccuracyHistory" -> {
                Around[0.26094152216553673`, 0.05432463497587059], 
                Around[0.20033546155947612`, 0.049512933032235605`], 
                Around[0.2306384918625064, 0.0521095042496065]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.5908919543149045`, 0.025582453029149767`], "Accuracy" -> 
              Around[0.3263837789328387, 0.10424965159763006`], 
              "EvaluationTime" -> 8.392836078627772*^-6, "TestSize" -> 30, 
              "ModelMemory" -> 10944., "ModelUtility" -> -1.1606971409824094`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.003981071705534968, 
              "TrainingMemory" -> 136320., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5908781876643363`, 0.03617860303158499], 
                Around[1.5909057209654727`, 0.03617949057311883]}, 
              "AccuracyHistory" -> {
                Around[0.2638837789328387, 0.11248117430350343`], 
                Around[0.3888837789328387, 0.12441482134936328`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 8.392836078627772*^-6, "MeanCrossEntropy" -> 
             Around[1.5908919543149045`, 0.025582453029149767`], 
             "ModelMemory" -> 10944., "TrainingMemory" -> 136320., 
             "TrainingTime" -> 0.006966875484686195|>, "Index" -> 5|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.00001|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[18.500729847395085`, 4.05780319759733], "Accuracy" -> 
              Around[0.21548697671099123`, 0.03715332597785244], 
              "EvaluationTime" -> 3.069634330721352*^-6, "TestSize" -> 195, 
              "ModelMemory" -> 10944., "ModelUtility" -> -3.653933051366986, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.009999999999999998, 
              "TrainingMemory" -> 163126., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[16.790571332996176`, 1.9754412009349218`], 
                Around[25.96193749939603, 3.225376128292394], 
                Around[12.749680709793056`, 1.4291058034030009`]}, 
              "AccuracyHistory" -> {
                Around[0.17003243125644577`, 0.04647102622286553], 
                Around[0.2457900070140216, 0.05326158319695422], 
                Around[0.2306384918625064, 0.0521095042496065]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.0019956933937664`, 0.5299576489563296], "Accuracy" -> 
              Around[0.2951337789328387, 0.08771413225544569], 
              "EvaluationTime" -> 0.000011477885999758008`, "TestSize" -> 30, 
              "ModelMemory" -> 10944., "ModelUtility" -> -1.8271666753027471`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.09212238379561377, 
              "TrainingMemory" -> 328896., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[3.2769360183972256`, 0.8080861115771483], 
                Around[2.7270553683903067`, 0.547141730616534]}, 
              "AccuracyHistory" -> {
                Around[0.2638837789328387, 0.11248117430350343`], 
                Around[0.3263837789328387, 0.11966602137337683`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000011477885999758008`, "MeanCrossEntropy" -> 
             Around[3.0019956933937664`, 0.5299576489563296], "ModelMemory" -> 
             10944., "TrainingMemory" -> 328896., "TrainingTime" -> 
             0.07909178784671032|>, "Index" -> 6|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.0001|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[12.654549470513183`, 1.742975023293482], "Accuracy" -> 
              Around[0.23063849186250643`, 0.03968616105680196], 
              "EvaluationTime" -> 3.069634330721352*^-6, "TestSize" -> 195, 
              "ModelMemory" -> 10944., "ModelUtility" -> -3.2583825562600324`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.009999999999999998, 
              "TrainingMemory" -> 163278., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[12.205687519728045`, 1.4346302514792404`], 
                Around[15.528842556645754`, 1.8717768654755504`], 
                Around[10.22911833516575, 1.136441996554475]}, 
              "AccuracyHistory" -> {
                Around[0.185183946407961, 0.04805264252125852], 
                Around[0.2760930373170519, 0.05530379367625931], 
                Around[0.2306384918625064, 0.0521095042496065]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.245929476414228, 1.128012373302725], "Accuracy" -> 
              Around[0.2638837789328387, 0.15907240221166663`], 
              "EvaluationTime" -> 8.392836078627774*^-6, "TestSize" -> 15, 
              "ModelMemory" -> 10944, "ModelUtility" -> -1.937787331657839, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 201856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.245929476414228, 0.797625198424688]}, 
              "AccuracyHistory" -> {
                Around[0.2638837789328387, 0.11248117430350343`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 8.392836078627774*^-6, "MeanCrossEntropy" -> 
             Around[3.245929476414228, 1.128012373302725], "ModelMemory" -> 
             10944, "TrainingMemory" -> 201856, "TrainingTime" -> 
             0.01944194058845625|>, "Index" -> 7|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.01|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.767383821858778, 0.38634922053225734`], "Accuracy" -> 
              Around[0.21043647166048618`, 0.03194332472573996], 
              "EvaluationTime" -> 3.268335914006237*^-6, "TestSize" -> 195, 
              "ModelMemory" -> 10944., "ModelUtility" -> -2.458718685666341, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.009999999999999998, 
              "TrainingMemory" -> 163300., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[5.922565878261294, 0.6750739816238336], 
                Around[5.858507339446731, 0.6481978648206899], 
                Around[5.521078247868309, 0.5870293349606124]}, 
              "AccuracyHistory" -> {
                Around[0.185183946407961, 0.04805264252125852], 
                Around[0.21548697671099123`, 0.05086234885200064], 
                Around[0.2306384918625064, 0.0521095042496065]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.2156042268758096`, 0.2870668453121275], "Accuracy" -> 
              Around[0.3576337789328387, 0.09173353981284965], 
              "EvaluationTime" -> 8.392836078627772*^-6, "TestSize" -> 30, 
              "ModelMemory" -> 10944., "ModelUtility" -> -1.5142996367893848`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 202029.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.259291740189574, 0.43257551725637045`], 
                Around[2.171916713562045, 0.3758646850635364]}, 
              "AccuracyHistory" -> {
                Around[0.3263837789328387, 0.11966602137337683`], 
                Around[0.3888837789328387, 0.12441482134936328`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 8.392836078627772*^-6, "MeanCrossEntropy" -> 
             Around[2.2156042268758096`, 0.2870668453121275], "ModelMemory" -> 
             10944., "TrainingMemory" -> 202029.3333333333, "TrainingTime" -> 
             0.01944194058845625|>, "Index" -> 8|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 1.*^6|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.6045167283239394`, 0.005457903538395823], "Accuracy" -> 
              Around[0.2306384918625064, 0.03468328392521391], 
              "EvaluationTime" -> 3.069634330721352*^-6, "TestSize" -> 195, 
              "ModelMemory" -> 10944., "ModelUtility" -> -1.1666940388606215`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.0035716746828516745`,
               "TrainingMemory" -> 91680., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[1.6045161910610761`, 0.00945336177601239], 
                Around[1.6045168947931268`, 0.009453367594394415], 
                Around[1.6045170991176156`, 0.009453369287525553]}, 
              "AccuracyHistory" -> {
                Around[0.26094152216553673`, 0.05432463497587059], 
                Around[0.20033546155947612`, 0.049512933032235605`], 
                Around[0.2306384918625064, 0.0521095042496065]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.5909080318192437`, 0.02558280762959719], "Accuracy" -> 
              Around[0.3263837789328387, 0.10424965159763006`], 
              "EvaluationTime" -> 9.11720892455432*^-6, "TestSize" -> 30, 
              "ModelMemory" -> 10944., "ModelUtility" -> -1.1607072596624772`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.003981071705534968, 
              "TrainingMemory" -> 136138.66666666666`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[1.5909066549462547`, 0.03617950935986536], 
                Around[1.5909094086922326`, 0.036179597562214005`]}, 
              "AccuracyHistory" -> {
                Around[0.2638837789328387, 0.11248117430350343`], 
                Around[0.3888837789328387, 0.12441482134936328`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 9.11720892455432*^-6, "MeanCrossEntropy" -> 
             Around[1.5909080318192437`, 0.02558280762959719], "ModelMemory" -> 
             10944., "TrainingMemory" -> 136138.66666666666`, "TrainingTime" -> 
             0.006557478462002901|>, "Index" -> 9|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 10.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.6480248378410225`, 0.025539539605956094`], "Accuracy" -> 
              Around[0.2356889969130115, 0.031908312025445515`], 
              "EvaluationTime" -> 2.9118000528337493`*^-6, "TestSize" -> 195, 
              "ModelMemory" -> 10944., "ModelUtility" -> -1.1958634667648242`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 158224., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[1.6096019851204109`, 0.025127647278925], 
                Around[1.6651301891296466`, 0.02962562940724877], 
                Around[1.66934233927301, 0.034782117985048135`]}, 
              "AccuracyHistory" -> {
                Around[0.24579000701402162`, 0.053261583196954246`], 
                Around[0.21548697671099126`, 0.050862348852000645`], 
                Around[0.2457900070140216, 0.053261583196954204`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.5666877412283875`, 0.08701380463081607], "Accuracy" -> 
              Around[0.3263837789328387, 0.10424965159763006`], 
              "EvaluationTime" -> 9.11720892455432*^-6, "TestSize" -> 30, 
              "ModelMemory" -> 10944., "ModelUtility" -> -1.1532017783481066`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 202154.66666666666`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[1.5044283963484177`, 0.07082190969902308], 
                Around[1.628947086108357, 0.11846908470932856`]}, 
              "AccuracyHistory" -> {
                Around[0.2638837789328387, 0.11248117430350343`], 
                Around[0.3888837789328387, 0.12441482134936328`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 9.11720892455432*^-6, "MeanCrossEntropy" -> 
             Around[1.5666877412283875`, 0.08701380463081607], "ModelMemory" -> 
             10944., "TrainingMemory" -> 202154.66666666666`, "TrainingTime" -> 
             0.017385222935699066`|>, "Index" -> 10|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["LogisticRegression"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Tuple[{
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
               "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory",
                "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, 3], 
               TypeSystem`Vector[TypeSystem`AnyType, 3]}], 
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
               "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory",
                "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
               TypeSystem`Vector[
               TypeSystem`AnyType, TypeSystem`AnyLength]}]}], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 75, 
      "PreprocessorEvaluationTime" -> 2.12109375*^-6, "PreprocessorMemory" -> 
      178720, "InputDimension" -> 44, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.504445381309891, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.879152603174341`16.341311853939935*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.27999999999999997`, 
          "ElapsedTimes" -> 0.284132, "ExperimentCounts" -> 30|>, <|
         "TrainingSizes" -> 60, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.47883800000000004`, "ExperimentCounts" -> 18|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, "ID" -> 
           3795572968267006573|>, 
         "f2" -> <|
          "Type" -> "Nominal", "Weight" -> 1, 
           "Values" -> {"Information Technology"}, "ID" -> 
           3401139331922032727|>, 
         "f3" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369}, "ID" -> 
           4714656301856831657|>, 
         "f4" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {23.778}, "ID" -> 
           4624390425862832796|>, 
         "f5" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {100.249}, "ID" -> 
           8583462845398299564|>, 
         "f6" -> <|
          "Type" -> "Text", "Weight" -> 1, "Values" -> {"Estimated data"}, 
           "ID" -> 3095956687388126824|>, 
         "f7" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {256.9105}, "ID" -> 
           1111199487588034056|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 1.027943, 
      "MaxTrainingMemory" -> 15488400, "DataMemory" -> 118040, 
      "FunctionMemory" -> 344296, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 12, 4, 14, 23, 23.199657`8.118056546910791}, 
        "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, "ProcessorType" -> 
      "ARM64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, 3.878806970579384*^9, 
   3.878811612125744*^9, 3.8791490032180023`*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"a3d025c4-fb74-4589-877e-0d3667d04c3a"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Data type"], 
                   TextCell["Data type"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{
                   InterpretationBox[
                    Cell["Mixed"], 
                    TextCell["Mixed"]], 
                   StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]},
                  "RowDefault"],
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                  Short[#, 10]& ]],
                Annotation[#, 
                 
                 Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                   "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classes"], 
                   TextCell["Classes"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 InterpretationBox[
                  Cell["A"], 
                  TextCell["A"]], 
                 InterpretationBox[
                  Cell["B"], 
                  TextCell["B"]], 
                 InterpretationBox[
                  Cell["C"], 
                  TextCell["C"]], 
                 InterpretationBox[
                  Cell["D"], 
                  TextCell["D"]], 
                 InterpretationBox[
                  Cell["E"], 
                  TextCell["E"]]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"33.", "10."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    32.6383778932838737319`3., 10.4249651597630048627`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Method"], 
                   TextCell["Method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 
                 InterpretationBox[Cell[
                  "LogisticRegression",ExpressionUUID->
                   "80ddb176-bd85-4aa4-adbf-e75c4e84b38d"],
                  TextCell["LogisticRegression"]],
                 StyleBox[
                  TagBox[
                   
                   GridBox[{{"\"L1Regularization\"", "0"}, {
                    "\"L2Regularization\"", "10.`"}, {
                    "\"OptimizationMethod\"", "\"LBFGS\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                  "Verdana", StripOnInput -> False]],
                Annotation[#, 
                 Style[
                  
                  Grid[{{"L1Regularization", 0}, {"L2Regularization", 10.}, {
                    "OptimizationMethod", "LBFGS"}}, Alignment -> Left, Frame -> 
                   All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                   Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                 "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.93`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"49.5`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                   Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"1.5666877412283874982`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0870138046308160662`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "1.3926601319667553103`3.", "\", \"", 
                   "1.7407153504900196861`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 1.3926601319667553103`3., 
                   ", ", 1.7407153504900196861`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Model memory"], 
                   TextCell["Model memory"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"348.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training examples used"], 
                   TextCell["Training examples used"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               TemplateBox[{"75", "\"examples\"", "examples", "\"Examples\""},
                
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training time"], 
                   TextCell["Training time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.02`", "\"s\"", "seconds", "\"Seconds\""},
                "Quantity"]},
              {
               ItemBox[
                
                DynamicModuleBox[{
                 MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                 DynamicBox[ToBoxes[
                   Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.47282260739310095`}, {
                    4.0943445622221, 0.4489636718053348}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.47282260739310095`}}, {{4.0943445622221, 
                    0.4489636718053348}}}]}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.46941522165890454`}, {
                    2.302585092994046, 0.4762184222649899}, {
                    2.302585092994046, 0.4762184222649899}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, 0.3918217503937765}, {
                    4.0943445622221, 0.5030161364617508}, {4.0943445622221, 
                    0.5030161364617508}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-2.178060225738475, 0.4470965746954212}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-2.178060225738475, 4.31748811353631}, {
                    0.4470965746954212, 0.47282260739310095`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.2306384918625064}, {
                    4.0943445622221, 0.3263837789328387}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.2306384918625064}}, {{4.0943445622221, 
                    0.3263837789328387}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-2.178060225738475, 0.19014578090790188`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-2.178060225738475, 4.31748811353631}, {
                    0.19014578090790188`, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.2784690357609234`}, {
                    4.0943445622221, 1.1878914008359116`}, {4.0943445622221, 
                    1.1878914008359116`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 1.*^-6}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 1.2202071742919258`}, {
                    4.0943445622221, 0.6041090353286325}, {4.0943445622221, 
                    0.6041090353286325}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.1}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.4730362496906107}, {
                    4.0943445622221, 0.4632128659973936}, {4.0943445622221, 
                    0.4632128659973936}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 1000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.4728436488605369}, {
                    4.0943445622221, 0.4641940498855745}, {4.0943445622221, 
                    0.4641940498855745}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.4728245190534675}, {
                    4.0943445622221, 0.4642948364995954}, {4.0943445622221, 
                    0.4642948364995954}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 100000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 2.9178101825166456`}, {
                    4.0943445622221, 1.099277298631216}, {4.0943445622221, 
                    1.099277298631216}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.00001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 2.5380167924556702`}, {
                    4.0943445622221, 1.1774017425514594`}, {4.0943445622221, 
                    1.1774017425514594`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.0001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 1.752218567275332}, {
                    4.0943445622221, 0.7955251549542885}, {4.0943445622221, 
                    0.7955251549542885}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.01}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.47282260739310095`}, {
                    4.0943445622221, 0.46430494241725795`}, {4.0943445622221, 
                    0.46430494241725795`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 1.*^6}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.4995775028791808}, {
                    4.0943445622221, 0.4489636718053348}, {4.0943445622221, 
                    0.4489636718053348}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.2784690357609234`}}, {{
                    4.0943445622221, 1.1878914008359116`}}, {{4.0943445622221,
                     1.1878914008359116`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 1.*^-6}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 1.2202071742919258`}}, {{
                    4.0943445622221, 0.6041090353286325}}, {{4.0943445622221, 
                    0.6041090353286325}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.1}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.4730362496906107}}, {{
                    4.0943445622221, 0.4632128659973936}}, {{4.0943445622221, 
                    0.4632128659973936}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 1000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.4728436488605369}}, {{
                    4.0943445622221, 0.4641940498855745}}, {{4.0943445622221, 
                    0.4641940498855745}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.4728245190534675}}, {{
                    4.0943445622221, 0.4642948364995954}}, {{4.0943445622221, 
                    0.4642948364995954}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 100000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 2.9178101825166456`}}, {{
                    4.0943445622221, 1.099277298631216}}, {{4.0943445622221, 
                    1.099277298631216}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.00001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 2.5380167924556702`}}, {{
                    4.0943445622221, 1.1774017425514594`}}, {{4.0943445622221,
                     1.1774017425514594`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.0001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 1.752218567275332}}, {{4.0943445622221,
                     0.7955251549542885}}, {{4.0943445622221, 
                    0.7955251549542885}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.01}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.47282260739310095`}}, {{
                    4.0943445622221, 0.46430494241725795`}}, {{
                    4.0943445622221, 0.46430494241725795`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 1.*^6}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.4995775028791808}}, {{
                    4.0943445622221, 0.4489636718053348}}, {{4.0943445622221, 
                    0.4489636718053348}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-2.178060225738475, 0.22753881954835684`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-2.178060225738475, 4.31748811353631}, {
                    0.22753881954835684`, 3.2784690357609234`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, -1], 
                    Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, 
                    Plus[1]], Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                  ImageSizeCache->{330., {120., 126.}}],
                 DynamicModuleValues:>{}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> 
           ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  MachineLearning`MLInformationObject[
   ClassifierFunction[<|
    "ExampleNumber" -> 75, "ClassNumber" -> 5, 
     "Input" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|
           "Elevation" -> <|"Type" -> "Numerical"|>, 
            "GICS Sector Name" -> <|"Type" -> "Nominal"|>, 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Disclosure" -> <|"Type" -> "Text"|>, 
            "Revenue (USD mn)" -> <|"Type" -> "Numerical"|>|>, 
          "Output" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
            "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["FromDataset"], 
               MachineLearning`MLProcessor[
               "FromNamedFeatures", <|
                "FeatureNames" -> {
                  "Elevation", "GICS Sector Name", 
                   "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                   "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                   "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                   "Carbon Disclosure", "Revenue (USD mn)"}|>], 
               MachineLearning`MLProcessor[
               "Transpose", <|"FeatureNumber" -> 7|>], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {
                  "Numerical", "Nominal", "Numerical", "Numerical", 
                   "Numerical", "Text", "Numerical"}, 
                 "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6", "f7"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          False, "Invertibility" -> "Perfect", "StructurePreserving" -> False,
           "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
            "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Output" -> <|"(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["

1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
               "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
            MachineLearning`MLProcessor[
            "SynthesizeMissingValues", <|
             "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Distribution" -> 
              LearnedDistribution[<|
                "ExampleNumber" -> 75, "Preprocessor" -> 
                 MachineLearning`MLProcessor[
                  "ToMLDataset", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>, 
                    "f6" -> <|"Type" -> "Text"|>, 
                    "f7" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                  "Processor" -> 
                 MachineLearning`MLProcessor[
                  "Sequence", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 1621909218748444882|>], 
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>, 
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2074781423290265366|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 20679206186753951|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>, <|"" -> 1|>}, 
                    "MissingCode" -> Indeterminate, "Version" -> {13.1, 0}, 
                    "ID" -> 4023015169247141483, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "LogRescaleNumericalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Indices" -> {2, 4, 5}, 
                    "Centers" -> {0.43, 23.052, 256.593674903342}, 
                    "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
                    620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
                    3527897072513609120, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {146.57391774891778`, 3.693542625490828, 
                    68.22157333333334, 3.504982149660075, 
                    1.4086804722859232`}, 
                    "StandardDeviation" -> {253.37495961794207`, 
                    3.1699732836017724`, 118.62403407631172`, 
                    2.423277341145054, 1.2610287731963699`}, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2274174826257793629|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {11, 1}|>|>, 
                    "Boundaries" -> {{-0.5, -0.40909090909090906`, \
-0.3181818181818182, -0.2272727272727273, -0.13636363636363635`, \
-0.04545454545454547, 0.045454545454545414`, 0.13636363636363635`, 
                    0.2272727272727273, 0.31818181818181823`, 
                    0.40909090909090906`, 0.5}, {-0.5, 0.5}}, 
                    "Version" -> {13.1, 0}, "ID" -> 8505008840132824157, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>, 
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
                    Span[1, 2], 
                    Span[3, 7]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {13.1, 0}, "ID" -> 
                    373596144042670943|>]}, "Invertibility" -> "Approximate", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                 "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                 Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBmQFm/iFib1JlAgAAAAcAAAAHAAAANBt6Fr3csL/lG+Yz4ESRP7hBka92
l6I/3+CsXPnbnb8juBQyj++mPyQSP5BqJYY/vak1fWbb7z9Exb6rXA+mP3bs
bygIL6y/qBWDW9y8oz+sdTB+ZCFvP+M3K7whyrK/oZKNG3/O7792PFDDUfyQ
P9/U3bojxJC/o5bbS9uw5z8WAjGjisXkP97C+Aj2NcU/OamW7DSFoj9l4xTQ
yZiTv+5YNgcGV6G/JjWbdhS247/4DI4+z4GiP+damijBtq0/AUhvWGOt0r+S
UyYwEkrnv7xCV9Xbd5o/7dmZYqsIlL+U6TKOWh/fvyeCdPr2xcm/z+izHsbw
ab/DCMuYpSLrPyWlgzDxQ68/IU0Nlm9mh79gtGMp7lp6v5IjpI1bXuO/gG3Q
78EAir9w8Q54CT+tPz6D4J3Vndm/VLWB566j5T+EcC9VEICzv/LeOJ47T7W/
77C3YnYxuz+XzXfud2fkvwL5lh2DJOg/lXZTGNvFtb8Pcd+T9BKZv2lvrRrr
CbI/A8vXaYtBiL/H/s72
                    "], 
                   "Precisions" -> {0.4602875814560013, 0.9399443097653287, 
                    1.0616808801506838`, 1.6265466434380347`, 
                    4.517522263650691, 10.595148643942485`, 
                    23.23460552022561}, "NoisePrecision" -> None, "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781967`, 0.012269055622142968`, 
                    0.0013959895289638008`, -0.0005267240067510293, \
-0.00032143499611032286`, -0.00013378352049829329`, 0.0005265431937281588}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 6648082896216031031|>], 
                   "PostProcessor" -> 
                   MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7.|>,
                     "Key" -> "((f2f6)(f1f3f4f5f7))", "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                   "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 7, "Options" -> <||>|>|>|>, 
                 "TrainingInformation" -> <|
                  "Configurations" -> 
                   Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                    "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1557841622946289758|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                   Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                 "NaiveImputer" -> 
                 MachineLearning`MLProcessor[
                  "ImputeMissing", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                    "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1557841622946289758|>], "InputDimension" -> 0, 
                 "OutputDimension" -> 7, 
                 "Log" -> <|
                  "Example" -> 
                   MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, 
                    "ID" -> 2988406535272383851|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"Information Technology"}, "ID" -> 
                    8211126643196690843|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369},
                     "ID" -> 220143977676884624|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {23.778}, "ID" -> 8845109505593024510|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {100.249}, "ID" -> 827490798644983815|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 4409963340497863227|>, 
                    "f7" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {256.9105}, "ID" -> 5236914127772614391|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                   "TrainingTime" -> 0.078606, "MaxTrainingMemory" -> 5319392,
                    "DataMemory" -> 22976, "FunctionMemory" -> 86128, 
                   "LanguageVersion" -> {13.1, 0}, "Date" -> 
                   DateObject[{
                    2022, 12, 4, 14, 23, 22.270712`8.100309084914047}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, 
                   "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                 "LogPDFDistribution" -> 
                 MachineLearning`TailedQuantileDistribution[<|
                   "Quantiles" -> {-7.173238193477166, -7.173238193477166, \
-5.957762682813879, -5.505343391085791, -5.137053644875943, \
-4.839361849432994, -4.800994757869588, -4.736339520600383, \
-4.720994010399741, -4.71905825007799, -4.703766525124256}, 
                    "LeftBoundary" -> -5.957762682813879, "LeftScale" -> 
                    0.6077377553316436, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                 Around[36.60573897803041, 1.772055230348638], 
                 "EntropySampleSize" -> 10|>], 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
              "ID" -> 8833432794738512184|>], 
            MachineLearning`MLProcessor[
            "Threads", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>, 
                "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 8812518305512619507|>], 
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 7405342354547017736|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
              "Missing" -> "Allowed"|>], 
            MachineLearning`MLProcessor[
            "LogRescaleNumericalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
              "Indices" -> {2, 4, 5}, 
              "Centers" -> {0.43, 23.052, 256.593674903342}, 
              "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
               620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
              7299988401548215772, 
              "Output" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
            MachineLearning`MLProcessor[
            "Standardize", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
              "Mean" -> {146.57391774891778`, 3.693542625490828, 
               68.22157333333334, 3.504982149660075, 1.4086804722859232`}, 
              "StandardDeviation" -> {253.37495961794207`, 
               3.1699732836017724`, 118.62403407631172`, 2.423277341145054, 
               1.2610287731963699`}, 
              "Output" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 1400194064660864776|>], 
            MachineLearning`MLProcessor[
            "ToLowerCase", <|
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 3080611390123234620, 
              "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
            
            MachineLearning`MLProcessor[
            "RemoveDiacritics", <|
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 8393247813432535084, 
              "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
            
            MachineLearning`MLProcessor[
            "Threads", <|
             "Input" -> <|
               "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
                "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "EmbedNominalVector", <|
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>}, 
                  "Output" -> <|
                   "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>|>, 
                  "EmbeddingVectors" -> CompressedData["
1:eJxTTMoPSmVmYGBgBGIeIGZlwAANaDSyuINV5XF7IP0gJG/3fiC9wNDnNIjf
ICJ2FcR/IHn3Poi/gM/rKZgf6n8QrC7ZZSuIdtjqegMk77C36wKYvzLrFVje
m+cMWP3c+/vBtN3JS2D6yeWLYPkZKy+D+S8/gO0/YOZ2E2wP0+lLIJrBWOIc
WPzO1IcgdQ2LGjeB3TUp+SKYVtMFuy+h+e8TEH0gZu8JsL6j5o/B5gcFgd1z
QGXZU7D77ga+BKv/OBtsr0L9dYg7eOPvguXTp10Gm/vmJDgcFDacBZvv4HF9
Ith+wUiwvgajkndgfdOYHoHDbXHBcxCdECkFdndCbOtXsD9uJB4Bq1v48ybY
HTsegP3PYPvzEVi8+NYWsHv2tz0Em2N16SiY72lzDWzP1gO3wPoMs46A5BW2
L5wMlt+n82o/AO0BofY=
                   "], "Version" -> {13.1, 0}, "ID" -> 436956950344966148|>], 
                
                MachineLearning`MLProcessor[
                "Sequence", <|
                 "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Processors" -> {
                    MachineLearning`MLProcessor[
                    "TextToNominalSequence", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {13.1, 0}, "ID" -> 9037232907786629142, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", <|
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> {-9125122986955958911, \
-8920710729279180450, -8515397617198652367, -8156047279148961366, \
-5900137721653868194, -5516340669880835636, -4691435917638705529, \
-4484112905383790136, -3872414778415116274, -3607098371778122975, \
-3443150737398804539, -3355080348777836050, -2509905740948760720, \
-2159536488856785732, 242552411836269492, 450553210381435687, 
                    539691877398804025, 950421020428451240, 
                    1561895621580759179, 1579009397565082067, 
                    1671416204203290022, 2799484578252825308, 
                    3287432777910049379, 3477167097823690523, 
                    3576478456825362866, 4539722962543247872, 
                    5070765454536077049, 5138905625963890559, 
                    6058376361354581924, 6694985464746702812, 
                    6748311694457965250, 7603334142034012365, 
                    7731804819316663270, 8918825649307280967}, "Values" -> 
                    None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {13.1, 0}|>], 
                    "InverseDocumentFrequency" -> {1.91959284073794, 
                    3.624340932976365, 1.3217558399823195`, 
                    2.0149030205422647`, 2.0149030205422647`, 
                    2.120263536200091, 1.3217558399823195`, 
                    2.9311937524164198`, 1.2729656758128873`, 
                    1.91959284073794, 4.31748811353631, 2.120263536200091, 
                    4.31748811353631, 2.0149030205422647`, 
                    1.4842747694800942`, 2.0149030205422647`, 
                    2.120263536200091, 1.5448993912965292`, 
                    2.0149030205422647`, 1.3730491343698699`, 
                    2.0149030205422647`, 3.624340932976365, 0., 
                    0.11279549414534427`, 2.0149030205422647`, 
                    3.2188758248682006`, 1.4842747694800942`, 
                    2.9311937524164198`, 2.0149030205422647`, 
                    2.0149030205422647`, 0.5332984796180493, 
                    2.120263536200091, 4.31748811353631, 2.0149030205422647`},
                     "Version" -> {13.1, 0}, "ID" -> 7526152790873636702, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                  "Invertibility" -> "Impossible", "StructurePreserving" -> 
                  True, "Missing" -> "Forbidden"|>]}, "Invertibility" -> 
              "Impossible", "StructurePreserving" -> True, "Missing" -> 
              "Forbidden"|>], 
            MachineLearning`MLProcessor[
            "MergeVectors", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
                "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
                Span[1, 5], 
                Span[6, 39], 
                Span[40, 44]}, 
              "Wrappers" -> {Identity, SparseArray, Identity}, 
              "Output" -> <|
               "(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
                   "], "Type" -> "NumericalVector"|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 613954820935696947|>]}, 
          "Invertibility" -> "Impossible", "StructurePreserving" -> True, 
          "Missing" -> "Imputed"|>]|>, 
     "Output" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "ToVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 9119616879012754245|>], 
            MachineLearning`MLProcessor[
            "IntegerEncodeNominalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Index" -> {<|
                "A" -> 1, "B" -> 2, "C" -> 3, "D" -> 4, "E" -> 5|>}, 
              "MissingCode" -> 0, "Version" -> {13.1, 0}, "ID" -> 
              1482488055587057283, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
            MachineLearning`MLProcessor[
            "FromVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|
                 "Type" -> "NominalVector", "Weight" -> 1, 
                  "SetSize" -> {5}|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 4789940262906318728|>], 
            MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 5|>,
               "Key" -> "f1", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
       "Name" -> "class", 
       "Marginal" -> <|
        "A" -> 0.08750000000000001, "B" -> 0.2625, "C" -> 0.325, "D" -> 
         0.21250000000000002`, "E" -> 0.1125|>|>, "LabelSplitter" -> 
     MachineLearning`MLProcessor[
      "FeatureLabelSplit", <|
       "Processor" -> 
        MachineLearning`MLProcessor[
         "KeyIndexSplit", <|
          "Index" -> "Ratings", 
           "Order" -> {
            "Elevation", "GICS Sector Name", 
             "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
             "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
             "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
             "Carbon Disclosure", "Revenue (USD mn)", "Ratings"}|>], 
        "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
     "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
     "Prior" -> Automatic, "Utility" -> 
     SparseArray[
      Automatic, {5, 6}, 0., {
       1, {{0, 1, 2, 3, 4, 5}, {{2}, {3}, {4}, {5}, {6}}}, {1., 1., 1., 1., 
        1.}}], "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
     "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
     "Model" -> <|
      "LogProbabilitiesFunction" -> 
       LinearLayer[<|
         "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIFiHWAuF7Qyu57
7RPb8wkGdh2TfPetS2G06+8+ZO1fE2y9+tSyPUsX6ViDcMDlJ3vSAqP2xBW2
7HpzxG0PSE36Q2mwOIgGqXmtfHk3TO27T2/A7IaqVrAZIPOA1jFMuS8FVnsr
ZvoekHqQeTA7uvv8bEB6Ox33gPUEa7vY/ex3tNM6K7ovI3abrcIGjX0fTU7t
5bqsbvtErcPOwYlxX94Rhn3PC37bOEfk25yummkzM4jHFoTb94vavD5320Zv
CYdtm8kJG5Aao/uzd4PEQTRIDfcXWbjanLfMYHbW7vdgM0DmgdzrYyG+B8Tf
cmrqHpB6kHkwOwKOle8F6bVZeQOshin6pM2z6152kilb960+07w32Gnj3v8P
1Oy4z062jXzHZC9qsGDvfSHNfX9/s9s+/Cm4x2r+pN1RS7RtQNh+xes9SwoW
Wl9bxmdTX5dgA1Lz+N4PsDiIBqlh+70Mrjb3t5AtiG3lYLMHRIPMA7k32jAX
rGbfK+a9IPUg82B2PK0rtQXpPTPxN1iPdMosW6kNZnZvL+jtk7g1dd+mnx/s
du/9bev7v8FW0GCPre6r/fsal8jbPbRUsU1/v9LmZ0jErvbmLBsQ1lrPvvfL
18fWn2dY7G4z2m0NUrM6L3o3SBxEg9SEaSrsgak1mbUUzD60wh5Mg8wDp4dv
NmDzgqxkbEHqQebB7PgmH2ML0ptpewGsx+hIp53Kqqm7LOXf7GHh/LenRTfQ
FgDVf0xw
             "], "Biases" -> 
            RawArray["Real32",{-0.09899067133665085, 0.41835859417915344`, 
              0.5401719212532043, 0.38337385654449463`}]|>, 
          "Parameters" -> <|
           "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 44, 
            "$InputDimensions" -> {44}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{44}, NeuralNetworks`AtomT]|>, 
          "Outputs" -> <|
           "Output" -> 
            NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
         "Version" -> "13.1.4", "Unstable" -> False|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "FirstValues", <|"Info" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQBeJJKp5AdMie+4P4HVP9kwTpZRcFjBhOzxqlofScqfMF
0p++J0gDAFQ8nbU=
             "], "Type" -> "NumericalVector"|>, "Key" -> "(f2f6(f1f3f4f5f7))",
           "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
       "LogisticRegression", "PostProcessor" -> 
       MachineLearning`MLProcessor["Identity"], 
       "Options" -> <|
        "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
         "L2Regularization" -> <|"Value" -> 10., "Options" -> <||>|>, 
         "OptimizationMethod" -> <|"Value" -> "LBFGS", "Options" -> <||>|>, 
         MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
     "TrainingInformation" -> <|
      "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
       Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
       "PreprocessingTime" -> 1.069395`6.480683142703456, "LossName" -> 
       "MeanCrossEntropy", "BestModelInformation" -> 
       Dataset[<|
         "MeanCrossEntropy" -> 
          Around[1.5666877412283875`, 0.08701380463081607], "Accuracy" -> 
          Around[0.3263837789328387, 0.10424965159763006`], "EvaluationTime" -> 
          9.11720892455432*^-6, "TestSize" -> 30, "ModelMemory" -> 10944., 
          "ModelUtility" -> -1.1532017783481066`, "TrainingSize" -> 60, 
          "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
          202154.66666666666`, "ExperimentCount" -> 2, 
          "MeanCrossEntropyHistory" -> {
            Around[1.5044283963484177`, 0.07082190969902308], 
            Around[1.628947086108357, 0.11846908470932856`]}, 
          "AccuracyHistory" -> {
            Around[0.2638837789328387, 0.11248117430350343`], 
            Around[0.3888837789328387, 0.12441482134936328`]}, 
          "Configuration" -> {
           "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
            10., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
          "FinalTrainingSize" -> 75|>, 
         TypeSystem`Struct[{
          "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
           "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
           "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
           "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
          TypeSystem`AnyType, TypeSystem`AnyType, 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Vector[TypeSystem`AnyType, 2], 
           TypeSystem`Vector[TypeSystem`AnyType, 2], 
           TypeSystem`Tuple[{
             TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType}], 
           TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
       Dataset[<|<|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 1.*^-6|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[26.535117271189197`, 8.657973134855041], "Accuracy" -> 
               Around[0.23063849186250643`, 0.039686161056801963`], 
               "EvaluationTime" -> 5.390103577878153*^-6, "TestSize" -> 195, 
               "ModelMemory" -> 10944., "ModelUtility" -> -4.03487620196157, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.011294627058970835`, 
               "TrainingMemory" -> 248062., "ExperimentCount" -> 3, 
               "MeanCrossEntropyHistory" -> {
                 Around[20.965058315959872`, 2.5015773008165434`], 
                 Around[43.318160328790945`, 5.400512062514612], 
                 Around[15.322133168816773`, 1.727203179498002]}, 
               "AccuracyHistory" -> {
                 Around[0.185183946407961, 0.04805264252125852], 
                 Around[0.2760930373170519, 0.05530379367625932], 
                 Around[0.2306384918625064, 0.0521095042496065]}|>, <|
              "MeanCrossEntropy" -> 
               Around[3.280157373057965, 1.1443340308043957`], "Accuracy" -> 
               Around[0.2638837789328387, 0.15907240221166663`], 
               "EvaluationTime" -> 0.000010565954616407417`, "TestSize" -> 15,
                "ModelMemory" -> 10944, "ModelUtility" -> -1.948529340045009, 
               "TrainingSize" -> 60, "TrainingTime" -> 0.012589254117941668`, 
               "TrainingMemory" -> 202096, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[3.280157373057965, 0.8091663531243237]}, 
               "AccuracyHistory" -> {
                 Around[0.2638837789328387, 0.11248117430350343`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.000010565954616407417`, "MeanCrossEntropy" -> 
              Around[3.280157373057965, 1.1443340308043957`], "ModelMemory" -> 
              10944, "TrainingMemory" -> 202096, "TrainingTime" -> 
              0.02073656764742709|>, "Index" -> 1|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0.1|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[3.3878895445377473`, 0.20276955384317286`], "Accuracy" -> 
               Around[0.22558798681200135`, 0.03262724601779188], 
               "EvaluationTime" -> 3.268335914006237*^-6, "TestSize" -> 195, 
               "ModelMemory" -> 10944., 
               "ModelUtility" -> -1.9252977006009515`, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.009999999999999998, "TrainingMemory" -> 
               163124., "ExperimentCount" -> 3, 
               "MeanCrossEntropyHistory" -> {
                 Around[3.3687321156276413`, 0.3616141271305912], 
                 Around[3.315718449622531, 0.3272324852725308], 
                 Around[3.4792180683630685`, 0.33729593092597676`]}, 
               "AccuracyHistory" -> {
                 Around[0.20033546155947612`, 0.049512933032235605`], 
                 Around[0.2306384918625064, 0.0521095042496065], 
                 Around[0.2457900070140216, 0.05326158319695422]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.829621354488002, 0.19848783965280065`], "Accuracy" -> 
               Around[0.3263837789328387, 0.0846166551907291], 
               "EvaluationTime" -> 9.841581770480868*^-6, "TestSize" -> 30, 
               "ModelMemory" -> 10944., "ModelUtility" -> -1.318765504028398, 
               "TrainingSize" -> 60, "TrainingTime" -> 0.012589254117941668`, 
               "TrainingMemory" -> 202082.66666666666`, "ExperimentCount" -> 
               2, "MeanCrossEntropyHistory" -> {
                 Around[1.743242183056376, 0.2331652805864454], 
                 Around[1.9160005259196282`, 0.27822109092360475`]}, 
               "AccuracyHistory" -> {
                 Around[0.3263837789328387, 0.11966602137337683`], 
                 Around[0.3263837789328387, 0.11966602137337685`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 9.841581770480868*^-6, "MeanCrossEntropy" -> 
              Around[1.829621354488002, 0.19848783965280065`], "ModelMemory" -> 
              10944., "TrainingMemory" -> 202082.66666666666`, "TrainingTime" -> 
              0.01944194058845625|>, "Index" -> 2|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 1000.|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.6048595575842828`, 0.005470785982827526], "Accuracy" -> 
               Around[0.2306384918625064, 0.03468328392521391], 
               "EvaluationTime" -> 3.069634330721352*^-6, "TestSize" -> 195, 
               "ModelMemory" -> 10944., 
               "ModelUtility" -> -1.1669091402648606`, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.003981071705534968, "TrainingMemory" -> 
               103452., "ExperimentCount" -> 3, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.6043240184678498`, 0.009455868581908597], 
                 Around[1.60502581116219, 0.009464602074309098], 
                 Around[1.605228843122809, 0.009470880839040118]}, 
               "AccuracyHistory" -> {
                 Around[0.26094152216553673`, 0.05432463497587059], 
                 Around[0.20033546155947612`, 0.049512933032235605`], 
                 Around[0.2306384918625064, 0.0521095042496065]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.5891715870093148`, 0.02563392786093837], "Accuracy" -> 
               Around[0.3263837789328387, 0.10424965159763006`], 
               "EvaluationTime" -> 0.000010565954616407415`, "TestSize" -> 30,
                "ModelMemory" -> 10944., 
               "ModelUtility" -> -1.1596251004957883`, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.005011872336272719, "TrainingMemory" -> 
               150282.66666666666`, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.5878173551807269`, 0.03612796854844177], 
                 Around[1.590525818837903, 0.036274927111717474`]}, 
               "AccuracyHistory" -> {
                 Around[0.2638837789328387, 0.11248117430350343`], 
                 Around[0.3888837789328387, 0.12441482134936328`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.000010565954616407415`, "MeanCrossEntropy" -> 
              Around[1.5891715870093148`, 0.02563392786093837], "ModelMemory" -> 
              10944., "TrainingMemory" -> 150282.66666666666`, "TrainingTime" -> 
              0.007739975957739508|>, "Index" -> 3|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 10000.|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.604550490065626, 0.005458177973681336], "Accuracy" -> 
               Around[0.2306384918625064, 0.03468328392521391], 
               "EvaluationTime" -> 2.9526673582310326`*^-6, "TestSize" -> 195,
                "ModelMemory" -> 10944., 
               "ModelUtility" -> -1.1667151000899634`, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.003981071705534968, "TrainingMemory" -> 
               99384., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                 Around[1.6044967808273711`, 0.009453242485012201], 
                 Around[1.6045671347952117`, 0.009453853577591832], 
                 Around[1.6045875545742956`, 0.009454068880334263]}, 
               "AccuracyHistory" -> {
                 Around[0.26094152216553673`, 0.05432463497587059], 
                 Around[0.20033546155947612`, 0.049512933032235605`], 
                 Around[0.2306384918625064, 0.0521095042496065]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.5907316217813783`, 0.02557974876286342], "Accuracy" -> 
               Around[0.3263837789328387, 0.10424965159763006`], 
               "EvaluationTime" -> 9.11720892455432*^-6, "TestSize" -> 30, 
               "ModelMemory" -> 10944., 
               "ModelUtility" -> -1.1605963392983465`, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.005011872336272719, "TrainingMemory" -> 
               142248., "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.590594162743537, 0.03616999372143662], 
                 Around[1.5908690808192194`, 0.03617941872099356]}, 
               "AccuracyHistory" -> {
                 Around[0.2638837789328387, 0.11248117430350343`], 
                 Around[0.3888837789328387, 0.12441482134936328`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 9.11720892455432*^-6, "MeanCrossEntropy" -> 
              Around[1.5907316217813783`, 0.02557974876286342], "ModelMemory" -> 
              10944., "TrainingMemory" -> 142248., "TrainingTime" -> 
              0.007739975957739508|>, "Index" -> 4|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 100000.|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.6045197956179083`, 0.005457919295674566], "Accuracy" -> 
               Around[0.2306384918625064, 0.03468328392521391], 
               "EvaluationTime" -> 2.9118000528337493`*^-6, "TestSize" -> 195,
                "ModelMemory" -> 10944., 
               "ModelUtility" -> -1.1666959510262793`, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.003981071705534968, "TrainingMemory" -> 
               95372., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                 Around[1.6045144231441841`, 0.009453347573708878], 
                 Around[1.6045214602897955`, 0.009453406023799817], 
                 Around[1.6045235034197454`, 0.009453423373663358]}, 
               "AccuracyHistory" -> {
                 Around[0.26094152216553673`, 0.05432463497587059], 
                 Around[0.20033546155947612`, 0.049512933032235605`], 
                 Around[0.2306384918625064, 0.0521095042496065]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.5908919543149045`, 0.025582453029149767`], "Accuracy" -> 
               Around[0.3263837789328387, 0.10424965159763006`], 
               "EvaluationTime" -> 8.392836078627772*^-6, "TestSize" -> 30, 
               "ModelMemory" -> 10944., 
               "ModelUtility" -> -1.1606971409824094`, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.003981071705534968, "TrainingMemory" -> 
               136320., "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.5908781876643363`, 0.03617860303158499], 
                 Around[1.5909057209654727`, 0.03617949057311883]}, 
               "AccuracyHistory" -> {
                 Around[0.2638837789328387, 0.11248117430350343`], 
                 Around[0.3888837789328387, 0.12441482134936328`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 8.392836078627772*^-6, "MeanCrossEntropy" -> 
              Around[1.5908919543149045`, 0.025582453029149767`], 
              "ModelMemory" -> 10944., "TrainingMemory" -> 136320., 
              "TrainingTime" -> 0.006966875484686195|>, "Index" -> 5|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0.00001|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[18.500729847395085`, 4.05780319759733], "Accuracy" -> 
               Around[0.21548697671099123`, 0.03715332597785244], 
               "EvaluationTime" -> 3.069634330721352*^-6, "TestSize" -> 195, 
               "ModelMemory" -> 10944., "ModelUtility" -> -3.653933051366986, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.009999999999999998, 
               "TrainingMemory" -> 163126., "ExperimentCount" -> 3, 
               "MeanCrossEntropyHistory" -> {
                 Around[16.790571332996176`, 1.9754412009349218`], 
                 Around[25.96193749939603, 3.225376128292394], 
                 Around[12.749680709793056`, 1.4291058034030009`]}, 
               "AccuracyHistory" -> {
                 Around[0.17003243125644577`, 0.04647102622286553], 
                 Around[0.2457900070140216, 0.05326158319695422], 
                 Around[0.2306384918625064, 0.0521095042496065]}|>, <|
              "MeanCrossEntropy" -> 
               Around[3.0019956933937664`, 0.5299576489563296], "Accuracy" -> 
               Around[0.2951337789328387, 0.08771413225544569], 
               "EvaluationTime" -> 0.000011477885999758008`, "TestSize" -> 30,
                "ModelMemory" -> 10944., 
               "ModelUtility" -> -1.8271666753027471`, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.09212238379561377, "TrainingMemory" -> 
               328896., "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[3.2769360183972256`, 0.8080861115771483], 
                 Around[2.7270553683903067`, 0.547141730616534]}, 
               "AccuracyHistory" -> {
                 Around[0.2638837789328387, 0.11248117430350343`], 
                 Around[0.3263837789328387, 0.11966602137337683`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.000011477885999758008`, "MeanCrossEntropy" -> 
              Around[3.0019956933937664`, 0.5299576489563296], "ModelMemory" -> 
              10944., "TrainingMemory" -> 328896., "TrainingTime" -> 
              0.07909178784671032|>, "Index" -> 6|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0.0001|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[12.654549470513183`, 1.742975023293482], "Accuracy" -> 
               Around[0.23063849186250643`, 0.03968616105680196], 
               "EvaluationTime" -> 3.069634330721352*^-6, "TestSize" -> 195, 
               "ModelMemory" -> 10944., 
               "ModelUtility" -> -3.2583825562600324`, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.009999999999999998, "TrainingMemory" -> 
               163278., "ExperimentCount" -> 3, 
               "MeanCrossEntropyHistory" -> {
                 Around[12.205687519728045`, 1.4346302514792404`], 
                 Around[15.528842556645754`, 1.8717768654755504`], 
                 Around[10.22911833516575, 1.136441996554475]}, 
               "AccuracyHistory" -> {
                 Around[0.185183946407961, 0.04805264252125852], 
                 Around[0.2760930373170519, 0.05530379367625931], 
                 Around[0.2306384918625064, 0.0521095042496065]}|>, <|
              "MeanCrossEntropy" -> 
               Around[3.245929476414228, 1.128012373302725], "Accuracy" -> 
               Around[0.2638837789328387, 0.15907240221166663`], 
               "EvaluationTime" -> 8.392836078627774*^-6, "TestSize" -> 15, 
               "ModelMemory" -> 10944, "ModelUtility" -> -1.937787331657839, 
               "TrainingSize" -> 60, "TrainingTime" -> 0.012589254117941668`, 
               "TrainingMemory" -> 201856, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[3.245929476414228, 0.797625198424688]}, 
               "AccuracyHistory" -> {
                 Around[0.2638837789328387, 0.11248117430350343`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 8.392836078627774*^-6, "MeanCrossEntropy" -> 
              Around[3.245929476414228, 1.128012373302725], "ModelMemory" -> 
              10944, "TrainingMemory" -> 201856, "TrainingTime" -> 
              0.01944194058845625|>, "Index" -> 7|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0.01|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[5.767383821858778, 0.38634922053225734`], "Accuracy" -> 
               Around[0.21043647166048618`, 0.03194332472573996], 
               "EvaluationTime" -> 3.268335914006237*^-6, "TestSize" -> 195, 
               "ModelMemory" -> 10944., "ModelUtility" -> -2.458718685666341, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.009999999999999998, 
               "TrainingMemory" -> 163300., "ExperimentCount" -> 3, 
               "MeanCrossEntropyHistory" -> {
                 Around[5.922565878261294, 0.6750739816238336], 
                 Around[5.858507339446731, 0.6481978648206899], 
                 Around[5.521078247868309, 0.5870293349606124]}, 
               "AccuracyHistory" -> {
                 Around[0.185183946407961, 0.04805264252125852], 
                 Around[0.21548697671099123`, 0.05086234885200064], 
                 Around[0.2306384918625064, 0.0521095042496065]}|>, <|
              "MeanCrossEntropy" -> 
               Around[2.2156042268758096`, 0.2870668453121275], "Accuracy" -> 
               Around[0.3576337789328387, 0.09173353981284965], 
               "EvaluationTime" -> 8.392836078627772*^-6, "TestSize" -> 30, 
               "ModelMemory" -> 10944., 
               "ModelUtility" -> -1.5142996367893848`, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
               202029.3333333333, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[2.259291740189574, 0.43257551725637045`], 
                 Around[2.171916713562045, 0.3758646850635364]}, 
               "AccuracyHistory" -> {
                 Around[0.3263837789328387, 0.11966602137337683`], 
                 Around[0.3888837789328387, 0.12441482134936328`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 8.392836078627772*^-6, "MeanCrossEntropy" -> 
              Around[2.2156042268758096`, 0.2870668453121275], "ModelMemory" -> 
              10944., "TrainingMemory" -> 202029.3333333333, "TrainingTime" -> 
              0.01944194058845625|>, "Index" -> 8|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 1.*^6|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.6045167283239394`, 0.005457903538395823], "Accuracy" -> 
               Around[0.2306384918625064, 0.03468328392521391], 
               "EvaluationTime" -> 3.069634330721352*^-6, "TestSize" -> 195, 
               "ModelMemory" -> 10944., 
               "ModelUtility" -> -1.1666940388606215`, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.0035716746828516745`, "TrainingMemory" -> 
               91680., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                 Around[1.6045161910610761`, 0.00945336177601239], 
                 Around[1.6045168947931268`, 0.009453367594394415], 
                 Around[1.6045170991176156`, 0.009453369287525553]}, 
               "AccuracyHistory" -> {
                 Around[0.26094152216553673`, 0.05432463497587059], 
                 Around[0.20033546155947612`, 0.049512933032235605`], 
                 Around[0.2306384918625064, 0.0521095042496065]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.5909080318192437`, 0.02558280762959719], "Accuracy" -> 
               Around[0.3263837789328387, 0.10424965159763006`], 
               "EvaluationTime" -> 9.11720892455432*^-6, "TestSize" -> 30, 
               "ModelMemory" -> 10944., 
               "ModelUtility" -> -1.1607072596624772`, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.003981071705534968, "TrainingMemory" -> 
               136138.66666666666`, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.5909066549462547`, 0.03617950935986536], 
                 Around[1.5909094086922326`, 0.036179597562214005`]}, 
               "AccuracyHistory" -> {
                 Around[0.2638837789328387, 0.11248117430350343`], 
                 Around[0.3888837789328387, 0.12441482134936328`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 9.11720892455432*^-6, "MeanCrossEntropy" -> 
              Around[1.5909080318192437`, 0.02558280762959719], "ModelMemory" -> 
              10944., "TrainingMemory" -> 136138.66666666666`, "TrainingTime" -> 
              0.006557478462002901|>, "Index" -> 9|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 10.|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.6480248378410225`, 0.025539539605956094`], "Accuracy" -> 
               Around[0.2356889969130115, 0.031908312025445515`], 
               "EvaluationTime" -> 2.9118000528337493`*^-6, "TestSize" -> 195,
                "ModelMemory" -> 10944., 
               "ModelUtility" -> -1.1958634667648242`, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
               158224., "ExperimentCount" -> 3, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.6096019851204109`, 0.025127647278925], 
                 Around[1.6651301891296466`, 0.02962562940724877], 
                 Around[1.66934233927301, 0.034782117985048135`]}, 
               "AccuracyHistory" -> {
                 Around[0.24579000701402162`, 0.053261583196954246`], 
                 Around[0.21548697671099126`, 0.050862348852000645`], 
                 Around[0.2457900070140216, 0.053261583196954204`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.5666877412283875`, 0.08701380463081607], "Accuracy" -> 
               Around[0.3263837789328387, 0.10424965159763006`], 
               "EvaluationTime" -> 9.11720892455432*^-6, "TestSize" -> 30, 
               "ModelMemory" -> 10944., 
               "ModelUtility" -> -1.1532017783481066`, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
               202154.66666666666`, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.5044283963484177`, 0.07082190969902308], 
                 Around[1.628947086108357, 0.11846908470932856`]}, 
               "AccuracyHistory" -> {
                 Around[0.2638837789328387, 0.11248117430350343`], 
                 Around[0.3888837789328387, 0.12441482134936328`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 9.11720892455432*^-6, "MeanCrossEntropy" -> 
              Around[1.5666877412283875`, 0.08701380463081607], "ModelMemory" -> 
              10944., "TrainingMemory" -> 202154.66666666666`, "TrainingTime" -> 
              0.017385222935699066`|>, "Index" -> 10|>|>, 
         TypeSystem`Assoc[
          TypeSystem`Struct[{"Value", "Options"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["LogisticRegression"]], 
            TypeSystem`Assoc[TypeSystem`AnyType, 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
          
          TypeSystem`Struct[{
           "Experiments", "PredictedPerformances", "Index"}, {
            TypeSystem`Tuple[{
              
              TypeSystem`Struct[{
               "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime",
                 "TrainingMemory", "ExperimentCount", 
                "MeanCrossEntropyHistory", "AccuracyHistory"}, {
               TypeSystem`AnyType, TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Vector[TypeSystem`AnyType, 3], 
                TypeSystem`Vector[TypeSystem`AnyType, 3]}], 
              
              TypeSystem`Struct[{
               "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime",
                 "TrainingMemory", "ExperimentCount", 
                "MeanCrossEntropyHistory", "AccuracyHistory"}, {
               TypeSystem`AnyType, TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                TypeSystem`Vector[
                TypeSystem`AnyType, TypeSystem`AnyLength]}]}], 
            
            TypeSystem`Struct[{
             "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
              "TrainingMemory", "TrainingTime"}, {
              TypeSystem`Atom[Real], TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real]}], 
            TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 75, 
       "PreprocessorEvaluationTime" -> 2.12109375*^-6, "PreprocessorMemory" -> 
       178720, "InputDimension" -> 44, "OutputDimension" -> 1, 
       "BaselineLogProbability" -> -1.504445381309891, "VariableBudget" -> 
       True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
       False, "NaturalStop" -> True, "AbortStop" -> False, 
       "LastReportingTime" -> 3.879152603174341`16.341311853939935*^9, 
       "RoundPartitioning" -> 
       Dataset[{<|
          "TrainingSizes" -> 10, "TimeBudgets" -> 0.27999999999999997`, 
           "ElapsedTimes" -> 0.284132, "ExperimentCounts" -> 30|>, <|
          "TrainingSizes" -> 60, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
           0.47883800000000004`, "ExperimentCounts" -> 18|>}, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
            "ExperimentCounts"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 2], <||>]|>, "AnomalyDetector" -> 
     None, "Log" -> <|
      "Example" -> 
       MachineLearning`MLDataset[<|
         "f1" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, "ID" -> 
            3795572968267006573|>, 
          "f2" -> <|
           "Type" -> "Nominal", "Weight" -> 1, 
            "Values" -> {"Information Technology"}, "ID" -> 
            3401139331922032727|>, 
          "f3" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369}, "ID" -> 
            4714656301856831657|>, 
          "f4" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {23.778}, "ID" -> 
            4624390425862832796|>, 
          "f5" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {100.249}, "ID" -> 
            8583462845398299564|>, 
          "f6" -> <|
           "Type" -> "Text", "Weight" -> 1, "Values" -> {"Estimated data"}, 
            "ID" -> 3095956687388126824|>, 
          "f7" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {256.9105}, "ID" -> 
            1111199487588034056|>|>, <|
         "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0,
           "RawExample" -> False|>], "TrainingTime" -> 1.027943, 
       "MaxTrainingMemory" -> 15488400, "DataMemory" -> 118040, 
       "FunctionMemory" -> 344296, "LanguageVersion" -> {13.1, 0}, "Date" -> 
       DateObject[{2022, 12, 4, 14, 23, 23.199657`8.118056546910791}, 
         "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, "ProcessorType" -> 
       "ARM64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
       "Evaluations" -> {}|>|>]]]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, 3.878806970579384*^9, 
   3.878811612125744*^9, 3.8791490036985493`*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"bc87a0b7-95df-4db9-95b8-03f098b45676"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"cm", " ", "=", 
    RowBox[{"ClassifierMeasurements", "[", 
     RowBox[{"cRisk", ",", "testset"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Test", " ", "our", " ", "classifier", " ", "on", " ", "the", " ", "test", 
    " ", "set"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<The accuracy is: \>\"", ",", 
    RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}], " ", "]"}], 
  RowBox[{"(*", 
   RowBox[{
   "Plot", " ", "the", " ", "accuracy", " ", "of", " ", "our", " ", "model"}],
    "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"AccuracyAss", " ", "=", " ", 
   RowBox[{"Append", "[", 
    RowBox[{"AccuracyAss", ",", " ", 
     RowBox[{"\"\<LogisticRegression\>\"", "->", 
      RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Plot", " ", "the", " ", "Confusion", " ", "Matrix"}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.878619179671941*^9, 3.8786191833045883`*^9}, {
   3.8786192222213593`*^9, 3.878619249704307*^9}, {3.878619342065884*^9, 
   3.878619346687873*^9}, {3.878619378625424*^9, 3.8786193862338676`*^9}, 
   3.878805729554159*^9, 3.878805819596631*^9, {3.878806143346759*^9, 
   3.878806195391272*^9}, {3.878806763106118*^9, 3.878806811062291*^9}, {
   3.878806841172628*^9, 3.878806863962813*^9}, 3.8788069741147137`*^9},
 CellLabel->"In[54]:=",ExpressionUUID->"f50b7281-5b28-4bee-886b-6e43d141e559"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"The accuracy is: \"\>", "\[InvisibleSpace]", 
   "0.47368421052631576`"}],
  SequenceForm["The accuracy is: ", 0.47368421052631576`],
  Editable->False]], "Print",
 CellChangeTimes->{3.878806864557898*^9, 3.878806978447228*^9, 
  3.878811616421514*^9, 3.8791490567506323`*^9},
 CellLabel->
  "During evaluation of \
In[54]:=",ExpressionUUID->"504c4b6c-4f9f-4e9f-8fda-836c73daa707"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBghWIQGwI+2KPTrvqt09ZMfmuvVzFlnt2iV/YbKteU2bo/
wimOyxxS6cFmL0z+YZXIOveHt+wZUADl9tZacxqv+fzaPunziUeb9jy2z4k6
ul3i6z6c4tQKB1qHJwDexapH
   "], {{0, 0}, {5, 5}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.14285714285714285`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "A", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.14285714285714285`}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "3", "\" examples of \"", "\"B\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.42857142857142855`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.42857142857142855`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.42857142857142855`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{3, " examples of ", "B", " correctly classified"}], 
         Row[{"Precision = ", 0.42857142857142855`}], 
         Row[{"Recall = ", 0.42857142857142855`}], 
         Row[{"FScore = ", 0.42857142857142855`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.14285714285714285`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.14285714285714285`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "C", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.14285714285714285`}], 
         Row[{"Row fraction = ", 0.14285714285714285`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.14285714285714285`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.5`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "D", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.14285714285714285`}], 
         Row[{"Row fraction = ", 0.5}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.14285714285714285`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.5`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "E", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.14285714285714285`}], 
         Row[{"Row fraction = ", 0.5}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "3", "\" examples of \"", "\"B\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.2727272727272727`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.42857142857142855`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{3, " examples of ", "B", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.2727272727272727}], 
         Row[{"Row fraction = ", 0.42857142857142855`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "6", "\" examples of \"", "\"C\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.5454545454545454`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.8571428571428571`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.6666666666666665`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{6, " examples of ", "C", " correctly classified"}], 
         Row[{"Precision = ", 0.5454545454545454}], 
         Row[{"Recall = ", 0.8571428571428571}], 
         Row[{"FScore = ", 0.6666666666666665}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.09090909090909091`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.5`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "D", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.09090909090909091}], 
         Row[{"Row fraction = ", 0.5}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.09090909090909091`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.5`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "E", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.09090909090909091}], 
         Row[{"Row fraction = ", 0.5}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.14285714285714285`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "B", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 1.}], 
         Row[{"Row fraction = ", 0.14285714285714285`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 4.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" of class \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " of class ", "A"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 3.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "7", "\" example\"", "\"s\"", "\" of class \"", "\"B\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.42857142857142855`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{7, " example", "s", " of class ", "B"}], 
        Row[{"Recall = ", 0.42857142857142855`}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "7", "\" example\"", "\"s\"", "\" of class \"", "\"C\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.8571428571428571`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{7, " example", "s", " of class ", "C"}], 
        Row[{"Recall = ", 0.8571428571428571}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "2", "\" example\"", "\"s\"", "\" of class \"", "\"D\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{2, " example", "s", " of class ", "D"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "2", "\" example\"", "\"s\"", "\" of class \"", "\"E\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{2, " example", "s", " of class ", "E"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "A"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "7", "\" example\"", "\"s\"", "\" classified as \"", "\"B\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.42857142857142855`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{7, " example", "s", " classified as ", "B"}], 
        Row[{"Precision = ", 0.42857142857142855`}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "11", "\" example\"", "\"s\"", "\" classified as \"", "\"C\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.5454545454545454`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{11, " example", "s", " classified as ", "C"}], 
        Row[{"Precision = ", 0.5454545454545454}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" classified as \"", "\"D\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " classified as ", "D"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"E\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "E"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{4.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 0.], TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 0.], TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 0.], TraditionalForm]}}, {{4.5, 
       FormBox["1", TraditionalForm]}, {3.5, 
       FormBox["7", TraditionalForm]}, {2.5, 
       FormBox["7", TraditionalForm]}, {1.5, 
       FormBox["2", TraditionalForm]}, {0.5, 
       FormBox["2", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["7", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["11", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->13,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->228.,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{
  3.878619184460875*^9, 3.878619347255011*^9, 3.878619387156837*^9, 
   3.878715848704851*^9, {3.878715890521706*^9, 3.8787158953838463`*^9}, {
   3.878805538696899*^9, 3.878805553604134*^9}, 3.878806818221781*^9, 
   3.878806864604879*^9, 3.878806978492092*^9, 3.878811616470173*^9, 
   3.87914905680276*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"274d7e19-81e4-4c66-8270-10b2508d89c5"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Gradient Boosted Trees", "Subsubsection",
 CellChangeTimes->{{3.878805416699134*^9, 3.878805417721744*^9}, {
  3.8788070078065643`*^9, 
  3.8788070120756893`*^9}},ExpressionUUID->"f53d6bbd-1785-4c17-836e-\
57829fcc4856"],

Cell["\<\
Train a classifier using an ensemble of trees trained with gradient boosting\
\>", "Text",
 CellChangeTimes->{{3.878805704170437*^9, 3.8788057223306637`*^9}, {
  3.878805766632689*^9, 3.87880578974465*^9}, {3.8788070203973217`*^9, 
  3.878807022066434*^9}},ExpressionUUID->"032cc1ba-9cd4-4b67-9266-\
120a6c713934"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cRisk", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainingset", "->", "\"\<Ratings\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<GradientBoostedTrees\>\""}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Information", "[", "cRisk", "]"}]}], "Input",
 CellChangeTimes->{{3.8786185865414057`*^9, 3.878618597824006*^9}, {
  3.878618646892776*^9, 3.878618648994371*^9}, {3.878618877270843*^9, 
  3.878618880432907*^9}, {3.878618998083866*^9, 3.878619004451974*^9}, {
  3.8786191510115213`*^9, 3.878619159945651*^9}, {3.8786192237272882`*^9, 
  3.878619223941098*^9}, {3.878806999046287*^9, 3.878807004148501*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"bfdaded8-2093-4087-9ae1-340f7ee79d36"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"A\"", "\"B\"", "\"C\"", "\"D\"", "\"E\""},
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"A\"", "\"B\"", "\"C\"", "\"D\"", "\"E\""},
                    "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["75", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 75, "ClassNumber" -> 5, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "Elevation" -> <|"Type" -> "Numerical"|>, 
           "GICS Sector Name" -> <|"Type" -> "Nominal"|>, 
           "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Disclosure" -> <|"Type" -> "Text"|>, 
           "Revenue (USD mn)" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
           "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|
               "FeatureNames" -> {
                 "Elevation", "GICS Sector Name", 
                  "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                  "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                  "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                  "Carbon Disclosure", "Revenue (USD mn)"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 7|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Numerical", "Nominal", "Numerical", "Numerical", 
                  "Numerical", "Text", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6", "f7"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
           "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|"(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
              "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 75, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>, 
                    "f6" -> <|"Type" -> "Text"|>, 
                    "f7" -> <|"Type" -> "Numerical"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 1621909218748444882|>], 
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>, 
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2074781423290265366|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 20679206186753951|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>, <|"" -> 1|>}, 
                    "MissingCode" -> Indeterminate, "Version" -> {13.1, 0}, 
                    "ID" -> 4023015169247141483, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "LogRescaleNumericalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Indices" -> {2, 4, 5}, 
                    "Centers" -> {0.43, 23.052, 256.593674903342}, 
                    "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
                    620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
                    3527897072513609120, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {146.57391774891778`, 3.693542625490828, 
                    68.22157333333334, 3.504982149660075, 
                    1.4086804722859232`}, 
                    "StandardDeviation" -> {253.37495961794207`, 
                    3.1699732836017724`, 118.62403407631172`, 
                    2.423277341145054, 1.2610287731963699`}, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2274174826257793629|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {11, 1}|>|>, 
                    "Boundaries" -> {{-0.5, -0.40909090909090906`, \
-0.3181818181818182, -0.2272727272727273, -0.13636363636363635`, \
-0.04545454545454547, 0.045454545454545414`, 0.13636363636363635`, 
                    0.2272727272727273, 0.31818181818181823`, 
                    0.40909090909090906`, 0.5}, {-0.5, 0.5}}, 
                    "Version" -> {13.1, 0}, "ID" -> 8505008840132824157, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>, 
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
                    Span[1, 2], 
                    Span[3, 7]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {13.1, 0}, "ID" -> 
                    373596144042670943|>]}, "Invertibility" -> "Approximate", 
                   "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBmQFm/iFib1JlAgAAAAcAAAAHAAAANBt6Fr3csL/lG+Yz4ESRP7hBka92
l6I/3+CsXPnbnb8juBQyj++mPyQSP5BqJYY/vak1fWbb7z9Exb6rXA+mP3bs
bygIL6y/qBWDW9y8oz+sdTB+ZCFvP+M3K7whyrK/oZKNG3/O7792PFDDUfyQ
P9/U3bojxJC/o5bbS9uw5z8WAjGjisXkP97C+Aj2NcU/OamW7DSFoj9l4xTQ
yZiTv+5YNgcGV6G/JjWbdhS247/4DI4+z4GiP+damijBtq0/AUhvWGOt0r+S
UyYwEkrnv7xCV9Xbd5o/7dmZYqsIlL+U6TKOWh/fvyeCdPr2xcm/z+izHsbw
ab/DCMuYpSLrPyWlgzDxQ68/IU0Nlm9mh79gtGMp7lp6v5IjpI1bXuO/gG3Q
78EAir9w8Q54CT+tPz6D4J3Vndm/VLWB566j5T+EcC9VEICzv/LeOJ47T7W/
77C3YnYxuz+XzXfud2fkvwL5lh2DJOg/lXZTGNvFtb8Pcd+T9BKZv2lvrRrr
CbI/A8vXaYtBiL/H/s72
                   "], 
                  "Precisions" -> {0.4602875814560013, 0.9399443097653287, 
                   1.0616808801506838`, 1.6265466434380347`, 
                   4.517522263650691, 10.595148643942485`, 23.23460552022561},
                   "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781967`, 0.012269055622142968`, 
                    0.0013959895289638008`, -0.0005267240067510293, \
-0.00032143499611032286`, -0.00013378352049829329`, 0.0005265431937281588}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 6648082896216031031|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7.|>,
                     "Key" -> "((f2f6)(f1f3f4f5f7))", "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 7, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                    "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1557841622946289758|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                   "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                   "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 7, 
                   "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   1557841622946289758|>], "InputDimension" -> 0, 
                "OutputDimension" -> 7, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, 
                    "ID" -> 2988406535272383851|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"Information Technology"}, "ID" -> 
                    8211126643196690843|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369},
                     "ID" -> 220143977676884624|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {23.778}, "ID" -> 8845109505593024510|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {100.249}, "ID" -> 827490798644983815|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 4409963340497863227|>, 
                    "f7" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {256.9105}, "ID" -> 5236914127772614391|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.070775, "MaxTrainingMemory" -> 220000, 
                  "DataMemory" -> 22976, "FunctionMemory" -> 86128, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 12, 4, 14, 25, 5.798145`7.515864059786618}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, 
                  "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-7.173238193477166, -7.173238193477166, \
-5.957762682813879, -5.505343391085791, -5.137053644875943, \
-4.839361849432994, -4.800994757869588, -4.736339520600383, \
-4.720994010399741, -4.71905825007799, -4.703766525124256}, 
                   "LeftBoundary" -> -5.957762682813879, "LeftScale" -> 
                   0.6077377553316436, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[36.60573897803041, 1.772055230348638], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 8833432794738512184|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>, 
               "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                 "Version" -> {13.1, 0}, "ID" -> 8812518305512619507|>], 
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Version" -> {13.1, 0}, "ID" -> 7405342354547017736|>]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"|>], 
           MachineLearning`MLProcessor[
           "LogRescaleNumericalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Indices" -> {2, 4, 5}, 
             "Centers" -> {0.43, 23.052, 256.593674903342}, 
             "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
              620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
             7299988401548215772, 
             "Output" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Mean" -> {146.57391774891778`, 3.693542625490828, 
              68.22157333333334, 3.504982149660075, 1.4086804722859232`}, 
             "StandardDeviation" -> {253.37495961794207`, 3.1699732836017724`,
               118.62403407631172`, 2.423277341145054, 1.2610287731963699`}, 
             "Output" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 1400194064660864776|>], 
           MachineLearning`MLProcessor[
           "ToLowerCase", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 3080611390123234620, 
             "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "RemoveDiacritics", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 8393247813432535084, 
             "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
               "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Index" -> {<|
                   "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>}, 
                 "Output" -> <|
                  "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> CompressedData["
1:eJxTTMoPSmVmYGBgBGIeIGZlwAANaDSyuINV5XF7IP0gJG/3fiC9wNDnNIjf
ICJ2FcR/IHn3Poi/gM/rKZgf6n8QrC7ZZSuIdtjqegMk77C36wKYvzLrFVje
m+cMWP3c+/vBtN3JS2D6yeWLYPkZKy+D+S8/gO0/YOZ2E2wP0+lLIJrBWOIc
WPzO1IcgdQ2LGjeB3TUp+SKYVtMFuy+h+e8TEH0gZu8JsL6j5o/B5gcFgd1z
QGXZU7D77ga+BKv/OBtsr0L9dYg7eOPvguXTp10Gm/vmJDgcFDacBZvv4HF9
Ith+wUiwvgajkndgfdOYHoHDbXHBcxCdECkFdndCbOtXsD9uJB4Bq1v48ybY
HTsegP3PYPvzEVi8+NYWsHv2tz0Em2N16SiY72lzDWzP1gO3wPoMs46A5BW2
L5wMlt+n82o/AO0BofY=
                  "], "Version" -> {13.1, 0}, "ID" -> 436956950344966148|>], 
               MachineLearning`MLProcessor[
               "Sequence", <|
                "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Processors" -> {
                   MachineLearning`MLProcessor[
                   "TextToNominalSequence", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {13.1, 0}, "ID" -> 9037232907786629142, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                   MachineLearning`MLProcessor[
                   "NominalSequenceToTFIDFVector", <|
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> {-9125122986955958911, \
-8920710729279180450, -8515397617198652367, -8156047279148961366, \
-5900137721653868194, -5516340669880835636, -4691435917638705529, \
-4484112905383790136, -3872414778415116274, -3607098371778122975, \
-3443150737398804539, -3355080348777836050, -2509905740948760720, \
-2159536488856785732, 242552411836269492, 450553210381435687, 
                    539691877398804025, 950421020428451240, 
                    1561895621580759179, 1579009397565082067, 
                    1671416204203290022, 2799484578252825308, 
                    3287432777910049379, 3477167097823690523, 
                    3576478456825362866, 4539722962543247872, 
                    5070765454536077049, 5138905625963890559, 
                    6058376361354581924, 6694985464746702812, 
                    6748311694457965250, 7603334142034012365, 
                    7731804819316663270, 8918825649307280967}, "Values" -> 
                    None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {13.1, 0}|>], 
                    "InverseDocumentFrequency" -> {1.91959284073794, 
                    3.624340932976365, 1.3217558399823195`, 
                    2.0149030205422647`, 2.0149030205422647`, 
                    2.120263536200091, 1.3217558399823195`, 
                    2.9311937524164198`, 1.2729656758128873`, 
                    1.91959284073794, 4.31748811353631, 2.120263536200091, 
                    4.31748811353631, 2.0149030205422647`, 
                    1.4842747694800942`, 2.0149030205422647`, 
                    2.120263536200091, 1.5448993912965292`, 
                    2.0149030205422647`, 1.3730491343698699`, 
                    2.0149030205422647`, 3.624340932976365, 0., 
                    0.11279549414534427`, 2.0149030205422647`, 
                    3.2188758248682006`, 1.4842747694800942`, 
                    2.9311937524164198`, 2.0149030205422647`, 
                    2.0149030205422647`, 0.5332984796180493, 
                    2.120263536200091, 4.31748811353631, 2.0149030205422647`},
                     "Version" -> {13.1, 0}, "ID" -> 7526152790873636702, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                 "Invertibility" -> "Impossible", "StructurePreserving" -> 
                 True, "Missing" -> "Forbidden"|>]}, "Invertibility" -> 
             "Impossible", "StructurePreserving" -> True, "Missing" -> 
             "Forbidden"|>], 
           MachineLearning`MLProcessor[
           "MergeVectors", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
               "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
               Span[1, 5], 
               Span[6, 39], 
               Span[40, 44]}, "Wrappers" -> {Identity, SparseArray, Identity},
              "Output" -> <|
              "(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
                  "], "Type" -> "NumericalVector"|>|>, "Version" -> {13.1, 0},
              "ID" -> 613954820935696947|>]}, "Invertibility" -> "Impossible",
          "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 9119616879012754245|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|
               "A" -> 1, "B" -> 2, "C" -> 3, "D" -> 4, "E" -> 5|>}, 
             "MissingCode" -> 0, "Version" -> {13.1, 0}, "ID" -> 
             1482488055587057283, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {5}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 4789940262906318728|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 5|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "A" -> 0.08750000000000001, "B" -> 0.2625, "C" -> 0.325, "D" -> 
        0.21250000000000002`, "E" -> 0.1125|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Ratings", 
          "Order" -> {
           "Elevation", "GICS Sector Name", 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
            "Carbon Disclosure", "Revenue (USD mn)", "Ratings"}|>], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {5, 6}, 0., {
      1, {{0, 1, 2, 3, 4, 5}, {{2}, {3}, {4}, {5}, {6}}}, {1., 1., 1., 1., 
       1.}}], "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
    "Model" -> <|"Trees" -> {
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.3368643075227737}, "LeafValues" -> 
          RawArray["Real32",{-2.431525707244873, -2.612685203552246}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
          RawArray["Real32",{-1.2978922128677368`, -1.3490285873413086`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
          RawArray["Real32",{-1.146612286567688, -1.0437551736831665`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
          RawArray["Real32",{-1.5086036920547485`, -1.5821760892868042`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742331404238939}, "LeafValues" -> 
          RawArray["Real32",{-2.183675527572632, -2.285621166229248}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.3368643075227737}, "LeafValues" -> 
          RawArray["Real32",{0.0774463638663292, -0.08627570420503616}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
          RawArray["Real32",{0.021712807938456535`, -0.02527582459151745}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
          RawArray["Real32",{-0.049623556435108185`, 0.045634184032678604`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
          RawArray["Real32",{0.03316926956176758, -0.035249438136816025`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{0.05364079028367996, -0.04738486558198929}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.3368643075227737}, "LeafValues" -> 
          RawArray["Real32",{0.0668313056230545, -0.08576218038797379}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
          RawArray["Real32",{0.020642418414354324`, -0.024161292240023613`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
          RawArray["Real32",{-0.04350278526544571, 0.04727746918797493}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{0.034765247255563736`, -0.030163785442709923`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{0.047272294759750366`, -0.04537732154130936}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.3368643075227737}, "LeafValues" -> 
          RawArray["Real32",{0.056882593780756, -0.08523983508348465}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
          RawArray["Real32",{0.018633397296071053`, -0.022175932303071022`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
          RawArray["Real32",{-0.046569015830755234`, 0.04125518724322319}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
          RawArray["Real32",{0.030932601541280746`, -0.03352378308773041}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.15949114412069323`}, "LeafValues" -> 
          RawArray["Real32",{0.045321498066186905`, -0.04460001736879349}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.3368643075227737}, "LeafValues" -> 
          RawArray["Real32",{0.049955692142248154`, -0.08481399714946747}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
          RawArray["Real32",{0.017739780247211456`, -0.021117987111210823`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
          RawArray["Real32",{-0.04331622272729874, 0.03702264651656151}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{0.03193158656358719, -0.028323538601398468`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{0.04199681431055069, -0.04345059022307396}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.40430448949337}, "LeafValues" -> 
          RawArray["Real32",{-0.05966782569885254, 0.06378602981567383}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
          RawArray["Real32",{0.016562538221478462`, -0.019878825172781944`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
          RawArray["Real32",{-0.03880374878644943, 0.03956323117017746}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
          RawArray["Real32",{0.02873001992702484, -0.031783994287252426`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{0.038168180733919144`, -0.041827961802482605`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.37771682441234583`}, "LeafValues" -> 
          RawArray["Real32",{-0.059602752327919006`, 0.06352988630533218}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
          RawArray["Real32",{0.015058765187859535`, -0.018225619569420815`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{-0.0414804145693779, 0.03350997716188431}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{0.02965039387345314, -0.026780493557453156`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.1594899967312813}, "LeafValues" -> 
          RawArray["Real32",{0.042041048407554626`, -0.043146975338459015`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.3368643075227737}, "LeafValues" -> 
          RawArray["Real32",{0.04223975911736488, -0.08442188054323196}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
          RawArray["Real32",{0.013616424053907394`, -0.016519298776984215`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
          RawArray["Real32",{-0.04011334478855133, 0.0328211635351181}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
          RawArray["Real32",{0.02533542364835739, -0.02922079898416996}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.1594899967312813}, "LeafValues" -> 
          RawArray["Real32",{0.03739221394062042, -0.041153911501169205`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.3368643075227737}, "LeafValues" -> 
          RawArray["Real32",{0.037536896765232086`, -0.0840778574347496}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
          RawArray["Real32",{0.013071875087916851`, -0.015695961192250252`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
          RawArray["Real32",{-0.03528054803609848, 0.034380026161670685`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
          RawArray["Real32",{0.02330951951444149, -0.027455292642116547`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
          RawArray["Real32",{0.03292088583111763, -0.03933478146791458}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.15864637494087216`}, "LeafValues" -> 
          RawArray["Real32",{-0.0419226810336113, 0.06674133986234665}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
          RawArray["Real32",{-0.01149919256567955, 0.015678852796554565`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
          RawArray["Real32",{-0.037247054278850555`, 0.02937718667089939}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{0.025447655469179153`, -0.02383670024573803}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.06228766031563281}, "LeafValues" -> 
          RawArray["Real32",{0.033571407198905945`, -0.03945321589708328}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.15864637494087216`}, "LeafValues" -> 
          RawArray["Real32",{-0.039992805570364, 0.058582764118909836`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
          RawArray["Real32",{0.01224140077829361, -0.014678881503641605`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{-0.03664098680019379, 0.027850892394781113`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
          RawArray["Real32",{0.02108127810060978, -0.025379696860909462`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.13523437827825543`}, "LeafValues" -> 
          RawArray["Real32",{0.037735097110271454`, -0.041233181953430176`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.15864637494087216`}, "LeafValues" -> 
          RawArray["Real32",{-0.03796382620930672, 0.05071137845516205}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
          RawArray["Real32",{-0.011203814297914505`, 0.015347259119153023`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
          RawArray["Real32",{-0.0325343944132328, 0.030874188989400864`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{0.02156560868024826, -0.02119915373623371}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.13523437827825543`}, "LeafValues" -> 
          RawArray["Real32",{0.03345649316906929, -0.03929663076996803}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.15864637494087216`}, "LeafValues" -> 
          RawArray["Real32",{-0.03633779287338257, 0.044794097542762756`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
          RawArray["Real32",{-0.010850345715880394`, 0.014739234000444412`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
          RawArray["Real32",{-0.030504101887345314`, 0.028338653966784477`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
          RawArray["Real32",{0.018601655960083008`, -0.023218130692839622`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{0.031279344111680984`, -0.0385090634226799}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
          RawArray["Real32",{0.039427775889635086`, -0.03506680205464363}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
          RawArray["Real32",{-0.011660861782729626`, 0.013282992877066135`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
          RawArray["Real32",{-0.03352691978216171, 0.0255462434142828}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{0.019633274525403976`, -0.01964915171265602}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.13523437827825543`}, "LeafValues" -> 
          RawArray["Real32",{0.03151753544807434, -0.03778785839676857}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.15864637494087216`}, "LeafValues" -> 
          RawArray["Real32",{-0.03465897589921951, 0.03971835970878601}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
          RawArray["Real32",{-0.010458148084580898`, 0.014204559847712517`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{-0.032176997512578964`, 0.023460185155272484`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {-0.1592362746596336}, "LeafValues" -> 
          RawArray["Real32",{0.018894750624895096`, -0.020111652091145515`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{0.028412511572241783`, -0.036918338388204575`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.15864637494087216`}, "LeafValues" -> 
          RawArray["Real32",{-0.03282579034566879, 0.035568345338106155`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
          RawArray["Real32",{-0.01197622437030077, 0.01381203718483448}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
          RawArray["Real32",{-0.03131510317325592, 0.023310018703341484`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
          RawArray["Real32",{0.016193067654967308`, -0.020894337445497513`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.47109524905681605`}, "LeafValues" -> 
          RawArray["Real32",{0.04193616285920143, -0.043115515261888504`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.15864637494087216`}, "LeafValues" -> 
          RawArray["Real32",{-0.03098907135426998, 0.0315806083381176}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
          RawArray["Real32",{-0.011793985962867737`, 0.013611920177936554`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
          RawArray["Real32",{-0.028138235211372375`, 0.025643251836299896`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
          RawArray["Real32",{-0.019132522866129875`, 0.017212899401783943`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.47109524905681605`}, "LeafValues" -> 
          RawArray["Real32",{0.03701833635568619, -0.0413011834025383}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.15864637494087216`}, "LeafValues" -> 
          RawArray["Real32",{-0.029458554461598396`, 0.028171395882964134`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{41}], 
          "NumericalThresholds" -> {-0.019889452902134504`}, "LeafValues" -> 
          RawArray["Real32",{0.011781546287238598`, -0.012409999035298824`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
          RawArray["Real32",{-0.030355656519532204`, 0.022624382749199867`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{0.01787077635526657, -0.018135100603103638`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.5034131258726119}, "LeafValues" -> 
          RawArray["Real32",{0.04871641471982002, -0.04582119360566139}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
          RawArray["Real32",{-0.029268721118569374`, 0.028667712584137917`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
          RawArray["Real32",{-0.011608344502747059`, 0.013282344676554203`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
          RawArray["Real32",{-0.026007574051618576`, 0.023206960409879684`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
          RawArray["Real32",{-0.018501734361052513`, 0.016800839453935623`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.5192682743072509}, "LeafValues" -> 
          RawArray["Real32",{0.05980156734585762, -0.04911500960588455}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.29496645927429194`}, "LeafValues" -> 
          RawArray["Real32",{0.029567468911409378`, -0.03384292498230934}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
          RawArray["Real32",{-0.010221794247627258`, 0.01386761199682951}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
          RawArray["Real32",{-0.029331764206290245`, 0.021620532497763634`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.3263751864433288}, "LeafValues" -> 
          RawArray["Real32",{-0.01686287112534046, 0.019317079335451126`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.5192682743072509}, "LeafValues" -> 
          RawArray["Real32",{0.05243396759033203, -0.04712088406085968}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
          RawArray["Real32",{-0.029035484418272972`, 0.02798578143119812}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
          RawArray["Real32",{-0.012139498256146908`, 0.013856377452611923`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
          RawArray["Real32",{-0.023865381255745888`, 0.02450680173933506}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{0.018009420484304428`, -0.017916914075613022`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.5298499464988707}, "LeafValues" -> 
          RawArray["Real32",{0.046774644404649734`, -0.03323288634419441}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
          RawArray["Real32",{-0.02745767869055271, 0.026178397238254547`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
          RawArray["Real32",{-0.011075373739004135`, 0.012429239228367805`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
          RawArray["Real32",{-0.027843665331602097`, 0.020292052999138832`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
          RawArray["Real32",{-0.018388524651527405`, 0.016445640474557877`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.5298499464988707}, "LeafValues" -> 
          RawArray["Real32",{0.042116519063711166`, -0.031404752284288406`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.29496645927429194`}, "LeafValues" -> 
          RawArray["Real32",{0.03002113103866577, -0.033324792981147766`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
          RawArray["Real32",{-0.011193253099918365`, 0.012583556585013866`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
          RawArray["Real32",{-0.024266496300697327`, 0.021790938451886177`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{0.016743110492825508`, -0.01718917489051819}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44959709048271174`}, "LeafValues" -> 
          RawArray["Real32",{0.03586278855800629, -0.03241812065243721}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
          RawArray["Real32",{-0.027155939489603043`, 0.025089722126722336`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
          RawArray["Real32",{-0.01004753541201353, 0.013462675735354424`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
          RawArray["Real32",{-0.027179338037967682`, 0.019790692254900932`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.3263751864433288}, "LeafValues" -> 
          RawArray["Real32",{-0.016744358465075493`, 0.019065232947468758`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.5298499464988707}, "LeafValues" -> 
          RawArray["Real32",{0.0375242717564106, -0.02992481179535389}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
          RawArray["Real32",{-0.025783129036426544`, 0.022708354517817497`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
          RawArray["Real32",{-0.011468995362520218`, 0.01282065361738205}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
          RawArray["Real32",{-0.022277945652604103`, 0.023019233718514442`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
          RawArray["Real32",{-0.01873352751135826, 0.016954578459262848`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44959709048271174`}, "LeafValues" -> 
          RawArray["Real32",{0.03234550729393959, -0.030749153345823288`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
          RawArray["Real32",{-0.024322595447301865`, 0.020912181586027145`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
          RawArray["Real32",{-0.010887686163187027`, 0.012051132507622242`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
          RawArray["Real32",{-0.025991857051849365`, 0.01916320249438286}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.3263751864433288}, "LeafValues" -> 
          RawArray["Real32",{-0.01580948382616043, 0.017424819990992546`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.5298499464988707}, "LeafValues" -> 
          RawArray["Real32",{0.03321295231580734, -0.02839808352291584}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {-0.159236803650856}, "LeafValues" -> 
          RawArray["Real32",{0.026992639526724815`, -0.019525958225131035`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
          RawArray["Real32",{-0.010662858374416828`, 0.011726855300366879`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
          RawArray["Real32",{-0.023195350542664528`, 0.021320732310414314`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
          RawArray["Real32",{-0.01873006671667099, 0.01664832793176174}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44959709048271174`}, "LeafValues" -> 
          RawArray["Real32",{0.027920782566070557`, -0.02901504375040531}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{41}], 
          "NumericalThresholds" -> {0.01815010700374842}, "LeafValues" -> 
          RawArray["Real32",{-0.02531089261174202, 0.019248420372605324`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
          RawArray["Real32",{-0.009790024720132351, 0.012862082570791245`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
          RawArray["Real32",{-0.025321925058960915`, 0.018924463540315628`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{0.01635843515396118, -0.01681009866297245}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.5298499464988707}, "LeafValues" -> 
          RawArray["Real32",{0.029392967000603676`, -0.027094345539808273`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {-0.159236803650856}, "LeafValues" -> 
          RawArray["Real32",{0.025197820737957954`, -0.01889081858098507}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
          RawArray["Real32",{-0.011334123089909554`, 0.012530898675322533`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
          RawArray["Real32",{-0.02042749896645546, 0.021310612559318542`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
          RawArray["Real32",{-0.018016546964645386`, 0.016079680994153023`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.4516270160675048}, "LeafValues" -> 
          RawArray["Real32",{0.03270099684596062, -0.031070200726389885`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
          RawArray["Real32",{-0.023679830133914948`, 0.019968224689364433`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
          RawArray["Real32",{-0.010773928835988045`, 0.011874783784151077`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
          RawArray["Real32",{-0.024492843076586723`, 0.018083160743117332`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{41}], 
          "NumericalThresholds" -> {-0.019889452902134504`}, "LeafValues" -> 
          RawArray["Real32",{-0.013984777964651585`, 0.019465669989585876`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.45670351386070246`}, "LeafValues" -> 
          RawArray["Real32",{0.03755681589245796, -0.03291207551956177}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{41}], 
          "NumericalThresholds" -> {0.01815010700374842}, "LeafValues" -> 
          RawArray["Real32",{-0.024043289944529533`, 0.01826220564544201}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
          RawArray["Real32",{-0.010524326004087925`, 0.011581857688724995`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
          RawArray["Real32",{-0.021624092012643814`, 0.019737225025892258`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
          RawArray["Real32",{-0.018224719911813736`, 0.016226863488554955`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.45670351386070246`}, "LeafValues" -> 
          RawArray["Real32",{0.03323090821504593, -0.03113982267677784}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.29496645927429194`}, "LeafValues" -> 
          RawArray["Real32",{0.030780989676713943`, -0.03436313197016716}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{41}], 
          "NumericalThresholds" -> {-0.019889452902134504`}, "LeafValues" -> 
          RawArray["Real32",{0.010305430740118027`, -0.011336887255311012`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
          RawArray["Real32",{-0.02392655238509178, 0.017778167501091957`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.3263751864433288}, "LeafValues" -> 
          RawArray["Real32",{-0.016090797260403633`, 0.018127676099538803`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.45670351386070246`}, "LeafValues" -> 
          RawArray["Real32",{0.0298019889742136, -0.029582945629954338`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
          RawArray["Real32",{-0.02331439033150673, 0.018150443211197853`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
          RawArray["Real32",{-0.010509784333407879`, 0.011631280183792114`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
          RawArray["Real32",{-0.023246005177497864`, 0.016721360385417938`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
          RawArray["Real32",{-0.017850397154688835`, 0.016147004440426826`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.45670351386070246`}, "LeafValues" -> 
          RawArray["Real32",{0.026979977265000343`, -0.028150474652647972`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {-0.159236803650856}, "LeafValues" -> 
          RawArray["Real32",{0.02434924989938736, -0.019087137654423714`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
          RawArray["Real32",{-0.009270907379686832, 0.012408015318214893`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
          RawArray["Real32",{-0.02297562174499035, 0.017143994569778442`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
          RawArray["Real32",{0.014581955038011074`, -0.018885789439082146`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
          RawArray["Real32",{-0.03622259944677353, 0.017858019098639488`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{41}], 
          "NumericalThresholds" -> {0.01815010700374842}, "LeafValues" -> 
          RawArray["Real32",{-0.023343563079833984`, 0.015969356521964073`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
          RawArray["Real32",{-0.011294187977910042`, 0.012782357633113861`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
          RawArray["Real32",{-0.020421361550688744`, 0.018834412097930908`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
          RawArray["Real32",{-0.017243647947907448`, 0.01532076857984066}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.45670351386070246`}, "LeafValues" -> 
          RawArray["Real32",{0.02438037283718586, -0.026889046654105186`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {-0.159236803650856}, "LeafValues" -> 
          RawArray["Real32",{0.022491002455353737`, -0.018685219809412956`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
          RawArray["Real32",{-0.010755673982203007`, 0.012117291800677776`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{41}], 
          "NumericalThresholds" -> {-0.19613610953092572`}, "LeafValues" -> 
          RawArray["Real32",{0.022220240905880928`, -0.01867150142788887}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.3263751864433288}, "LeafValues" -> 
          RawArray["Real32",{-0.01578618958592415, 0.01784929633140564}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.5298499464988707}, "LeafValues" -> 
          RawArray["Real32",{0.025715185329318047`, -0.026047101244330406`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
          RawArray["Real32",{0.03150030970573425, -0.0329241007566452}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
          RawArray["Real32",{0.010438074357807636`, -0.012765650637447834`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{41}], 
          "NumericalThresholds" -> {-0.19613610953092572`}, "LeafValues" -> 
          RawArray["Real32",{0.02070467732846737, -0.01730036363005638}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {-0.1592362746596336}, "LeafValues" -> 
          RawArray["Real32",{0.015606876462697983`, -0.017027944326400757`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
          RawArray["Real32",{-0.03524508699774742, 0.01699139177799225}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.29496645927429194`}, "LeafValues" -> 
          RawArray["Real32",{0.027191484346985817`, -0.033707305788993835`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{41}], 
          "NumericalThresholds" -> {-0.019889452902134504`}, "LeafValues" -> 
          RawArray["Real32",{0.011288702487945557`, -0.01222702395170927}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
          RawArray["Real32",{-0.018140539526939392`, 0.019513165578246117`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.1594905331730843}, "LeafValues" -> 
          RawArray["Real32",{0.019910652190446854`, -0.016230804845690727`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.45670351386070246`}, "LeafValues" -> 
          RawArray["Real32",{0.022975025698542595`, -0.026018254458904266`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.29496645927429194`}, "LeafValues" -> 
          RawArray["Real32",{0.02459622360765934, -0.03157705068588257}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
          RawArray["Real32",{0.009600109420716763, -0.011732401326298714`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.27170188724994665`}, "LeafValues" -> 
          RawArray["Real32",{-0.02063523419201374, 0.020433714613318443`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.1594905331730843}, "LeafValues" -> 
          RawArray["Real32",{0.0181482695043087, -0.015092267654836178`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{40}], 
          "NumericalThresholds" -> {-0.5298499464988707}, "LeafValues" -> 
          RawArray["Real32",{0.02384190633893013, -0.024442706257104874`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
          RawArray["Real32",{0.028468245640397072`, -0.030872976407408714`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
          RawArray["Real32",{-0.009082041680812836, 0.012189231812953949`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{41}], 
          "NumericalThresholds" -> {-0.19613610953092572`}, "LeafValues" -> 
          RawArray["Real32",{0.020202331244945526`, -0.01793244294822216}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
          RawArray["Real32",{-0.018859535455703735`, 0.017224058508872986`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {0.2998470216989518}, "LeafValues" -> 
          RawArray["Real32",{-0.024096878245472908`, 0.022729866206645966`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
          RawArray["Real32",{0.025493523105978966`, -0.029248569160699844`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{41}], 
          "NumericalThresholds" -> {-0.019889452902134504`}, "LeafValues" -> 
          RawArray["Real32",{0.010854964144527912`, -0.011698204092681408`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.27170188724994665`}, "LeafValues" -> 
          RawArray["Real32",{-0.019003726541996002`, 0.01811191439628601}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
          RawArray["Real32",{0.014834857545793056`, -0.019031692296266556`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {0.306055173277855}, "LeafValues" -> 
          RawArray["Real32",{-0.026224007830023766`, 0.027274399995803833`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.29496645927429194`}, "LeafValues" -> 
          RawArray["Real32",{0.02269970066845417, -0.03006071411073208}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
          RawArray["Real32",{-0.010683500207960606`, 0.012032766826450825`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
          RawArray["Real32",{-0.01921895332634449, 0.016856616362929344`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
          RawArray["Real32",{-0.017304016277194023`, 0.015542147681117058`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.45670351386070246`}, "LeafValues" -> 
          RawArray["Real32",{0.02366696670651436, -0.025531847029924393`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
          RawArray["Real32",{0.02224738523364067, -0.02768585830926895}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
          RawArray["Real32",{-0.010134343057870865`, 0.011412709020078182`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{41}], 
          "NumericalThresholds" -> {-0.19613610953092572`}, "LeafValues" -> 
          RawArray["Real32",{0.019193194806575775`, -0.017192091792821884`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.3263751864433288}, "LeafValues" -> 
          RawArray["Real32",{-0.015433025546371937`, 0.017627084627747536`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {0.306055173277855}, "LeafValues" -> 
          RawArray["Real32",{-0.024512991309165955`, 0.02426273562014103}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.29496645927429194`}, "LeafValues" -> 
          RawArray["Real32",{0.020060420036315918`, -0.028878428041934967`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{41}], 
          "NumericalThresholds" -> {-0.019889452902134504`}, "LeafValues" -> 
          RawArray["Real32",{0.010468808002769947`, -0.011380615644156933`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.27170188724994665`}, "LeafValues" -> 
          RawArray["Real32",{-0.018010474741458893`, 0.017286522313952446`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{43}], 
          "NumericalThresholds" -> {0.34776064753532415`}, "LeafValues" -> 
          RawArray["Real32",{0.016094407066702843`, -0.01704922318458557}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.45670351386070246`}, "LeafValues" -> 
          RawArray["Real32",{0.022471360862255096`, -0.024960774928331375`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
          RawArray["Real32",{-0.026455799117684364`, 0.02150760404765606}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{41}], 
          "NumericalThresholds" -> {-0.019889452902134504`}, "LeafValues" -> 
          RawArray["Real32",{0.010077702812850475`, -0.01088335644453764}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{41}], 
          "NumericalThresholds" -> {-0.19613610953092572`}, "LeafValues" -> 
          RawArray["Real32",{0.018501589074730873`, -0.016530297696590424`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.1594905331730843}, "LeafValues" -> 
          RawArray["Real32",{0.017688671126961708`, -0.014549712650477886`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
          RawArray["Real32",{-0.03268406167626381, 0.01573518104851246}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.29496645927429194`}, "LeafValues" -> 
          RawArray["Real32",{0.01959661766886711, -0.02870943583548069}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
          RawArray["Real32",{-0.009177977219223976, 0.012218000367283821`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {-0.159236803650856}, "LeafValues" -> 
          RawArray["Real32",{-0.018650848418474197`, 0.01722940057516098}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
          RawArray["Real32",{-0.01789308525621891, 0.016276543959975243`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {0.306055173277855}, "LeafValues" -> 
          RawArray["Real32",{-0.022769777104258537`, 0.022051986306905746`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
          RawArray["Real32",{-0.02578001469373703, 0.02097124420106411}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
          RawArray["Real32",{-0.010048441588878632`, 0.011089774779975414`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{41}], 
          "NumericalThresholds" -> {-0.19613610953092572`}, "LeafValues" -> 
          RawArray["Real32",{0.01794067583978176, -0.016168149188160896`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
          RawArray["Real32",{0.01415763609111309, -0.018423674628138542`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.45670351386070246`}, "LeafValues" -> 
          RawArray["Real32",{0.02159348502755165, -0.023858707398176193`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {-0.29496645927429194`}, "LeafValues" -> 
          RawArray["Real32",{0.01871633529663086, -0.027979819104075432`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.45104835927486414`}, "LeafValues" -> 
          RawArray["Real32",{0.011316545307636261`, -0.010059256106615067`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
          RawArray["Real32",{-0.01692436821758747, 0.017591221258044243`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.3263751864433288}, "LeafValues" -> 
          RawArray["Real32",{-0.014924401417374611`, 0.0167208481580019}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {-0.08145799115300177}, "LeafValues" -> 
          RawArray["Real32",{-0.024651825428009033`, 0.01887044683098793}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
          RawArray["Real32",{0.019544227048754692`, -0.026377232745289803`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
          RawArray["Real32",{-0.009361904114484787, 0.012232447974383831`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{41}], 
          "NumericalThresholds" -> {-0.19613610953092572`}, "LeafValues" -> 
          RawArray["Real32",{0.018358483910560608`, -0.016249530017375946`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.1594905331730843}, "LeafValues" -> 
          RawArray["Real32",{0.016993694007396698`, -0.014418584294617176`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{44}], 
          "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
          RawArray["Real32",{-0.030645782127976418`, 0.014763465151190758`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{42}], 
          "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
          RawArray["Real32",{-0.025240130722522736`, 0.01978371851146221}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{41}], 
          "NumericalThresholds" -> {-0.019889452902134504`}, "LeafValues" -> 
          RawArray["Real32",{0.0101877236738801, -0.01126943901181221}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {-0.159236803650856}, "LeafValues" -> 
          RawArray["Real32",{-0.01807437278330326, 0.01668204925954342}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
          RawArray["Real32",{-0.01739601045846939, 0.015281597152352333`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {0.306055173277855}, "LeafValues" -> 
          RawArray["Real32",{-0.021805334836244583`, 0.021805796772241592`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>]}, "ClassNumber" -> 5, 
      "IterationsNumber" -> 50, "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
              "], "Type" -> "NumericalVector"|>|>, 
         "Output" -> <|
          "(f2f6(f1f3f4f5f7))" -> <|
            "Type" -> "NumericalVector", "Weight" -> 6.9999999999999964`|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "DensifyNumericalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
                  "], "Type" -> "NumericalVector"|>|>, "Version" -> {13.1, 0},
              "ID" -> 6179163345349236217, 
             "Output" -> <|
              "(f2f6(f1f3f4f5f7))" -> <|
                "Type" -> "NumericalVector", "Weight" -> 
                 6.9999999999999964`|>|>|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|
              "Type" -> "NumericalVector", "Weight" -> 6.9999999999999964`|>, 
             "Key" -> "(f2f6(f1f3f4f5f7))", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
      "GradientBoostedTrees", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "BoostingMethod" -> <|"Value" -> "Gradient", "Options" -> <||>|>, 
        MaxTrainingRounds -> <|"Value" -> 50, "Options" -> <||>|>, 
        "LeavesNumber" -> <|"Value" -> 3, "Options" -> <||>|>, 
        "LearningRate" -> <|"Value" -> 0.1, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "MaxBinNumber" -> <|"Value" -> 255, "Options" -> <||>|>, 
        "ThreadNumber" -> <|"Value" -> 8, "Options" -> <||>|>, 
        "MaxDepth" -> <|"Value" -> 6, "Options" -> <||>|>, 
        "LeafSize" -> <|"Value" -> 35, "Options" -> <||>|>, 
        "FeatureFraction" -> <|"Value" -> 1, "Options" -> <||>|>, 
        "BaggingFraction" -> <|"Value" -> 1, "Options" -> <||>|>, 
        "BaggingFrequency" -> <|"Value" -> 0, "Options" -> <||>|>, 
        "MinGainToSplit" -> <|"Value" -> 0, "Options" -> <||>|>, 
        "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.151629`5.632327264287427, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[1.4741637557311125`, 0.1333865793972809], "Accuracy" -> 
         Around[0.3263837789328387, 0.16923331038145822`], "EvaluationTime" -> 
         0.00021081851067789197`, "TestSize" -> 15, "ModelMemory" -> 25288, 
         "ModelUtility" -> -1.0992205581871257`, "TrainingSize" -> 60, 
         "TrainingTime" -> 0.01, "TrainingMemory" -> 152384, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[1.4741637557311125`, 0.09431855481109515]}, 
         "AccuracyHistory" -> {
           Around[0.3263837789328387, 0.11966602137337685`]}, 
         "Configuration" -> {
          "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
           MaxTrainingRounds -> 50, "LeavesNumber" -> 3, "LearningRate" -> 
           0.1, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
           "ThreadNumber" -> 8, "MaxDepth" -> 6, "LeafSize" -> 35, 
           "FeatureFraction" -> 1, "BaggingFraction" -> 1, "BaggingFrequency" -> 
           0, "MinGainToSplit" -> 0, "L1Regularization" -> 0, 
           "L2Regularization" -> 0, "LossFunction" -> Automatic}, 
         "FinalTrainingSize" -> 75|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 17], 
          TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 250|>, 
             "LearningRate" -> <|"Value" -> 0.01|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 35|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5446314494798947`, 0.05201582567213101], "Accuracy" -> 
              Around[0.33669909792311253`, 0.08267554904537108], 
              "EvaluationTime" -> 0.0007710572825034958, "TestSize" -> 65, 
              "ModelMemory" -> 25288, "ModelUtility" -> -1.1346932586378506`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 101016, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5446314494798947`, 0.03678074306178114]}, 
              "AccuracyHistory" -> {
                Around[0.33669909792311253`, 0.05846044136830288]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0007710572825034958, "MeanCrossEntropy" -> 
             Around[1.5446314494798947`, 0.05201582567213101], "ModelMemory" -> 
             25288, "TrainingMemory" -> 101016, "TrainingTime" -> 
             0.027735630868069485`|>, "Index" -> 1|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 3|>, 
             "LearningRate" -> <|"Value" -> 0.1|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 35|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5446314494798947`, 0.05201582567213101], "Accuracy" -> 
              Around[0.33669909792311253`, 0.08267554904537108], 
              "EvaluationTime" -> 0.00004865042554105199, "TestSize" -> 65, 
              "ModelMemory" -> 25288, "ModelUtility" -> -1.1346925362309936`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 80744, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5446314494798947`, 0.03678074306178114]}, 
              "AccuracyHistory" -> {
                Around[0.33669909792311253`, 0.05846044136830288]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.4741637557311125`, 0.1333865793972809], "Accuracy" -> 
              Around[0.3263837789328387, 0.16923331038145822`], 
              "EvaluationTime" -> 0.00021081851067789197`, "TestSize" -> 15, 
              "ModelMemory" -> 25288, "ModelUtility" -> -1.0992205581871257`, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              152384, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.4741637557311125`, 0.09431855481109515]}, 
              "AccuracyHistory" -> {
                Around[0.3263837789328387, 0.11966602137337685`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00021081851067789197`, "MeanCrossEntropy" -> 
             Around[1.4741637557311125`, 0.1333865793972809], "ModelMemory" -> 
             25288, "TrainingMemory" -> 152384, "TrainingTime" -> 
             0.01380957344480193|>, "Index" -> 2|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 110|>, 
             "LearningRate" -> <|"Value" -> 0.002|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 90|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5413578901624958`, 0.03020411131626496], "Accuracy" -> 
              Around[0.26851727974129436`, 0.07795057934334512], 
              "EvaluationTime" -> 0.0000612472570082303, "TestSize" -> 130, 
              "ModelMemory" -> 25288., "ModelUtility" -> -1.1297700142862905`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.006854143078948891, 
              "TrainingMemory" -> 80722.66666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5446314494798947`, 0.03678074306178114], 
                Around[1.5380843308450969`, 0.05198902790797374]}, 
              "AccuracyHistory" -> {
                Around[0.33669909792311253`, 0.05846044136830288], 
                Around[0.20033546155947612`, 0.049512933032235605`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.4741637557311125`, 0.1333865793972809], "Accuracy" -> 
              Around[0.3263837789328387, 0.16923331038145822`], 
              "EvaluationTime" -> 0.00021081851067789197`, "TestSize" -> 15, 
              "ModelMemory" -> 25288, "ModelUtility" -> -1.0992205581871257`, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 152624, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.4741637557311125`, 0.09431855481109515]}, 
              "AccuracyHistory" -> {
                Around[0.3263837789328387, 0.11966602137337685`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00021081851067789197`, "MeanCrossEntropy" -> 
             Around[1.4741637557311125`, 0.1333865793972809], "ModelMemory" -> 
             25288, "TrainingMemory" -> 152624, "TrainingTime" -> 
             0.012811604839381001`|>, "Index" -> 3|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 60|>, 
             "LearningRate" -> <|"Value" -> 0.2|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 7|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5413578901624958`, 0.03020411131626496], "Accuracy" -> 
              Around[0.26851727974129436`, 0.07795057934334512], 
              "EvaluationTime" -> 0.0000612472570082303, "TestSize" -> 130, 
              "ModelMemory" -> 25288., "ModelUtility" -> -1.1297700142862905`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.006854143078948891, 
              "TrainingMemory" -> 80682.66666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5446314494798947`, 0.03678074306178114], 
                Around[1.5380843308450969`, 0.05198902790797374]}, 
              "AccuracyHistory" -> {
                Around[0.33669909792311253`, 0.05846044136830288], 
                Around[0.20033546155947612`, 0.049512933032235605`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.123109804715903, 1.1408274454767906`], "Accuracy" -> 
              Around[0.3263837789328387, 0.16923331038145822`], 
              "EvaluationTime" -> 0.0006666666666666666, "TestSize" -> 15, 
              "ModelMemory" -> 502456, "ModelUtility" -> -1.9026474061089387`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 2126624, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.123109804715903, 0.806686822860365]}, 
              "AccuracyHistory" -> {
                Around[0.3263837789328387, 0.11966602137337685`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006666666666666666, "MeanCrossEntropy" -> 
             Around[3.123109804715903, 1.1408274454767906`], "ModelMemory" -> 
             502456, "TrainingMemory" -> 2126624, "TrainingTime" -> 
             0.24402496759157732`|>, "Index" -> 4|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 25|>, 
             "LearningRate" -> <|"Value" -> 0.1|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 15|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5446314494798947`, 0.05201582567213101], "Accuracy" -> 
              Around[0.33669909792311253`, 0.08267554904537108], 
              "EvaluationTime" -> 0.00007710572825034954, "TestSize" -> 65, 
              "ModelMemory" -> 25288, "ModelUtility" -> -1.1346925646862962`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 80824, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5446314494798947`, 0.03678074306178114]}, 
              "AccuracyHistory" -> {
                Around[0.33669909792311253`, 0.05846044136830288]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00007710572825034954, "MeanCrossEntropy" -> 
             Around[1.5446314494798947`, 0.05201582567213101], "ModelMemory" -> 
             25288, "TrainingMemory" -> 80824, "TrainingTime" -> 
             0.013900744107674924`|>, "Index" -> 5|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 1023|>, 
             "LearningRate" -> <|"Value" -> 0.1|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 15|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5446314494798947`, 0.05201582567213101], "Accuracy" -> 
              Around[0.33669909792311253`, 0.08267554904537108], 
              "EvaluationTime" -> 0.00004865042554105199, "TestSize" -> 65, 
              "ModelMemory" -> 25288, "ModelUtility" -> -1.1346925362309936`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 80736, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5446314494798947`, 0.03678074306178114]}, 
              "AccuracyHistory" -> {
                Around[0.33669909792311253`, 0.05846044136830288]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.7391507348560278`, 0.40999503700805273`], "Accuracy" -> 
              Around[0.3263837789328387, 0.16923331038145822`], 
              "EvaluationTime" -> 0.0006666666666666666, "TestSize" -> 15, 
              "ModelMemory" -> 462504, "ModelUtility" -> -1.2927651740930433`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 1484024, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.7391507348560278`, 0.28991027092122357`]}, 
              "AccuracyHistory" -> {
                Around[0.3263837789328387, 0.11966602137337685`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006666666666666666, "MeanCrossEntropy" -> 
             Around[1.7391507348560278`, 0.40999503700805273`], "ModelMemory" -> 
             462504, "TrainingMemory" -> 1484024, "TrainingTime" -> 
             0.06588419104912303|>, "Index" -> 6|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 110|>, 
             "LearningRate" -> <|"Value" -> 0.1|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 35|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5446314494798947`, 0.05201582567213101], "Accuracy" -> 
              Around[0.33669909792311253`, 0.08267554904537108], 
              "EvaluationTime" -> 0.0000612472570082303, "TestSize" -> 65, 
              "ModelMemory" -> 25288, "ModelUtility" -> -1.1346925488278252`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 80816, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5446314494798947`, 0.03678074306178114]}, 
              "AccuracyHistory" -> {
                Around[0.33669909792311253`, 0.05846044136830288]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0000612472570082303, "MeanCrossEntropy" -> 
             Around[1.5446314494798947`, 0.05201582567213101], "ModelMemory" -> 
             25288, "TrainingMemory" -> 80816, "TrainingTime" -> 
             0.013900744107674924`|>, "Index" -> 7|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 60|>, 
             "LearningRate" -> <|"Value" -> 0.2|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 200|>,
              "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5446314494798947`, 0.05201582567213101], "Accuracy" -> 
              Around[0.33669909792311253`, 0.08267554904537108], 
              "EvaluationTime" -> 0.0000612472570082303, "TestSize" -> 65, 
              "ModelMemory" -> 25288, "ModelUtility" -> -1.1346925488278252`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 80616, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5446314494798947`, 0.03678074306178114]}, 
              "AccuracyHistory" -> {
                Around[0.33669909792311253`, 0.05846044136830288]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0000612472570082303, "MeanCrossEntropy" -> 
             Around[1.5446314494798947`, 0.05201582567213101], "ModelMemory" -> 
             25288, "TrainingMemory" -> 80616, "TrainingTime" -> 
             0.013900744107674924`|>, "Index" -> 8|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 13|>, 
             "LearningRate" -> <|"Value" -> 0.2|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 15|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5446314494798947`, 0.05201582567213101], "Accuracy" -> 
              Around[0.33669909792311253`, 0.08267554904537108], 
              "EvaluationTime" -> 0.00007710572825034954, "TestSize" -> 65, 
              "ModelMemory" -> 25288, "ModelUtility" -> -1.1346925646862962`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 80624, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5446314494798947`, 0.03678074306178114]}, 
              "AccuracyHistory" -> {
                Around[0.33669909792311253`, 0.05846044136830288]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00007710572825034954, "MeanCrossEntropy" -> 
             Around[1.5446314494798947`, 0.05201582567213101], "ModelMemory" -> 
             25288, "TrainingMemory" -> 80624, "TrainingTime" -> 
             0.013900744107674924`|>, "Index" -> 9|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 25|>, 
             "LearningRate" -> <|"Value" -> 0.1|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 3|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[2.9740859558251334`, 0.38201037233597945`], "Accuracy" -> 
              Around[0.23063849186250643`, 0.07369396763833194], 
              "EvaluationTime" -> 0.00019368083258371798`, "TestSize" -> 65, 
              "ModelMemory" -> 462248, "ModelUtility" -> -1.808598201104881, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 1433272, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.9740859558251334`, 0.27012212476236896`]}, 
              "AccuracyHistory" -> {
                Around[0.23063849186250643`, 0.052109504249606496`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00019368083258371798`, "MeanCrossEntropy" -> 
             Around[2.9740859558251334`, 0.38201037233597945`], "ModelMemory" -> 
             462248, "TrainingMemory" -> 1433272, "TrainingTime" -> 
             0.13900744107674923`|>, "Index" -> 10|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["GradientBoostedTrees"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 16]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 75, 
      "PreprocessorEvaluationTime" -> 2.12109375*^-6, "PreprocessorMemory" -> 
      178720, "InputDimension" -> 44, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.504445381309891, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.879152706658486`16.341311865525608*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.27999999999999997`, 
          "ElapsedTimes" -> 0.279863, "ExperimentCounts" -> 12|>, <|
         "TrainingSizes" -> 60, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.486846, "ExperimentCounts" -> 4|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, "ID" -> 
           3795572968267006573|>, 
         "f2" -> <|
          "Type" -> "Nominal", "Weight" -> 1, 
           "Values" -> {"Information Technology"}, "ID" -> 
           3401139331922032727|>, 
         "f3" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369}, "ID" -> 
           4714656301856831657|>, 
         "f4" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {23.778}, "ID" -> 
           4624390425862832796|>, 
         "f5" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {100.249}, "ID" -> 
           8583462845398299564|>, 
         "f6" -> <|
          "Type" -> "Text", "Weight" -> 1, "Values" -> {"Estimated data"}, 
           "ID" -> 3095956687388126824|>, 
         "f7" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {256.9105}, "ID" -> 
           1111199487588034056|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 1.030698, 
      "MaxTrainingMemory" -> 3291040, "DataMemory" -> 118040, 
      "FunctionMemory" -> 819208, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 12, 4, 14, 25, 6.742899`7.581421642073103}, "Instant",
         "Gregorian", 1.], "ProcessorCount" -> 8, "ProcessorType" -> "ARM64", 
      "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, 3.87880702612108*^9, 
   3.8788116206807327`*^9, 3.8791491067640038`*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"5d0b9905-77cc-4a4a-a50d-66740e372ec2"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Data type"], 
                   TextCell["Data type"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{
                   InterpretationBox[
                    Cell["Mixed"], 
                    TextCell["Mixed"]], 
                   StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]},
                  "RowDefault"],
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                  Short[#, 10]& ]],
                Annotation[#, 
                 
                 Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                   "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classes"], 
                   TextCell["Classes"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 InterpretationBox[
                  Cell["A"], 
                  TextCell["A"]], 
                 InterpretationBox[
                  Cell["B"], 
                  TextCell["B"]], 
                 InterpretationBox[
                  Cell["C"], 
                  TextCell["C"]], 
                 InterpretationBox[
                  Cell["D"], 
                  TextCell["D"]], 
                 InterpretationBox[
                  Cell["E"], 
                  TextCell["E"]]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"33.", "17."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    32.6383778932838737319`3., 16.9233310381458217364`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Method"], 
                   TextCell["Method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 
                 InterpretationBox[Cell[
                  "GradientBoostedTrees",ExpressionUUID->
                   "4c7a0415-f020-4959-af94-d1b710829e6f"],
                  TextCell["GradientBoostedTrees"]],
                 StyleBox[
                  TagBox[
                   
                   GridBox[{{"\"BoostingMethod\"", "\"Gradient\""}, {
                    "MaxTrainingRounds", "50"}, {"\"LeavesNumber\"", "3"}, {
                    "\"LearningRate\"", "0.1`"}, {"\"MaxDepth\"", "6"}, {
                    "\"LeafSize\"", "35"}, {"\"L1Regularization\"", "0"}, {
                    "\"L2Regularization\"", "0"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                  "Verdana", StripOnInput -> False]],
                Annotation[#, 
                 Style[
                  
                  Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 3}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 35}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                   Alignment -> Left, Frame -> All, FrameStyle -> 
                   GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                 "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"10.7`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"6.75`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                   Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"1.4741637557311124684`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.1333865793972809077`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "1.2073905969365505975`3.", "\", \"", 
                   "1.7409369145256743394`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 1.2073905969365505975`3., 
                   ", ", 1.7409369145256743394`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Model memory"], 
                   TextCell["Model memory"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"833.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training examples used"], 
                   TextCell["Training examples used"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               TemplateBox[{"75", "\"examples\"", "examples", "\"Examples\""},
                
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training time"], 
                   TextCell["Training time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.03`", "\"s\"", "seconds", "\"Seconds\""},
                "Quantity"]},
              {
               ItemBox[
                
                DynamicModuleBox[{
                 MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                 DynamicBox[ToBoxes[
                   Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.4326637747739016}, {
                    4.0943445622221, 0.38809088375050316`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.4326637747739016}}, {{4.0943445622221, 
                    0.38809088375050316`}}}]}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.4128734510083407}, {
                    2.302585092994046, 0.4520700301703432}, {
                    2.302585092994046, 0.4520700301703432}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, 0.2932494281767469}, {
                    4.0943445622221, 0.4747114893164778}, {4.0943445622221, 
                    0.4747114893164778}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-2.178060225738475, 0.38460280207543524`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-2.178060225738475, 4.31748811353631}, {
                    0.38460280207543524`, 0.4326637747739016}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.26851727974129436`}, {
                    4.0943445622221, 0.3263837789328387}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.26851727974129436`}}, {{4.0943445622221, 
                    0.3263837789328387}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-2.178060225738475, 0.23001818920136297`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-2.178060225738475, 4.31748811353631}, {
                    0.23001818920136297`, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.43478533786759904`}, {
                    2.302585092994046, 0.43478533786759904`}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 250}, {
                    "LearningRate", 0.01}, {"MaxDepth", 6}, {
                    "LeafSize", 35}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.43478533786759904`}, {
                    4.0943445622221, 0.38809088375050316`}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 3}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 35}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.4326637747739016}, {
                    4.0943445622221, 0.38809088375050316`}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 110}, {
                    "LearningRate", 0.002}, {"MaxDepth", 6}, {
                    "LeafSize", 90}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    Line[{{2.302585092994046, 0.4326637747739016}, {
                    4.0943445622221, 1.1388292376943392`}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {"LeafSize", 7}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.43478533786759904`}, {
                    2.302585092994046, 0.43478533786759904`}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 25}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 15}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.43478533786759904`}, {
                    4.0943445622221, 0.553396910658879}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 1023}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 15}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.43478533786759904`}, {
                    2.302585092994046, 0.43478533786759904`}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 110}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 35}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.43478533786759904`}, {
                    2.302585092994046, 0.43478533786759904`}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {
                    "LeafSize", 200}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.43478533786759904`}, {
                    2.302585092994046, 0.43478533786759904`}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 13}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {"LeafSize", 15}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 1.089936750049729}, {
                    2.302585092994046, 1.089936750049729}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 25}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 3}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.43478533786759904`}}, {{
                    2.302585092994046, 0.43478533786759904`}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 250}, {
                    "LearningRate", 0.01}, {"MaxDepth", 6}, {
                    "LeafSize", 35}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.43478533786759904`}}, {{
                    4.0943445622221, 0.38809088375050316`}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 3}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 35}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.4326637747739016}}, {{
                    4.0943445622221, 0.38809088375050316`}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 110}, {
                    "LearningRate", 0.002}, {"MaxDepth", 6}, {
                    "LeafSize", 90}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.4326637747739016}}, {{
                    4.0943445622221, 1.1388292376943392`}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {"LeafSize", 7}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.43478533786759904`}}, {{
                    2.302585092994046, 0.43478533786759904`}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 25}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 15}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.43478533786759904`}}, {{
                    4.0943445622221, 0.553396910658879}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 1023}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 15}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.43478533786759904`}}, {{
                    2.302585092994046, 0.43478533786759904`}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 110}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 35}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.43478533786759904`}}, {{
                    2.302585092994046, 0.43478533786759904`}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {
                    "LeafSize", 200}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.43478533786759904`}}, {{
                    2.302585092994046, 0.43478533786759904`}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 13}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {"LeafSize", 15}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 1.089936750049729}}, {{
                    2.302585092994046, 1.089936750049729}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 25}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 3}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-2.178060225738475, 0.3293413470918167}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-2.178060225738475, 4.31748811353631}, {
                    0.3293413470918167, 1.1388292376943392`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, -1], 
                    Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, 
                    Plus[1]], Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                  ImageSizeCache->{330., {120., 126.}}],
                 DynamicModuleValues:>{}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> 
           ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  MachineLearning`MLInformationObject[
   ClassifierFunction[<|
    "ExampleNumber" -> 75, "ClassNumber" -> 5, 
     "Input" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|
           "Elevation" -> <|"Type" -> "Numerical"|>, 
            "GICS Sector Name" -> <|"Type" -> "Nominal"|>, 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Disclosure" -> <|"Type" -> "Text"|>, 
            "Revenue (USD mn)" -> <|"Type" -> "Numerical"|>|>, 
          "Output" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
            "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["FromDataset"], 
               MachineLearning`MLProcessor[
               "FromNamedFeatures", <|
                "FeatureNames" -> {
                  "Elevation", "GICS Sector Name", 
                   "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                   "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                   "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                   "Carbon Disclosure", "Revenue (USD mn)"}|>], 
               MachineLearning`MLProcessor[
               "Transpose", <|"FeatureNumber" -> 7|>], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {
                  "Numerical", "Nominal", "Numerical", "Numerical", 
                   "Numerical", "Text", "Numerical"}, 
                 "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6", "f7"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          False, "Invertibility" -> "Perfect", "StructurePreserving" -> False,
           "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
            "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Output" -> <|"(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["

1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
               "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
            MachineLearning`MLProcessor[
            "SynthesizeMissingValues", <|
             "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Distribution" -> 
              LearnedDistribution[<|
                "ExampleNumber" -> 75, "Preprocessor" -> 
                 MachineLearning`MLProcessor[
                  "ToMLDataset", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>, 
                    "f6" -> <|"Type" -> "Text"|>, 
                    "f7" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                  "Processor" -> 
                 MachineLearning`MLProcessor[
                  "Sequence", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 1621909218748444882|>], 
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>, 
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2074781423290265366|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 20679206186753951|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>, <|"" -> 1|>}, 
                    "MissingCode" -> Indeterminate, "Version" -> {13.1, 0}, 
                    "ID" -> 4023015169247141483, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "LogRescaleNumericalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Indices" -> {2, 4, 5}, 
                    "Centers" -> {0.43, 23.052, 256.593674903342}, 
                    "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
                    620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
                    3527897072513609120, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {146.57391774891778`, 3.693542625490828, 
                    68.22157333333334, 3.504982149660075, 
                    1.4086804722859232`}, 
                    "StandardDeviation" -> {253.37495961794207`, 
                    3.1699732836017724`, 118.62403407631172`, 
                    2.423277341145054, 1.2610287731963699`}, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2274174826257793629|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {11, 1}|>|>, 
                    "Boundaries" -> {{-0.5, -0.40909090909090906`, \
-0.3181818181818182, -0.2272727272727273, -0.13636363636363635`, \
-0.04545454545454547, 0.045454545454545414`, 0.13636363636363635`, 
                    0.2272727272727273, 0.31818181818181823`, 
                    0.40909090909090906`, 0.5}, {-0.5, 0.5}}, 
                    "Version" -> {13.1, 0}, "ID" -> 8505008840132824157, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>, 
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
                    Span[1, 2], 
                    Span[3, 7]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {13.1, 0}, "ID" -> 
                    373596144042670943|>]}, "Invertibility" -> "Approximate", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                 "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                 Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBmQFm/iFib1JlAgAAAAcAAAAHAAAANBt6Fr3csL/lG+Yz4ESRP7hBka92
l6I/3+CsXPnbnb8juBQyj++mPyQSP5BqJYY/vak1fWbb7z9Exb6rXA+mP3bs
bygIL6y/qBWDW9y8oz+sdTB+ZCFvP+M3K7whyrK/oZKNG3/O7792PFDDUfyQ
P9/U3bojxJC/o5bbS9uw5z8WAjGjisXkP97C+Aj2NcU/OamW7DSFoj9l4xTQ
yZiTv+5YNgcGV6G/JjWbdhS247/4DI4+z4GiP+damijBtq0/AUhvWGOt0r+S
UyYwEkrnv7xCV9Xbd5o/7dmZYqsIlL+U6TKOWh/fvyeCdPr2xcm/z+izHsbw
ab/DCMuYpSLrPyWlgzDxQ68/IU0Nlm9mh79gtGMp7lp6v5IjpI1bXuO/gG3Q
78EAir9w8Q54CT+tPz6D4J3Vndm/VLWB566j5T+EcC9VEICzv/LeOJ47T7W/
77C3YnYxuz+XzXfud2fkvwL5lh2DJOg/lXZTGNvFtb8Pcd+T9BKZv2lvrRrr
CbI/A8vXaYtBiL/H/s72
                    "], 
                   "Precisions" -> {0.4602875814560013, 0.9399443097653287, 
                    1.0616808801506838`, 1.6265466434380347`, 
                    4.517522263650691, 10.595148643942485`, 
                    23.23460552022561}, "NoisePrecision" -> None, "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781967`, 0.012269055622142968`, 
                    0.0013959895289638008`, -0.0005267240067510293, \
-0.00032143499611032286`, -0.00013378352049829329`, 0.0005265431937281588}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 6648082896216031031|>], 
                   "PostProcessor" -> 
                   MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7.|>,
                     "Key" -> "((f2f6)(f1f3f4f5f7))", "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                   "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 7, "Options" -> <||>|>|>|>, 
                 "TrainingInformation" -> <|
                  "Configurations" -> 
                   Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                    "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1557841622946289758|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                   Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                 "NaiveImputer" -> 
                 MachineLearning`MLProcessor[
                  "ImputeMissing", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                    "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1557841622946289758|>], "InputDimension" -> 0, 
                 "OutputDimension" -> 7, 
                 "Log" -> <|
                  "Example" -> 
                   MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, 
                    "ID" -> 2988406535272383851|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"Information Technology"}, "ID" -> 
                    8211126643196690843|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369},
                     "ID" -> 220143977676884624|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {23.778}, "ID" -> 8845109505593024510|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {100.249}, "ID" -> 827490798644983815|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 4409963340497863227|>, 
                    "f7" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {256.9105}, "ID" -> 5236914127772614391|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                   "TrainingTime" -> 0.070775, "MaxTrainingMemory" -> 220000, 
                   "DataMemory" -> 22976, "FunctionMemory" -> 86128, 
                   "LanguageVersion" -> {13.1, 0}, "Date" -> 
                   DateObject[{
                    2022, 12, 4, 14, 25, 5.798145`7.515864059786618}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, 
                   "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                 "LogPDFDistribution" -> 
                 MachineLearning`TailedQuantileDistribution[<|
                   "Quantiles" -> {-7.173238193477166, -7.173238193477166, \
-5.957762682813879, -5.505343391085791, -5.137053644875943, \
-4.839361849432994, -4.800994757869588, -4.736339520600383, \
-4.720994010399741, -4.71905825007799, -4.703766525124256}, 
                    "LeftBoundary" -> -5.957762682813879, "LeftScale" -> 
                    0.6077377553316436, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                 Around[36.60573897803041, 1.772055230348638], 
                 "EntropySampleSize" -> 10|>], 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
              "ID" -> 8833432794738512184|>], 
            MachineLearning`MLProcessor[
            "Threads", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>, 
                "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 8812518305512619507|>], 
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 7405342354547017736|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
              "Missing" -> "Allowed"|>], 
            MachineLearning`MLProcessor[
            "LogRescaleNumericalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
              "Indices" -> {2, 4, 5}, 
              "Centers" -> {0.43, 23.052, 256.593674903342}, 
              "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
               620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
              7299988401548215772, 
              "Output" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
            MachineLearning`MLProcessor[
            "Standardize", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
              "Mean" -> {146.57391774891778`, 3.693542625490828, 
               68.22157333333334, 3.504982149660075, 1.4086804722859232`}, 
              "StandardDeviation" -> {253.37495961794207`, 
               3.1699732836017724`, 118.62403407631172`, 2.423277341145054, 
               1.2610287731963699`}, 
              "Output" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 1400194064660864776|>], 
            MachineLearning`MLProcessor[
            "ToLowerCase", <|
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 3080611390123234620, 
              "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
            
            MachineLearning`MLProcessor[
            "RemoveDiacritics", <|
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 8393247813432535084, 
              "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
            
            MachineLearning`MLProcessor[
            "Threads", <|
             "Input" -> <|
               "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
                "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "EmbedNominalVector", <|
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>}, 
                  "Output" -> <|
                   "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>|>, 
                  "EmbeddingVectors" -> CompressedData["
1:eJxTTMoPSmVmYGBgBGIeIGZlwAANaDSyuINV5XF7IP0gJG/3fiC9wNDnNIjf
ICJ2FcR/IHn3Poi/gM/rKZgf6n8QrC7ZZSuIdtjqegMk77C36wKYvzLrFVje
m+cMWP3c+/vBtN3JS2D6yeWLYPkZKy+D+S8/gO0/YOZ2E2wP0+lLIJrBWOIc
WPzO1IcgdQ2LGjeB3TUp+SKYVtMFuy+h+e8TEH0gZu8JsL6j5o/B5gcFgd1z
QGXZU7D77ga+BKv/OBtsr0L9dYg7eOPvguXTp10Gm/vmJDgcFDacBZvv4HF9
Ith+wUiwvgajkndgfdOYHoHDbXHBcxCdECkFdndCbOtXsD9uJB4Bq1v48ybY
HTsegP3PYPvzEVi8+NYWsHv2tz0Em2N16SiY72lzDWzP1gO3wPoMs46A5BW2
L5wMlt+n82o/AO0BofY=
                   "], "Version" -> {13.1, 0}, "ID" -> 436956950344966148|>], 
                
                MachineLearning`MLProcessor[
                "Sequence", <|
                 "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Processors" -> {
                    MachineLearning`MLProcessor[
                    "TextToNominalSequence", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {13.1, 0}, "ID" -> 9037232907786629142, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", <|
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> {-9125122986955958911, \
-8920710729279180450, -8515397617198652367, -8156047279148961366, \
-5900137721653868194, -5516340669880835636, -4691435917638705529, \
-4484112905383790136, -3872414778415116274, -3607098371778122975, \
-3443150737398804539, -3355080348777836050, -2509905740948760720, \
-2159536488856785732, 242552411836269492, 450553210381435687, 
                    539691877398804025, 950421020428451240, 
                    1561895621580759179, 1579009397565082067, 
                    1671416204203290022, 2799484578252825308, 
                    3287432777910049379, 3477167097823690523, 
                    3576478456825362866, 4539722962543247872, 
                    5070765454536077049, 5138905625963890559, 
                    6058376361354581924, 6694985464746702812, 
                    6748311694457965250, 7603334142034012365, 
                    7731804819316663270, 8918825649307280967}, "Values" -> 
                    None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {13.1, 0}|>], 
                    "InverseDocumentFrequency" -> {1.91959284073794, 
                    3.624340932976365, 1.3217558399823195`, 
                    2.0149030205422647`, 2.0149030205422647`, 
                    2.120263536200091, 1.3217558399823195`, 
                    2.9311937524164198`, 1.2729656758128873`, 
                    1.91959284073794, 4.31748811353631, 2.120263536200091, 
                    4.31748811353631, 2.0149030205422647`, 
                    1.4842747694800942`, 2.0149030205422647`, 
                    2.120263536200091, 1.5448993912965292`, 
                    2.0149030205422647`, 1.3730491343698699`, 
                    2.0149030205422647`, 3.624340932976365, 0., 
                    0.11279549414534427`, 2.0149030205422647`, 
                    3.2188758248682006`, 1.4842747694800942`, 
                    2.9311937524164198`, 2.0149030205422647`, 
                    2.0149030205422647`, 0.5332984796180493, 
                    2.120263536200091, 4.31748811353631, 2.0149030205422647`},
                     "Version" -> {13.1, 0}, "ID" -> 7526152790873636702, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                  "Invertibility" -> "Impossible", "StructurePreserving" -> 
                  True, "Missing" -> "Forbidden"|>]}, "Invertibility" -> 
              "Impossible", "StructurePreserving" -> True, "Missing" -> 
              "Forbidden"|>], 
            MachineLearning`MLProcessor[
            "MergeVectors", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
                "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
                Span[1, 5], 
                Span[6, 39], 
                Span[40, 44]}, 
              "Wrappers" -> {Identity, SparseArray, Identity}, 
              "Output" -> <|
               "(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
                   "], "Type" -> "NumericalVector"|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 613954820935696947|>]}, 
          "Invertibility" -> "Impossible", "StructurePreserving" -> True, 
          "Missing" -> "Imputed"|>]|>, 
     "Output" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "ToVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 9119616879012754245|>], 
            MachineLearning`MLProcessor[
            "IntegerEncodeNominalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Index" -> {<|
                "A" -> 1, "B" -> 2, "C" -> 3, "D" -> 4, "E" -> 5|>}, 
              "MissingCode" -> 0, "Version" -> {13.1, 0}, "ID" -> 
              1482488055587057283, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
            MachineLearning`MLProcessor[
            "FromVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|
                 "Type" -> "NominalVector", "Weight" -> 1, 
                  "SetSize" -> {5}|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 4789940262906318728|>], 
            MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 5|>,
               "Key" -> "f1", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
       "Name" -> "class", 
       "Marginal" -> <|
        "A" -> 0.08750000000000001, "B" -> 0.2625, "C" -> 0.325, "D" -> 
         0.21250000000000002`, "E" -> 0.1125|>|>, "LabelSplitter" -> 
     MachineLearning`MLProcessor[
      "FeatureLabelSplit", <|
       "Processor" -> 
        MachineLearning`MLProcessor[
         "KeyIndexSplit", <|
          "Index" -> "Ratings", 
           "Order" -> {
            "Elevation", "GICS Sector Name", 
             "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
             "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
             "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
             "Carbon Disclosure", "Revenue (USD mn)", "Ratings"}|>], 
        "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
     "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
     "Prior" -> Automatic, "Utility" -> 
     SparseArray[
      Automatic, {5, 6}, 0., {
       1, {{0, 1, 2, 3, 4, 5}, {{2}, {3}, {4}, {5}, {6}}}, {1., 1., 1., 1., 
        1.}}], "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
     "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
     "Model" -> <|"Trees" -> {
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.3368643075227737}, "LeafValues" -> 
           RawArray["Real32",{-2.431525707244873, -2.612685203552246}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
           RawArray["Real32",{-1.2978922128677368`, -1.3490285873413086`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
           RawArray["Real32",{-1.146612286567688, -1.0437551736831665`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
           RawArray["Real32",{-1.5086036920547485`, -1.5821760892868042`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742331404238939}, "LeafValues" -> 
           RawArray["Real32",{-2.183675527572632, -2.285621166229248}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.3368643075227737}, "LeafValues" -> 
           RawArray["Real32",{0.0774463638663292, -0.08627570420503616}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
           RawArray["Real32",{0.021712807938456535`, -0.02527582459151745}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
           RawArray["Real32",{-0.049623556435108185`, 0.045634184032678604`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
           RawArray["Real32",{0.03316926956176758, -0.035249438136816025`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{0.05364079028367996, -0.04738486558198929}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.3368643075227737}, "LeafValues" -> 
           RawArray["Real32",{0.0668313056230545, -0.08576218038797379}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
           RawArray["Real32",{0.020642418414354324`, -0.024161292240023613`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
           RawArray["Real32",{-0.04350278526544571, 0.04727746918797493}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{0.034765247255563736`, -0.030163785442709923`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{0.047272294759750366`, -0.04537732154130936}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.3368643075227737}, "LeafValues" -> 
           RawArray["Real32",{0.056882593780756, -0.08523983508348465}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
           RawArray["Real32",{0.018633397296071053`, -0.022175932303071022`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
           RawArray["Real32",{-0.046569015830755234`, 0.04125518724322319}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
           RawArray["Real32",{0.030932601541280746`, -0.03352378308773041}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.15949114412069323`}, "LeafValues" -> 
           RawArray["Real32",{0.045321498066186905`, -0.04460001736879349}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.3368643075227737}, "LeafValues" -> 
           RawArray["Real32",{0.049955692142248154`, -0.08481399714946747}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
           RawArray["Real32",{0.017739780247211456`, -0.021117987111210823`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
           RawArray["Real32",{-0.04331622272729874, 0.03702264651656151}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{0.03193158656358719, -0.028323538601398468`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{0.04199681431055069, -0.04345059022307396}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.40430448949337}, "LeafValues" -> 
           RawArray["Real32",{-0.05966782569885254, 0.06378602981567383}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
           RawArray["Real32",{0.016562538221478462`, -0.019878825172781944`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
           RawArray["Real32",{-0.03880374878644943, 0.03956323117017746}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
           RawArray["Real32",{0.02873001992702484, -0.031783994287252426`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{0.038168180733919144`, -0.041827961802482605`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.37771682441234583`}, "LeafValues" -> 
           RawArray["Real32",{-0.059602752327919006`, 0.06352988630533218}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
           RawArray["Real32",{0.015058765187859535`, -0.018225619569420815`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{-0.0414804145693779, 0.03350997716188431}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{0.02965039387345314, -0.026780493557453156`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.1594899967312813}, "LeafValues" -> 
           RawArray["Real32",{0.042041048407554626`, -0.043146975338459015`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.3368643075227737}, "LeafValues" -> 
           RawArray["Real32",{0.04223975911736488, -0.08442188054323196}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
           RawArray["Real32",{0.013616424053907394`, -0.016519298776984215`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
           RawArray["Real32",{-0.04011334478855133, 0.0328211635351181}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
           RawArray["Real32",{0.02533542364835739, -0.02922079898416996}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.1594899967312813}, "LeafValues" -> 
           RawArray["Real32",{0.03739221394062042, -0.041153911501169205`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.3368643075227737}, "LeafValues" -> 
           RawArray["Real32",{0.037536896765232086`, -0.0840778574347496}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
           RawArray["Real32",{0.013071875087916851`, -0.015695961192250252`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
           RawArray["Real32",{-0.03528054803609848, 0.034380026161670685`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
           RawArray["Real32",{0.02330951951444149, -0.027455292642116547`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
           RawArray["Real32",{0.03292088583111763, -0.03933478146791458}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.15864637494087216`}, "LeafValues" -> 
           RawArray["Real32",{-0.0419226810336113, 0.06674133986234665}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
           RawArray["Real32",{-0.01149919256567955, 0.015678852796554565`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
           RawArray["Real32",{-0.037247054278850555`, 0.02937718667089939}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{0.025447655469179153`, -0.02383670024573803}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.06228766031563281}, "LeafValues" -> 
           RawArray["Real32",{0.033571407198905945`, -0.03945321589708328}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.15864637494087216`}, "LeafValues" -> 
           RawArray["Real32",{-0.039992805570364, 0.058582764118909836`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
           RawArray["Real32",{0.01224140077829361, -0.014678881503641605`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{-0.03664098680019379, 0.027850892394781113`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
           RawArray["Real32",{0.02108127810060978, -0.025379696860909462`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.13523437827825543`}, "LeafValues" -> 
           RawArray["Real32",{0.037735097110271454`, -0.041233181953430176`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.15864637494087216`}, "LeafValues" -> 
           RawArray["Real32",{-0.03796382620930672, 0.05071137845516205}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
           RawArray["Real32",{-0.011203814297914505`, 0.015347259119153023`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
           RawArray["Real32",{-0.0325343944132328, 0.030874188989400864`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{0.02156560868024826, -0.02119915373623371}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.13523437827825543`}, "LeafValues" -> 
           RawArray["Real32",{0.03345649316906929, -0.03929663076996803}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.15864637494087216`}, "LeafValues" -> 
           RawArray["Real32",{-0.03633779287338257, 0.044794097542762756`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
           RawArray["Real32",{-0.010850345715880394`, 0.014739234000444412`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
           RawArray["Real32",{-0.030504101887345314`, 0.028338653966784477`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
           RawArray["Real32",{0.018601655960083008`, -0.023218130692839622`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{0.031279344111680984`, -0.0385090634226799}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
           RawArray["Real32",{0.039427775889635086`, -0.03506680205464363}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
           RawArray["Real32",{-0.011660861782729626`, 0.013282992877066135`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
           RawArray["Real32",{-0.03352691978216171, 0.0255462434142828}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{0.019633274525403976`, -0.01964915171265602}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.13523437827825543`}, "LeafValues" -> 
           RawArray["Real32",{0.03151753544807434, -0.03778785839676857}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.15864637494087216`}, "LeafValues" -> 
           RawArray["Real32",{-0.03465897589921951, 0.03971835970878601}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
           RawArray["Real32",{-0.010458148084580898`, 0.014204559847712517`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{-0.032176997512578964`, 0.023460185155272484`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {-0.1592362746596336}, "LeafValues" -> 
           RawArray["Real32",{0.018894750624895096`, -0.020111652091145515`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{0.028412511572241783`, -0.036918338388204575`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.15864637494087216`}, "LeafValues" -> 
           RawArray["Real32",{-0.03282579034566879, 0.035568345338106155`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
           RawArray["Real32",{-0.01197622437030077, 0.01381203718483448}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
           RawArray["Real32",{-0.03131510317325592, 0.023310018703341484`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
           RawArray["Real32",{0.016193067654967308`, -0.020894337445497513`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.47109524905681605`}, "LeafValues" -> 
           RawArray["Real32",{0.04193616285920143, -0.043115515261888504`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.15864637494087216`}, "LeafValues" -> 
           RawArray["Real32",{-0.03098907135426998, 0.0315806083381176}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
           RawArray["Real32",{-0.011793985962867737`, 0.013611920177936554`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
           RawArray["Real32",{-0.028138235211372375`, 0.025643251836299896`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
           RawArray["Real32",{-0.019132522866129875`, 0.017212899401783943`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.47109524905681605`}, "LeafValues" -> 
           RawArray["Real32",{0.03701833635568619, -0.0413011834025383}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.15864637494087216`}, "LeafValues" -> 
           RawArray["Real32",{-0.029458554461598396`, 0.028171395882964134`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{41}], 
           "NumericalThresholds" -> {-0.019889452902134504`}, "LeafValues" -> 
           RawArray["Real32",{0.011781546287238598`, -0.012409999035298824`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
           RawArray["Real32",{-0.030355656519532204`, 0.022624382749199867`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{0.01787077635526657, -0.018135100603103638`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.5034131258726119}, "LeafValues" -> 
           RawArray["Real32",{0.04871641471982002, -0.04582119360566139}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
           RawArray["Real32",{-0.029268721118569374`, 0.028667712584137917`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
           RawArray["Real32",{-0.011608344502747059`, 0.013282344676554203`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
           RawArray["Real32",{-0.026007574051618576`, 0.023206960409879684`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
           RawArray["Real32",{-0.018501734361052513`, 0.016800839453935623`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.5192682743072509}, "LeafValues" -> 
           RawArray["Real32",{0.05980156734585762, -0.04911500960588455}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.29496645927429194`}, "LeafValues" -> 
           RawArray["Real32",{0.029567468911409378`, -0.03384292498230934}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
           RawArray["Real32",{-0.010221794247627258`, 0.01386761199682951}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
           RawArray["Real32",{-0.029331764206290245`, 0.021620532497763634`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.3263751864433288}, "LeafValues" -> 
           RawArray["Real32",{-0.01686287112534046, 0.019317079335451126`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.5192682743072509}, "LeafValues" -> 
           RawArray["Real32",{0.05243396759033203, -0.04712088406085968}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
           RawArray["Real32",{-0.029035484418272972`, 0.02798578143119812}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
           RawArray["Real32",{-0.012139498256146908`, 0.013856377452611923`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
           RawArray["Real32",{-0.023865381255745888`, 0.02450680173933506}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{0.018009420484304428`, -0.017916914075613022`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.5298499464988707}, "LeafValues" -> 
           RawArray["Real32",{0.046774644404649734`, -0.03323288634419441}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
           RawArray["Real32",{-0.02745767869055271, 0.026178397238254547`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
           RawArray["Real32",{-0.011075373739004135`, 0.012429239228367805`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
           RawArray["Real32",{-0.027843665331602097`, 0.020292052999138832`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
           RawArray["Real32",{-0.018388524651527405`, 0.016445640474557877`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.5298499464988707}, "LeafValues" -> 
           RawArray["Real32",{0.042116519063711166`, -0.031404752284288406`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.29496645927429194`}, "LeafValues" -> 
           RawArray["Real32",{0.03002113103866577, -0.033324792981147766`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
           RawArray["Real32",{-0.011193253099918365`, 0.012583556585013866`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
           RawArray["Real32",{-0.024266496300697327`, 0.021790938451886177`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{0.016743110492825508`, -0.01718917489051819}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44959709048271174`}, "LeafValues" -> 
           RawArray["Real32",{0.03586278855800629, -0.03241812065243721}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
           RawArray["Real32",{-0.027155939489603043`, 0.025089722126722336`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
           RawArray["Real32",{-0.01004753541201353, 0.013462675735354424`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
           RawArray["Real32",{-0.027179338037967682`, 0.019790692254900932`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.3263751864433288}, "LeafValues" -> 
           RawArray["Real32",{-0.016744358465075493`, 0.019065232947468758`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.5298499464988707}, "LeafValues" -> 
           RawArray["Real32",{0.0375242717564106, -0.02992481179535389}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
           RawArray["Real32",{-0.025783129036426544`, 0.022708354517817497`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
           RawArray["Real32",{-0.011468995362520218`, 0.01282065361738205}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
           RawArray["Real32",{-0.022277945652604103`, 0.023019233718514442`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
           RawArray["Real32",{-0.01873352751135826, 0.016954578459262848`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44959709048271174`}, "LeafValues" -> 
           RawArray["Real32",{0.03234550729393959, -0.030749153345823288`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
           RawArray["Real32",{-0.024322595447301865`, 0.020912181586027145`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
           RawArray["Real32",{-0.010887686163187027`, 0.012051132507622242`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
           RawArray["Real32",{-0.025991857051849365`, 0.01916320249438286}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.3263751864433288}, "LeafValues" -> 
           RawArray["Real32",{-0.01580948382616043, 0.017424819990992546`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.5298499464988707}, "LeafValues" -> 
           RawArray["Real32",{0.03321295231580734, -0.02839808352291584}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {-0.159236803650856}, "LeafValues" -> 
           RawArray["Real32",{0.026992639526724815`, -0.019525958225131035`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
           RawArray["Real32",{-0.010662858374416828`, 0.011726855300366879`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
           RawArray["Real32",{-0.023195350542664528`, 0.021320732310414314`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
           RawArray["Real32",{-0.01873006671667099, 0.01664832793176174}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44959709048271174`}, "LeafValues" -> 
           RawArray["Real32",{0.027920782566070557`, -0.02901504375040531}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{41}], 
           "NumericalThresholds" -> {0.01815010700374842}, "LeafValues" -> 
           RawArray["Real32",{-0.02531089261174202, 0.019248420372605324`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
           RawArray["Real32",{-0.009790024720132351, 0.012862082570791245`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
           RawArray["Real32",{-0.025321925058960915`, 0.018924463540315628`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{0.01635843515396118, -0.01681009866297245}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.5298499464988707}, "LeafValues" -> 
           RawArray["Real32",{0.029392967000603676`, -0.027094345539808273`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {-0.159236803650856}, "LeafValues" -> 
           RawArray["Real32",{0.025197820737957954`, -0.01889081858098507}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
           RawArray["Real32",{-0.011334123089909554`, 0.012530898675322533`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
           RawArray["Real32",{-0.02042749896645546, 0.021310612559318542`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
           RawArray["Real32",{-0.018016546964645386`, 0.016079680994153023`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.4516270160675048}, "LeafValues" -> 
           RawArray["Real32",{0.03270099684596062, -0.031070200726389885`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
           RawArray["Real32",{-0.023679830133914948`, 0.019968224689364433`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
           RawArray["Real32",{-0.010773928835988045`, 0.011874783784151077`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
           RawArray["Real32",{-0.024492843076586723`, 0.018083160743117332`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{41}], 
           "NumericalThresholds" -> {-0.019889452902134504`}, "LeafValues" -> 
           RawArray["Real32",{-0.013984777964651585`, 0.019465669989585876`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.45670351386070246`}, "LeafValues" -> 
           RawArray["Real32",{0.03755681589245796, -0.03291207551956177}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{41}], 
           "NumericalThresholds" -> {0.01815010700374842}, "LeafValues" -> 
           RawArray["Real32",{-0.024043289944529533`, 0.01826220564544201}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
           RawArray["Real32",{-0.010524326004087925`, 0.011581857688724995`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
           RawArray["Real32",{-0.021624092012643814`, 0.019737225025892258`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
           RawArray["Real32",{-0.018224719911813736`, 0.016226863488554955`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.45670351386070246`}, "LeafValues" -> 
           RawArray["Real32",{0.03323090821504593, -0.03113982267677784}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.29496645927429194`}, "LeafValues" -> 
           RawArray["Real32",{0.030780989676713943`, -0.03436313197016716}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{41}], 
           "NumericalThresholds" -> {-0.019889452902134504`}, "LeafValues" -> 
           RawArray["Real32",{0.010305430740118027`, -0.011336887255311012`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
           RawArray["Real32",{-0.02392655238509178, 0.017778167501091957`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.3263751864433288}, "LeafValues" -> 
           RawArray["Real32",{-0.016090797260403633`, 0.018127676099538803`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.45670351386070246`}, "LeafValues" -> 
           RawArray["Real32",{0.0298019889742136, -0.029582945629954338`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
           RawArray["Real32",{-0.02331439033150673, 0.018150443211197853`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
           RawArray["Real32",{-0.010509784333407879`, 0.011631280183792114`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.428227424621582}, "LeafValues" -> 
           RawArray["Real32",{-0.023246005177497864`, 0.016721360385417938`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
           RawArray["Real32",{-0.017850397154688835`, 0.016147004440426826`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.45670351386070246`}, "LeafValues" -> 
           RawArray["Real32",{0.026979977265000343`, -0.028150474652647972`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {-0.159236803650856}, "LeafValues" -> 
           RawArray["Real32",{0.02434924989938736, -0.019087137654423714`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
           RawArray["Real32",{-0.009270907379686832, 0.012408015318214893`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.18637733906507495`}, "LeafValues" -> 
           RawArray["Real32",{-0.02297562174499035, 0.017143994569778442`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
           RawArray["Real32",{0.014581955038011074`, -0.018885789439082146`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
           RawArray["Real32",{-0.03622259944677353, 0.017858019098639488`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{41}], 
           "NumericalThresholds" -> {0.01815010700374842}, "LeafValues" -> 
           RawArray["Real32",{-0.023343563079833984`, 0.015969356521964073`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
           RawArray["Real32",{-0.011294187977910042`, 0.012782357633113861`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
           RawArray["Real32",{-0.020421361550688744`, 0.018834412097930908`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
           RawArray["Real32",{-0.017243647947907448`, 0.01532076857984066}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.45670351386070246`}, "LeafValues" -> 
           RawArray["Real32",{0.02438037283718586, -0.026889046654105186`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {-0.159236803650856}, "LeafValues" -> 
           RawArray["Real32",{0.022491002455353737`, -0.018685219809412956`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
           RawArray["Real32",{-0.010755673982203007`, 0.012117291800677776`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{41}], 
           "NumericalThresholds" -> {-0.19613610953092572`}, "LeafValues" -> 
           RawArray["Real32",{0.022220240905880928`, -0.01867150142788887}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.3263751864433288}, "LeafValues" -> 
           RawArray["Real32",{-0.01578618958592415, 0.01784929633140564}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.5298499464988707}, "LeafValues" -> 
           RawArray["Real32",{0.025715185329318047`, -0.026047101244330406`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
           RawArray["Real32",{0.03150030970573425, -0.0329241007566452}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
           RawArray["Real32",{0.010438074357807636`, -0.012765650637447834`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{41}], 
           "NumericalThresholds" -> {-0.19613610953092572`}, "LeafValues" -> 
           RawArray["Real32",{0.02070467732846737, -0.01730036363005638}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {-0.1592362746596336}, "LeafValues" -> 
           RawArray["Real32",{0.015606876462697983`, -0.017027944326400757`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
           RawArray["Real32",{-0.03524508699774742, 0.01699139177799225}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.29496645927429194`}, "LeafValues" -> 
           RawArray["Real32",{0.027191484346985817`, -0.033707305788993835`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{41}], 
           "NumericalThresholds" -> {-0.019889452902134504`}, "LeafValues" -> 
           RawArray["Real32",{0.011288702487945557`, -0.01222702395170927}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
           RawArray["Real32",{-0.018140539526939392`, 0.019513165578246117`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.1594905331730843}, "LeafValues" -> 
           RawArray["Real32",{0.019910652190446854`, -0.016230804845690727`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.45670351386070246`}, "LeafValues" -> 
           RawArray["Real32",{0.022975025698542595`, -0.026018254458904266`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.29496645927429194`}, "LeafValues" -> 
           RawArray["Real32",{0.02459622360765934, -0.03157705068588257}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.30680967867374415`}, "LeafValues" -> 
           RawArray["Real32",{0.009600109420716763, -0.011732401326298714`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.27170188724994665`}, "LeafValues" -> 
           RawArray["Real32",{-0.02063523419201374, 0.020433714613318443`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.1594905331730843}, "LeafValues" -> 
           RawArray["Real32",{0.0181482695043087, -0.015092267654836178`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{40}], 
           "NumericalThresholds" -> {-0.5298499464988707}, "LeafValues" -> 
           RawArray["Real32",{0.02384190633893013, -0.024442706257104874`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
           RawArray["Real32",{0.028468245640397072`, -0.030872976407408714`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
           RawArray["Real32",{-0.009082041680812836, 0.012189231812953949`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{41}], 
           "NumericalThresholds" -> {-0.19613610953092572`}, "LeafValues" -> 
           RawArray["Real32",{0.020202331244945526`, -0.01793244294822216}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
           RawArray["Real32",{-0.018859535455703735`, 0.017224058508872986`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {0.2998470216989518}, "LeafValues" -> 
           RawArray["Real32",{-0.024096878245472908`, 0.022729866206645966`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
           RawArray["Real32",{0.025493523105978966`, -0.029248569160699844`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{41}], 
           "NumericalThresholds" -> {-0.019889452902134504`}, "LeafValues" -> 
           RawArray["Real32",{0.010854964144527912`, -0.011698204092681408`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.27170188724994665`}, "LeafValues" -> 
           RawArray["Real32",{-0.019003726541996002`, 0.01811191439628601}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
           RawArray["Real32",{0.014834857545793056`, -0.019031692296266556`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {0.306055173277855}, "LeafValues" -> 
           RawArray["Real32",{-0.026224007830023766`, 0.027274399995803833`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.29496645927429194`}, "LeafValues" -> 
           RawArray["Real32",{0.02269970066845417, -0.03006071411073208}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
           RawArray["Real32",{-0.010683500207960606`, 0.012032766826450825`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.1978793069720268}, "LeafValues" -> 
           RawArray["Real32",{-0.01921895332634449, 0.016856616362929344`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
           RawArray["Real32",{-0.017304016277194023`, 0.015542147681117058`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.45670351386070246`}, "LeafValues" -> 
           RawArray["Real32",{0.02366696670651436, -0.025531847029924393`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
           RawArray["Real32",{0.02224738523364067, -0.02768585830926895}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
           RawArray["Real32",{-0.010134343057870865`, 0.011412709020078182`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{41}], 
           "NumericalThresholds" -> {-0.19613610953092572`}, "LeafValues" -> 
           RawArray["Real32",{0.019193194806575775`, -0.017192091792821884`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.3263751864433288}, "LeafValues" -> 
           RawArray["Real32",{-0.015433025546371937`, 0.017627084627747536`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {0.306055173277855}, "LeafValues" -> 
           RawArray["Real32",{-0.024512991309165955`, 0.02426273562014103}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.29496645927429194`}, "LeafValues" -> 
           RawArray["Real32",{0.020060420036315918`, -0.028878428041934967`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{41}], 
           "NumericalThresholds" -> {-0.019889452902134504`}, "LeafValues" -> 
           RawArray["Real32",{0.010468808002769947`, -0.011380615644156933`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.27170188724994665`}, "LeafValues" -> 
           RawArray["Real32",{-0.018010474741458893`, 0.017286522313952446`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{43}], 
           "NumericalThresholds" -> {0.34776064753532415`}, "LeafValues" -> 
           RawArray["Real32",{0.016094407066702843`, -0.01704922318458557}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.45670351386070246`}, "LeafValues" -> 
           RawArray["Real32",{0.022471360862255096`, -0.024960774928331375`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
           RawArray["Real32",{-0.026455799117684364`, 0.02150760404765606}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{41}], 
           "NumericalThresholds" -> {-0.019889452902134504`}, "LeafValues" -> 
           RawArray["Real32",{0.010077702812850475`, -0.01088335644453764}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{41}], 
           "NumericalThresholds" -> {-0.19613610953092572`}, "LeafValues" -> 
           RawArray["Real32",{0.018501589074730873`, -0.016530297696590424`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.1594905331730843}, "LeafValues" -> 
           RawArray["Real32",{0.017688671126961708`, -0.014549712650477886`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
           RawArray["Real32",{-0.03268406167626381, 0.01573518104851246}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.29496645927429194`}, "LeafValues" -> 
           RawArray["Real32",{0.01959661766886711, -0.02870943583548069}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
           RawArray["Real32",{-0.009177977219223976, 0.012218000367283821`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {-0.159236803650856}, "LeafValues" -> 
           RawArray["Real32",{-0.018650848418474197`, 0.01722940057516098}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
           RawArray["Real32",{-0.01789308525621891, 0.016276543959975243`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {0.306055173277855}, "LeafValues" -> 
           RawArray["Real32",{-0.022769777104258537`, 0.022051986306905746`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
           RawArray["Real32",{-0.02578001469373703, 0.02097124420106411}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742289029061794}, "LeafValues" -> 
           RawArray["Real32",{-0.010048441588878632`, 0.011089774779975414`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{41}], 
           "NumericalThresholds" -> {-0.19613610953092572`}, "LeafValues" -> 
           RawArray["Real32",{0.01794067583978176, -0.016168149188160896`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
           RawArray["Real32",{0.01415763609111309, -0.018423674628138542`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.45670351386070246`}, "LeafValues" -> 
           RawArray["Real32",{0.02159348502755165, -0.023858707398176193`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1}], 
           "NumericalThresholds" -> {-0.29496645927429194`}, "LeafValues" -> 
           RawArray["Real32",{0.01871633529663086, -0.027979819104075432`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.45104835927486414`}, "LeafValues" -> 
           RawArray["Real32",{0.011316545307636261`, -0.010059256106615067`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.44604028761386866`}, "LeafValues" -> 
           RawArray["Real32",{-0.01692436821758747, 0.017591221258044243`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.3263751864433288}, "LeafValues" -> 
           RawArray["Real32",{-0.014924401417374611`, 0.0167208481580019}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {-0.08145799115300177}, "LeafValues" -> 
           RawArray["Real32",{-0.024651825428009033`, 0.01887044683098793}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
           RawArray["Real32",{0.019544227048754692`, -0.026377232745289803`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {-0.15923601388931272`}, "LeafValues" -> 
           RawArray["Real32",{-0.009361904114484787, 0.012232447974383831`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{41}], 
           "NumericalThresholds" -> {-0.19613610953092572`}, "LeafValues" -> 
           RawArray["Real32",{0.018358483910560608`, -0.016249530017375946`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3}], 
           "NumericalThresholds" -> {0.1594905331730843}, "LeafValues" -> 
           RawArray["Real32",{0.016993694007396698`, -0.014418584294617176`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{44}], 
           "NumericalThresholds" -> {-0.7375420629978179}, "LeafValues" -> 
           RawArray["Real32",{-0.030645782127976418`, 0.014763465151190758`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{42}], 
           "NumericalThresholds" -> {-0.13785297423601148`}, "LeafValues" -> 
           RawArray["Real32",{-0.025240130722522736`, 0.01978371851146221}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{41}], 
           "NumericalThresholds" -> {-0.019889452902134504`}, "LeafValues" -> 
           RawArray["Real32",{0.0101877236738801, -0.01126943901181221}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {-0.159236803650856}, "LeafValues" -> 
           RawArray["Real32",{-0.01807437278330326, 0.01668204925954342}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2}], 
           "NumericalThresholds" -> {-0.01742336247116327}, "LeafValues" -> 
           RawArray["Real32",{-0.01739601045846939, 0.015281597152352333`}], 
           "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4}], 
           "NumericalThresholds" -> {0.306055173277855}, "LeafValues" -> 
           RawArray["Real32",{-0.021805334836244583`, 0.021805796772241592`}],
            "Children" -> RawArray["Integer16",{{-1, -2}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>]}, "ClassNumber" -> 5, 
       "IterationsNumber" -> 50, "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|"(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
               "], "Type" -> "NumericalVector"|>|>, 
          "Output" -> <|
           "(f2f6(f1f3f4f5f7))" -> <|
             "Type" -> "NumericalVector", "Weight" -> 6.9999999999999964`|>|>,
           "Processors" -> {
            MachineLearning`MLProcessor[
            "DensifyNumericalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
                   "], "Type" -> "NumericalVector"|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 6179163345349236217, 
              "Output" -> <|
               "(f2f6(f1f3f4f5f7))" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 
                  6.9999999999999964`|>|>|>], 
            MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|
               "Type" -> "NumericalVector", "Weight" -> 6.9999999999999964`|>,
               "Key" -> "(f2f6(f1f3f4f5f7))", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
       "GradientBoostedTrees", "PostProcessor" -> 
       MachineLearning`MLProcessor["Identity"], 
       "Options" -> <|
        "BoostingMethod" -> <|"Value" -> "Gradient", "Options" -> <||>|>, 
         MaxTrainingRounds -> <|"Value" -> 50, "Options" -> <||>|>, 
         "LeavesNumber" -> <|"Value" -> 3, "Options" -> <||>|>, 
         "LearningRate" -> <|"Value" -> 0.1, "Options" -> <||>|>, 
         ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
         "MaxBinNumber" -> <|"Value" -> 255, "Options" -> <||>|>, 
         "ThreadNumber" -> <|"Value" -> 8, "Options" -> <||>|>, 
         "MaxDepth" -> <|"Value" -> 6, "Options" -> <||>|>, 
         "LeafSize" -> <|"Value" -> 35, "Options" -> <||>|>, 
         "FeatureFraction" -> <|"Value" -> 1, "Options" -> <||>|>, 
         "BaggingFraction" -> <|"Value" -> 1, "Options" -> <||>|>, 
         "BaggingFrequency" -> <|"Value" -> 0, "Options" -> <||>|>, 
         "MinGainToSplit" -> <|"Value" -> 0, "Options" -> <||>|>, 
         "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
         "L2Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
         "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>|>|>, 
     "TrainingInformation" -> <|
      "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
       Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
       "PreprocessingTime" -> 0.151629`5.632327264287427, "LossName" -> 
       "MeanCrossEntropy", "BestModelInformation" -> 
       Dataset[<|
         "MeanCrossEntropy" -> 
          Around[1.4741637557311125`, 0.1333865793972809], "Accuracy" -> 
          Around[0.3263837789328387, 0.16923331038145822`], "EvaluationTime" -> 
          0.00021081851067789197`, "TestSize" -> 15, "ModelMemory" -> 25288, 
          "ModelUtility" -> -1.0992205581871257`, "TrainingSize" -> 60, 
          "TrainingTime" -> 0.01, "TrainingMemory" -> 152384, 
          "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
            Around[1.4741637557311125`, 0.09431855481109515]}, 
          "AccuracyHistory" -> {
            Around[0.3263837789328387, 0.11966602137337685`]}, 
          "Configuration" -> {
           "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
            MaxTrainingRounds -> 50, "LeavesNumber" -> 3, "LearningRate" -> 
            0.1, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
            "ThreadNumber" -> 8, "MaxDepth" -> 6, "LeafSize" -> 35, 
            "FeatureFraction" -> 1, "BaggingFraction" -> 1, 
            "BaggingFrequency" -> 0, "MinGainToSplit" -> 0, 
            "L1Regularization" -> 0, "L2Regularization" -> 0, "LossFunction" -> 
            Automatic}, "FinalTrainingSize" -> 75|>, 
         TypeSystem`Struct[{
          "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
           "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
           "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
           "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
          TypeSystem`AnyType, TypeSystem`AnyType, 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Vector[TypeSystem`AnyType, 17], 
           TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
       Dataset[<|<|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 250|>, 
              "LearningRate" -> <|"Value" -> 0.01|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 35|>,
               "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.5446314494798947`, 0.05201582567213101], "Accuracy" -> 
               Around[0.33669909792311253`, 0.08267554904537108], 
               "EvaluationTime" -> 0.0007710572825034958, "TestSize" -> 65, 
               "ModelMemory" -> 25288, "ModelUtility" -> -1.1346932586378506`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.015848931924611134`,
                "TrainingMemory" -> 101016, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.5446314494798947`, 0.03678074306178114]}, 
               "AccuracyHistory" -> {
                 Around[0.33669909792311253`, 0.05846044136830288]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.0007710572825034958, "MeanCrossEntropy" -> 
              Around[1.5446314494798947`, 0.05201582567213101], "ModelMemory" -> 
              25288, "TrainingMemory" -> 101016, "TrainingTime" -> 
              0.027735630868069485`|>, "Index" -> 1|>, <|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 3|>, 
              "LearningRate" -> <|"Value" -> 0.1|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 35|>,
               "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.5446314494798947`, 0.05201582567213101], "Accuracy" -> 
               Around[0.33669909792311253`, 0.08267554904537108], 
               "EvaluationTime" -> 0.00004865042554105199, "TestSize" -> 65, 
               "ModelMemory" -> 25288, "ModelUtility" -> -1.1346925362309936`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.00630957344480193, 
               "TrainingMemory" -> 80744, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.5446314494798947`, 0.03678074306178114]}, 
               "AccuracyHistory" -> {
                 Around[0.33669909792311253`, 0.05846044136830288]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.4741637557311125`, 0.1333865793972809], "Accuracy" -> 
               Around[0.3263837789328387, 0.16923331038145822`], 
               "EvaluationTime" -> 0.00021081851067789197`, "TestSize" -> 15, 
               "ModelMemory" -> 25288, "ModelUtility" -> -1.0992205581871257`,
                "TrainingSize" -> 60, "TrainingTime" -> 0.01, 
               "TrainingMemory" -> 152384, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.4741637557311125`, 0.09431855481109515]}, 
               "AccuracyHistory" -> {
                 Around[0.3263837789328387, 0.11966602137337685`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00021081851067789197`, "MeanCrossEntropy" -> 
              Around[1.4741637557311125`, 0.1333865793972809], "ModelMemory" -> 
              25288, "TrainingMemory" -> 152384, "TrainingTime" -> 
              0.01380957344480193|>, "Index" -> 2|>, <|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 110|>, 
              "LearningRate" -> <|"Value" -> 0.002|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 90|>,
               "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.5413578901624958`, 0.03020411131626496], "Accuracy" -> 
               Around[0.26851727974129436`, 0.07795057934334512], 
               "EvaluationTime" -> 0.0000612472570082303, "TestSize" -> 130, 
               "ModelMemory" -> 25288., 
               "ModelUtility" -> -1.1297700142862905`, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.006854143078948891, "TrainingMemory" -> 
               80722.66666666666, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.5446314494798947`, 0.03678074306178114], 
                 Around[1.5380843308450969`, 0.05198902790797374]}, 
               "AccuracyHistory" -> {
                 Around[0.33669909792311253`, 0.05846044136830288], 
                 Around[0.20033546155947612`, 0.049512933032235605`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.4741637557311125`, 0.1333865793972809], "Accuracy" -> 
               Around[0.3263837789328387, 0.16923331038145822`], 
               "EvaluationTime" -> 0.00021081851067789197`, "TestSize" -> 15, 
               "ModelMemory" -> 25288, "ModelUtility" -> -1.0992205581871257`,
                "TrainingSize" -> 60, "TrainingTime" -> 0.007943282347242814, 
               "TrainingMemory" -> 152624, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.4741637557311125`, 0.09431855481109515]}, 
               "AccuracyHistory" -> {
                 Around[0.3263837789328387, 0.11966602137337685`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00021081851067789197`, "MeanCrossEntropy" -> 
              Around[1.4741637557311125`, 0.1333865793972809], "ModelMemory" -> 
              25288, "TrainingMemory" -> 152624, "TrainingTime" -> 
              0.012811604839381001`|>, "Index" -> 3|>, <|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 60|>, 
              "LearningRate" -> <|"Value" -> 0.2|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 7|>, 
              "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.5413578901624958`, 0.03020411131626496], "Accuracy" -> 
               Around[0.26851727974129436`, 0.07795057934334512], 
               "EvaluationTime" -> 0.0000612472570082303, "TestSize" -> 130, 
               "ModelMemory" -> 25288., 
               "ModelUtility" -> -1.1297700142862905`, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.006854143078948891, "TrainingMemory" -> 
               80682.66666666666, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.5446314494798947`, 0.03678074306178114], 
                 Around[1.5380843308450969`, 0.05198902790797374]}, 
               "AccuracyHistory" -> {
                 Around[0.33669909792311253`, 0.05846044136830288], 
                 Around[0.20033546155947612`, 0.049512933032235605`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[3.123109804715903, 1.1408274454767906`], "Accuracy" -> 
               Around[0.3263837789328387, 0.16923331038145822`], 
               "EvaluationTime" -> 0.0006666666666666666, "TestSize" -> 15, 
               "ModelMemory" -> 502456, 
               "ModelUtility" -> -1.9026474061089387`, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
               2126624, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[3.123109804715903, 0.806686822860365]}, 
               "AccuracyHistory" -> {
                 Around[0.3263837789328387, 0.11966602137337685`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.0006666666666666666, "MeanCrossEntropy" -> 
              Around[3.123109804715903, 1.1408274454767906`], "ModelMemory" -> 
              502456, "TrainingMemory" -> 2126624, "TrainingTime" -> 
              0.24402496759157732`|>, "Index" -> 4|>, <|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 25|>, 
              "LearningRate" -> <|"Value" -> 0.1|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 15|>,
               "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.5446314494798947`, 0.05201582567213101], "Accuracy" -> 
               Around[0.33669909792311253`, 0.08267554904537108], 
               "EvaluationTime" -> 0.00007710572825034954, "TestSize" -> 65, 
               "ModelMemory" -> 25288, "ModelUtility" -> -1.1346925646862962`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.007943282347242814, 
               "TrainingMemory" -> 80824, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.5446314494798947`, 0.03678074306178114]}, 
               "AccuracyHistory" -> {
                 Around[0.33669909792311253`, 0.05846044136830288]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00007710572825034954, "MeanCrossEntropy" -> 
              Around[1.5446314494798947`, 0.05201582567213101], "ModelMemory" -> 
              25288, "TrainingMemory" -> 80824, "TrainingTime" -> 
              0.013900744107674924`|>, "Index" -> 5|>, <|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 1023|>, 
              "LearningRate" -> <|"Value" -> 0.1|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 15|>,
               "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.5446314494798947`, 0.05201582567213101], "Accuracy" -> 
               Around[0.33669909792311253`, 0.08267554904537108], 
               "EvaluationTime" -> 0.00004865042554105199, "TestSize" -> 65, 
               "ModelMemory" -> 25288, "ModelUtility" -> -1.1346925362309936`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.00630957344480193, 
               "TrainingMemory" -> 80736, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.5446314494798947`, 0.03678074306178114]}, 
               "AccuracyHistory" -> {
                 Around[0.33669909792311253`, 0.05846044136830288]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.7391507348560278`, 0.40999503700805273`], "Accuracy" -> 
               Around[0.3263837789328387, 0.16923331038145822`], 
               "EvaluationTime" -> 0.0006666666666666666, "TestSize" -> 15, 
               "ModelMemory" -> 462504, 
               "ModelUtility" -> -1.2927651740930433`, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
               1484024, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.7391507348560278`, 0.28991027092122357`]}, 
               "AccuracyHistory" -> {
                 Around[0.3263837789328387, 0.11966602137337685`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.0006666666666666666, "MeanCrossEntropy" -> 
              Around[1.7391507348560278`, 0.40999503700805273`], 
              "ModelMemory" -> 462504, "TrainingMemory" -> 1484024, 
              "TrainingTime" -> 0.06588419104912303|>, "Index" -> 6|>, <|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 110|>, 
              "LearningRate" -> <|"Value" -> 0.1|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 35|>,
               "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.5446314494798947`, 0.05201582567213101], "Accuracy" -> 
               Around[0.33669909792311253`, 0.08267554904537108], 
               "EvaluationTime" -> 0.0000612472570082303, "TestSize" -> 65, 
               "ModelMemory" -> 25288, "ModelUtility" -> -1.1346925488278252`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.007943282347242814, 
               "TrainingMemory" -> 80816, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.5446314494798947`, 0.03678074306178114]}, 
               "AccuracyHistory" -> {
                 Around[0.33669909792311253`, 0.05846044136830288]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.0000612472570082303, "MeanCrossEntropy" -> 
              Around[1.5446314494798947`, 0.05201582567213101], "ModelMemory" -> 
              25288, "TrainingMemory" -> 80816, "TrainingTime" -> 
              0.013900744107674924`|>, "Index" -> 7|>, <|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 60|>, 
              "LearningRate" -> <|"Value" -> 0.2|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, 
              "LeafSize" -> <|"Value" -> 200|>, 
              "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.5446314494798947`, 0.05201582567213101], "Accuracy" -> 
               Around[0.33669909792311253`, 0.08267554904537108], 
               "EvaluationTime" -> 0.0000612472570082303, "TestSize" -> 65, 
               "ModelMemory" -> 25288, "ModelUtility" -> -1.1346925488278252`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.007943282347242814, 
               "TrainingMemory" -> 80616, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.5446314494798947`, 0.03678074306178114]}, 
               "AccuracyHistory" -> {
                 Around[0.33669909792311253`, 0.05846044136830288]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.0000612472570082303, "MeanCrossEntropy" -> 
              Around[1.5446314494798947`, 0.05201582567213101], "ModelMemory" -> 
              25288, "TrainingMemory" -> 80616, "TrainingTime" -> 
              0.013900744107674924`|>, "Index" -> 8|>, <|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 13|>, 
              "LearningRate" -> <|"Value" -> 0.2|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 15|>,
               "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.5446314494798947`, 0.05201582567213101], "Accuracy" -> 
               Around[0.33669909792311253`, 0.08267554904537108], 
               "EvaluationTime" -> 0.00007710572825034954, "TestSize" -> 65, 
               "ModelMemory" -> 25288, "ModelUtility" -> -1.1346925646862962`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.007943282347242814, 
               "TrainingMemory" -> 80624, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.5446314494798947`, 0.03678074306178114]}, 
               "AccuracyHistory" -> {
                 Around[0.33669909792311253`, 0.05846044136830288]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00007710572825034954, "MeanCrossEntropy" -> 
              Around[1.5446314494798947`, 0.05201582567213101], "ModelMemory" -> 
              25288, "TrainingMemory" -> 80624, "TrainingTime" -> 
              0.013900744107674924`|>, "Index" -> 9|>, <|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 25|>, 
              "LearningRate" -> <|"Value" -> 0.1|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 3|>, 
              "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[2.9740859558251334`, 0.38201037233597945`], "Accuracy" -> 
               Around[0.23063849186250643`, 0.07369396763833194], 
               "EvaluationTime" -> 0.00019368083258371798`, "TestSize" -> 65, 
               "ModelMemory" -> 462248, "ModelUtility" -> -1.808598201104881, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.07943282347242814, 
               "TrainingMemory" -> 1433272, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[2.9740859558251334`, 0.27012212476236896`]}, 
               "AccuracyHistory" -> {
                 Around[0.23063849186250643`, 0.052109504249606496`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00019368083258371798`, "MeanCrossEntropy" -> 
              Around[2.9740859558251334`, 0.38201037233597945`], 
              "ModelMemory" -> 462248, "TrainingMemory" -> 1433272, 
              "TrainingTime" -> 0.13900744107674923`|>, "Index" -> 10|>|>, 
         TypeSystem`Assoc[
          TypeSystem`Struct[{"Value", "Options"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["GradientBoostedTrees"]], 
            TypeSystem`Assoc[TypeSystem`AnyType, 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 16]}], 
          
          TypeSystem`Struct[{
           "Experiments", "PredictedPerformances", "Index"}, {
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
               "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory",
                "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
             TypeSystem`AnyLength], 
            
            TypeSystem`Struct[{
             "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
              "TrainingMemory", "TrainingTime"}, {
              TypeSystem`Atom[Real], TypeSystem`AnyType, 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real]}], 
            TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 75, 
       "PreprocessorEvaluationTime" -> 2.12109375*^-6, "PreprocessorMemory" -> 
       178720, "InputDimension" -> 44, "OutputDimension" -> 1, 
       "BaselineLogProbability" -> -1.504445381309891, "VariableBudget" -> 
       True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
       False, "NaturalStop" -> True, "AbortStop" -> False, 
       "LastReportingTime" -> 3.879152706658486`16.341311865525608*^9, 
       "RoundPartitioning" -> 
       Dataset[{<|
          "TrainingSizes" -> 10, "TimeBudgets" -> 0.27999999999999997`, 
           "ElapsedTimes" -> 0.279863, "ExperimentCounts" -> 12|>, <|
          "TrainingSizes" -> 60, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
           0.486846, "ExperimentCounts" -> 4|>}, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
            "ExperimentCounts"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 2], <||>]|>, "AnomalyDetector" -> 
     None, "Log" -> <|
      "Example" -> 
       MachineLearning`MLDataset[<|
         "f1" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, "ID" -> 
            3795572968267006573|>, 
          "f2" -> <|
           "Type" -> "Nominal", "Weight" -> 1, 
            "Values" -> {"Information Technology"}, "ID" -> 
            3401139331922032727|>, 
          "f3" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369}, "ID" -> 
            4714656301856831657|>, 
          "f4" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {23.778}, "ID" -> 
            4624390425862832796|>, 
          "f5" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {100.249}, "ID" -> 
            8583462845398299564|>, 
          "f6" -> <|
           "Type" -> "Text", "Weight" -> 1, "Values" -> {"Estimated data"}, 
            "ID" -> 3095956687388126824|>, 
          "f7" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {256.9105}, "ID" -> 
            1111199487588034056|>|>, <|
         "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0,
           "RawExample" -> False|>], "TrainingTime" -> 1.030698, 
       "MaxTrainingMemory" -> 3291040, "DataMemory" -> 118040, 
       "FunctionMemory" -> 819208, "LanguageVersion" -> {13.1, 0}, "Date" -> 
       DateObject[{2022, 12, 4, 14, 25, 6.742899`7.581421642073103}, 
         "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, "ProcessorType" -> 
       "ARM64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
       "Evaluations" -> {}|>|>]]]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, 3.87880702612108*^9, 
   3.8788116206807327`*^9, 3.8791491074609127`*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"f8e3d25a-4657-45cf-8622-5928656bdee1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"cm", " ", "=", 
    RowBox[{"ClassifierMeasurements", "[", 
     RowBox[{"cRisk", ",", "testset"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Test", " ", "our", " ", "classifier", " ", "on", " ", "the", " ", "test", 
    " ", "set"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<The accuracy is: \>\"", ",", 
    RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}], " ", "]"}], 
  RowBox[{"(*", 
   RowBox[{
   "Plot", " ", "the", " ", "accuracy", " ", "of", " ", "our", " ", "model"}],
    "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"AccuracyAss", " ", "=", " ", 
   RowBox[{"Append", "[", 
    RowBox[{"AccuracyAss", ",", " ", 
     RowBox[{"\"\<GradientBoostedTrees\>\"", "->", 
      RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Plot", " ", "the", " ", "Confusion", " ", "Matrix"}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.878619179671941*^9, 3.8786191833045883`*^9}, {
   3.8786192222213593`*^9, 3.878619249704307*^9}, {3.878619342065884*^9, 
   3.878619346687873*^9}, {3.878619378625424*^9, 3.8786193862338676`*^9}, 
   3.878805729554159*^9, 3.878805819596631*^9, {3.878806143346759*^9, 
   3.878806195391272*^9}, {3.878806763106118*^9, 3.878806811062291*^9}, {
   3.878806841172628*^9, 3.878806863962813*^9}, 3.878807029491864*^9},
 CellLabel->"In[60]:=",ExpressionUUID->"c6d61c84-957f-4aed-afc0-70d0ed8abe2a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"The accuracy is: \"\>", "\[InvisibleSpace]", 
   "0.47368421052631576`"}],
  SequenceForm["The accuracy is: ", 0.47368421052631576`],
  Editable->False]], "Print",
 CellChangeTimes->{3.878806864557898*^9, 3.878807030054336*^9, 
  3.878811626606648*^9, 3.8791491165506783`*^9},
 CellLabel->
  "During evaluation of \
In[60]:=",ExpressionUUID->"3986c4b5-6279-4480-bd7a-9ee7ee82502d"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBghWIQGwI+2BNLu+q3Tlsz+a29XsWUeXaLXtlvqFxTZuv+
CKc4qeYPlL2EzHlYJbLO/eEtewYUQLm/+l5yetskvLGPc7ltWDr9qX1rcGCT
vOA5nOK43IlLPbXDgVgaAMjIqpI=
   "], {{0, 0}, {5, 5}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "2", "\" examples of \"", "\"B\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.6666666666666666`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.2857142857142857`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.4`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{2, " examples of ", "B", " correctly classified"}], 
         Row[{"Precision = ", 0.6666666666666666}], 
         Row[{"Recall = ", 0.2857142857142857}], 
         Row[{"FScore = ", 0.4}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.3333333333333333`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.14285714285714285`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "C", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.3333333333333333}], 
         Row[{"Row fraction = ", 0.14285714285714285`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.09090909090909091`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "A", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.09090909090909091}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "2", "\" examples of \"", "\"B\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.18181818181818182`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.2857142857142857`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{2, " examples of ", "B", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.18181818181818182`}], 
         Row[{"Row fraction = ", 0.2857142857142857}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "6", "\" examples of \"", "\"C\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.5454545454545454`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.8571428571428571`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.6666666666666665`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{6, " examples of ", "C", " correctly classified"}], 
         Row[{"Precision = ", 0.5454545454545454}], 
         Row[{"Recall = ", 0.8571428571428571}], 
         Row[{"FScore = ", 0.6666666666666665}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.09090909090909091`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.5`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "D", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.09090909090909091}], 
         Row[{"Row fraction = ", 0.5}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.09090909090909091`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.5`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "E", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.09090909090909091}], 
         Row[{"Row fraction = ", 0.5}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.3333333333333333`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.14285714285714285`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "B", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.3333333333333333}], 
         Row[{"Row fraction = ", 0.14285714285714285`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"D\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.3333333333333333`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.5`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.4`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "D", " correctly classified"}], 
         Row[{"Precision = ", 0.3333333333333333}], 
         Row[{"Recall = ", 0.5}], 
         Row[{"FScore = ", 0.4}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           TemplateBox[{
            "1", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.3333333333333333`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.5`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "E", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.3333333333333333}], 
         Row[{"Row fraction = ", 0.5}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "2", "\" examples of \"", "\"B\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.2857142857142857`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{2, " examples of ", "B", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 1.}], 
         Row[{"Row fraction = ", 0.2857142857142857}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 4.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" of class \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " of class ", "A"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 3.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "7", "\" example\"", "\"s\"", "\" of class \"", "\"B\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.2857142857142857`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{7, " example", "s", " of class ", "B"}], 
        Row[{"Recall = ", 0.2857142857142857}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "7", "\" example\"", "\"s\"", "\" of class \"", "\"C\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.8571428571428571`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{7, " example", "s", " of class ", "C"}], 
        Row[{"Recall = ", 0.8571428571428571}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "2", "\" example\"", "\"s\"", "\" of class \"", "\"D\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.5`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{2, " example", "s", " of class ", "D"}], 
        Row[{"Recall = ", 0.5}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "2", "\" example\"", "\"s\"", "\" of class \"", "\"E\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{2, " example", "s", " of class ", "E"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "A"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "3", "\" example\"", "\"s\"", "\" classified as \"", "\"B\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.6666666666666666`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{3, " example", "s", " classified as ", "B"}], 
        Row[{"Precision = ", 0.6666666666666666}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "11", "\" example\"", "\"s\"", "\" classified as \"", "\"C\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.5454545454545454`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{11, " example", "s", " classified as ", "C"}], 
        Row[{"Precision = ", 0.5454545454545454}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "3", "\" example\"", "\"s\"", "\" classified as \"", "\"D\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.3333333333333333`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{3, " example", "s", " classified as ", "D"}], 
        Row[{"Precision = ", 0.3333333333333333}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "2", "\" example\"", "\"s\"", "\" classified as \"", "\"E\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{2, " example", "s", " classified as ", "E"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{4.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 0.], TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 0.], TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 0.], TraditionalForm]}}, {{4.5, 
       FormBox["1", TraditionalForm]}, {3.5, 
       FormBox["7", TraditionalForm]}, {2.5, 
       FormBox["7", TraditionalForm]}, {1.5, 
       FormBox["2", TraditionalForm]}, {0.5, 
       FormBox["2", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["3", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["11", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["3", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->13,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->228.,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{
  3.878619184460875*^9, 3.878619347255011*^9, 3.878619387156837*^9, 
   3.878715848704851*^9, {3.878715890521706*^9, 3.8787158953838463`*^9}, {
   3.878805538696899*^9, 3.878805553604134*^9}, 3.878806818221781*^9, 
   3.878806864604879*^9, 3.878807030098374*^9, 3.878811626649159*^9, 
   3.879149116601046*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"e522a136-640c-408b-bf22-836d83ca170c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["RandomForest", "Subsubsection",
 CellChangeTimes->{{3.878805416699134*^9, 3.878805417721744*^9}, {
  3.878807059832753*^9, 3.8788070612150183`*^9}, {3.878807108181322*^9, 
  3.8788071113366137`*^9}},ExpressionUUID->"af039915-bf9f-4d39-af0a-\
2865838c6fc3"],

Cell["\<\
Train a classifier using Breiman\[Dash]Cutler ensembles of decision trees\
\>", "Text",
 CellChangeTimes->{{3.878805704170437*^9, 3.8788057223306637`*^9}, {
   3.878805766632689*^9, 3.87880578974465*^9}, 3.8788070565323973`*^9, 
   3.8788070963390427`*^9},ExpressionUUID->"accec003-1c7f-4fff-8f86-\
6d6171f252b3"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cRisk", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainingset", "->", "\"\<Ratings\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<RandomForest\>\""}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Information", "[", "cRisk", "]"}]}], "Input",
 CellChangeTimes->{{3.8786185865414057`*^9, 3.878618597824006*^9}, {
   3.878618646892776*^9, 3.878618648994371*^9}, {3.878618877270843*^9, 
   3.878618880432907*^9}, {3.878618998083866*^9, 3.878619004451974*^9}, {
   3.8786191510115213`*^9, 3.878619159945651*^9}, {3.8786192237272882`*^9, 
   3.878619223941098*^9}, 3.8788070698448772`*^9, 3.878807113159953*^9},
 CellLabel->"In[64]:=",ExpressionUUID->"6853ef91-287f-4ced-be7c-af92b49c909c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"A\"", "\"B\"", "\"C\"", "\"D\"", "\"E\""},
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"A\"", "\"B\"", "\"C\"", "\"D\"", "\"E\""},
                    "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["75", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 75, "ClassNumber" -> 5, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "Elevation" -> <|"Type" -> "Numerical"|>, 
           "GICS Sector Name" -> <|"Type" -> "Nominal"|>, 
           "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Disclosure" -> <|"Type" -> "Text"|>, 
           "Revenue (USD mn)" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
           "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|
               "FeatureNames" -> {
                 "Elevation", "GICS Sector Name", 
                  "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                  "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                  "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                  "Carbon Disclosure", "Revenue (USD mn)"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 7|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Numerical", "Nominal", "Numerical", "Numerical", 
                  "Numerical", "Text", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6", "f7"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
           "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|"(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
              "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 75, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>, 
                    "f6" -> <|"Type" -> "Text"|>, 
                    "f7" -> <|"Type" -> "Numerical"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 1621909218748444882|>], 
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>, 
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2074781423290265366|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 20679206186753951|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>, <|"" -> 1|>}, 
                    "MissingCode" -> Indeterminate, "Version" -> {13.1, 0}, 
                    "ID" -> 4023015169247141483, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "LogRescaleNumericalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Indices" -> {2, 4, 5}, 
                    "Centers" -> {0.43, 23.052, 256.593674903342}, 
                    "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
                    620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
                    3527897072513609120, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {146.57391774891778`, 3.693542625490828, 
                    68.22157333333334, 3.504982149660075, 
                    1.4086804722859232`}, 
                    "StandardDeviation" -> {253.37495961794207`, 
                    3.1699732836017724`, 118.62403407631172`, 
                    2.423277341145054, 1.2610287731963699`}, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2274174826257793629|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {11, 1}|>|>, 
                    "Boundaries" -> {{-0.5, -0.40909090909090906`, \
-0.3181818181818182, -0.2272727272727273, -0.13636363636363635`, \
-0.04545454545454547, 0.045454545454545414`, 0.13636363636363635`, 
                    0.2272727272727273, 0.31818181818181823`, 
                    0.40909090909090906`, 0.5}, {-0.5, 0.5}}, 
                    "Version" -> {13.1, 0}, "ID" -> 8505008840132824157, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>, 
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
                    Span[1, 2], 
                    Span[3, 7]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {13.1, 0}, "ID" -> 
                    373596144042670943|>]}, "Invertibility" -> "Approximate", 
                   "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBmQFm/iFib1JlAgAAAAcAAAAHAAAANBt6Fr3csL/lG+Yz4ESRP7hBka92
l6I/3+CsXPnbnb8juBQyj++mPyQSP5BqJYY/vak1fWbb7z9Exb6rXA+mP3bs
bygIL6y/qBWDW9y8oz+sdTB+ZCFvP+M3K7whyrK/oZKNG3/O7792PFDDUfyQ
P9/U3bojxJC/o5bbS9uw5z8WAjGjisXkP97C+Aj2NcU/OamW7DSFoj9l4xTQ
yZiTv+5YNgcGV6G/JjWbdhS247/4DI4+z4GiP+damijBtq0/AUhvWGOt0r+S
UyYwEkrnv7xCV9Xbd5o/7dmZYqsIlL+U6TKOWh/fvyeCdPr2xcm/z+izHsbw
ab/DCMuYpSLrPyWlgzDxQ68/IU0Nlm9mh79gtGMp7lp6v5IjpI1bXuO/gG3Q
78EAir9w8Q54CT+tPz6D4J3Vndm/VLWB566j5T+EcC9VEICzv/LeOJ47T7W/
77C3YnYxuz+XzXfud2fkvwL5lh2DJOg/lXZTGNvFtb8Pcd+T9BKZv2lvrRrr
CbI/A8vXaYtBiL/H/s72
                   "], 
                  "Precisions" -> {0.4602875814560013, 0.9399443097653287, 
                   1.0616808801506838`, 1.6265466434380347`, 
                   4.517522263650691, 10.595148643942485`, 23.23460552022561},
                   "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781967`, 0.012269055622142968`, 
                    0.0013959895289638008`, -0.0005267240067510293, \
-0.00032143499611032286`, -0.00013378352049829329`, 0.0005265431937281588}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 6648082896216031031|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7.|>,
                     "Key" -> "((f2f6)(f1f3f4f5f7))", "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 7, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                    "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1557841622946289758|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                   "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                   "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 7, 
                   "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   1557841622946289758|>], "InputDimension" -> 0, 
                "OutputDimension" -> 7, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, 
                    "ID" -> 2988406535272383851|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"Information Technology"}, "ID" -> 
                    8211126643196690843|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369},
                     "ID" -> 220143977676884624|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {23.778}, "ID" -> 8845109505593024510|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {100.249}, "ID" -> 827490798644983815|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 4409963340497863227|>, 
                    "f7" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {256.9105}, "ID" -> 5236914127772614391|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.070037, "MaxTrainingMemory" -> 219216, 
                  "DataMemory" -> 22976, "FunctionMemory" -> 86128, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 12, 4, 14, 25, 19.527517`8.043222008537695}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, 
                  "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-7.173238193477166, -7.173238193477166, \
-5.957762682813879, -5.505343391085791, -5.137053644875943, \
-4.839361849432994, -4.800994757869588, -4.736339520600383, \
-4.720994010399741, -4.71905825007799, -4.703766525124256}, 
                   "LeftBoundary" -> -5.957762682813879, "LeftScale" -> 
                   0.6077377553316436, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[36.60573897803041, 1.772055230348638], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 8833432794738512184|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>, 
               "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                 "Version" -> {13.1, 0}, "ID" -> 8812518305512619507|>], 
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Version" -> {13.1, 0}, "ID" -> 7405342354547017736|>]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"|>], 
           MachineLearning`MLProcessor[
           "LogRescaleNumericalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Indices" -> {2, 4, 5}, 
             "Centers" -> {0.43, 23.052, 256.593674903342}, 
             "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
              620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
             7299988401548215772, 
             "Output" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Mean" -> {146.57391774891778`, 3.693542625490828, 
              68.22157333333334, 3.504982149660075, 1.4086804722859232`}, 
             "StandardDeviation" -> {253.37495961794207`, 3.1699732836017724`,
               118.62403407631172`, 2.423277341145054, 1.2610287731963699`}, 
             "Output" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 1400194064660864776|>], 
           MachineLearning`MLProcessor[
           "ToLowerCase", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 3080611390123234620, 
             "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "RemoveDiacritics", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 8393247813432535084, 
             "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
               "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Index" -> {<|
                   "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>}, 
                 "Output" -> <|
                  "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> CompressedData["
1:eJxTTMoPSmVmYGBgBGIeIGZlwAANaDSyuINV5XF7IP0gJG/3fiC9wNDnNIjf
ICJ2FcR/IHn3Poi/gM/rKZgf6n8QrC7ZZSuIdtjqegMk77C36wKYvzLrFVje
m+cMWP3c+/vBtN3JS2D6yeWLYPkZKy+D+S8/gO0/YOZ2E2wP0+lLIJrBWOIc
WPzO1IcgdQ2LGjeB3TUp+SKYVtMFuy+h+e8TEH0gZu8JsL6j5o/B5gcFgd1z
QGXZU7D77ga+BKv/OBtsr0L9dYg7eOPvguXTp10Gm/vmJDgcFDacBZvv4HF9
Ith+wUiwvgajkndgfdOYHoHDbXHBcxCdECkFdndCbOtXsD9uJB4Bq1v48ybY
HTsegP3PYPvzEVi8+NYWsHv2tz0Em2N16SiY72lzDWzP1gO3wPoMs46A5BW2
L5wMlt+n82o/AO0BofY=
                  "], "Version" -> {13.1, 0}, "ID" -> 436956950344966148|>], 
               MachineLearning`MLProcessor[
               "Sequence", <|
                "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Processors" -> {
                   MachineLearning`MLProcessor[
                   "TextToNominalSequence", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {13.1, 0}, "ID" -> 9037232907786629142, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                   MachineLearning`MLProcessor[
                   "NominalSequenceToTFIDFVector", <|
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> {-9125122986955958911, \
-8920710729279180450, -8515397617198652367, -8156047279148961366, \
-5900137721653868194, -5516340669880835636, -4691435917638705529, \
-4484112905383790136, -3872414778415116274, -3607098371778122975, \
-3443150737398804539, -3355080348777836050, -2509905740948760720, \
-2159536488856785732, 242552411836269492, 450553210381435687, 
                    539691877398804025, 950421020428451240, 
                    1561895621580759179, 1579009397565082067, 
                    1671416204203290022, 2799484578252825308, 
                    3287432777910049379, 3477167097823690523, 
                    3576478456825362866, 4539722962543247872, 
                    5070765454536077049, 5138905625963890559, 
                    6058376361354581924, 6694985464746702812, 
                    6748311694457965250, 7603334142034012365, 
                    7731804819316663270, 8918825649307280967}, "Values" -> 
                    None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {13.1, 0}|>], 
                    "InverseDocumentFrequency" -> {1.91959284073794, 
                    3.624340932976365, 1.3217558399823195`, 
                    2.0149030205422647`, 2.0149030205422647`, 
                    2.120263536200091, 1.3217558399823195`, 
                    2.9311937524164198`, 1.2729656758128873`, 
                    1.91959284073794, 4.31748811353631, 2.120263536200091, 
                    4.31748811353631, 2.0149030205422647`, 
                    1.4842747694800942`, 2.0149030205422647`, 
                    2.120263536200091, 1.5448993912965292`, 
                    2.0149030205422647`, 1.3730491343698699`, 
                    2.0149030205422647`, 3.624340932976365, 0., 
                    0.11279549414534427`, 2.0149030205422647`, 
                    3.2188758248682006`, 1.4842747694800942`, 
                    2.9311937524164198`, 2.0149030205422647`, 
                    2.0149030205422647`, 0.5332984796180493, 
                    2.120263536200091, 4.31748811353631, 2.0149030205422647`},
                     "Version" -> {13.1, 0}, "ID" -> 7526152790873636702, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                 "Invertibility" -> "Impossible", "StructurePreserving" -> 
                 True, "Missing" -> "Forbidden"|>]}, "Invertibility" -> 
             "Impossible", "StructurePreserving" -> True, "Missing" -> 
             "Forbidden"|>], 
           MachineLearning`MLProcessor[
           "MergeVectors", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
               "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
               Span[1, 5], 
               Span[6, 39], 
               Span[40, 44]}, "Wrappers" -> {Identity, SparseArray, Identity},
              "Output" -> <|
              "(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
                  "], "Type" -> "NumericalVector"|>|>, "Version" -> {13.1, 0},
              "ID" -> 613954820935696947|>]}, "Invertibility" -> "Impossible",
          "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 9119616879012754245|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|
               "A" -> 1, "B" -> 2, "C" -> 3, "D" -> 4, "E" -> 5|>}, 
             "MissingCode" -> 0, "Version" -> {13.1, 0}, "ID" -> 
             1482488055587057283, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {5}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 4789940262906318728|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 5|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "A" -> 0.08750000000000001, "B" -> 0.2625, "C" -> 0.325, "D" -> 
        0.21250000000000002`, "E" -> 0.1125|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Ratings", 
          "Order" -> {
           "Elevation", "GICS Sector Name", 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
            "Carbon Disclosure", "Revenue (USD mn)", "Ratings"}|>], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {5, 6}, 0., {
      1, {{0, 1, 2, 3, 4, 5}, {{2}, {3}, {4}, {5}, {6}}}, {1., 1., 1., 1., 
       1.}}], "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
    "Model" -> <|"Trees" -> {
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{42, 5, 1, 2, 39, 43, 40, 40, 40, 44, 3, 40, 
            4}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           2.3573551104685126`, -0.34220959060179146`, -0.5495428889243934, \
-0.13523438175154134`, 0.04361261949225681, 
           1.1566087502801121`, -0.4629491065401017, 
           1.918289687280362, -0.5270596816936148, -0.8068163001275108, \
-0.19269288608994728`, -0.4312992232514734, 0.006260694742625611}, "Children" -> 
          RawArray["Integer16",{{2, -6}, {3, 4}, {5, 6}, {10, 11}, {7, -7}, {
            8, -8}, {-1, -9}, {9, -10}, {-2, -11}, {-3, 12}, {-4, -12}, {
            13, -13}, {-5, -14}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 3, 2, 4, 5, 4, 4, 2, 2, 1, 3, 2, 3, 
            5}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{22, 23, 43, 2, 40, 42, 40, 3, 14, 43, 5, 4, 2,
             4, 2}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.09613636189249708, 
           0.03343938076399411, -0.8745847025168434, -0.5054682914324218, \
-0.3399144017252196, -0.37771681413661273`, -0.5392029200304087, 
           0.21559641285259512`, 0.06994316900070807, 
           0.7538088348388436, -0.8046030888873892, -0.15923680466286916`, \
-0.017423072815609952`, -0.15923655451357588`, 0.28285822658051973`}, 
          "Children" -> 
          RawArray["Integer16",{{2, -7}, {3, 4}, {5, 6}, {-1, -8}, {7, -9}, {
            8, 9}, {-2, -10}, {10, -11}, {12, -12}, {11, -13}, {-3, -14}, {13,
             14}, {-4, -15}, {-5, 15}, {-6, -16}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 1, 1, 3, 3, 5, 2, 3, 2, 4, 4, 2, 
            4, 1, 4}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{44, 40, 38, 23, 29, 44, 41, 6, 43, 43, 14, 32,
             39}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.5791526854238995, -0.5392029200304087, 
           0.1262423425010617, 0.03343938076399411, 
           0.021927771773608884`, -1.0963225463859274`, -0.9653228437108714, 
           0.16903481095210737`, 0.9393137413249342, -1.0864543664040234`, 
           0.07937239990932754, 0.04339984706082145, 0.04361261949225681}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {11, -6}, {6, -7}, {8, 
            9}, {-1, 7}, {-2, -8}, {10, -9}, {-3, -10}, {-4, -11}, {
            12, -12}, {13, -13}, {-5, -14}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 3, 2, 4, 3, 5, 3, 4, 4, 1, 2, 3, 4, 
            3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{43, 43, 17, 42, 5, 22, 4, 42, 21, 4, 40, 43, 
            41, 41}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-1.1628740559968556`, -1.736260166122399, 
           0.04589315013420109, -0.566980962986821, -0.4058616341855026, 
           0.09613636189249708, -0.3308800580095448, -0.43204679187773376`, 
           0.04361261949225681, -0.15923680466286916`, -0.5330555750420407, 
           1.4574775397002266`, 0.8527796802306158, -0.44552708914274275`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 6}, {-2, -9}, {7, 8}, {
            13, 14}, {-3, -10}, {9, 10}, {-4, -11}, {11, -12}, {-5, 
            12}, {-6, -13}, {-7, -14}, {-8, -15}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 2, 2, 4, 1, 2, 2, 2, 3, 4, 2, 3, 5, 
            2, 5}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 2, 42, 41, 2, 34, 8, 42, 2, 14, 1, 36, 42, 
            5}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.07229094303872052, -0.5929248254861834, 
           1.546666693414279, 0.06181371471736824, 0.0722905950631394, 
           0.04361261949225681, 
           0.06996906001403036, -0.21060183690048762`, -0.017423121472984915`,
            0.0301650634078883, -0.4451108593781439, 
           0.08601588380936276, -0.5624466242878086, -0.4058614930241462}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {12, -8}, {6, -9}, {
            7, -10}, {-1, -11}, {8, -12}, {9, 10}, {-2, 
            11}, {-3, -13}, {-4, -14}, {-5, 13}, {-6, 14}, {-7, -15}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 4, 4, 3, 4, 4, 4, 3, 4, 2, 
            2, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{37, 39, 40, 44, 44, 44, 1, 41, 32, 1, 20}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.04589315013420109, 
           0.04361261949225681, -0.5188164892325622, 0.21779097309529272`, 
           0.5288677592681861, -0.7757345605391706, 
           0.7324996424700938, -0.06140195638842383, 
           0.09254801823565895, -0.5495437782848969, 0.032127159512556125`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 11}, {6, 7}, {-2, -6}, {
            8, -7}, {9, -8}, {-3, -9}, {10, -10}, {-4, -11}, {-5, -12}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{5, 2, 1, 3, 5, 3, 3, 3, 1, 3, 4, 2}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 43, 43, 42, 44, 18, 40, 4, 1, 41, 4, 3, 5, 
            42}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.25502529465286816`, \
-1.0906130105182115`, -1.5754261777846157`, -0.18161213240827845`, \
-0.623144792803008, 0.30404845869973984`, -0.35770501035814384`, 
           0.5476983243071842, 0.7325006703446846, 
           0.21861332605306738`, -0.226385053299619, -0.081458225335166, \
-0.17047831736428853`, 1.546666693414279}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {5, -8}, {8, 9}, {-2, 6}, {
            7, -9}, {-3, -10}, {10, -11}, {11, -12}, {-4, -13}, {-5, 12}, {-6,
             13}, {14, -14}, {-7, -15}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 5, 2, 2, 1, 3, 3, 3, 3, 3, 4, 1, 2, 
            2, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{44, 4, 44, 36, 40, 3, 5, 44, 42, 2, 41, 1, 
            32}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-1.0370732383312582`, \
-0.17502566079696824`, 0.4527883104812953, 
           0.08601588380936276, -0.47794979704463314`, -0.0814576922488276, 
           0.398965335250979, -0.6331793086413597, 1.5598860382730102`, 
           0.07229071397576137, -0.9853861928997372, -0.6875323409182741, 
           0.04339984706082145}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -7}, {4, 5}, {6, 7}, {12, 
            13}, {-2, -8}, {8, -9}, {-3, 9}, {10, -10}, {
            11, -11}, {-4, -12}, {-5, -13}, {-6, -14}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 5, 3, 5, 5, 3, 1, 2, 4, 4, 3, 2, 4, 
            4}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 4, 9, 1, 12, 20, 4, 43, 41, 40, 44, 1, 41, 
            41, 36, 2, 41, 42}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.21559569159998926`, 0.6121149568454518, 
           0.04361261949225681, -0.29496535804039503`, 0.028609433765851067`, 
           0.08432055907720937, -0.29353356800283725`, 
           0.11637330917585553`, -0.50704851941728, -0.42866201136963955`, \
-0.2759245478960439, 0.7324999653814999, 
           0.4996796367347769, -0.34323335340429884`, 0.08601588380936276, 
           0.28285861699799497`, -1.008098446662327, -0.22720485597234696`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {12, 13}, {
            6, -9}, {-1, -10}, {7, -11}, {-2, 8}, {9, 10}, {-3, -12}, {
            11, -13}, {-4, -14}, {14, -15}, {-5, -16}, {15, 16}, {-6, 17}, {
            18, -17}, {-7, -18}, {-8, -19}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 2, 2, 2, 4, 2, 4, 4, 5, 3, 3, 1, 1, 
            5, 3, 2, 3, 3, 4}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 20, 29, 36, 43, 40, 5, 5, 40, 40, 4, 32, 8,
             5, 41}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.08145812825199428, 0.09254801823565895,
            0.021927771773608884`, 0.08601588380936276, 
           0.6846617778532025, -0.5235413013886827, 0.15217395952492296`, 
           0.1961687488568009, -0.3218087620495522, -0.54319441952231, 
           0.5476991340666517, 0.032127159512556125`, 
           0.11639069692006443`, -0.6559455734384017, -0.9439991442415074}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -8}, {9, 10}, {5, 6}, {-1, -9}, {
            7, 8}, {-2, -10}, {-3, -11}, {11, 12}, {14, 15}, {
            13, -12}, {-4, -13}, {-5, -14}, {-6, -15}, {-7, -16}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 4, 1, 3, 2, 4, 3, 3, 4, 4, 2, 5, 2, 
            4, 3, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{43, 42, 6, 17, 4, 4, 42, 29, 3, 31, 4, 44}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-1.1612487582305064`, -0.5014780846840532,
            0.056128445635612256`, 0.04589315013420109, 
           0.024187820663451043`, -0.3308804637755438, 1.546666693414279, 
           0.005114339920420402, -0.08145856300482524, 0.17686130905869213`, 
           0.46347619335103296`, 0.44740745257936787`}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {5, -6}, {7, 8}, {
            6, -7}, {-2, -8}, {9, 10}, {-3, -9}, {11, -10}, {-4, -11}, {
            12, -12}, {-5, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 4, 2, 2, 2, 2, 5, 4, 2, 3, 4, 4, 
            5}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{44, 17, 5, 12, 9, 1, 42, 1, 40, 22, 1, 5, 26, 
            5, 2, 43}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.29450080014054203`, 
           0.04589315013420109, 0.03231817878600829, 0.03864783157843038, 
           0.04361261949225681, -0.445111400805386, -0.5474658776539405, 
           0.732500017612252, 0.4340050129222055, 
           0.04589315013420109, -0.5495444612735731, -0.7235953128054504, 
           0.04361261949225681, -0.1704787038460689, -0.15503298312296288`, 
           0.2120209753886475}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -7}, {10, -8}, {5, -9}, {
            6, -10}, {7, 8}, {-1, -11}, {9, -12}, {-2, -13}, {11, -14}, {-3, 
            12}, {-4, 13}, {14, 15}, {-5, -15}, {16, -16}, {-6, -17}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 4, 2, 4, 3, 3, 3, 2, 2, 4, 1, 1, 4, 
            2, 4, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{17, 5, 41, 44, 3, 2, 25, 41, 32, 40, 42, 4, 4,
             40, 44}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.09613636189249708, -0.4058615619718555, -0.44552708914274275`, 
           0.7529090590716585, -0.08145797911372754, 0.0722914452842246, 
           0.029719678233114055`, -0.037636499229023346`, 0.04914817117483755,
            2.5807127507366943`, -0.4669565155022859, -0.15923677926087976`, \
-0.9516845358950476, -0.398041067263212, -0.953049877544184}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -8}, {6, -9}, {11, 12}, {
            7, -10}, {8, -11}, {9, -12}, {10, -13}, {-2, -14}, {-3, 13}, {-4, 
            15}, {-5, 14}, {-6, -15}, {-7, -16}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 3, 4, 2, 1, 2, 2, 5, 3, 4, 2, 4, 2, 
            1, 1, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 3, 32, 14, 1, 8, 42, 40, 9, 5, 42, 44, 44, 
            44}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.5628163883417372, -0.08145833243462564, 
           0.04339984706082145, 0.02755336960633953, 0.7325004596784366, 
           0.12106241282514951`, -0.5701113818502561, -0.45379254270351144`, 
           0.04361261949225681, -0.6559470232637556, -0.5431532486954955, 
           0.41205029070038535`, 0.09394906750656884, 0.2214634198164671}, 
          "Children" -> 
          RawArray["Integer16",{{2, -7}, {3, 4}, {-1, -8}, {5, 6}, {7, -9}, {
            14, -10}, {-2, 8}, {9, 10}, {11, -11}, {-3, 12}, {-4, -12}, {
            13, -13}, {-5, -14}, {-6, -15}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 1, 5, 4, 3, 2, 1, 4, 2, 5, 2, 3, 3, 
            2, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{42, 41, 6, 43, 29, 5, 29, 40, 41, 44, 43, 12, 
            3, 4, 42, 25, 43, 40}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {2.3573551104685126`, -0.9803011425662325, 
           0.11969112248123936`, 0.383403961351366, 
           0.002441460912236886, -0.65594619334827, 
           0.02149093550024478, -0.5235413013886827, -0.14476319100317858`, \
-0.6260305737538561, -0.17328355299309073`, 0.028609433765851067`, 
           0.42691868104602415`, 0.5476983156387218, 1.546666693414279, 
           0.029719678233114055`, 0.46573619834948143`, -0.5302653173894214}, 
          "Children" -> 
          RawArray["Integer16",{{2, -9}, {3, 4}, {5, -10}, {8, 9}, {-1, 
            6}, {-2, 7}, {-3, -11}, {10, 11}, {-4, 13}, {-5, -12}, {
            12, -13}, {-6, -14}, {14, 15}, {16, -15}, {18, -16}, {
            17, -17}, {-7, -18}, {-8, -19}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 4, 4, 3, 3, 3, 2, 1, 4, 2, 5, 4, 1, 
            2, 3, 2, 2, 2, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{41, 6, 3, 36, 12, 29, 5, 44, 43, 3, 41, 3, 5, 
            2, 42, 4, 1, 43}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-1.0232266855089165`, 
           0.056128445635612256`, 0.3653145670755622, 0.08601588380936276, 
           0.028609433765851067`, 0.018192821636345835`, 
           0.562815659963281, -1.3036325356033522`, 0.22714206405761495`, 
           0.27170265304802843`, 0.8499464018387659, 
           0.2717018338874002, -0.804602895466453, -0.5929249321679144, 
           2.304395683482392, -0.15923680466286916`, -0.3063930174896763, 
           0.9697158522709906}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -10}, {5, 6}, {-1, -11}, {7, 
            8}, {-2, 16}, {9, -12}, {-3, 15}, {10, 11}, {12, -13}, {
            14, -14}, {13, -15}, {-4, -16}, {-5, -17}, {-6, -18}, {-7, 
            17}, {-8, 18}, {-9, -19}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{5, 4, 3, 1, 4, 2, 1, 4, 3, 4, 5, 4, 2, 
            5, 3, 4, 2, 5, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{1, 2, 44, 40, 40, 43, 42, 40, 29, 10, 41, 4, 
            42, 2}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.6074173730415735, \
-0.21912578846462627`, 
           0.5889248200291375, -0.5038807090672552, -0.5479691388399166, \
-1.1628740559968556`, -0.43204679187773376`, -0.544264180779904, 
           0.02086570064452936, 0.04361261949225681, 0.2143685933289612, 
           0.6121143206283337, -0.31959037040264704`, -0.10324369680312939`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {6, 7}, {5, -7}, {-2, -8}, {
            8, 9}, {14, -9}, {-3, -10}, {10, 11}, {-4, -11}, {12, -12}, {
            13, -13}, {-5, -14}, {-6, -15}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 4, 2, 5, 4, 2, 5, 3, 3, 4, 3, 4, 
            1, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{20, 14, 3, 2, 3, 19, 42, 25, 3, 1, 41, 5}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.032127159512556125`, 
           0.03722121859102007, -0.1682416687203525, 
           0.07229094303872052, -0.1897652904908953, 
           0.04361261949225681, -0.37771681413661273`, 0.029719678233114055`, 
           0.27170267517719227`, -0.549544074436489, 
           0.5845036302847388, -0.6559455734384017}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -5}, {-1, -6}, {5, 6}, {7, 8}, {
            12, -7}, {-2, -8}, {9, -9}, {10, -10}, {
            11, -11}, {-3, -12}, {-4, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 4, 2, 3, 5, 2, 4, 1, 2, 4, 5, 5, 
            3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 44, 42, 41, 5, 42, 30, 8, 4, 23, 43, 44, 4,
             40}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.28285822658051973`, -0.9079063376801288, -0.37771681413661273`, \
-0.8676355915516156, -0.8046030888873892, -0.17994543628260118`, 
           0.04361261949225681, 0.059930662201451046`, 0.5476985037233115, 
           0.05115560898332877, -1.040819575082276, 0.38820987534894513`, 
           0.29984700473728054`, -0.4551490717320634}, "Children" -> 
          RawArray["Integer16",{{2, -6}, {3, 4}, {5, 6}, {7, 
            8}, {-1, -7}, {-2, -8}, {9, -9}, {12, -10}, {10, -11}, {
            11, -12}, {-3, -13}, {13, 14}, {-4, -14}, {-5, -15}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 3, 2, 2, 4, 4, 3, 2, 5, 4, 3, 5, 
            2, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{29, 40, 3, 22, 34, 1, 1, 44, 42, 3, 42, 40, 4,
             40, 42}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.005970992872082463, -0.5482055387842593,
            1.3450591790847817`, 0.04589315013420109, 
           0.04361261949225681, -0.29496522849492113`, -0.5495437686611995, \
-0.7299764279777348, 2.3130167419860737`, 
           0.01749222963879496, -0.4043044889132603, 1.0281083118075056`, 
           0.5476985037233115, -0.4912566004180263, -0.5624466242878086}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {8, 9}, {5, -8}, {-2, 6}, {
            7, -9}, {-3, -10}, {10, 11}, {-4, -11}, {12, -12}, {13, 
            14}, {-5, -13}, {15, -14}, {-6, -15}, {-7, -16}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{5, 3, 2, 3, 1, 5, 4, 2, 2, 3, 4, 1, 4, 
            4, 2, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{40, 2, 25, 43, 42, 41, 5, 1, 12, 2, 15, 43, 
            43, 22}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.5417478766101906, -0.07632880131784503,
            0.029719678233114055`, 0.27873650017921126`, 2.1742636036588188`, 
           1.0003142276875554`, -0.7235953128054504, -0.5495444612735731, 
           0.03864783157843038, 0.07229049081168404, 0.11969112248123936`, 
           0.9393137413249342, -0.46354582902240393`, 0.06199600983041198}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -9}, {5, 6}, {-1, -10}, {
            7, -11}, {13, -12}, {-2, 8}, {-3, 9}, {10, 11}, {-4, 
            12}, {-5, -13}, {-6, -14}, {-7, 14}, {-8, -15}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 3, 4, 3, 2, 3, 4, 3, 4, 2, 2, 
            3, 5}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{33, 1, 40, 3, 44, 7, 5, 41, 5, 26, 44, 30, 43,
             44, 3, 25, 5}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.14915317187810428`, 
           0.7325006703446846, -0.41389484423196565`, 0.27170267517719227`, 
           0.40899221110378914`, 
           0.07844893794321128, -0.6559460594829671, -0.048436416316467, 
           0.5628154865039221, 0.04361261949225681, -0.5579030576873594, 
           0.04361261949225681, 0.11637330917585553`, -0.3049899199612618, 
           0.21559635540324273`, 0.029719678233114055`, -0.8046030888873892}, 
          "Children" -> 
          RawArray["Integer16",{{2, -5}, {3, -6}, {4, 5}, {6, -7}, {14, -8}, {
            7, -9}, {8, 9}, {10, -10}, {11, -11}, {-1, -12}, {12, -13}, {
            13, -14}, {-2, -15}, {15, 16}, {17, -16}, {-3, -17}, {-4, -18}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 1, 2, 1, 2, 1, 4, 3, 2, 4, 4, 4, 5, 
            2, 2, 3, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{44, 5, 29, 1, 25, 37, 44, 41, 44, 40, 43, 42, 
            3, 40}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.0823884612258029, \
-0.40586172366155937`, 0.006176411049499939, -0.5495441483146806, 
           0.029719678233114055`, 
           0.04589315013420109, -1.2389890270116108`, -0.23586357339731667`, \
-0.7757345605391706, -0.5052340731435336, 1.0372500130702864`, 
           1.8508513472363326`, -0.0822662516160767, -0.33774545114019716`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {12, 13}, {-1, 6}, {8, -8}, {
            7, -9}, {-2, -10}, {-3, 9}, {10, 11}, {-4, -11}, {-5, -12}, {
            14, -13}, {-6, -14}, {-7, -15}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 4, 1, 2, 5, 4, 2, 2, 4, 2, 1, 4, 
            3, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{40, 4, 44, 42, 39, 3, 4, 44, 4, 43, 25, 1, 5, 
            36}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.3465177477847674, \
-0.33088048682423654`, -0.09357972378075308, -0.3635068987290526, 
           0.04361261949225681, 0.4269193301403069, 
           0.5476987122627044, -0.8235915969774013, -0.15923680466286916`, 
           0.6147716667717136, 0.0622563875783716, -0.5495432277043557, 
           0.032318094320745616`, 0.08601588380936276}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {14, -8}, {-1, -9}, {6, 7}, {
            8, 9}, {-2, -10}, {10, 11}, {-3, -11}, {-4, -12}, {12, -13}, {-5, 
            13}, {-6, -14}, {-7, -15}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 2, 1, 2, 5, 1, 2, 3, 2, 4, 3, 5, 5, 
            2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 5, 25, 42, 43, 2, 42, 17, 3, 26, 19, 44, 
            2}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.08145812825199428, \
-0.21447335298177106`, 0.029719678233114055`, -0.3528263502082347, 
           0.6005892493102882, -0.017423100862788227`, 0.6496784781699931, 
           0.11223922158870792`, -0.08145758275315818, 0.04361261949225681, 
           0.04361261949225681, 0.3794479089734857, 0.07229077411007223}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {7, 8}, {-1, -8}, {
            6, -9}, {-2, -10}, {-3, -11}, {9, -12}, {10, 11}, {-4, 12}, {-5, 
            13}, {-6, -13}, {-7, -14}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 1, 3, 2, 2, 2, 2, 2, 4, 4, 1, 5, 3, 
            4}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{44, 3, 29, 44, 42, 12, 34, 2, 32, 3, 5, 20}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.21779097309529272`, -0.21340799987736014`, 
           0.007033064001162007, -0.5839798352023564, -0.49225999119843245`, 
           0.03864783157843038, 0.04361261949225681, 0.07229045509942056, 
           0.03517238790237187, 0.42691868104602415`, -0.170478629174587, 
           0.04914817117483755}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {11, 12}, {-1, -6}, {6, 7}, {
            8, -7}, {9, -8}, {-2, -9}, {
            10, -10}, {-3, -11}, {-4, -12}, {-5, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 5, 2, 4, 3, 2, 2, 2, 4, 2, 3, 2, 
            3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{41, 8, 8, 2, 23, 21, 2, 40, 42, 12, 41, 40, 
            41, 43, 30, 26, 40, 43, 4}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.1961361039699383, 
           0.059930662201451046`, 0.028609433765851067`, 0.07229128307393484, 
           0.03660899031508358, 0.04361261949225681, 
           0.07229071397576137, -0.4598888653909432, -0.4460402863918276, 
           0.059930662201451046`, 0.182651824572996, 0.4786646877490135, 
           0.1404898029256214, 0.5674287015577963, 0.04361261949225681, 
           0.04361261949225681, -0.43579570724631234`, 
           1.2607511919212762`, -0.22638537483820698`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {9, 10}, {6, -7}, {-1, -8}, {
            7, -9}, {8, -10}, {-2, -11}, {11, 12}, {-3, -12}, {13, -13}, {15, 
            16}, {14, -14}, {-4, -15}, {17, -16}, {-5, -17}, {18, -18}, {
            19, -19}, {-6, -20}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{5, 3, 2, 4, 4, 2, 4, 2, 2, 3, 2, 5, 4, 
            2, 5, 2, 3, 3, 5, 1}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{43, 36, 1, 23, 25, 43, 43, 42, 5, 44, 34, 
            13}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-1.1628740559968556`, 
           0.08601588380936276, -0.30680875328860013`, 0.03343938076399411, 
           0.0622563875783716, -0.15017506119612456`, -0.8745847025168434, \
-0.5459980977288206, -0.17047878118404047`, 0.5889248200291375, 
           0.04361261949225681, 0.0634457522168056}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -5}, {4, 5}, {6, -6}, {9, -7}, {
            7, 8}, {-2, -8}, {-3, -9}, {10, -10}, {11, -11}, {
            12, -12}, {-4, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 4, 1, 3, 3, 2, 2, 4, 2, 3, 3, 2, 
            3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{44, 40, 27, 4, 14, 41, 5, 43, 11, 40, 43, 5, 
            2, 2}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.4784456215788975, -0.4043644364849843, 
           0.07844893794321128, 0.07340896556870191, 
           0.02755336960633953, -0.09537534570749417, -0.2584678659915718, \
-0.8745847025168434, 0.05024321175829599, -0.353381392436404, 
           0.9344193283673743, -0.13951379791093843`, -0.07341738840663503, \
-0.4060246203470941}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {12, -6}, {6, 7}, {10, -7}, {
            8, -8}, {-1, 9}, {-2, -9}, {-3, -10}, {11, -11}, {-4, -12}, {
            13, -13}, {14, -14}, {-5, -15}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{5, 2, 2, 3, 3, 2, 2, 1, 4, 5, 3, 2, 4, 
            3, 5}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{1, 41, 23, 25, 8, 3, 41, 1, 2, 42, 5, 4, 40, 
            44, 42, 44}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.549544564128011, 0.5845036302847388, 
           0.07004837107907769, 0.029719678233114055`, 0.03132122843559998, 
           0.21559569242632093`, 0.08158086492686956, -0.3440548165756523, 
           0.07229126282066523, -0.3105829685217274, -0.08537322247560497, \
-0.15923608876271467`, 0.47117481194239463`, 
           0.5172103388535909, -0.2864736515978432, 0.2990496987187252}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -9}, {4, 5}, {6, 7}, {-2, -10}, {
            8, 9}, {15, 16}, {-3, 10}, {-4, 11}, {-5, -11}, {12, -12}, {
            13, -13}, {14, -14}, {-6, -15}, {-7, -16}, {-8, -17}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 3, 1, 3, 4, 1, 2, 2, 5, 2, 1, 2, 3, 
            4, 4, 3, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{25, 20, 25, 40, 1, 44, 44, 5, 40, 40, 1}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.0622563875783716, 0.032127159512556125`,
            0.07268434485314845, -0.41389484423196565`, -0.2949658623660327, \
-0.6026040501721344, -0.0823884612258029, -0.17047805565698737`, \
-0.5298499393462341, -0.5581812075763573, -0.5495433965048546}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -7}, {6, 7}, {-2, -8}, {
            8, 9}, {-3, -9}, {-4, 10}, {11, -10}, {-5, -11}, {-6, -12}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{5, 2, 3, 2, 4, 3, 5, 3, 3, 4, 1, 4}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{32, 40, 6, 1, 40, 4, 42, 43, 43, 5, 2, 40, 25,
             19, 40}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.032127159512556125`, -0.42822743213177983`, 
           0.056128445635612256`, -0.5495437215909238, 
           0.755249324893275, -0.33088031972303966`, -0.4084219474438515, 
           0.7449303262649085, 1.0833255527579997`, -0.41321240609629584`, 
           0.2828584205467899, -0.4849479624604749, 0.06986731374100497, 
           0.04361261949225681, -0.47127063892752474`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {15, -6}, {6, 7}, {
            13, -7}, {-1, -8}, {8, 9}, {10, -9}, {11, -10}, {-2, -11}, {
            12, -12}, {-3, -13}, {14, -14}, {-4, -15}, {-5, -16}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 4, 1, 3, 5, 3, 4, 2, 2, 4, 4, 3, 2, 
            5, 3, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{31, 22, 2, 5, 3, 2, 40, 3, 41, 5, 3, 44, 23, 
            40, 40, 20, 41}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.09411917616573684, 0.09613636189249708, 
           0.234949192240826, -0.13951379791093843`, -0.1897653640856678, \
-0.017423332316989754`, -0.5397649429256042, -0.08145856300482524, 
           0.8183968323619881, -0.6559473902710078, 0.2717024205644245, 
           0.5791526854238995, 
           0.05115560898332877, -0.4312992232514734, -0.540374256916925, 
           0.04339984706082145, 0.20404081516560324`}, "Children" -> 
          RawArray["Integer16",{{2, -9}, {3, -10}, {4, -11}, {5, 6}, {7, 
            8}, {-1, 17}, {-2, -12}, {9, 10}, {-3, -13}, {11, 
            12}, {-4, -14}, {13, 14}, {15, -15}, {-5, 
            16}, {-6, -16}, {-7, -17}, {-8, -18}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 3, 1, 2, 2, 4, 3, 1, 5, 5, 3, 4, 5, 
            5, 2, 3, 3, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 44, 2, 44, 43, 12, 30, 1, 32, 41, 4, 2, 1, 
            20, 5}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.13951379791093843`, \
-0.717318501835579, -0.017423332316989754`, -0.8357678789156475, \
-0.05205093260457311, 0.028609433765851067`, 
           0.04361261949225681, -0.5495428718294102, 
           0.032127159512556125`, -1.008098446662327, -0.2263848741269774, \
-0.5929249321679144, -0.48012801731433496`, 0.09254801823565895, 
           0.5628154865039221}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 15}, {-2, -10}, {6, 7}, {
            8, 9}, {11, 12}, {10, -11}, {-3, -12}, {-4, -13}, {-5, 
            13}, {-6, -14}, {-7, 14}, {-8, -15}, {-9, -16}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 2, 5, 5, 1, 4, 2, 4, 2, 1, 3, 2, 3, 
            2, 3, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 39, 36, 42, 42, 40, 40, 3, 4, 4, 3, 37, 43,
             42}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.170478955762007, 0.04361261949225681, 
           0.08601588380936276, 2.3130167419860737`, -0.5364926280789799, 
           1.9657160402272353`, -0.5617416371842916, 0.21559622231240239`, 
           0.26426325879433765`, -0.29353395040232444`, 0.09512242516440417, 
           0.04589315013420109, 0.38811177743866443`, -0.2845723587358364}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {12, 13}, {6, -7}, {-1, 11}, {
            7, -8}, {-2, 8}, {9, -9}, {
            10, -10}, {-3, -11}, {-4, -12}, {-5, -13}, {14, -14}, {-6, -15}}],
           "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 5, 5, 3, 2, 4, 4, 4, 3, 3, 1, 2, 2, 
            1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 4, 15, 37, 41, 23, 42, 42, 42, 3, 24, 40, 
            43, 40, 9, 1, 1, 2}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.18976576568490144`, \
-0.3308801811061892, 0.06356267684562711, 
           0.05024321175829599, -1.008098446662327, 0.05115560898332877, 
           0.2865145098747397, -0.4469198138413808, -0.5515739053521491, \
-0.08145782357502995, 0.04361261949225681, -0.5396439715894319, 
           1.4574775397002266`, -0.1613486743661141, 
           0.04361261949225681, -0.8255208147630801, -0.30680875328860013`, 
           0.2828585290502543}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {5, -9}, {6, 7}, {-2, -10}, {
            8, -11}, {-3, -12}, {9, 10}, {-4, 11}, {13, 14}, {
            12, -13}, {-5, -14}, {15, -15}, {17, -16}, {
            16, -17}, {-6, -18}, {-7, 18}, {-8, -19}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 5, 2, 1, 4, 2, 2, 3, 2, 3, 3, 5, 2, 
            4, 5, 3, 2, 1, 4}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{13, 12, 43, 37, 16, 1, 2, 4, 19, 43, 44, 43, 
            1, 43, 40, 43, 44, 25, 43}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.0634457522168056, 
           0.06996906001403036, -1.1612487582305064`, 0.06199600983041198, 
           0.30404845869973984`, -0.29496605762199213`, -0.21912578846462627`,
            0.6121151602869634, 
           0.04361261949225681, -0.004391044947348016, -0.7630766343970148, \
-0.8745847025168434, -0.3406786907154591, -1.0864543664040234`, \
-0.4551490717320634, 0.7541107903699347, 0.26079621215736815`, 
           0.029719678233114055`, 0.7337807525633124}, "Children" -> 
          RawArray["Integer16",{{2, -8}, {3, 4}, {5, 6}, {
            19, -9}, {-1, -10}, {7, 8}, {9, 10}, {15, -11}, {11, -12}, {12, 
            13}, {-2, -13}, {14, -14}, {-3, -15}, {-4, -16}, {16, 
            17}, {-5, -17}, {18, -18}, {-6, -19}, {-7, -20}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 1, 2, 4, 2, 3, 3, 2, 5, 3, 4, 4, 1, 
            4, 1, 5, 1, 3, 2, 4}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 15, 40, 40, 44, 22, 26, 8, 2, 4, 44, 1, 43,
             41, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.2786678965018776, 
           0.16903481095210737`, -0.5392029200304087, -0.5617059167801761, 
           0.5403879681492061, 0.09613636189249708, 0.04361261949225681, 
           0.028609433765851067`, -0.5929253933038385, 0.5476987122627044, 
           0.09394906750656884, -0.8255208147630801, -1.1628740559968556`, 
           0.30108361271619444`, -0.6875323523761301}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -9}, {4, 5}, {-2, 6}, {8, 9}, {
            7, -10}, {-3, -11}, {10, -12}, {-4, 15}, {11, -13}, {
            12, -14}, {-5, 13}, {-6, 14}, {-7, -15}, {-8, -16}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 5, 3, 2, 2, 3, 2, 5, 4, 5, 2, 2, 4, 
            2, 1, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{40, 32, 44, 2, 44, 1, 44, 5, 1, 5, 43, 31, 41,
             40, 34, 5}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.5641915738460588, 
           0.032127159512556125`, -0.06838403365643386, -0.5054680615310696, \
-0.23274547954659508`, -0.6074177102857679, -1.2389890270116108`, \
-0.34221007748600707`, -0.17813234441119796`, 0.5628159897870342, 
           0.11637330917585553`, 
           0.17686130905869213`, -0.995794235469738, -0.44516433403877453`, 
           0.04361261949225681, -0.17047869147487438`}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {5, 6}, {16, -9}, {
            7, -10}, {-2, 12}, {-3, 8}, {9, 10}, {-4, -11}, {
            11, -12}, {-5, -13}, {13, -14}, {-6, 14}, {
            15, -15}, {-7, -16}, {-8, -17}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{5, 5, 1, 4, 1, 2, 3, 3, 2, 2, 4, 4, 2, 
            4, 3, 4, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 43, 1, 40, 42, 41, 40, 4, 44, 25, 6, 3}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.12450615420262112`, 
           0.3870171500993922, -0.2949650704664424, -0.5105052057704418, \
-0.5607023918865774, 1.9777670188463716`, 1.9095038699554312`, 
           0.5476991340666517, 2.2181523629122246`, 0.029719678233114055`, 
           0.06356267684562711, -0.08307504350119299}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 6}, {-2, -6}, {7, 
            8}, {-3, -7}, {-4, -8}, {9, -9}, {10, -10}, {11, -11}, {
            12, -12}, {-5, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 1, 3, 3, 2, 1, 2, 1, 5, 4, 2, 2, 
            5}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{44, 2, 36, 44, 41, 2, 2, 14, 41, 40, 35, 5, 3,
             43, 3, 1, 5}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.5791526854238995, 0.28285861699799497`, 
           0.08601588380936276, -0.33464036746935966`, 0.36012699053250685`, 
           0.2828583424457203, 0.07228990997452367, 
           0.0301650634078883, -0.10493759896173327`, -0.5408704373643225, 
           0.04361261949225681, -0.21447277732758496`, -0.08226651344476532, \
-1.7345877808234516`, -0.08145811772719502, -0.44848643731213755`, \
-0.34220920706032043`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -9}, {-1, 17}, {5, 6}, {7, -10}, {
            13, -11}, {8, -12}, {9, -13}, {10, 11}, {-2, -14}, {
            12, -15}, {-3, -16}, {-4, 14}, {-5, 15}, {-6, 
            16}, {-7, -17}, {-8, -18}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 4, 2, 5, 4, 4, 2, 3, 3, 1, 4, 5, 5, 
            3, 2, 1, 2, 5}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{1, 44, 25, 40, 37, 4, 42, 32, 36, 4, 44, 8, 2,
             41, 4}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.5495443781771403, -0.04171801108849987,
            0.029719678233114055`, -0.5623481940523378, 
           0.09613636189249708, -0.15923660605747947`, 0.6121751562144286, 
           0.09254801823565895, 
           0.08601588380936276, -0.3308812895014368, -0.5392343097549546, 
           0.03864783157843038, 0.28285796405894637`, 0.16869852389588114`, 
           0.5476992781750747}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -8}, {4, 5}, {-2, 6}, {14, -9}, {
            7, 8}, {9, -10}, {11, -11}, {-3, 10}, {-4, -12}, {-5, 12}, {
            13, -13}, {-6, -14}, {15, -15}, {-7, -16}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 5, 2, 4, 1, 3, 2, 5, 5, 1, 3, 3, 4, 
            4, 2, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{23, 2, 20, 2, 42, 1, 43, 9, 4, 40, 37, 40, 
            4}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.0451724968215359, 0.07229063077540288, 
           0.09254801823565895, 0.07229036517408538, 
           2.3130167419860737`, -0.5495432277043557, 0.6966475585902101, 
           0.04361261949225681, 0.3060546457340494, -0.5730552758292253, 
           0.04589315013420109, -0.5302653173894214, 0.06720222150960653}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -7}, {6, -8}, {12, -9}, {
            7, 8}, {-2, -10}, {9, -11}, {10, 11}, {-3, -12}, {-4, -13}, {-5, 
            13}, {-6, -14}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 4, 4, 1, 3, 2, 2, 4, 5, 2, 1, 2, 
            2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{44, 43, 22, 3, 24, 44, 44, 41, 2, 3, 4, 41, 
            41}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.4784456215788975, -1.2171999342477928`, 
           0.06199600983041198, -0.08145811772719502, 
           0.04361261949225681, -0.29450080014054203`, -0.14361289901126417`, \
-0.09399159204269836, -0.5929245478714025, 0.9019924155419492, 
           0.14344124443823691`, -1.281182419109813, -0.9491407601220212}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {12, -7}, {5, 6}, {7, -8}, {
            9, -9}, {8, -10}, {-2, -11}, {-3, 10}, {11, -12}, {-4, -13}, {-5, 
            13}, {-6, -14}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 2, 2, 1, 4, 3, 5, 4, 2, 5, 1, 1, 3, 
            3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{42, 20, 1, 11, 40, 34, 42, 42, 17, 43, 41, 1, 
            29, 40, 8, 41, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {2.3573551104685126`, 0.09254801823565895, 
           0.2187670417887142, 0.09613636189249708, -0.44516433403877453`, 
           0.04361261949225681, 1.407913555087024, -0.4460402863918276, 
           0.04589315013420109, 
           0.5318953336358083, -0.9653228437108714, -0.5659563904313085, 
           0.018192821636345835`, 2.2888042311811763`, 0.03864783157843038, 
           1.3600370588953101`, -0.549544564128011}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -7}, {-1, -8}, {5, -9}, {6, 7}, {
            8, -10}, {14, -11}, {9, 10}, {11, -12}, {-2, 12}, {-3, -13}, {-4, 
            13}, {-5, -14}, {15, -15}, {16, -16}, {17, -17}, {-6, -18}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{5, 1, 3, 5, 3, 2, 3, 4, 2, 4, 2, 2, 4, 
            3, 1, 2, 2, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{1, 34, 3, 4, 42, 41, 23, 43, 40, 43, 2, 25, 5,
             23, 5, 44, 40, 5, 40, 4}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.5495428718294102, 
           0.04361261949225681, -0.08145812825199428, -0.3308808097612457, \
-0.566980962986821, -1.0459915845269645`, 
           0.10879573178144564`, -1.7407465529619603`, 
           1.3828577952474106`, -0.2276016827788374, -0.017422601995115444`, 
           0.029719678233114055`, -0.17047826511239705`, 
           0.05115560898332877, -0.17047791636000187`, -0.44506060072238496`, 
           1.7477791744267197`, -0.40586193029899986`, -0.5302653173894214, 
           0.5476992781750747}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -9}, {11, 12}, {5, 
            6}, {-1, -10}, {-2, 7}, {8, -11}, {-3, 9}, {10, -12}, {-4, -13}, {
            13, -14}, {14, 15}, {-5, -15}, {16, -16}, {20, -17}, {17, 18}, {
            19, -18}, {-6, -19}, {-7, -20}, {-8, -21}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 4, 3, 5, 4, 4, 1, 2, 4, 3, 3, 3, 5, 
            4, 1, 3, 3, 1, 3, 3, 3}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{23, 42, 37, 3, 40, 5, 21, 23, 2, 30, 41, 25, 
            5, 44}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.07004837107907769, -0.17599450322783294`, 0.05024321175829599, 
           0.2717016615011918, -0.33130779021433865`, -0.8179624130291723, 
           0.04361261949225681, 0.03343938076399411, -0.40602459892916576`, 
           0.04361261949225681, -0.04095859695704518, 
           0.029719678233114055`, -0.4058615619718555, -0.06689707063494299}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -8}, {6, 7}, {
            12, -9}, {-2, 8}, {-3, -10}, {9, -11}, {10, 
            11}, {-4, -12}, {-5, -13}, {13, -14}, {-6, 14}, {-7, -15}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 3, 4, 4, 3, 1, 2, 3, 2, 2, 2, 5, 
            2, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 43, 40, 36, 33, 43, 3, 43, 44, 1, 37, 5, 
            42, 5}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.170478955762007, -1.1612487582305064`, \
-0.5419879551539637, 0.08601588380936276, 
           0.0634457522168056, -0.8745847025168434, -0.047767137099641255`, 
           0.6728982865808897, -0.9651026698034002, -0.4801285656551806, 
           0.05024321175829599, -0.17047883618570503`, -0.40930147489340474`, \
-0.17047784300459412`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {11, 12}, {-1, -9}, {6, 
            7}, {-2, 8}, {-3, -10}, {9, -11}, {-4, 10}, {-5, -12}, {
            13, -13}, {-6, 14}, {-7, -14}, {-8, -15}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 5, 3, 4, 2, 4, 4, 2, 3, 2, 3, 3, 5, 
            1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{22, 1, 40, 1, 40, 3, 3, 3, 15, 40, 2, 42, 4, 
            43, 39, 4}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.04589315013420109, -0.549544564128011, -0.5188164892325622, \
-0.6652905641430449, -0.3218087620495522, -0.12450615420262112`, \
-0.12450578654607014`, 0.42691868104602415`, 
           0.056128445635612256`, -0.47279216755323406`, \
-0.017422601995115444`, 0.023941945731164233`, 
           0.5476980656136341, -1.1612487582305064`, 
           0.04361261949225681, -0.24505818268765434`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -8}, {6, -9}, {8, 
            9}, {-2, 7}, {-3, -10}, {10, -11}, {15, -12}, {11, 12}, {13, 
            14}, {-4, -13}, {-5, -14}, {-6, -15}, {16, -16}, {-7, -17}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 1, 5, 2, 1, 3, 3, 2, 2, 2, 3, 3, 3, 
            2, 4, 3, 4}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 44, 40, 23, 2, 35, 42, 41, 42, 43}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.10855039925202004`, 
           0.4784456215788975, -0.4966475627358262, 
           0.03343938076399411, -0.596741779959622, 0.04361261949225681, 
           0.167490375192467, -1.1826248615656976`, -0.5624466242878086, 
           0.38811177743866443`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {10, -7}, {6, 7}, {-1, 
            8}, {-2, -8}, {-3, -9}, {-4, 9}, {-5, -10}, {-6, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 1, 2, 4, 4, 4, 2, 2, 5, 3, 1}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>]}, "Processor" -> 
      MachineLearning`MLProcessor[
       "FirstValues", <|"Info" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
            "], "Type" -> "NumericalVector"|>, "Key" -> "(f2f6(f1f3f4f5f7))", 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], 
      "OOBConfusionMatrix" -> {{0.1950713522348652, 0.15418152992469283`, 
       0.14606657430636164`, 0.19210124587580638`, 0.19494562142453006`}, {
       0.19494562142453012`, 0.242348174571718, 0.1760212678324035, 
       0.2314965282907372, 0.2200917834915446}, {0.22009178349154465`, 
       0.20702866957325936`, 0.310892275433407, 0.19210124587580638`, 
       0.19494562142453006`}, {0.19494562142453012`, 0.17179724314088168`, 
       0.2209533081214663, 0.23159501649677453`, 0.19494562142453006`}, {
       0.19494562142453012`, 0.2246443827894482, 0.14606657430636164`, 
       0.15270596346087556`, 0.19507135223486513`}}, "Calibrator" -> 
      MachineLearning`CalibratorFunction[
       "TemperatureScaling", <|"Theta" -> 1.5278782578839558`|>], "Method" -> 
      "RandomForest", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "FeatureFraction" -> <|
         "Value" -> Rational[1, 2] 11^Rational[-1, 2], "Options" -> <||>|>, 
        "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
        "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
        "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
        "Implementation" -> <|"Value" -> "Default", "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.133097`5.575713260104164, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[1.557898969015069, 0.014595369457882734`], "Accuracy" -> 
         Around[0.3451337789328387, 0.04592403052135194], "EvaluationTime" -> 
         0.00009183061001456736, "TestSize" -> 150, "ModelMemory" -> 
         101929.45454545454`, "ModelUtility" -> -1.138422688625751, 
         "TrainingSize" -> 60, "TrainingTime" -> 0.018460371795115095`, 
         "TrainingMemory" -> 264626.1818181819, "ExperimentCount" -> 10, 
         "MeanCrossEntropyHistory" -> {
           Around[1.559476713286499, 0.040765376917311906`], 
           Around[1.56095940061608, 0.0517013270405557], 
           Around[1.5357742722598415`, 0.04554188097468363], 
           Around[1.5732228052519606`, 0.04307433424387132], 
           Around[1.552633674706322, 0.042206398680778016`], 
           Around[1.5655956585394062`, 0.04178983624644909], 
           Around[1.5459278419020215`, 0.05055069703867736], 
           Around[1.551664308493814, 0.045175981011028175`], 
           Around[1.5631733470620675`, 0.04539179448299618], 
           Around[1.5705616680326795`, 0.04435445572886361]}, 
         "AccuracyHistory" -> {
           Around[0.3263837789328387, 0.11966602137337685`], 
           Around[0.5138837789328388, 0.1275565638286851], 
           Around[0.3888837789328387, 0.12441482134936328`], 
           Around[0.2013837789328387, 0.10234852942509189`], 
           Around[0.3888837789328387, 0.12441482134936328`], 
           Around[0.3263837789328387, 0.11966602137337683`], 
           Around[0.3888837789328387, 0.12441482134936328`], 
           Around[0.2638837789328387, 0.11248117430350343`], 
           Around[0.3263837789328387, 0.11966602137337685`], 
           Around[0.3263837789328387, 0.11966602137337683`]}, 
         "Configuration" -> {
          "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
           Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
           0.5, "Implementation" -> Automatic}, "FinalTrainingSize" -> 75|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 10], 
          TypeSystem`Vector[TypeSystem`AnyType, 10], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "RandomForest", 
           "Options" -> <|
            "FeatureFraction" -> <|"Value" -> Automatic|>, 
             "LeafSize" -> <|"Value" -> Automatic|>, 
             "TreeNumber" -> <|"Value" -> Automatic|>, 
             "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
             "Implementation" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.6416736155941103`, 0.022702551172734984`], "Accuracy" -> 
              Around[0.10942637065038517`, 0.05461308760763521], 
              "EvaluationTime" -> 0.00003069634330721352, "TestSize" -> 65, 
              "ModelMemory" -> 86992, "ModelUtility" -> -1.191687261686679, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.12589254117941673`, 
              "TrainingMemory" -> 221016, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.6416736155941103`, 0.016053127884475514`]}, 
              "AccuracyHistory" -> {
                Around[0.10942637065038517`, 0.03861728458889386]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.557898969015069, 0.014595369457882734`], "Accuracy" -> 
              Around[0.3451337789328387, 0.04592403052135194], 
              "EvaluationTime" -> 0.00009183061001456736, "TestSize" -> 150, 
              "ModelMemory" -> 101929.45454545454`, 
              "ModelUtility" -> -1.138422688625751, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.018460371795115095`, "TrainingMemory" -> 
              264626.1818181819, "ExperimentCount" -> 10, 
              "MeanCrossEntropyHistory" -> {
                Around[1.559476713286499, 0.040765376917311906`], 
                Around[1.56095940061608, 0.0517013270405557], 
                Around[1.5357742722598415`, 0.04554188097468363], 
                Around[1.5732228052519606`, 0.04307433424387132], 
                Around[1.552633674706322, 0.042206398680778016`], 
                Around[1.5655956585394062`, 0.04178983624644909], 
                Around[1.5459278419020215`, 0.05055069703867736], 
                Around[1.551664308493814, 0.045175981011028175`], 
                Around[1.5631733470620675`, 0.04539179448299618], 
                Around[1.5705616680326795`, 0.04435445572886361]}, 
              "AccuracyHistory" -> {
                Around[0.3263837789328387, 0.11966602137337685`], 
                Around[0.5138837789328388, 0.1275565638286851], 
                Around[0.3888837789328387, 0.12441482134936328`], 
                Around[0.2013837789328387, 0.10234852942509189`], 
                Around[0.3888837789328387, 0.12441482134936328`], 
                Around[0.3263837789328387, 0.11966602137337683`], 
                Around[0.3888837789328387, 0.12441482134936328`], 
                Around[0.2638837789328387, 0.11248117430350343`], 
                Around[0.3263837789328387, 0.11966602137337685`], 
                Around[0.3263837789328387, 0.11966602137337683`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00009183061001456736, "MeanCrossEntropy" -> 
             Around[1.557898969015069, 0.014595369457882734`], "ModelMemory" -> 
             101929.45454545454`, "TrainingMemory" -> 264626.1818181819, 
             "TrainingTime" -> 0.13973782002575305`|>, "Index" -> 1|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            2], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], <||>], "MaxTrainingSize" -> 75, 
      "PreprocessorEvaluationTime" -> 2.14453125*^-6, "PreprocessorMemory" -> 
      178720, "InputDimension" -> 44, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.504445381309891, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.879152719590727`16.341311866973452*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.040918028459941046`, 
          "ElapsedTimes" -> 0.13641, "ExperimentCounts" -> 1|>, <|
         "TrainingSizes" -> 60, "TimeBudgets" -> 0.2045901422997051, 
          "ElapsedTimes" -> 0.20801399999999998`, "ExperimentCounts" -> 10|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, "ID" -> 
           3795572968267006573|>, 
         "f2" -> <|
          "Type" -> "Nominal", "Weight" -> 1, 
           "Values" -> {"Information Technology"}, "ID" -> 
           3401139331922032727|>, 
         "f3" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369}, "ID" -> 
           4714656301856831657|>, 
         "f4" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {23.778}, "ID" -> 
           4624390425862832796|>, 
         "f5" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {100.249}, "ID" -> 
           8583462845398299564|>, 
         "f6" -> <|
          "Type" -> "Text", "Weight" -> 1, "Values" -> {"Estimated data"}, 
           "ID" -> 3095956687388126824|>, 
         "f7" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {256.9105}, "ID" -> 
           1111199487588034056|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 0.521046, 
      "MaxTrainingMemory" -> 706376, "DataMemory" -> 118040, "FunctionMemory" -> 
      358904, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 12, 4, 14, 25, 19.963511`8.052811907393602}, 
        "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, "ProcessorType" -> 
      "ARM64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, 3.8788070723199997`*^9, 
   3.8788071152477303`*^9, 3.878811629852172*^9, 3.879149119975829*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"34e34a87-91df-476d-bfed-9e33963b8a3d"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Data type"], 
                   TextCell["Data type"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{
                   InterpretationBox[
                    Cell["Mixed"], 
                    TextCell["Mixed"]], 
                   StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]},
                  "RowDefault"],
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                  Short[#, 10]& ]],
                Annotation[#, 
                 
                 Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                   "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classes"], 
                   TextCell["Classes"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 InterpretationBox[
                  Cell["A"], 
                  TextCell["A"]], 
                 InterpretationBox[
                  Cell["B"], 
                  TextCell["B"]], 
                 InterpretationBox[
                  Cell["C"], 
                  TextCell["C"]], 
                 InterpretationBox[
                  Cell["D"], 
                  TextCell["D"]], 
                 InterpretationBox[
                  Cell["E"], 
                  TextCell["E"]]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"35.", "5."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    34.5133778932838666265`3., 4.5924030521351939527`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Method"], 
                   TextCell["Method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 
                 InterpretationBox[Cell[
                  "RandomForest",ExpressionUUID->
                   "cd7f81f7-7854-4364-bce9-00f493ba1ebc"],
                  TextCell["RandomForest"]],
                 StyleBox[
                  TagBox[
                   GridBox[{{"\"FeatureFraction\"", 
                    FractionBox["1", 
                    RowBox[{"2", " ", 
                    SqrtBox["11"]}]]}, {"\"LeafSize\"", "5"}, {
                    "\"TreeNumber\"", "50"}, {
                    "\"DistributionSmoothing\"", "0.5`"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                  "Verdana", StripOnInput -> False]],
                Annotation[#, 
                 Style[
                  
                  Grid[{{"FeatureFraction", Rational[1, 2] 
                    11^Rational[-1, 2]}, {"LeafSize", 5}, {
                    "TreeNumber", 50}, {"DistributionSmoothing", 0.5}}, 
                   Alignment -> Left, Frame -> All, FrameStyle -> 
                   GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                 "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"3.07`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"31.8`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                   Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"1.5578989690150690794`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0145953694578827339`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "1.5287082300993035666`3.", "\", \"", 
                   "1.5870897079308345923`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 1.5287082300993035666`3., 
                   ", ", 1.5870897079308345923`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Model memory"], 
                   TextCell["Model memory"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"364.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training examples used"], 
                   TextCell["Training examples used"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               TemplateBox[{"75", "\"examples\"", "examples", "\"Examples\""},
                
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training time"], 
                   TextCell["Training time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               TemplateBox[{
                "521.`", "\"ms\"", "milliseconds", "\"Milliseconds\""},
                "Quantity"]},
              {
               ItemBox[
                
                DynamicModuleBox[{
                 MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                 DynamicBox[ToBoxes[
                   Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.49571621879618827`}, {
                    4.0943445622221, 0.4433380987573948}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.49571621879618827`}}, {{4.0943445622221, 
                    0.4433380987573948}}}]}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.48179080203508834`}, {
                    2.302585092994046, 0.5094503786098291}, {
                    2.302585092994046, 0.5094503786098291}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, 0.43392531329877476`}, {
                    4.0943445622221, 0.4526631092508115}, {4.0943445622221, 
                    0.4526631092508115}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-2.178060225738475, 0.43923921361696466`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-2.178060225738475, 4.31748811353631}, {
                    0.43923921361696466`, 0.49571621879618827`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.10942637065038517`}, {
                    4.0943445622221, 0.3451337789328387}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.10942637065038517`}}, {{4.0943445622221, 
                    0.3451337789328387}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-2.178060225738475, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-2.178060225738475, 4.31748811353631}, {
                    0, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.49571621879618827`}, {
                    4.0943445622221, 0.4433380987573948}, {4.0943445622221, 
                    0.4433380987573948}}]}, 
                    Column[{
                    Style["RandomForest", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"FeatureFraction", Automatic}, {
                    "LeafSize", Automatic}, {"TreeNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.49571621879618827`}}, {{
                    4.0943445622221, 0.4433380987573948}}, {{4.0943445622221, 
                    0.4433380987573948}}}]}, 
                    Column[{
                    Style["RandomForest", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"FeatureFraction", Automatic}, {
                    "LeafSize", Automatic}, {"TreeNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-2.178060225738475, 0.43923921361696466`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-2.178060225738475, 4.31748811353631}, {
                    0.43923921361696466`, 0.49571621879618827`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, -1], 
                    Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, 
                    Plus[1]], Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                  ImageSizeCache->{330., {120., 126.}}],
                 DynamicModuleValues:>{}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> 
           ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  MachineLearning`MLInformationObject[
   ClassifierFunction[<|
    "ExampleNumber" -> 75, "ClassNumber" -> 5, 
     "Input" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|
           "Elevation" -> <|"Type" -> "Numerical"|>, 
            "GICS Sector Name" -> <|"Type" -> "Nominal"|>, 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Disclosure" -> <|"Type" -> "Text"|>, 
            "Revenue (USD mn)" -> <|"Type" -> "Numerical"|>|>, 
          "Output" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
            "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["FromDataset"], 
               MachineLearning`MLProcessor[
               "FromNamedFeatures", <|
                "FeatureNames" -> {
                  "Elevation", "GICS Sector Name", 
                   "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                   "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                   "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                   "Carbon Disclosure", "Revenue (USD mn)"}|>], 
               MachineLearning`MLProcessor[
               "Transpose", <|"FeatureNumber" -> 7|>], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {
                  "Numerical", "Nominal", "Numerical", "Numerical", 
                   "Numerical", "Text", "Numerical"}, 
                 "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6", "f7"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          False, "Invertibility" -> "Perfect", "StructurePreserving" -> False,
           "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
            "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Output" -> <|"(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["

1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
               "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
            MachineLearning`MLProcessor[
            "SynthesizeMissingValues", <|
             "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Distribution" -> 
              LearnedDistribution[<|
                "ExampleNumber" -> 75, "Preprocessor" -> 
                 MachineLearning`MLProcessor[
                  "ToMLDataset", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>, 
                    "f6" -> <|"Type" -> "Text"|>, 
                    "f7" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                  "Processor" -> 
                 MachineLearning`MLProcessor[
                  "Sequence", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 1621909218748444882|>], 
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>, 
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2074781423290265366|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 20679206186753951|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>, <|"" -> 1|>}, 
                    "MissingCode" -> Indeterminate, "Version" -> {13.1, 0}, 
                    "ID" -> 4023015169247141483, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "LogRescaleNumericalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Indices" -> {2, 4, 5}, 
                    "Centers" -> {0.43, 23.052, 256.593674903342}, 
                    "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
                    620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
                    3527897072513609120, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {146.57391774891778`, 3.693542625490828, 
                    68.22157333333334, 3.504982149660075, 
                    1.4086804722859232`}, 
                    "StandardDeviation" -> {253.37495961794207`, 
                    3.1699732836017724`, 118.62403407631172`, 
                    2.423277341145054, 1.2610287731963699`}, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2274174826257793629|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {11, 1}|>|>, 
                    "Boundaries" -> {{-0.5, -0.40909090909090906`, \
-0.3181818181818182, -0.2272727272727273, -0.13636363636363635`, \
-0.04545454545454547, 0.045454545454545414`, 0.13636363636363635`, 
                    0.2272727272727273, 0.31818181818181823`, 
                    0.40909090909090906`, 0.5}, {-0.5, 0.5}}, 
                    "Version" -> {13.1, 0}, "ID" -> 8505008840132824157, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>, 
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
                    Span[1, 2], 
                    Span[3, 7]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {13.1, 0}, "ID" -> 
                    373596144042670943|>]}, "Invertibility" -> "Approximate", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                 "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                 Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBmQFm/iFib1JlAgAAAAcAAAAHAAAANBt6Fr3csL/lG+Yz4ESRP7hBka92
l6I/3+CsXPnbnb8juBQyj++mPyQSP5BqJYY/vak1fWbb7z9Exb6rXA+mP3bs
bygIL6y/qBWDW9y8oz+sdTB+ZCFvP+M3K7whyrK/oZKNG3/O7792PFDDUfyQ
P9/U3bojxJC/o5bbS9uw5z8WAjGjisXkP97C+Aj2NcU/OamW7DSFoj9l4xTQ
yZiTv+5YNgcGV6G/JjWbdhS247/4DI4+z4GiP+damijBtq0/AUhvWGOt0r+S
UyYwEkrnv7xCV9Xbd5o/7dmZYqsIlL+U6TKOWh/fvyeCdPr2xcm/z+izHsbw
ab/DCMuYpSLrPyWlgzDxQ68/IU0Nlm9mh79gtGMp7lp6v5IjpI1bXuO/gG3Q
78EAir9w8Q54CT+tPz6D4J3Vndm/VLWB566j5T+EcC9VEICzv/LeOJ47T7W/
77C3YnYxuz+XzXfud2fkvwL5lh2DJOg/lXZTGNvFtb8Pcd+T9BKZv2lvrRrr
CbI/A8vXaYtBiL/H/s72
                    "], 
                   "Precisions" -> {0.4602875814560013, 0.9399443097653287, 
                    1.0616808801506838`, 1.6265466434380347`, 
                    4.517522263650691, 10.595148643942485`, 
                    23.23460552022561}, "NoisePrecision" -> None, "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781967`, 0.012269055622142968`, 
                    0.0013959895289638008`, -0.0005267240067510293, \
-0.00032143499611032286`, -0.00013378352049829329`, 0.0005265431937281588}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 6648082896216031031|>], 
                   "PostProcessor" -> 
                   MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7.|>,
                     "Key" -> "((f2f6)(f1f3f4f5f7))", "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                   "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 7, "Options" -> <||>|>|>|>, 
                 "TrainingInformation" -> <|
                  "Configurations" -> 
                   Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                    "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1557841622946289758|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                   Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                 "NaiveImputer" -> 
                 MachineLearning`MLProcessor[
                  "ImputeMissing", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                    "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1557841622946289758|>], "InputDimension" -> 0, 
                 "OutputDimension" -> 7, 
                 "Log" -> <|
                  "Example" -> 
                   MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, 
                    "ID" -> 2988406535272383851|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"Information Technology"}, "ID" -> 
                    8211126643196690843|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369},
                     "ID" -> 220143977676884624|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {23.778}, "ID" -> 8845109505593024510|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {100.249}, "ID" -> 827490798644983815|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 4409963340497863227|>, 
                    "f7" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {256.9105}, "ID" -> 5236914127772614391|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                   "TrainingTime" -> 0.070037, "MaxTrainingMemory" -> 219216, 
                   "DataMemory" -> 22976, "FunctionMemory" -> 86128, 
                   "LanguageVersion" -> {13.1, 0}, "Date" -> 
                   DateObject[{
                    2022, 12, 4, 14, 25, 19.527517`8.043222008537695}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, 
                   "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                 "LogPDFDistribution" -> 
                 MachineLearning`TailedQuantileDistribution[<|
                   "Quantiles" -> {-7.173238193477166, -7.173238193477166, \
-5.957762682813879, -5.505343391085791, -5.137053644875943, \
-4.839361849432994, -4.800994757869588, -4.736339520600383, \
-4.720994010399741, -4.71905825007799, -4.703766525124256}, 
                    "LeftBoundary" -> -5.957762682813879, "LeftScale" -> 
                    0.6077377553316436, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                 Around[36.60573897803041, 1.772055230348638], 
                 "EntropySampleSize" -> 10|>], 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
              "ID" -> 8833432794738512184|>], 
            MachineLearning`MLProcessor[
            "Threads", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>, 
                "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 8812518305512619507|>], 
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 7405342354547017736|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
              "Missing" -> "Allowed"|>], 
            MachineLearning`MLProcessor[
            "LogRescaleNumericalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
              "Indices" -> {2, 4, 5}, 
              "Centers" -> {0.43, 23.052, 256.593674903342}, 
              "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
               620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
              7299988401548215772, 
              "Output" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
            MachineLearning`MLProcessor[
            "Standardize", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
              "Mean" -> {146.57391774891778`, 3.693542625490828, 
               68.22157333333334, 3.504982149660075, 1.4086804722859232`}, 
              "StandardDeviation" -> {253.37495961794207`, 
               3.1699732836017724`, 118.62403407631172`, 2.423277341145054, 
               1.2610287731963699`}, 
              "Output" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 1400194064660864776|>], 
            MachineLearning`MLProcessor[
            "ToLowerCase", <|
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 3080611390123234620, 
              "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
            
            MachineLearning`MLProcessor[
            "RemoveDiacritics", <|
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 8393247813432535084, 
              "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
            
            MachineLearning`MLProcessor[
            "Threads", <|
             "Input" -> <|
               "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
                "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "EmbedNominalVector", <|
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>}, 
                  "Output" -> <|
                   "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>|>, 
                  "EmbeddingVectors" -> CompressedData["
1:eJxTTMoPSmVmYGBgBGIeIGZlwAANaDSyuINV5XF7IP0gJG/3fiC9wNDnNIjf
ICJ2FcR/IHn3Poi/gM/rKZgf6n8QrC7ZZSuIdtjqegMk77C36wKYvzLrFVje
m+cMWP3c+/vBtN3JS2D6yeWLYPkZKy+D+S8/gO0/YOZ2E2wP0+lLIJrBWOIc
WPzO1IcgdQ2LGjeB3TUp+SKYVtMFuy+h+e8TEH0gZu8JsL6j5o/B5gcFgd1z
QGXZU7D77ga+BKv/OBtsr0L9dYg7eOPvguXTp10Gm/vmJDgcFDacBZvv4HF9
Ith+wUiwvgajkndgfdOYHoHDbXHBcxCdECkFdndCbOtXsD9uJB4Bq1v48ybY
HTsegP3PYPvzEVi8+NYWsHv2tz0Em2N16SiY72lzDWzP1gO3wPoMs46A5BW2
L5wMlt+n82o/AO0BofY=
                   "], "Version" -> {13.1, 0}, "ID" -> 436956950344966148|>], 
                
                MachineLearning`MLProcessor[
                "Sequence", <|
                 "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Processors" -> {
                    MachineLearning`MLProcessor[
                    "TextToNominalSequence", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {13.1, 0}, "ID" -> 9037232907786629142, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", <|
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> {-9125122986955958911, \
-8920710729279180450, -8515397617198652367, -8156047279148961366, \
-5900137721653868194, -5516340669880835636, -4691435917638705529, \
-4484112905383790136, -3872414778415116274, -3607098371778122975, \
-3443150737398804539, -3355080348777836050, -2509905740948760720, \
-2159536488856785732, 242552411836269492, 450553210381435687, 
                    539691877398804025, 950421020428451240, 
                    1561895621580759179, 1579009397565082067, 
                    1671416204203290022, 2799484578252825308, 
                    3287432777910049379, 3477167097823690523, 
                    3576478456825362866, 4539722962543247872, 
                    5070765454536077049, 5138905625963890559, 
                    6058376361354581924, 6694985464746702812, 
                    6748311694457965250, 7603334142034012365, 
                    7731804819316663270, 8918825649307280967}, "Values" -> 
                    None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {13.1, 0}|>], 
                    "InverseDocumentFrequency" -> {1.91959284073794, 
                    3.624340932976365, 1.3217558399823195`, 
                    2.0149030205422647`, 2.0149030205422647`, 
                    2.120263536200091, 1.3217558399823195`, 
                    2.9311937524164198`, 1.2729656758128873`, 
                    1.91959284073794, 4.31748811353631, 2.120263536200091, 
                    4.31748811353631, 2.0149030205422647`, 
                    1.4842747694800942`, 2.0149030205422647`, 
                    2.120263536200091, 1.5448993912965292`, 
                    2.0149030205422647`, 1.3730491343698699`, 
                    2.0149030205422647`, 3.624340932976365, 0., 
                    0.11279549414534427`, 2.0149030205422647`, 
                    3.2188758248682006`, 1.4842747694800942`, 
                    2.9311937524164198`, 2.0149030205422647`, 
                    2.0149030205422647`, 0.5332984796180493, 
                    2.120263536200091, 4.31748811353631, 2.0149030205422647`},
                     "Version" -> {13.1, 0}, "ID" -> 7526152790873636702, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                  "Invertibility" -> "Impossible", "StructurePreserving" -> 
                  True, "Missing" -> "Forbidden"|>]}, "Invertibility" -> 
              "Impossible", "StructurePreserving" -> True, "Missing" -> 
              "Forbidden"|>], 
            MachineLearning`MLProcessor[
            "MergeVectors", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
                "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
                Span[1, 5], 
                Span[6, 39], 
                Span[40, 44]}, 
              "Wrappers" -> {Identity, SparseArray, Identity}, 
              "Output" -> <|
               "(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
                   "], "Type" -> "NumericalVector"|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 613954820935696947|>]}, 
          "Invertibility" -> "Impossible", "StructurePreserving" -> True, 
          "Missing" -> "Imputed"|>]|>, 
     "Output" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "ToVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 9119616879012754245|>], 
            MachineLearning`MLProcessor[
            "IntegerEncodeNominalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Index" -> {<|
                "A" -> 1, "B" -> 2, "C" -> 3, "D" -> 4, "E" -> 5|>}, 
              "MissingCode" -> 0, "Version" -> {13.1, 0}, "ID" -> 
              1482488055587057283, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
            MachineLearning`MLProcessor[
            "FromVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|
                 "Type" -> "NominalVector", "Weight" -> 1, 
                  "SetSize" -> {5}|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 4789940262906318728|>], 
            MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 5|>,
               "Key" -> "f1", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
       "Name" -> "class", 
       "Marginal" -> <|
        "A" -> 0.08750000000000001, "B" -> 0.2625, "C" -> 0.325, "D" -> 
         0.21250000000000002`, "E" -> 0.1125|>|>, "LabelSplitter" -> 
     MachineLearning`MLProcessor[
      "FeatureLabelSplit", <|
       "Processor" -> 
        MachineLearning`MLProcessor[
         "KeyIndexSplit", <|
          "Index" -> "Ratings", 
           "Order" -> {
            "Elevation", "GICS Sector Name", 
             "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
             "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
             "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
             "Carbon Disclosure", "Revenue (USD mn)", "Ratings"}|>], 
        "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
     "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
     "Prior" -> Automatic, "Utility" -> 
     SparseArray[
      Automatic, {5, 6}, 0., {
       1, {{0, 1, 2, 3, 4, 5}, {{2}, {3}, {4}, {5}, {6}}}, {1., 1., 1., 1., 
        1.}}], "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
     "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
     "Model" -> <|"Trees" -> {
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{42, 5, 1, 2, 39, 43, 40, 40, 40, 44, 3, 40, 
             4}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {
            2.3573551104685126`, -0.34220959060179146`, -0.5495428889243934, \
-0.13523438175154134`, 0.04361261949225681, 
            1.1566087502801121`, -0.4629491065401017, 
            1.918289687280362, -0.5270596816936148, -0.8068163001275108, \
-0.19269288608994728`, -0.4312992232514734, 0.006260694742625611}, "Children" -> 
           RawArray["Integer16",{{2, -6}, {3, 4}, {5, 6}, {10, 11}, {7, -7}, {
             8, -8}, {-1, -9}, {9, -10}, {-2, -11}, {-3, 12}, {-4, -12}, {
             13, -13}, {-5, -14}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 3, 2, 4, 5, 4, 4, 2, 2, 1, 3, 2, 3,
              5}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{22, 23, 43, 2, 40, 42, 40, 3, 14, 43, 5, 4, 
             2, 4, 2}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {0.09613636189249708, 
            0.03343938076399411, -0.8745847025168434, -0.5054682914324218, \
-0.3399144017252196, -0.37771681413661273`, -0.5392029200304087, 
            0.21559641285259512`, 0.06994316900070807, 
            0.7538088348388436, -0.8046030888873892, -0.15923680466286916`, \
-0.017423072815609952`, -0.15923655451357588`, 0.28285822658051973`}, 
           "Children" -> 
           RawArray["Integer16",{{2, -7}, {3, 4}, {5, 6}, {-1, -8}, {7, -9}, {
             8, 9}, {-2, -10}, {10, -11}, {12, -12}, {11, -13}, {-3, -14}, {
             13, 14}, {-4, -15}, {-5, 15}, {-6, -16}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 1, 1, 3, 3, 5, 2, 3, 2, 4, 4, 2,
              4, 1, 4}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{44, 40, 38, 23, 29, 44, 41, 6, 43, 43, 14, 
             32, 39}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {0.5791526854238995, -0.5392029200304087, 
            0.1262423425010617, 0.03343938076399411, 
            0.021927771773608884`, -1.0963225463859274`, -0.9653228437108714, 
            0.16903481095210737`, 0.9393137413249342, -1.0864543664040234`, 
            0.07937239990932754, 0.04339984706082145, 0.04361261949225681}, 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {11, -6}, {6, -7}, {8, 
             9}, {-1, 7}, {-2, -8}, {10, -9}, {-3, -10}, {-4, -11}, {
             12, -12}, {13, -13}, {-5, -14}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 3, 2, 4, 3, 5, 3, 4, 4, 1, 2, 3, 4,
              3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{43, 43, 17, 42, 5, 22, 4, 42, 21, 4, 40, 43, 
             41, 41}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-1.1628740559968556`, -1.736260166122399,
             0.04589315013420109, -0.566980962986821, -0.4058616341855026, 
            0.09613636189249708, -0.3308800580095448, -0.43204679187773376`, 
            0.04361261949225681, -0.15923680466286916`, -0.5330555750420407, 
            1.4574775397002266`, 0.8527796802306158, -0.44552708914274275`}, 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 6}, {-2, -9}, {7, 8}, {
             13, 14}, {-3, -10}, {9, 10}, {-4, -11}, {11, -12}, {-5, 
             12}, {-6, -13}, {-7, -14}, {-8, -15}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 2, 2, 4, 1, 2, 2, 2, 3, 4, 2, 3, 5,
              2, 5}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{2, 2, 42, 41, 2, 34, 8, 42, 2, 14, 1, 36, 42,
              5}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {0.07229094303872052, -0.5929248254861834,
             1.546666693414279, 0.06181371471736824, 0.0722905950631394, 
            0.04361261949225681, 
            0.06996906001403036, -0.21060183690048762`, \
-0.017423121472984915`, 0.0301650634078883, -0.4451108593781439, 
            0.08601588380936276, -0.5624466242878086, -0.4058614930241462}, 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {12, -8}, {6, -9}, {
             7, -10}, {-1, -11}, {8, -12}, {9, 10}, {-2, 
             11}, {-3, -13}, {-4, -14}, {-5, 13}, {-6, 14}, {-7, -15}}], 
           "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 2, 1, 2, 4, 4, 3, 4, 4, 4, 3, 4, 2,
              2, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{37, 39, 40, 44, 44, 44, 1, 41, 32, 1, 20}], 
           "NominalSplits" -> {}, 
           "NumericalThresholds" -> {0.04589315013420109, 
            0.04361261949225681, -0.5188164892325622, 0.21779097309529272`, 
            0.5288677592681861, -0.7757345605391706, 
            0.7324996424700938, -0.06140195638842383, 
            0.09254801823565895, -0.5495437782848969, 0.032127159512556125`}, 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 11}, {6, 7}, {-2, -6}, {
             8, -7}, {9, -8}, {-3, -9}, {10, -10}, {-4, -11}, {-5, -12}}], 
           "LeafValues" -> 
           RawArray["UnsignedInteger8",{5, 2, 1, 3, 5, 3, 3, 3, 1, 3, 4, 2}], 
           "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{3, 43, 43, 42, 44, 18, 40, 4, 1, 41, 4, 3, 5,
              42}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.25502529465286816`, \
-1.0906130105182115`, -1.5754261777846157`, -0.18161213240827845`, \
-0.623144792803008, 0.30404845869973984`, -0.35770501035814384`, 
            0.5476983243071842, 0.7325006703446846, 
            0.21861332605306738`, -0.226385053299619, -0.081458225335166, \
-0.17047831736428853`, 1.546666693414279}, "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 4}, {5, -8}, {8, 9}, {-2, 6}, {
             7, -9}, {-3, -10}, {10, -11}, {11, -12}, {-4, -13}, {-5, 
             12}, {-6, 13}, {14, -14}, {-7, -15}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 5, 2, 2, 1, 3, 3, 3, 3, 3, 4, 1, 2,
              2, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{44, 4, 44, 36, 40, 3, 5, 44, 42, 2, 41, 1, 
             32}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-1.0370732383312582`, \
-0.17502566079696824`, 0.4527883104812953, 
            0.08601588380936276, -0.47794979704463314`, -0.0814576922488276, 
            0.398965335250979, -0.6331793086413597, 1.5598860382730102`, 
            0.07229071397576137, -0.9853861928997372, -0.6875323409182741, 
            0.04339984706082145}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, -7}, {4, 5}, {6, 7}, {12, 
             13}, {-2, -8}, {8, -9}, {-3, 9}, {10, -10}, {
             11, -11}, {-4, -12}, {-5, -13}, {-6, -14}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 5, 3, 5, 5, 3, 1, 2, 4, 4, 3, 2, 4,
              4}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{3, 4, 9, 1, 12, 20, 4, 43, 41, 40, 44, 1, 41,
              41, 36, 2, 41, 42}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {0.21559569159998926`, 0.6121149568454518,
             0.04361261949225681, -0.29496535804039503`, 
            0.028609433765851067`, 0.08432055907720937, -0.29353356800283725`,
             0.11637330917585553`, -0.50704851941728, -0.42866201136963955`, \
-0.2759245478960439, 0.7324999653814999, 
            0.4996796367347769, -0.34323335340429884`, 0.08601588380936276, 
            0.28285861699799497`, -1.008098446662327, -0.22720485597234696`}, 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {12, 13}, {
             6, -9}, {-1, -10}, {7, -11}, {-2, 8}, {9, 10}, {-3, -12}, {
             11, -13}, {-4, -14}, {14, -15}, {-5, -16}, {15, 16}, {-6, 17}, {
             18, -17}, {-7, -18}, {-8, -19}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 2, 2, 2, 4, 2, 4, 4, 5, 3, 3, 1, 1,
              5, 3, 2, 3, 3, 4}], "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{3, 20, 29, 36, 43, 40, 5, 5, 40, 40, 4, 32, 
             8, 5, 41}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.08145812825199428, 
            0.09254801823565895, 0.021927771773608884`, 0.08601588380936276, 
            0.6846617778532025, -0.5235413013886827, 0.15217395952492296`, 
            0.1961687488568009, -0.3218087620495522, -0.54319441952231, 
            0.5476991340666517, 0.032127159512556125`, 
            0.11639069692006443`, -0.6559455734384017, -0.9439991442415074}, 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -8}, {9, 10}, {5, 6}, {-1, -9}, {
             7, 8}, {-2, -10}, {-3, -11}, {11, 12}, {14, 15}, {
             13, -12}, {-4, -13}, {-5, -14}, {-6, -15}, {-7, -16}}], 
           "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 4, 1, 3, 2, 4, 3, 3, 4, 4, 2, 5, 2,
              4, 3, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{43, 42, 6, 17, 4, 4, 42, 29, 3, 31, 4, 44}], 
           "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-1.1612487582305064`, \
-0.5014780846840532, 0.056128445635612256`, 0.04589315013420109, 
            0.024187820663451043`, -0.3308804637755438, 1.546666693414279, 
            0.005114339920420402, -0.08145856300482524, 0.17686130905869213`, 
            0.46347619335103296`, 0.44740745257936787`}, "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 4}, {5, -6}, {7, 8}, {
             6, -7}, {-2, -8}, {9, 10}, {-3, -9}, {11, -10}, {-4, -11}, {
             12, -12}, {-5, -13}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 4, 2, 2, 2, 2, 5, 4, 2, 3, 4, 4, 
             5}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{44, 17, 5, 12, 9, 1, 42, 1, 40, 22, 1, 5, 26,
              5, 2, 43}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.29450080014054203`, 
            0.04589315013420109, 0.03231817878600829, 0.03864783157843038, 
            0.04361261949225681, -0.445111400805386, -0.5474658776539405, 
            0.732500017612252, 0.4340050129222055, 
            0.04589315013420109, -0.5495444612735731, -0.7235953128054504, 
            0.04361261949225681, -0.1704787038460689, -0.15503298312296288`, 
            0.2120209753886475}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -7}, {10, -8}, {5, -9}, {
             6, -10}, {7, 8}, {-1, -11}, {9, -12}, {-2, -13}, {11, -14}, {-3, 
             12}, {-4, 13}, {14, 15}, {-5, -15}, {16, -16}, {-6, -17}}], 
           "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 4, 2, 4, 3, 3, 3, 2, 2, 4, 1, 1, 4,
              2, 4, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{17, 5, 41, 44, 3, 2, 25, 41, 32, 40, 42, 4, 
             4, 40, 44}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {
            0.09613636189249708, -0.4058615619718555, -0.44552708914274275`, 
            0.7529090590716585, -0.08145797911372754, 0.0722914452842246, 
            0.029719678233114055`, -0.037636499229023346`, 
            0.04914817117483755, 
            2.5807127507366943`, -0.4669565155022859, -0.15923677926087976`, \
-0.9516845358950476, -0.398041067263212, -0.953049877544184}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -8}, {6, -9}, {11, 
             12}, {7, -10}, {8, -11}, {9, -12}, {10, -13}, {-2, -14}, {-3, 
             13}, {-4, 15}, {-5, 14}, {-6, -15}, {-7, -16}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 3, 4, 2, 1, 2, 2, 5, 3, 4, 2, 4, 2,
              1, 1, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{5, 3, 32, 14, 1, 8, 42, 40, 9, 5, 42, 44, 44,
              44}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {0.5628163883417372, -0.08145833243462564,
             0.04339984706082145, 0.02755336960633953, 0.7325004596784366, 
            0.12106241282514951`, -0.5701113818502561, -0.45379254270351144`, 
            0.04361261949225681, -0.6559470232637556, -0.5431532486954955, 
            0.41205029070038535`, 0.09394906750656884, 0.2214634198164671}, 
           "Children" -> 
           RawArray["Integer16",{{2, -7}, {3, 4}, {-1, -8}, {5, 6}, {7, -9}, {
             14, -10}, {-2, 8}, {9, 10}, {11, -11}, {-3, 12}, {-4, -12}, {
             13, -13}, {-5, -14}, {-6, -15}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 1, 5, 4, 3, 2, 1, 4, 2, 5, 2, 3, 3,
              2, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{42, 41, 6, 43, 29, 5, 29, 40, 41, 44, 43, 12,
              3, 4, 42, 25, 43, 40}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {2.3573551104685126`, -0.9803011425662325,
             0.11969112248123936`, 0.383403961351366, 
            0.002441460912236886, -0.65594619334827, 
            0.02149093550024478, -0.5235413013886827, -0.14476319100317858`, \
-0.6260305737538561, -0.17328355299309073`, 0.028609433765851067`, 
            0.42691868104602415`, 0.5476983156387218, 1.546666693414279, 
            0.029719678233114055`, 0.46573619834948143`, -0.5302653173894214},
            "Children" -> 
           RawArray["Integer16",{{2, -9}, {3, 4}, {5, -10}, {8, 9}, {-1, 
             6}, {-2, 7}, {-3, -11}, {10, 11}, {-4, 13}, {-5, -12}, {
             12, -13}, {-6, -14}, {14, 15}, {16, -15}, {18, -16}, {
             17, -17}, {-7, -18}, {-8, -19}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 4, 4, 3, 3, 3, 2, 1, 4, 2, 5, 4, 1,
              2, 3, 2, 2, 2, 3}], "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{41, 6, 3, 36, 12, 29, 5, 44, 43, 3, 41, 3, 5,
              2, 42, 4, 1, 43}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-1.0232266855089165`, 
            0.056128445635612256`, 0.3653145670755622, 0.08601588380936276, 
            0.028609433765851067`, 0.018192821636345835`, 
            0.562815659963281, -1.3036325356033522`, 0.22714206405761495`, 
            0.27170265304802843`, 0.8499464018387659, 
            0.2717018338874002, -0.804602895466453, -0.5929249321679144, 
            2.304395683482392, -0.15923680466286916`, -0.3063930174896763, 
            0.9697158522709906}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -10}, {5, 6}, {-1, -11}, {7, 
             8}, {-2, 16}, {9, -12}, {-3, 15}, {10, 11}, {12, -13}, {
             14, -14}, {13, -15}, {-4, -16}, {-5, -17}, {-6, -18}, {-7, 
             17}, {-8, 18}, {-9, -19}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{5, 4, 3, 1, 4, 2, 1, 4, 3, 4, 5, 4, 2,
              5, 3, 4, 2, 5, 3}], "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{1, 2, 44, 40, 40, 43, 42, 40, 29, 10, 41, 4, 
             42, 2}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.6074173730415735, \
-0.21912578846462627`, 
            0.5889248200291375, -0.5038807090672552, -0.5479691388399166, \
-1.1628740559968556`, -0.43204679187773376`, -0.544264180779904, 
            0.02086570064452936, 0.04361261949225681, 0.2143685933289612, 
            0.6121143206283337, -0.31959037040264704`, -0.10324369680312939`},
            "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, 4}, {6, 7}, {5, -7}, {-2, -8}, {
             8, 9}, {14, -9}, {-3, -10}, {10, 11}, {-4, -11}, {12, -12}, {
             13, -13}, {-5, -14}, {-6, -15}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 2, 4, 2, 5, 4, 2, 5, 3, 3, 4, 3, 4,
              1, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{20, 14, 3, 2, 3, 19, 42, 25, 3, 1, 41, 5}], 
           "NominalSplits" -> {}, 
           "NumericalThresholds" -> {0.032127159512556125`, 
            0.03722121859102007, -0.1682416687203525, 
            0.07229094303872052, -0.1897652904908953, 
            0.04361261949225681, -0.37771681413661273`, 0.029719678233114055`,
             0.27170267517719227`, -0.549544074436489, 
            0.5845036302847388, -0.6559455734384017}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -5}, {-1, -6}, {5, 6}, {7, 8}, {
             12, -7}, {-2, -8}, {9, -9}, {10, -10}, {
             11, -11}, {-3, -12}, {-4, -13}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 4, 2, 3, 5, 2, 4, 1, 2, 4, 5, 5, 
             3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{2, 44, 42, 41, 5, 42, 30, 8, 4, 23, 43, 44, 
             4, 40}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {
            0.28285822658051973`, -0.9079063376801288, -0.37771681413661273`, \
-0.8676355915516156, -0.8046030888873892, -0.17994543628260118`, 
            0.04361261949225681, 0.059930662201451046`, 0.5476985037233115, 
            0.05115560898332877, -1.040819575082276, 0.38820987534894513`, 
            0.29984700473728054`, -0.4551490717320634}, "Children" -> 
           RawArray["Integer16",{{2, -6}, {3, 4}, {5, 6}, {7, 
             8}, {-1, -7}, {-2, -8}, {9, -9}, {12, -10}, {10, -11}, {
             11, -12}, {-3, -13}, {13, 14}, {-4, -14}, {-5, -15}}], 
           "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 3, 2, 2, 4, 4, 3, 2, 5, 4, 3, 5,
              2, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{29, 40, 3, 22, 34, 1, 1, 44, 42, 3, 42, 40, 
             4, 40, 42}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {
            0.005970992872082463, -0.5482055387842593, 1.3450591790847817`, 
            0.04589315013420109, 
            0.04361261949225681, -0.29496522849492113`, -0.5495437686611995, \
-0.7299764279777348, 2.3130167419860737`, 
            0.01749222963879496, -0.4043044889132603, 1.0281083118075056`, 
            0.5476985037233115, -0.4912566004180263, -0.5624466242878086}, 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, 4}, {8, 9}, {5, -8}, {-2, 6}, {
             7, -9}, {-3, -10}, {10, 11}, {-4, -11}, {12, -12}, {13, 
             14}, {-5, -13}, {15, -14}, {-6, -15}, {-7, -16}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{5, 3, 2, 3, 1, 5, 4, 2, 2, 3, 4, 1, 4,
              4, 2, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{40, 2, 25, 43, 42, 41, 5, 1, 12, 2, 15, 43, 
             43, 22}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.5417478766101906, \
-0.07632880131784503, 0.029719678233114055`, 0.27873650017921126`, 
            2.1742636036588188`, 
            1.0003142276875554`, -0.7235953128054504, -0.5495444612735731, 
            0.03864783157843038, 0.07229049081168404, 0.11969112248123936`, 
            0.9393137413249342, -0.46354582902240393`, 0.06199600983041198}, 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -9}, {5, 6}, {-1, -10}, {
             7, -11}, {13, -12}, {-2, 8}, {-3, 9}, {10, 11}, {-4, 
             12}, {-5, -13}, {-6, -14}, {-7, 14}, {-8, -15}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 1, 2, 3, 4, 3, 2, 3, 4, 3, 4, 2, 2,
              3, 5}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{33, 1, 40, 3, 44, 7, 5, 41, 5, 26, 44, 30, 
             43, 44, 3, 25, 5}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {0.14915317187810428`, 
            0.7325006703446846, -0.41389484423196565`, 0.27170267517719227`, 
            0.40899221110378914`, 
            0.07844893794321128, -0.6559460594829671, -0.048436416316467, 
            0.5628154865039221, 0.04361261949225681, -0.5579030576873594, 
            0.04361261949225681, 0.11637330917585553`, -0.3049899199612618, 
            0.21559635540324273`, 0.029719678233114055`, -0.8046030888873892},
            "Children" -> 
           RawArray["Integer16",{{2, -5}, {3, -6}, {4, 5}, {6, -7}, {
             14, -8}, {7, -9}, {8, 9}, {10, -10}, {11, -11}, {-1, -12}, {
             12, -13}, {13, -14}, {-2, -15}, {15, 16}, {
             17, -16}, {-3, -17}, {-4, -18}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 1, 2, 1, 2, 1, 4, 3, 2, 4, 4, 4, 5,
              2, 2, 3, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{44, 5, 29, 1, 25, 37, 44, 41, 44, 40, 43, 42,
              3, 40}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.0823884612258029, \
-0.40586172366155937`, 0.006176411049499939, -0.5495441483146806, 
            0.029719678233114055`, 
            0.04589315013420109, -1.2389890270116108`, -0.23586357339731667`, \
-0.7757345605391706, -0.5052340731435336, 1.0372500130702864`, 
            1.8508513472363326`, -0.0822662516160767, -0.33774545114019716`}, 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {12, 13}, {-1, 6}, {8, -8}, {
             7, -9}, {-2, -10}, {-3, 9}, {10, 11}, {-4, -11}, {-5, -12}, {
             14, -13}, {-6, -14}, {-7, -15}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 1, 4, 1, 2, 5, 4, 2, 2, 4, 2, 1, 4,
              3, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{40, 4, 44, 42, 39, 3, 4, 44, 4, 43, 25, 1, 5,
              36}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.3465177477847674, \
-0.33088048682423654`, -0.09357972378075308, -0.3635068987290526, 
            0.04361261949225681, 0.4269193301403069, 
            0.5476987122627044, -0.8235915969774013, -0.15923680466286916`, 
            0.6147716667717136, 0.0622563875783716, -0.5495432277043557, 
            0.032318094320745616`, 0.08601588380936276}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {14, -8}, {-1, -9}, {6, 7}, {
             8, 9}, {-2, -10}, {10, 11}, {-3, -11}, {-4, -12}, {12, -13}, {-5,
              13}, {-6, -14}, {-7, -15}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 2, 1, 2, 5, 1, 2, 3, 2, 4, 3, 5, 5,
              2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{3, 5, 25, 42, 43, 2, 42, 17, 3, 26, 19, 44, 
             2}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.08145812825199428, \
-0.21447335298177106`, 0.029719678233114055`, -0.3528263502082347, 
            0.6005892493102882, -0.017423100862788227`, 0.6496784781699931, 
            0.11223922158870792`, -0.08145758275315818, 0.04361261949225681, 
            0.04361261949225681, 0.3794479089734857, 0.07229077411007223}, 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {7, 8}, {-1, -8}, {
             6, -9}, {-2, -10}, {-3, -11}, {9, -12}, {10, 11}, {-4, 12}, {-5, 
             13}, {-6, -13}, {-7, -14}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 1, 3, 2, 2, 2, 2, 2, 4, 4, 1, 5, 3,
              4}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{44, 3, 29, 44, 42, 12, 34, 2, 32, 3, 5, 20}],
            "NominalSplits" -> {}, 
           "NumericalThresholds" -> {
            0.21779097309529272`, -0.21340799987736014`, 
            0.007033064001162007, -0.5839798352023564, -0.49225999119843245`, 
            0.03864783157843038, 0.04361261949225681, 0.07229045509942056, 
            0.03517238790237187, 0.42691868104602415`, -0.170478629174587, 
            0.04914817117483755}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {11, 12}, {-1, -6}, {6, 7}, {
             8, -7}, {9, -8}, {-2, -9}, {
             10, -10}, {-3, -11}, {-4, -12}, {-5, -13}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 5, 2, 4, 3, 2, 2, 2, 4, 2, 3, 2, 
             3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{41, 8, 8, 2, 23, 21, 2, 40, 42, 12, 41, 40, 
             41, 43, 30, 26, 40, 43, 4}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.1961361039699383, 
            0.059930662201451046`, 0.028609433765851067`, 0.07229128307393484,
             0.03660899031508358, 0.04361261949225681, 
            0.07229071397576137, -0.4598888653909432, -0.4460402863918276, 
            0.059930662201451046`, 0.182651824572996, 0.4786646877490135, 
            0.1404898029256214, 0.5674287015577963, 0.04361261949225681, 
            0.04361261949225681, -0.43579570724631234`, 
            1.2607511919212762`, -0.22638537483820698`}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {9, 10}, {6, -7}, {-1, -8}, {
             7, -9}, {8, -10}, {-2, -11}, {11, 12}, {-3, -12}, {13, -13}, {15,
              16}, {14, -14}, {-4, -15}, {17, -16}, {-5, -17}, {18, -18}, {
             19, -19}, {-6, -20}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{5, 3, 2, 4, 4, 2, 4, 2, 2, 3, 2, 5, 4,
              2, 5, 2, 3, 3, 5, 1}], "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{43, 36, 1, 23, 25, 43, 43, 42, 5, 44, 34, 
             13}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-1.1628740559968556`, 
            0.08601588380936276, -0.30680875328860013`, 0.03343938076399411, 
            0.0622563875783716, -0.15017506119612456`, -0.8745847025168434, \
-0.5459980977288206, -0.17047878118404047`, 0.5889248200291375, 
            0.04361261949225681, 0.0634457522168056}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, -5}, {4, 5}, {6, -6}, {9, -7}, {
             7, 8}, {-2, -8}, {-3, -9}, {10, -10}, {11, -11}, {
             12, -12}, {-4, -13}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 4, 1, 3, 3, 2, 2, 4, 2, 3, 3, 2, 
             3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{44, 40, 27, 4, 14, 41, 5, 43, 11, 40, 43, 5, 
             2, 2}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {0.4784456215788975, -0.4043644364849843, 
            0.07844893794321128, 0.07340896556870191, 
            0.02755336960633953, -0.09537534570749417, -0.2584678659915718, \
-0.8745847025168434, 0.05024321175829599, -0.353381392436404, 
            0.9344193283673743, -0.13951379791093843`, -0.07341738840663503, \
-0.4060246203470941}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {12, -6}, {6, 7}, {10, -7}, {
             8, -8}, {-1, 9}, {-2, -9}, {-3, -10}, {11, -11}, {-4, -12}, {
             13, -13}, {14, -14}, {-5, -15}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{5, 2, 2, 3, 3, 2, 2, 1, 4, 5, 3, 2, 4,
              3, 5}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{1, 41, 23, 25, 8, 3, 41, 1, 2, 42, 5, 4, 40, 
             44, 42, 44}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.549544564128011, 0.5845036302847388, 
            0.07004837107907769, 0.029719678233114055`, 0.03132122843559998, 
            0.21559569242632093`, 0.08158086492686956, -0.3440548165756523, 
            0.07229126282066523, -0.3105829685217274, -0.08537322247560497, \
-0.15923608876271467`, 0.47117481194239463`, 
            0.5172103388535909, -0.2864736515978432, 0.2990496987187252}, 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, -9}, {4, 5}, {6, 
             7}, {-2, -10}, {8, 9}, {15, 16}, {-3, 10}, {-4, 11}, {-5, -11}, {
             12, -12}, {13, -13}, {
             14, -14}, {-6, -15}, {-7, -16}, {-8, -17}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 3, 1, 3, 4, 1, 2, 2, 5, 2, 1, 2, 3,
              4, 4, 3, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{25, 20, 25, 40, 1, 44, 44, 5, 40, 40, 1}], 
           "NominalSplits" -> {}, 
           "NumericalThresholds" -> {0.0622563875783716, 
            0.032127159512556125`, 
            0.07268434485314845, -0.41389484423196565`, -0.2949658623660327, \
-0.6026040501721344, -0.0823884612258029, -0.17047805565698737`, \
-0.5298499393462341, -0.5581812075763573, -0.5495433965048546}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -7}, {6, 7}, {-2, -8}, {
             8, 9}, {-3, -9}, {-4, 10}, {11, -10}, {-5, -11}, {-6, -12}}], 
           "LeafValues" -> 
           RawArray["UnsignedInteger8",{5, 2, 3, 2, 4, 3, 5, 3, 3, 4, 1, 4}], 
           "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{32, 40, 6, 1, 40, 4, 42, 43, 43, 5, 2, 40, 
             25, 19, 40}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {
            0.032127159512556125`, -0.42822743213177983`, 
            0.056128445635612256`, -0.5495437215909238, 
            0.755249324893275, -0.33088031972303966`, -0.4084219474438515, 
            0.7449303262649085, 1.0833255527579997`, -0.41321240609629584`, 
            0.2828584205467899, -0.4849479624604749, 0.06986731374100497, 
            0.04361261949225681, -0.47127063892752474`}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {15, -6}, {6, 7}, {
             13, -7}, {-1, -8}, {8, 9}, {10, -9}, {11, -10}, {-2, -11}, {
             12, -12}, {-3, -13}, {14, -14}, {-4, -15}, {-5, -16}}], 
           "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 4, 1, 3, 5, 3, 4, 2, 2, 4, 4, 3, 2,
              5, 3, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{31, 22, 2, 5, 3, 2, 40, 3, 41, 5, 3, 44, 23, 
             40, 40, 20, 41}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {0.09411917616573684, 0.09613636189249708,
             0.234949192240826, -0.13951379791093843`, -0.1897653640856678, \
-0.017423332316989754`, -0.5397649429256042, -0.08145856300482524, 
            0.8183968323619881, -0.6559473902710078, 0.2717024205644245, 
            0.5791526854238995, 
            0.05115560898332877, -0.4312992232514734, -0.540374256916925, 
            0.04339984706082145, 0.20404081516560324`}, "Children" -> 
           RawArray["Integer16",{{2, -9}, {3, -10}, {4, -11}, {5, 6}, {7, 
             8}, {-1, 17}, {-2, -12}, {9, 10}, {-3, -13}, {11, 
             12}, {-4, -14}, {13, 14}, {15, -15}, {-5, 
             16}, {-6, -16}, {-7, -17}, {-8, -18}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 3, 1, 2, 2, 4, 3, 1, 5, 5, 3, 4, 5,
              5, 2, 3, 3, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{5, 44, 2, 44, 43, 12, 30, 1, 32, 41, 4, 2, 1,
              20, 5}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.13951379791093843`, \
-0.717318501835579, -0.017423332316989754`, -0.8357678789156475, \
-0.05205093260457311, 0.028609433765851067`, 
            0.04361261949225681, -0.5495428718294102, 
            0.032127159512556125`, -1.008098446662327, -0.2263848741269774, \
-0.5929249321679144, -0.48012801731433496`, 0.09254801823565895, 
            0.5628154865039221}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 15}, {-2, -10}, {6, 
             7}, {8, 9}, {11, 12}, {10, -11}, {-3, -12}, {-4, -13}, {-5, 
             13}, {-6, -14}, {-7, 14}, {-8, -15}, {-9, -16}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 2, 5, 5, 1, 4, 2, 4, 2, 1, 3, 2, 3,
              2, 3, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{5, 39, 36, 42, 42, 40, 40, 3, 4, 4, 3, 37, 
             43, 42}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.170478955762007, 0.04361261949225681, 
            0.08601588380936276, 2.3130167419860737`, -0.5364926280789799, 
            1.9657160402272353`, -0.5617416371842916, 0.21559622231240239`, 
            0.26426325879433765`, -0.29353395040232444`, 0.09512242516440417, 
            0.04589315013420109, 0.38811177743866443`, -0.2845723587358364}, 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {12, 13}, {6, -7}, {-1, 
             11}, {7, -8}, {-2, 8}, {9, -9}, {
             10, -10}, {-3, -11}, {-4, -12}, {-5, -13}, {
             14, -14}, {-6, -15}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 5, 5, 3, 2, 4, 4, 4, 3, 3, 1, 2, 2,
              1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{3, 4, 15, 37, 41, 23, 42, 42, 42, 3, 24, 40, 
             43, 40, 9, 1, 1, 2}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.18976576568490144`, \
-0.3308801811061892, 0.06356267684562711, 
            0.05024321175829599, -1.008098446662327, 0.05115560898332877, 
            0.2865145098747397, -0.4469198138413808, -0.5515739053521491, \
-0.08145782357502995, 0.04361261949225681, -0.5396439715894319, 
            1.4574775397002266`, -0.1613486743661141, 
            0.04361261949225681, -0.8255208147630801, -0.30680875328860013`, 
            0.2828585290502543}, "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 4}, {5, -9}, {6, 
             7}, {-2, -10}, {8, -11}, {-3, -12}, {9, 10}, {-4, 11}, {13, 
             14}, {12, -13}, {-5, -14}, {15, -15}, {17, -16}, {
             16, -17}, {-6, -18}, {-7, 18}, {-8, -19}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 5, 2, 1, 4, 2, 2, 3, 2, 3, 3, 5, 2,
              4, 5, 3, 2, 1, 4}], "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{13, 12, 43, 37, 16, 1, 2, 4, 19, 43, 44, 43, 
             1, 43, 40, 43, 44, 25, 43}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {0.0634457522168056, 
            0.06996906001403036, -1.1612487582305064`, 0.06199600983041198, 
            0.30404845869973984`, -0.29496605762199213`, \
-0.21912578846462627`, 0.6121151602869634, 
            0.04361261949225681, -0.004391044947348016, -0.7630766343970148, \
-0.8745847025168434, -0.3406786907154591, -1.0864543664040234`, \
-0.4551490717320634, 0.7541107903699347, 0.26079621215736815`, 
            0.029719678233114055`, 0.7337807525633124}, "Children" -> 
           RawArray["Integer16",{{2, -8}, {3, 4}, {5, 6}, {
             19, -9}, {-1, -10}, {7, 8}, {9, 10}, {15, -11}, {11, -12}, {12, 
             13}, {-2, -13}, {14, -14}, {-3, -15}, {-4, -16}, {16, 
             17}, {-5, -17}, {18, -18}, {-6, -19}, {-7, -20}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 1, 2, 4, 2, 3, 3, 2, 5, 3, 4, 4, 1,
              4, 1, 5, 1, 3, 2, 4}], "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{3, 15, 40, 40, 44, 22, 26, 8, 2, 4, 44, 1, 
             43, 41, 1}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.2786678965018776, 
            0.16903481095210737`, -0.5392029200304087, -0.5617059167801761, 
            0.5403879681492061, 0.09613636189249708, 0.04361261949225681, 
            0.028609433765851067`, -0.5929253933038385, 0.5476987122627044, 
            0.09394906750656884, -0.8255208147630801, -1.1628740559968556`, 
            0.30108361271619444`, -0.6875323523761301}, "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -9}, {4, 5}, {-2, 6}, {8, 9}, {
             7, -10}, {-3, -11}, {10, -12}, {-4, 15}, {11, -13}, {
             12, -14}, {-5, 13}, {-6, 14}, {-7, -15}, {-8, -16}}], 
           "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 5, 3, 2, 2, 3, 2, 5, 4, 5, 2, 2, 4,
              2, 1, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{40, 32, 44, 2, 44, 1, 44, 5, 1, 5, 43, 31, 
             41, 40, 34, 5}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.5641915738460588, 
            0.032127159512556125`, -0.06838403365643386, -0.5054680615310696, \
-0.23274547954659508`, -0.6074177102857679, -1.2389890270116108`, \
-0.34221007748600707`, -0.17813234441119796`, 0.5628159897870342, 
            0.11637330917585553`, 
            0.17686130905869213`, -0.995794235469738, -0.44516433403877453`, 
            0.04361261949225681, -0.17047869147487438`}, "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 4}, {5, 6}, {16, -9}, {
             7, -10}, {-2, 12}, {-3, 8}, {9, 10}, {-4, -11}, {
             11, -12}, {-5, -13}, {13, -14}, {-6, 14}, {
             15, -15}, {-7, -16}, {-8, -17}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{5, 5, 1, 4, 1, 2, 3, 3, 2, 2, 4, 4, 2,
              4, 3, 4, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{3, 43, 1, 40, 42, 41, 40, 4, 44, 25, 6, 3}], 
           "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.12450615420262112`, 
            0.3870171500993922, -0.2949650704664424, -0.5105052057704418, \
-0.5607023918865774, 1.9777670188463716`, 1.9095038699554312`, 
            0.5476991340666517, 2.2181523629122246`, 0.029719678233114055`, 
            0.06356267684562711, -0.08307504350119299}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 6}, {-2, -6}, {7, 
             8}, {-3, -7}, {-4, -8}, {9, -9}, {10, -10}, {11, -11}, {
             12, -12}, {-5, -13}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 1, 3, 3, 2, 1, 2, 1, 5, 4, 2, 2, 
             5}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{44, 2, 36, 44, 41, 2, 2, 14, 41, 40, 35, 5, 
             3, 43, 3, 1, 5}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {0.5791526854238995, 0.28285861699799497`,
             0.08601588380936276, -0.33464036746935966`, 0.36012699053250685`,
             0.2828583424457203, 0.07228990997452367, 
            0.0301650634078883, -0.10493759896173327`, -0.5408704373643225, 
            0.04361261949225681, -0.21447277732758496`, -0.08226651344476532, \
-1.7345877808234516`, -0.08145811772719502, -0.44848643731213755`, \
-0.34220920706032043`}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -9}, {-1, 17}, {5, 6}, {
             7, -10}, {13, -11}, {8, -12}, {9, -13}, {10, 11}, {-2, -14}, {
             12, -15}, {-3, -16}, {-4, 14}, {-5, 15}, {-6, 
             16}, {-7, -17}, {-8, -18}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 4, 2, 5, 4, 4, 2, 3, 3, 1, 4, 5, 5,
              3, 2, 1, 2, 5}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{1, 44, 25, 40, 37, 4, 42, 32, 36, 4, 44, 8, 
             2, 41, 4}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.5495443781771403, \
-0.04171801108849987, 0.029719678233114055`, -0.5623481940523378, 
            0.09613636189249708, -0.15923660605747947`, 0.6121751562144286, 
            0.09254801823565895, 
            0.08601588380936276, -0.3308812895014368, -0.5392343097549546, 
            0.03864783157843038, 0.28285796405894637`, 0.16869852389588114`, 
            0.5476992781750747}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, -8}, {4, 5}, {-2, 6}, {
             14, -9}, {7, 8}, {9, -10}, {11, -11}, {-3, 10}, {-4, -12}, {-5, 
             12}, {13, -13}, {-6, -14}, {15, -15}, {-7, -16}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 5, 2, 4, 1, 3, 2, 5, 5, 1, 3, 3, 4,
              4, 2, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{23, 2, 20, 2, 42, 1, 43, 9, 4, 40, 37, 40, 
             4}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {0.0451724968215359, 0.07229063077540288, 
            0.09254801823565895, 0.07229036517408538, 
            2.3130167419860737`, -0.5495432277043557, 0.6966475585902101, 
            0.04361261949225681, 0.3060546457340494, -0.5730552758292253, 
            0.04589315013420109, -0.5302653173894214, 0.06720222150960653}, 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -7}, {6, -8}, {
             12, -9}, {7, 8}, {-2, -10}, {9, -11}, {10, 
             11}, {-3, -12}, {-4, -13}, {-5, 13}, {-6, -14}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 2, 4, 4, 1, 3, 2, 2, 4, 5, 2, 1, 2,
              2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{44, 43, 22, 3, 24, 44, 44, 41, 2, 3, 4, 41, 
             41}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {0.4784456215788975, -1.2171999342477928`,
             0.06199600983041198, -0.08145811772719502, 
            0.04361261949225681, -0.29450080014054203`, \
-0.14361289901126417`, -0.09399159204269836, -0.5929245478714025, 
            0.9019924155419492, 
            0.14344124443823691`, -1.281182419109813, -0.9491407601220212}, 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, 4}, {12, -7}, {5, 6}, {7, -8}, {
             9, -9}, {8, -10}, {-2, -11}, {-3, 10}, {11, -12}, {-4, -13}, {-5,
              13}, {-6, -14}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 2, 2, 1, 4, 3, 5, 4, 2, 5, 1, 1, 3,
              3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{42, 20, 1, 11, 40, 34, 42, 42, 17, 43, 41, 1,
              29, 40, 8, 41, 1}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {2.3573551104685126`, 0.09254801823565895,
             0.2187670417887142, 0.09613636189249708, -0.44516433403877453`, 
            0.04361261949225681, 1.407913555087024, -0.4460402863918276, 
            0.04589315013420109, 
            0.5318953336358083, -0.9653228437108714, -0.5659563904313085, 
            0.018192821636345835`, 2.2888042311811763`, 0.03864783157843038, 
            1.3600370588953101`, -0.549544564128011}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -7}, {-1, -8}, {5, -9}, {6, 7}, {
             8, -10}, {14, -11}, {9, 10}, {11, -12}, {-2, 12}, {-3, -13}, {-4,
              13}, {-5, -14}, {15, -15}, {16, -16}, {17, -17}, {-6, -18}}], 
           "LeafValues" -> 
           RawArray["UnsignedInteger8",{5, 1, 3, 5, 3, 2, 3, 4, 2, 4, 2, 2, 4,
              3, 1, 2, 2, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{1, 34, 3, 4, 42, 41, 23, 43, 40, 43, 2, 25, 
             5, 23, 5, 44, 40, 5, 40, 4}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.5495428718294102, 
            0.04361261949225681, -0.08145812825199428, -0.3308808097612457, \
-0.566980962986821, -1.0459915845269645`, 
            0.10879573178144564`, -1.7407465529619603`, 
            1.3828577952474106`, -0.2276016827788374, -0.017422601995115444`, 
            0.029719678233114055`, -0.17047826511239705`, 
            0.05115560898332877, -0.17047791636000187`, -0.44506060072238496`,
             1.7477791744267197`, -0.40586193029899986`, -0.5302653173894214, 
            0.5476992781750747}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -9}, {11, 12}, {5, 
             6}, {-1, -10}, {-2, 7}, {8, -11}, {-3, 9}, {
             10, -12}, {-4, -13}, {13, -14}, {14, 15}, {-5, -15}, {16, -16}, {
             20, -17}, {17, 18}, {19, -18}, {-6, -19}, {-7, -20}, {-8, -21}}],
            "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 4, 3, 5, 4, 4, 1, 2, 4, 3, 3, 3, 5,
              4, 1, 3, 3, 1, 3, 3, 3}], "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{23, 42, 37, 3, 40, 5, 21, 23, 2, 30, 41, 25, 
             5, 44}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {
            0.07004837107907769, -0.17599450322783294`, 0.05024321175829599, 
            0.2717016615011918, -0.33130779021433865`, -0.8179624130291723, 
            0.04361261949225681, 0.03343938076399411, -0.40602459892916576`, 
            0.04361261949225681, -0.04095859695704518, 
            0.029719678233114055`, -0.4058615619718555, -0.06689707063494299},
            "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -8}, {6, 7}, {
             12, -9}, {-2, 8}, {-3, -10}, {9, -11}, {10, 
             11}, {-4, -12}, {-5, -13}, {13, -14}, {-6, 14}, {-7, -15}}], 
           "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 1, 3, 4, 4, 3, 1, 2, 3, 2, 2, 2, 5,
              2, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{5, 43, 40, 36, 33, 43, 3, 43, 44, 1, 37, 5, 
             42, 5}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.170478955762007, \
-1.1612487582305064`, -0.5419879551539637, 0.08601588380936276, 
            0.0634457522168056, -0.8745847025168434, -0.047767137099641255`, 
            0.6728982865808897, -0.9651026698034002, -0.4801285656551806, 
            0.05024321175829599, -0.17047883618570503`, \
-0.40930147489340474`, -0.17047784300459412`}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {11, 12}, {-1, -9}, {6, 
             7}, {-2, 8}, {-3, -10}, {9, -11}, {-4, 10}, {-5, -12}, {
             13, -13}, {-6, 14}, {-7, -14}, {-8, -15}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 5, 3, 4, 2, 4, 4, 2, 3, 2, 3, 3, 5,
              1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{22, 1, 40, 1, 40, 3, 3, 3, 15, 40, 2, 42, 4, 
             43, 39, 4}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> {
            0.04589315013420109, -0.549544564128011, -0.5188164892325622, \
-0.6652905641430449, -0.3218087620495522, -0.12450615420262112`, \
-0.12450578654607014`, 0.42691868104602415`, 
            0.056128445635612256`, -0.47279216755323406`, \
-0.017422601995115444`, 0.023941945731164233`, 
            0.5476980656136341, -1.1612487582305064`, 
            0.04361261949225681, -0.24505818268765434`}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -8}, {6, -9}, {8, 
             9}, {-2, 7}, {-3, -10}, {10, -11}, {15, -12}, {11, 12}, {13, 
             14}, {-4, -13}, {-5, -14}, {-6, -15}, {16, -16}, {-7, -17}}], 
           "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 1, 5, 2, 1, 3, 3, 2, 2, 2, 3, 3, 3,
              2, 4, 3, 4}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{5, 44, 40, 23, 2, 35, 42, 41, 42, 43}], 
           "NominalSplits" -> {}, 
           "NumericalThresholds" -> {-0.10855039925202004`, 
            0.4784456215788975, -0.4966475627358262, 
            0.03343938076399411, -0.596741779959622, 0.04361261949225681, 
            0.167490375192467, -1.1826248615656976`, -0.5624466242878086, 
            0.38811177743866443`}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {10, -7}, {6, 7}, {-1, 
             8}, {-2, -8}, {-3, -9}, {-4, 9}, {-5, -10}, {-6, -11}}], 
           "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 1, 2, 4, 4, 4, 2, 2, 5, 3, 1}], 
           "RootIndex" -> 1, "NominalDimension" -> 0|>]}, "Processor" -> 
       MachineLearning`MLProcessor[
        "FirstValues", <|"Info" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
             "], "Type" -> "NumericalVector"|>, "Key" -> "(f2f6(f1f3f4f5f7))",
           "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], 
       "OOBConfusionMatrix" -> {{0.1950713522348652, 0.15418152992469283`, 
        0.14606657430636164`, 0.19210124587580638`, 0.19494562142453006`}, {
        0.19494562142453012`, 0.242348174571718, 0.1760212678324035, 
        0.2314965282907372, 0.2200917834915446}, {0.22009178349154465`, 
        0.20702866957325936`, 0.310892275433407, 0.19210124587580638`, 
        0.19494562142453006`}, {0.19494562142453012`, 0.17179724314088168`, 
        0.2209533081214663, 0.23159501649677453`, 0.19494562142453006`}, {
        0.19494562142453012`, 0.2246443827894482, 0.14606657430636164`, 
        0.15270596346087556`, 0.19507135223486513`}}, "Calibrator" -> 
       MachineLearning`CalibratorFunction[
        "TemperatureScaling", <|"Theta" -> 1.5278782578839558`|>], "Method" -> 
       "RandomForest", "PostProcessor" -> 
       MachineLearning`MLProcessor["Identity"], 
       "Options" -> <|
        "FeatureFraction" -> <|
          "Value" -> Rational[1, 2] 11^Rational[-1, 2], "Options" -> <||>|>, 
         "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
         "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
         "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
         "Implementation" -> <|"Value" -> "Default", "Options" -> <||>|>|>|>, 
     "TrainingInformation" -> <|
      "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
       Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
       "PreprocessingTime" -> 0.133097`5.575713260104164, "LossName" -> 
       "MeanCrossEntropy", "BestModelInformation" -> 
       Dataset[<|
         "MeanCrossEntropy" -> 
          Around[1.557898969015069, 0.014595369457882734`], "Accuracy" -> 
          Around[0.3451337789328387, 0.04592403052135194], "EvaluationTime" -> 
          0.00009183061001456736, "TestSize" -> 150, "ModelMemory" -> 
          101929.45454545454`, "ModelUtility" -> -1.138422688625751, 
          "TrainingSize" -> 60, "TrainingTime" -> 0.018460371795115095`, 
          "TrainingMemory" -> 264626.1818181819, "ExperimentCount" -> 10, 
          "MeanCrossEntropyHistory" -> {
            Around[1.559476713286499, 0.040765376917311906`], 
            Around[1.56095940061608, 0.0517013270405557], 
            Around[1.5357742722598415`, 0.04554188097468363], 
            Around[1.5732228052519606`, 0.04307433424387132], 
            Around[1.552633674706322, 0.042206398680778016`], 
            Around[1.5655956585394062`, 0.04178983624644909], 
            Around[1.5459278419020215`, 0.05055069703867736], 
            Around[1.551664308493814, 0.045175981011028175`], 
            Around[1.5631733470620675`, 0.04539179448299618], 
            Around[1.5705616680326795`, 0.04435445572886361]}, 
          "AccuracyHistory" -> {
            Around[0.3263837789328387, 0.11966602137337685`], 
            Around[0.5138837789328388, 0.1275565638286851], 
            Around[0.3888837789328387, 0.12441482134936328`], 
            Around[0.2013837789328387, 0.10234852942509189`], 
            Around[0.3888837789328387, 0.12441482134936328`], 
            Around[0.3263837789328387, 0.11966602137337683`], 
            Around[0.3888837789328387, 0.12441482134936328`], 
            Around[0.2638837789328387, 0.11248117430350343`], 
            Around[0.3263837789328387, 0.11966602137337685`], 
            Around[0.3263837789328387, 0.11966602137337683`]}, 
          "Configuration" -> {
           "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
            Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
            0.5, "Implementation" -> Automatic}, "FinalTrainingSize" -> 75|>, 
         
         TypeSystem`Struct[{
          "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
           "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
           "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
           "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
          TypeSystem`AnyType, TypeSystem`AnyType, 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Vector[TypeSystem`AnyType, 10], 
           TypeSystem`Vector[TypeSystem`AnyType, 10], 
           TypeSystem`Tuple[{
             TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
           TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
       Dataset[<|<|
           "Value" -> "RandomForest", 
            "Options" -> <|
             "FeatureFraction" -> <|"Value" -> Automatic|>, 
              "LeafSize" -> <|"Value" -> Automatic|>, 
              "TreeNumber" -> <|"Value" -> Automatic|>, 
              "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
              "Implementation" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.6416736155941103`, 0.022702551172734984`], "Accuracy" -> 
               Around[0.10942637065038517`, 0.05461308760763521], 
               "EvaluationTime" -> 0.00003069634330721352, "TestSize" -> 65, 
               "ModelMemory" -> 86992, "ModelUtility" -> -1.191687261686679, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.12589254117941673`, 
               "TrainingMemory" -> 221016, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.6416736155941103`, 0.016053127884475514`]}, 
               "AccuracyHistory" -> {
                 Around[0.10942637065038517`, 0.03861728458889386]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.557898969015069, 0.014595369457882734`], "Accuracy" -> 
               Around[0.3451337789328387, 0.04592403052135194], 
               "EvaluationTime" -> 0.00009183061001456736, "TestSize" -> 150, 
               "ModelMemory" -> 101929.45454545454`, 
               "ModelUtility" -> -1.138422688625751, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.018460371795115095`, "TrainingMemory" -> 
               264626.1818181819, "ExperimentCount" -> 10, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.559476713286499, 0.040765376917311906`], 
                 Around[1.56095940061608, 0.0517013270405557], 
                 Around[1.5357742722598415`, 0.04554188097468363], 
                 Around[1.5732228052519606`, 0.04307433424387132], 
                 Around[1.552633674706322, 0.042206398680778016`], 
                 Around[1.5655956585394062`, 0.04178983624644909], 
                 Around[1.5459278419020215`, 0.05055069703867736], 
                 Around[1.551664308493814, 0.045175981011028175`], 
                 Around[1.5631733470620675`, 0.04539179448299618], 
                 Around[1.5705616680326795`, 0.04435445572886361]}, 
               "AccuracyHistory" -> {
                 Around[0.3263837789328387, 0.11966602137337685`], 
                 Around[0.5138837789328388, 0.1275565638286851], 
                 Around[0.3888837789328387, 0.12441482134936328`], 
                 Around[0.2013837789328387, 0.10234852942509189`], 
                 Around[0.3888837789328387, 0.12441482134936328`], 
                 Around[0.3263837789328387, 0.11966602137337683`], 
                 Around[0.3888837789328387, 0.12441482134936328`], 
                 Around[0.2638837789328387, 0.11248117430350343`], 
                 Around[0.3263837789328387, 0.11966602137337685`], 
                 Around[0.3263837789328387, 0.11966602137337683`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00009183061001456736, "MeanCrossEntropy" -> 
              Around[1.557898969015069, 0.014595369457882734`], "ModelMemory" -> 
              101929.45454545454`, "TrainingMemory" -> 264626.1818181819, 
              "TrainingTime" -> 0.13973782002575305`|>, "Index" -> 1|>|>, 
         TypeSystem`Assoc[
          TypeSystem`Struct[{"Value", "Options"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5]}], 
          
          TypeSystem`Struct[{
           "Experiments", "PredictedPerformances", "Index"}, {
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
               "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory",
                "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
             2], 
            
            TypeSystem`Struct[{
             "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
              "TrainingMemory", "TrainingTime"}, {
              TypeSystem`Atom[Real], TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real]}], 
            TypeSystem`Atom[Integer]}], 1], <||>], "MaxTrainingSize" -> 75, 
       "PreprocessorEvaluationTime" -> 2.14453125*^-6, "PreprocessorMemory" -> 
       178720, "InputDimension" -> 44, "OutputDimension" -> 1, 
       "BaselineLogProbability" -> -1.504445381309891, "VariableBudget" -> 
       True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
       False, "NaturalStop" -> True, "AbortStop" -> False, 
       "LastReportingTime" -> 3.879152719590727`16.341311866973452*^9, 
       "RoundPartitioning" -> 
       Dataset[{<|
          "TrainingSizes" -> 10, "TimeBudgets" -> 0.040918028459941046`, 
           "ElapsedTimes" -> 0.13641, "ExperimentCounts" -> 1|>, <|
          "TrainingSizes" -> 60, "TimeBudgets" -> 0.2045901422997051, 
           "ElapsedTimes" -> 0.20801399999999998`, "ExperimentCounts" -> 
           10|>}, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
            "ExperimentCounts"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 2], <||>]|>, "AnomalyDetector" -> 
     None, "Log" -> <|
      "Example" -> 
       MachineLearning`MLDataset[<|
         "f1" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, "ID" -> 
            3795572968267006573|>, 
          "f2" -> <|
           "Type" -> "Nominal", "Weight" -> 1, 
            "Values" -> {"Information Technology"}, "ID" -> 
            3401139331922032727|>, 
          "f3" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369}, "ID" -> 
            4714656301856831657|>, 
          "f4" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {23.778}, "ID" -> 
            4624390425862832796|>, 
          "f5" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {100.249}, "ID" -> 
            8583462845398299564|>, 
          "f6" -> <|
           "Type" -> "Text", "Weight" -> 1, "Values" -> {"Estimated data"}, 
            "ID" -> 3095956687388126824|>, 
          "f7" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {256.9105}, "ID" -> 
            1111199487588034056|>|>, <|
         "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0,
           "RawExample" -> False|>], "TrainingTime" -> 0.521046, 
       "MaxTrainingMemory" -> 706376, "DataMemory" -> 118040, 
       "FunctionMemory" -> 358904, "LanguageVersion" -> {13.1, 0}, "Date" -> 
       DateObject[{2022, 12, 4, 14, 25, 19.963511`8.052811907393602}, 
         "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, "ProcessorType" -> 
       "ARM64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
       "Evaluations" -> {}|>|>]]]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, 3.8788070723199997`*^9, 
   3.8788071152477303`*^9, 3.878811629852172*^9, 3.879149120634508*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"c6f9cc4f-3acc-436e-bbb5-2c39f1a3aa4c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"cm", " ", "=", 
    RowBox[{"ClassifierMeasurements", "[", 
     RowBox[{"cRisk", ",", "testset"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Test", " ", "our", " ", "classifier", " ", "on", " ", "the", " ", "test", 
    " ", "set"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<The accuracy is: \>\"", ",", 
    RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}], " ", "]"}], 
  RowBox[{"(*", 
   RowBox[{
   "Plot", " ", "the", " ", "accuracy", " ", "of", " ", "our", " ", "model"}],
    "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"AccuracyAss", " ", "=", " ", 
   RowBox[{"Append", "[", 
    RowBox[{"AccuracyAss", ",", " ", 
     RowBox[{"\"\<RandomForest\>\"", "->", 
      RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Plot", " ", "the", " ", "Confusion", " ", "Matrix"}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.878619179671941*^9, 3.8786191833045883`*^9}, {
   3.8786192222213593`*^9, 3.878619249704307*^9}, {3.878619342065884*^9, 
   3.878619346687873*^9}, {3.878619378625424*^9, 3.8786193862338676`*^9}, 
   3.878805729554159*^9, 3.878805819596631*^9, {3.878806143346759*^9, 
   3.878806195391272*^9}, {3.878806763106118*^9, 3.878806811062291*^9}, {
   3.878806841172628*^9, 3.878806863962813*^9}, 3.878807078662706*^9, 
   3.878807117804838*^9},
 CellLabel->"In[66]:=",ExpressionUUID->"99020af7-66ff-4247-b63c-5a1edaef53dc"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"The accuracy is: \"\>", "\[InvisibleSpace]", 
   "0.47368421052631576`"}],
  SequenceForm["The accuracy is: ", 0.47368421052631576`],
  Editable->False]], "Print",
 CellChangeTimes->{3.878806864557898*^9, 3.878807079067741*^9, 
  3.87880711843373*^9, 3.87881163245848*^9, 3.879149124769641*^9},
 CellLabel->
  "During evaluation of \
In[66]:=",ExpressionUUID->"6ea8b8f3-ee15-41cd-bc9a-573b8cdc3672"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBghWIQGwI+2KPTTne5Vl458NZ+Kf9djYc+r+3Tfmq2CDM/
wSmOyxxS6cFmL0z+YZXIOveHt+wZUADl9va95PS2SXhjH+dy27B0+lP71uDA
JnnBc/bOhod9LMXe2Mdsrw0+HvzQPn/Ott0iHyqo5l9yw4FYGgAjLp0q
   "], {{0, 0}, {5, 5}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "3", "\" examples of \"", "\"B\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.5`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.42857142857142855`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.4615384615384615`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{3, " examples of ", "B", " correctly classified"}], 
         Row[{"Precision = ", 0.5}], 
         Row[{"Recall = ", 0.42857142857142855`}], 
         Row[{"FScore = ", 0.4615384615384615}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.16666666666666666`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.14285714285714285`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "C", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.16666666666666666`}], 
         Row[{"Row fraction = ", 0.14285714285714285`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.16666666666666666`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.5`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "D", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.16666666666666666`}], 
         Row[{"Row fraction = ", 0.5}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.16666666666666666`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.5`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "E", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.16666666666666666`}], 
         Row[{"Row fraction = ", 0.5}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.07692307692307693`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "A", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.07692307692307693}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "4", "\" examples of \"", "\"B\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.3076923076923077`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.5714285714285714`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{4, " examples of ", "B", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.3076923076923077}], 
         Row[{"Row fraction = ", 0.5714285714285714}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "6", "\" examples of \"", "\"C\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.46153846153846156`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.8571428571428571`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.6`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{6, " examples of ", "C", " correctly classified"}], 
         Row[{"Precision = ", 0.46153846153846156`}], 
         Row[{"Recall = ", 0.8571428571428571}], 
         Row[{"FScore = ", 0.6}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.07692307692307693`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.5`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "D", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.07692307692307693}], 
         Row[{"Row fraction = ", 0.5}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.07692307692307693`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.5`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "E", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.07692307692307693}], 
         Row[{"Row fraction = ", 0.5}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 4.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" of class \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " of class ", "A"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 3.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "7", "\" example\"", "\"s\"", "\" of class \"", "\"B\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.42857142857142855`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{7, " example", "s", " of class ", "B"}], 
        Row[{"Recall = ", 0.42857142857142855`}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "7", "\" example\"", "\"s\"", "\" of class \"", "\"C\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.8571428571428571`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{7, " example", "s", " of class ", "C"}], 
        Row[{"Recall = ", 0.8571428571428571}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "2", "\" example\"", "\"s\"", "\" of class \"", "\"D\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{2, " example", "s", " of class ", "D"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "2", "\" example\"", "\"s\"", "\" of class \"", "\"E\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{2, " example", "s", " of class ", "E"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "A"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "6", "\" example\"", "\"s\"", "\" classified as \"", "\"B\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.5`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{6, " example", "s", " classified as ", "B"}], 
        Row[{"Precision = ", 0.5}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "13", "\" example\"", "\"s\"", "\" classified as \"", "\"C\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.46153846153846156`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{13, " example", "s", " classified as ", "C"}], 
        Row[{"Precision = ", 0.46153846153846156`}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"D\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "D"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"E\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "E"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{4.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 0.], TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 0.], TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 0.], TraditionalForm]}}, {{4.5, 
       FormBox["1", TraditionalForm]}, {3.5, 
       FormBox["7", TraditionalForm]}, {2.5, 
       FormBox["7", TraditionalForm]}, {1.5, 
       FormBox["2", TraditionalForm]}, {0.5, 
       FormBox["2", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["6", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["13", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->13,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->228.,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{
  3.878619184460875*^9, 3.878619347255011*^9, 3.878619387156837*^9, 
   3.878715848704851*^9, {3.878715890521706*^9, 3.8787158953838463`*^9}, {
   3.878805538696899*^9, 3.878805553604134*^9}, 3.878806818221781*^9, 
   3.878806864604879*^9, 3.878807079111846*^9, 3.878807118477005*^9, 
   3.878811632503502*^9, 3.879149124818185*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"bc484430-7154-48c5-9beb-d9650260c42c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["SupportVectorMachine", "Subsubsection",
 CellChangeTimes->{{3.878805416699134*^9, 3.878805417721744*^9}, {
  3.8788071343093243`*^9, 
  3.8788071382069473`*^9}},ExpressionUUID->"707033d6-fc97-4519-873d-\
86d56ff114d1"],

Cell["Train a classifier using a support vector machine", "Text",
 CellChangeTimes->{{3.878805704170437*^9, 3.8788057223306637`*^9}, {
  3.878805766632689*^9, 3.87880578974465*^9}, {3.8788071511686087`*^9, 
  3.878807154470745*^9}},ExpressionUUID->"072a572c-19ec-4e50-8160-\
bd35294883af"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cRisk", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainingset", "->", "\"\<Ratings\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<SupportVectorMachine\>\""}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Information", "[", "cRisk", "]"}]}], "Input",
 CellChangeTimes->{{3.8786185865414057`*^9, 3.878618597824006*^9}, {
   3.878618646892776*^9, 3.878618648994371*^9}, {3.878618877270843*^9, 
   3.878618880432907*^9}, {3.878618998083866*^9, 3.878619004451974*^9}, {
   3.8786191510115213`*^9, 3.878619159945651*^9}, {3.8786192237272882`*^9, 
   3.878619223941098*^9}, 3.8788071411539087`*^9},
 CellLabel->"In[70]:=",ExpressionUUID->"0ad5282a-88fd-4696-b81a-c71cc5893931"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"A\"", "\"B\"", "\"C\"", "\"D\"", "\"E\""},
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"A\"", "\"B\"", "\"C\"", "\"D\"", "\"E\""},
                    "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["75", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 75, "ClassNumber" -> 5, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "Elevation" -> <|"Type" -> "Numerical"|>, 
           "GICS Sector Name" -> <|"Type" -> "Nominal"|>, 
           "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Disclosure" -> <|"Type" -> "Text"|>, 
           "Revenue (USD mn)" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
           "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|
               "FeatureNames" -> {
                 "Elevation", "GICS Sector Name", 
                  "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                  "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                  "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                  "Carbon Disclosure", "Revenue (USD mn)"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 7|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Numerical", "Nominal", "Numerical", "Numerical", 
                  "Numerical", "Text", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6", "f7"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
           "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|"(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
              "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 75, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>, 
                    "f6" -> <|"Type" -> "Text"|>, 
                    "f7" -> <|"Type" -> "Numerical"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 1621909218748444882|>], 
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>, 
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2074781423290265366|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 20679206186753951|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>, <|"" -> 1|>}, 
                    "MissingCode" -> Indeterminate, "Version" -> {13.1, 0}, 
                    "ID" -> 4023015169247141483, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "LogRescaleNumericalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Indices" -> {2, 4, 5}, 
                    "Centers" -> {0.43, 23.052, 256.593674903342}, 
                    "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
                    620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
                    3527897072513609120, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {146.57391774891778`, 3.693542625490828, 
                    68.22157333333334, 3.504982149660075, 
                    1.4086804722859232`}, 
                    "StandardDeviation" -> {253.37495961794207`, 
                    3.1699732836017724`, 118.62403407631172`, 
                    2.423277341145054, 1.2610287731963699`}, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2274174826257793629|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {11, 1}|>|>, 
                    "Boundaries" -> {{-0.5, -0.40909090909090906`, \
-0.3181818181818182, -0.2272727272727273, -0.13636363636363635`, \
-0.04545454545454547, 0.045454545454545414`, 0.13636363636363635`, 
                    0.2272727272727273, 0.31818181818181823`, 
                    0.40909090909090906`, 0.5}, {-0.5, 0.5}}, 
                    "Version" -> {13.1, 0}, "ID" -> 8505008840132824157, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>, 
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
                    Span[1, 2], 
                    Span[3, 7]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {13.1, 0}, "ID" -> 
                    373596144042670943|>]}, "Invertibility" -> "Approximate", 
                   "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBmQFm/iFib1JlAgAAAAcAAAAHAAAANBt6Fr3csL/lG+Yz4ESRP7hBka92
l6I/3+CsXPnbnb8juBQyj++mPyQSP5BqJYY/vak1fWbb7z9Exb6rXA+mP3bs
bygIL6y/qBWDW9y8oz+sdTB+ZCFvP+M3K7whyrK/oZKNG3/O7792PFDDUfyQ
P9/U3bojxJC/o5bbS9uw5z8WAjGjisXkP97C+Aj2NcU/OamW7DSFoj9l4xTQ
yZiTv+5YNgcGV6G/JjWbdhS247/4DI4+z4GiP+damijBtq0/AUhvWGOt0r+S
UyYwEkrnv7xCV9Xbd5o/7dmZYqsIlL+U6TKOWh/fvyeCdPr2xcm/z+izHsbw
ab/DCMuYpSLrPyWlgzDxQ68/IU0Nlm9mh79gtGMp7lp6v5IjpI1bXuO/gG3Q
78EAir9w8Q54CT+tPz6D4J3Vndm/VLWB566j5T+EcC9VEICzv/LeOJ47T7W/
77C3YnYxuz+XzXfud2fkvwL5lh2DJOg/lXZTGNvFtb8Pcd+T9BKZv2lvrRrr
CbI/A8vXaYtBiL/H/s72
                   "], 
                  "Precisions" -> {0.4602875814560013, 0.9399443097653287, 
                   1.0616808801506838`, 1.6265466434380347`, 
                   4.517522263650691, 10.595148643942485`, 23.23460552022561},
                   "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781967`, 0.012269055622142968`, 
                    0.0013959895289638008`, -0.0005267240067510293, \
-0.00032143499611032286`, -0.00013378352049829329`, 0.0005265431937281588}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 6648082896216031031|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7.|>,
                     "Key" -> "((f2f6)(f1f3f4f5f7))", "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 7, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                    "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1557841622946289758|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                   "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                   "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 7, 
                   "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   1557841622946289758|>], "InputDimension" -> 0, 
                "OutputDimension" -> 7, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, 
                    "ID" -> 2988406535272383851|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"Information Technology"}, "ID" -> 
                    8211126643196690843|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369},
                     "ID" -> 220143977676884624|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {23.778}, "ID" -> 8845109505593024510|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {100.249}, "ID" -> 827490798644983815|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 4409963340497863227|>, 
                    "f7" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {256.9105}, "ID" -> 5236914127772614391|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.0682, "MaxTrainingMemory" -> 219536, 
                  "DataMemory" -> 22976, "FunctionMemory" -> 86128, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 12, 4, 14, 26, 40.924009`8.364553149753666}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, 
                  "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-7.173238193477166, -7.173238193477166, \
-5.957762682813879, -5.505343391085791, -5.137053644875943, \
-4.839361849432994, -4.800994757869588, -4.736339520600383, \
-4.720994010399741, -4.71905825007799, -4.703766525124256}, 
                   "LeftBoundary" -> -5.957762682813879, "LeftScale" -> 
                   0.6077377553316436, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[36.60573897803041, 1.772055230348638], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 8833432794738512184|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>, 
               "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                 "Version" -> {13.1, 0}, "ID" -> 8812518305512619507|>], 
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Version" -> {13.1, 0}, "ID" -> 7405342354547017736|>]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"|>], 
           MachineLearning`MLProcessor[
           "LogRescaleNumericalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Indices" -> {2, 4, 5}, 
             "Centers" -> {0.43, 23.052, 256.593674903342}, 
             "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
              620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
             7299988401548215772, 
             "Output" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Mean" -> {146.57391774891778`, 3.693542625490828, 
              68.22157333333334, 3.504982149660075, 1.4086804722859232`}, 
             "StandardDeviation" -> {253.37495961794207`, 3.1699732836017724`,
               118.62403407631172`, 2.423277341145054, 1.2610287731963699`}, 
             "Output" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 1400194064660864776|>], 
           MachineLearning`MLProcessor[
           "ToLowerCase", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 3080611390123234620, 
             "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "RemoveDiacritics", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 8393247813432535084, 
             "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
               "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Index" -> {<|
                   "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>}, 
                 "Output" -> <|
                  "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> CompressedData["
1:eJxTTMoPSmVmYGBgBGIeIGZlwAANaDSyuINV5XF7IP0gJG/3fiC9wNDnNIjf
ICJ2FcR/IHn3Poi/gM/rKZgf6n8QrC7ZZSuIdtjqegMk77C36wKYvzLrFVje
m+cMWP3c+/vBtN3JS2D6yeWLYPkZKy+D+S8/gO0/YOZ2E2wP0+lLIJrBWOIc
WPzO1IcgdQ2LGjeB3TUp+SKYVtMFuy+h+e8TEH0gZu8JsL6j5o/B5gcFgd1z
QGXZU7D77ga+BKv/OBtsr0L9dYg7eOPvguXTp10Gm/vmJDgcFDacBZvv4HF9
Ith+wUiwvgajkndgfdOYHoHDbXHBcxCdECkFdndCbOtXsD9uJB4Bq1v48ybY
HTsegP3PYPvzEVi8+NYWsHv2tz0Em2N16SiY72lzDWzP1gO3wPoMs46A5BW2
L5wMlt+n82o/AO0BofY=
                  "], "Version" -> {13.1, 0}, "ID" -> 436956950344966148|>], 
               MachineLearning`MLProcessor[
               "Sequence", <|
                "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Processors" -> {
                   MachineLearning`MLProcessor[
                   "TextToNominalSequence", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {13.1, 0}, "ID" -> 9037232907786629142, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                   MachineLearning`MLProcessor[
                   "NominalSequenceToTFIDFVector", <|
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> {-9125122986955958911, \
-8920710729279180450, -8515397617198652367, -8156047279148961366, \
-5900137721653868194, -5516340669880835636, -4691435917638705529, \
-4484112905383790136, -3872414778415116274, -3607098371778122975, \
-3443150737398804539, -3355080348777836050, -2509905740948760720, \
-2159536488856785732, 242552411836269492, 450553210381435687, 
                    539691877398804025, 950421020428451240, 
                    1561895621580759179, 1579009397565082067, 
                    1671416204203290022, 2799484578252825308, 
                    3287432777910049379, 3477167097823690523, 
                    3576478456825362866, 4539722962543247872, 
                    5070765454536077049, 5138905625963890559, 
                    6058376361354581924, 6694985464746702812, 
                    6748311694457965250, 7603334142034012365, 
                    7731804819316663270, 8918825649307280967}, "Values" -> 
                    None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {13.1, 0}|>], 
                    "InverseDocumentFrequency" -> {1.91959284073794, 
                    3.624340932976365, 1.3217558399823195`, 
                    2.0149030205422647`, 2.0149030205422647`, 
                    2.120263536200091, 1.3217558399823195`, 
                    2.9311937524164198`, 1.2729656758128873`, 
                    1.91959284073794, 4.31748811353631, 2.120263536200091, 
                    4.31748811353631, 2.0149030205422647`, 
                    1.4842747694800942`, 2.0149030205422647`, 
                    2.120263536200091, 1.5448993912965292`, 
                    2.0149030205422647`, 1.3730491343698699`, 
                    2.0149030205422647`, 3.624340932976365, 0., 
                    0.11279549414534427`, 2.0149030205422647`, 
                    3.2188758248682006`, 1.4842747694800942`, 
                    2.9311937524164198`, 2.0149030205422647`, 
                    2.0149030205422647`, 0.5332984796180493, 
                    2.120263536200091, 4.31748811353631, 2.0149030205422647`},
                     "Version" -> {13.1, 0}, "ID" -> 7526152790873636702, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                 "Invertibility" -> "Impossible", "StructurePreserving" -> 
                 True, "Missing" -> "Forbidden"|>]}, "Invertibility" -> 
             "Impossible", "StructurePreserving" -> True, "Missing" -> 
             "Forbidden"|>], 
           MachineLearning`MLProcessor[
           "MergeVectors", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
               "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
               Span[1, 5], 
               Span[6, 39], 
               Span[40, 44]}, "Wrappers" -> {Identity, SparseArray, Identity},
              "Output" -> <|
              "(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
                  "], "Type" -> "NumericalVector"|>|>, "Version" -> {13.1, 0},
              "ID" -> 613954820935696947|>]}, "Invertibility" -> "Impossible",
          "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 9119616879012754245|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|
               "A" -> 1, "B" -> 2, "C" -> 3, "D" -> 4, "E" -> 5|>}, 
             "MissingCode" -> 0, "Version" -> {13.1, 0}, "ID" -> 
             1482488055587057283, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {5}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 4789940262906318728|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 5|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "A" -> 0.08750000000000001, "B" -> 0.2625, "C" -> 0.325, "D" -> 
        0.21250000000000002`, "E" -> 0.1125|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Ratings", 
          "Order" -> {
           "Elevation", "GICS Sector Name", 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
            "Carbon Disclosure", "Revenue (USD mn)", "Ratings"}|>], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {5, 6}, 0., {
      1, {{0, 1, 2, 3, 4, 5}, {{2}, {3}, {4}, {5}, {6}}}, {1., 1., 1., 1., 
       1.}}], "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "SVMParameters" -> <|
       "KernelType" -> "RadialBasisFunction", "GammaScalingParameter" -> 
        0.019341626266517566`, "SoftMarginParameter" -> 0.1, 
        "PolynomialDegree" -> 3, "BiasParameter" -> 1, "MulticlassStrategy" -> 
        Automatic, "Shrinking" -> True, "KernelCacheSize" -> 100|>, 
      "TrainedModel" -> {<|"supportVectors" -> CompressedData["
1:eJxTTMoPSmViYGDgAmIdIDa6E2XnaXNtf29TWeHOA7f2Lzifu14r64j9Mluv
tNULJ+9vl824tF/n1X6GIQpc7p2ZrrxwkT2p+h5desqvzHoMp77kGtVTj6L5
HN7Mva9+reb4fqG3LjzXih/tV3sZvqgga8n+57xeupLPPu//39KnsefBpf2G
z5WdrH8+2m/2cf3biltb9t/i4viwt+2hvfGN0iazS0dHwxcNTC6sYYqY82D/
2u4PK1jTptpbhCiqciTu27+xoY/5bNrk/Wdi4vTjlF/s978r9mTt2av7X6qw
H8u4PnF/ndAqO6HIy/sF3d3PGJe82/9V/xXPDKZHJLtvsABahe+ffR23hewf
7V8T+dpBc+7W/SqCKzcl9l/fz7ddzeyg9D37az0M/1h2ftyfZrmiZmnBc3uV
Cd0GEVKX7APSv5XFtH61f36rqud+4pH97ltd9Rb9vDmaftHAq4a2Yw8kH+5X
mbXtXsD19/b7cu8oStu9sLfUCGr/1vTO/u1EoYSDn17srzzB+3Zl1qv9vx++
rgviObOf6XDng8X39+9/d5B3qf3JS/s5ND5WPL18cTR80cAym8UqbySu7e/k
PXqwuvq2PasK88drl/btX62fESjQ+9X+3WejvzPFru1fp/Qp3B1Yv/lzNPZu
BtZvEzaGHzQF1m/3pmg9Pgms36J905L3YqnfPva3zTzlvRbD/lNL70/1q99u
D5PPir8u9tv2gL14UFboZ7M1ONWji/d8uDbtR9EGe3R1LB79ud/lNsLFH7vb
3Liat47k8IOZD3MfLnW43Dcx//MUWw9eh7hnj0/w1DI5bN10R+sg84P9PEYH
D24U+Wrv0ndh5c0vR/YzbyuUXAcsf+VXVVf6AMvfWz0tbsLA8re6TavUCFj+
buG6/G/KaPmLAf497QoTu3Vnv/rkoF0+rfftgyx/u3/Yc2Z/IpuWna7Hc/vL
dx2Xfwl8tF/R2JgRVP5uDwy5Hgksfy/tW/U+Flj+CkjLLQOVv+yplaXz8ZS/
CcyX16SEbLOH0aT6A5d5uPjo4rD0i0tdXPWOCFmGEoLuI9YfMPmkZoWra5Wu
758gv7Cz+vB/+6X3PHceLPlp//z6xpehnZ/sbXjLHB2Y9+6v+x8WshpY/t7s
szPwA5a/u0tSuqYDy1938fgUJ2D527K9sOPFaPmLAYy/53MeLL+3/11sH8fV
pYv3BwslRR2Nv7L/BqOYQW3jXfs9xcYR0ZPe7F+gcGcXn9fT/Uvfrbof5X9w
f0H7k5XZLlv38wanWm1xvWF/YD7r2T1dF0bDFw14/2wxU/zzcH/UszdWjU27
9p9s29ewTeT8fqYdex/tk75g/8b6vKtE8+P9AE3kWT0=
          "], 
         "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 
          0.1, -0.1, -0.1, -0.1, -0.1, -0.1}, "rho" -> 
         1.0035914212465287`|>, <|"supportVectors" -> CompressedData["
1:eJztlntM01cUxxsejiCPlW0M52BhbRkYHgNjwfC4zMnqGJnQDKUMRWRAbYbi
FAYTgeEAO96rvBR08ooIyGiGBJicFpEBIqM/oCBQ+gDkIRQKgiOA7vcPW1LS
RP5YsiX9JPefe8899+Sbc7855ifP0EM0CASCLr6s8eUw4u/2qYsQ0hOjzjbw
huDnP8Jr9rBaUbmrZ2jlTQ6kmDIxsJ4Bwv+Ug6NdeaSbxWi792TYhCFJu03l
veBYSqfsSwP32SLxB8LY38Fo7qCe8JwMLKaPFkewSmFS39Nm15MlePlDhuVv
EgzsJ0kHnFdlQFXUzEUP/QpDujoL95KlaO9gZCIVe6DWVwnO2VgNv0IJVKcu
3NIOzUFOX5hTdIKaoTYhQ/NRKAe6Ao7bHSdNwWGR8Xj1o36YJr/WxhzIhjij
225GjF4g0mhde8/LYdluRi9fQ7bt+v4r/Fv6rjdfHjZCMqhiPHW3KqoDMrGC
G5Q5AAb1FlT+7lEkTCO80GpQQOj+W7FlEZOInJX6od87GPIOW4kKSFpGk0Pf
pYmDWoFW52FbvPpY3b9KzCQkt0l2SYF89e6o98A8ag4fMd/tNoX2W9JTVhLl
aC7b6AR/cQpi2vXnKlgzsCZ9GkfX6wKN+2xJiRhAztcvQx0Y6Fgqoid6BWp9
lSh3KSHPmgiBrf+Af+HCMNImayqEWDNU2jF9Xk9fRvIlh40CYyF4HSnccfRe
O9qxkZ9233EMLKyjOb70HujjdAssyidQMdOwT+QzvUVfRWZyQedn1Vve7ywT
53weX482z1mBA8Zrrjz0Np3lu0StUhmvvJ+2IMz985tfkHKc1qHM8OdmtX/v
j9FcBvtP39m2fpv5N+tTFaeqPv/3FOMW5VIg0bK41907wRlRzUOm+5BNgxOD
fmYcVe474En1XwZCesszUY4UVneyIqq/56LTVQxmRrAACYgfHSbZ9EMw30rr
0sa4un+VYH8yUaE4uYIKD5kZHEmZh4etMQ6BkVIQx2Q3YtxFqMglXZt9mQcx
3WysFPfffVSaUwDuv5Qbj7FjuP9eFInqR3H/TbvC6FD771bejf9pz0a/BJqc
W3jf3plFg4JlSqpYhHrymN7WE3LEcvT60cNtBl6wp03r8PlsSDPS1BWfz2qj
FsbO4fPZOOUrMQ+fzy77lbkhfD4b9vVqKfX45x8du/js63zmXZXvK58nLMYv
Cq/UIeU8qojxqXu+aNWw1U8+tg0j2je+sl5Z3PeNW/LjtsSryv+qvJnpwWOb
DALhjSRGD1EC8XJdc37KbZRd02hyQ2MSUZYe0itPjaFT1x3T5671QhuPs/PS
gAC0z1PmdQNFaH3M463g3F7UbhnatNbRpO5fJbrp2YVhvVJIsr0aYlmEoYZk
loPhiRGYaiox467LUEHmE3spdwr+AugJWMY=
          "], 
         "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 
          0.1, -0.1, -0.1, -0.1, -0.1, -0.1}, "rho" -> 0.9804292261600496|>, <|
        "supportVectors" -> CompressedData["
1:eJxTTMoPSmViYGDgAmIdIDa6E2XnaXNtf29TWeHOA7f2Lzifu14r64j9Mluv
tNULJ+9vl824tF/n1X6GIQpc7p2ZrrxwkT2p+h5desqvzHoMp77kGtVTj6L5
HN7Mva9+reb4fqG3LjzXih/tV3sZvqgga8n+57xeupLPPu//39KnsefBpf2G
z5WdrH8+2m/2cf3biltb9t/i4viwt+2hvfGN0iazS0dHwxcNTC6sYYqY82D/
2u4PK1jTptpbhCiqciTu27+xoY/5bNrk/Wdi4vTjlF/s978r9mTt2av7X6qw
H8u4PnF/ndAqO6HIy/sF3d3PGJe82/9V/xXPDKZHJLtvsABahe+ffR23hewf
7V8T+dpBc+7W/SqCKzcl9l/fz7ddzeyg9D37az0M/1h2ftyfZrmiZmnBc3uV
Cd0GEVKX7APSv5XFtH61f36rqud+4pH97ltd9Rb9vDmaftHAq4a2Yw8kH+5X
mbXtXsD19/b7cu8oStu9sLfUCGr/1vTO/u1EoYSDn17srzzB+3Zl1qv9vx++
rgviObOf6XDng8X39+9/d5B3qf3JS/s5ND5WPL18cTR80cAym8UqbySu7e/k
PXqwuvq2PasK88drl/btX62fESjQ+9X+3WejvzPFru0/83G5Dqj8PZq/55It
sPw9vHD600Jg+RsttTf0ALD8PR/wQMsBT/mbwHx5TUrINnsYTao/cJmHi48u
/tjd5sbVvHU47Y+r3hEhy1BC0H3E+gMm/8dDMUDi6t39j6JWXMpeesI+5MjT
x2Yqd/eXyX/x0E16bs/lMFVfIuKefd2T4neLgOWD24ejLyOB5UPC2YUSccDy
4enmyUvuAMuHU9cW71gyWj5ggN1RewSeSH61Xyet3FX164v99NRkxci/HA6/
hSYdXqb13v7wx2f3n+y7sv/p+4iniXtP2HvfqlM5Zv54/7+985eFBl3Yn5bo
uld12VN7npNaQXcDX46GLxr4xJwRG/30wf6H3JJfp2zZbR+67Ourk9vv7G/9
bLC59t1Je1OHTY+1RR/Zz27LOh8KDN/Kr7w1h4Hh22Bl5BEEDF/GnRKzlYHh
m/X2puK90fDFAP/D1l6RdGJxyLmQl9a97KA92ynX6UtO3tifekrvM2veZfuJ
22Yqb97/eb/VMcd9m4Htsw8OurYBwPYZX2fKHmFg++zSyq/fQO0z78tWDtNG
22cYoCRjmu7d3Ef7BaN6RaO/Ht+f3lUdVybyYL/8xG+LF66+sL+0NoidL+bj
fgBxEy9j
          "], 
         "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 
          0.1, -0.1, -0.1, -0.1, -0.1, -0.1}, "rho" -> 
         1.0037317156791687`|>, <|"supportVectors" -> CompressedData["
1:eJxTTMoPSmViYGDgAmIdIDa6E2XnaXNtf29TWeHOA7f2Lzifu14r64j9Mluv
tNULJ+9vl824tF/n1X6GIQpc7p2ZrrxwkT2p+h5desqvzHoMp77kGtVTj6L5
HN7Mva9+reb4fqG3LjzXih/tV3sZvqgga8n+57xeupLPPu//39KnsefBpf2G
z5WdrH8+2m/2cf3biltb9t/i4viwt+2hvfGN0iazS0dHwxcNTC6sYYqY82D/
2u4PK1jTptpbhCiqciTu27+xoY/5bNrk/Wdi4vTjlF/s978r9mTt2av7X6qw
H8u4PnF/ndAqO6HIy/sF3d3PGJe82/9V/xXPDKZHJLtvsABahe+ffR23hewf
7V8T+dpBc+7W/SqCKzcl9l/fz7ddzeyg9D37az0M/1h2ftyfZrmiZmnBc3uV
Cd0GEVKX7APSv5XFtH61f36rqud+4pH97ltd9Rb9vDmaftHAq4a2Yw8kH+5X
mbXtXsD19/b7cu8oStu9sLfUCGr/1vTO/u1EoYSDn17srzzB+3Zl1qv9vx++
rgviObOf6XDng8X39+9/d5B3qf3JS/s5ND5WPL18cTR80cAym8UqbySu7e/k
PXqwuvq2PasK88drl/btX62fESjQ+9X+3WejvzPFru3XmZoaemfqw/3Vxzfw
zW/cZH8kYfaJSckX7V1Mql1UdK/u5//+LL3p75PR8EUDVin6vjm+j/brTOF2
r638sF9EfruGRuTD/Uf1+OyOBr7d3/GkJX5X0sP9rSb/zmwF1m/LC2e/BdVv
MlvSN2cD67cyIa3ZB4D128Knad9tsNRvnuGz2MM4N2DYf0N2U17Vzp326PL+
3m7K0x+vw6keXXzKnLZ6WaZN9ujqpqt6PsjchxBvjZY9u2wFpjtgICl6yd+8
p6UEzccFcLnP9JCZwrODD/d3X9679UvRKXufDJEfJ4Ue2W9K0l3DJ/zYvvRZ
e22rwPP9a9qjE1YBy4eXz995uwHLBw/V2IyFwPIhVNLhlhOwfDCZcDpgtHzA
BOyPXkZtYX643ysueG5+4Gf7Wzd+WwrontzfotE7b7rYT/u7zLsPKVd9tz/J
6296G1g+9LxoTJ4FLB8q60uCJgPLh73TV/xVBpYPHaWcya2j5QMGsFA4F5x7
96v9W8e0eVke7/ZL/P/8We7xw/3aC7Qyf175vd85Q2+t7tGn+4Wkf6oIeD3d
X/HHvj/W/+D+ldOYbFJctu53lmgU3+l6w35S+a5ze7oujIYvGlhtL/vhtOjD
/XNuNDRFTkmxN9oQkXtY7MH+46+NeRSvvrU/MLMwvXfpWnsAeqcqJw==
          "], 
         "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 
          0.1, -0.1, -0.1, -0.1, -0.1, -0.1}, "rho" -> 0.9888952150940895|>, <|
        "supportVectors" -> CompressedData["
1:eJztWms0Vesalko7uVQ7l12Sy1aS7I1QyKd2C6kohdxSKJJbRZEjVJSORFaR
SCWKXEKS64uQW6XFynVhuYXjstxFceb8sfY+Z62zdnXO2WOfMc56xlhjjfl9
7/zmN9/xjud53jmnuJWzwVFODg4OUewni/3K+cQmnreRIMy47cetH9sh6o6K
mnXjMyDryRDAn4pIbUMCW0glwMGAncYRi4wWP0WM4/Wr05zOZWUhxnn9XVqS
YR3JLOMZx4mR/t6rOdMQY1yY1M624/m/jfuZrX4d95h5H3RYmT387NTl9sX1
WYHV/qRD88Ucv6+HUzfEhLWIfaC84KUgUHyQ1OzbQIfDFFCVWaIrZTEGxc88
vZtuUuGc3IaBp75pKHovV/FN63fIYg8tUGYjGaT9ArIufu6EJsPdRQ8JBb9e
x8JrzCHc7jnL/THO+4x4j7wnZiDGdVjBY1/G5Mh65vuq+EXOdpl89hfPpyM4
TUKwKPw8Uzyr9b8WfOYzlx5Ta6HWujyybAcNPNa9jg7UboCH5oK0JVw04JH+
HF28iAx6c66hLVh+rx0pF4jG8qt39qViMJbf2ybCCM/v2JkqBTy//+4+/mzs
aKkKk7z/4Jvz2E7q4pdcWMryvBJCXKaraT1cjlmQdmv1IFw8oB3cL9cOOYLy
PUcyZ4DcKel8QqgIAmGyPgvjhzKJBl6cHyaXLuo6hvHDSFhIcD7GD4THhEfq
/4If6Dg8vybR5sBzRP//1vtgtR6rY8bxDm31erJTMsvrH/J8cXA1h+sX9/e1
90GfL14el5lr1QZc0i66DSKlqNl+SqOhtgWSUgwminR7kE7XbcpaVRokX7ry
lhhfAyfDYl/RaK9Q9azDZVWtBjTfcE/3XAUJUZbGSCsLv/mP8/Zn4Y+qX6tX
Ksk+BnWQQvPc1CE1jRQDJyskRFyAHO/QWqIwiDY8IFku5q1EyRIjxtrq70H/
O99r6QWNEJxqXKhkX4xaiDId5fdDwWzPMes82T6m+h2+7n+7YlcSMz/Gtt7U
885E9Hl7yzrBma0FSMjA3nBUOZFlPON4IO39ralTv+kWPW6BznXHSdHUX8fp
9fu1eWNcn74/VnGs9hfiPErcqsOreai7o4zHi1MzI61ZpnB+G/AoFBamrhhH
O4Kq4xvGimH+85M/JL8mw5oET4/ddSHQGHhJ63uTGvD0l3FTcB2EZ9w1s0TO
dnb9MmC266qRYGMzrAs1yN7t14oMtsxo03Kr4AiXjMZGnQ+ohrLt0di+dtDt
ofHi/kHYr4j/Dq5vroY7iZi+Xfilbd2PmL6NCO465YvpW2hakUhLbu6v11t5
78jiuPJ0ltenz/tquXf+jVaC1GPEGx7zpSPGdVjhglSQiu9mZh5c2MPr0SDG
XE/fCvr69P196/nc8/56d71vFrJ2W15lpz8Mn6QljM4lU8G/Mu56xokBqNng
NKYfTQVxRcV5sS4fUOa+A3UmK0mIlJ8wZOE3jpauEo1rPVIMi456uEV/bGDr
G0Oc1UUxcpJEHQSvuR/g+XIOxbbszCp0/Yg+1KX2GgaMIHXeM9s05+fB+Tmj
A0/s+6AhSONnPZ4qyHG1uRrWCqAtZGmzvZwElzJPXumpecf2ZwxQnHReXHi2
BQYtgr4jx8bA/uVWpiWWtVA/T/BnL18Kyj2teNDsRj9IH83LeoH5M3eSPx/C
/Fn61hUHnDF/1q3Eu7QA82cHrpbkqP2DPxPd2lqqKlCMvlbf6OP/LX1jjGPU
N/r+6Mf0+v3S+qzA6rpK+/gstERawYyXJ0HraC/wdHacp5lS4NHG00uMEyng
mKA/cPgQh6Zws5c+7h80YpQ9MzD/wPeCEKqI+QeRe5JuZZh/EFLqVwC2f2Ca
R7obNGSaitBy0ZlTPDdmUbNQExXSqPBC1rpG+/goIn560ak3Wg1RD9/MNGP6
lh5ZYxuB6dvyO/t5cH0jD/cmSWD6pkuMmbzwO/3b/yv/Jif6RWVoUiFoatwj
dQUNOC5BekhtG0TKreGq1KSBQmQgvxl/E/IixKplYPwwV+EQhvdvzhNPPjph
/OAqMozw/k33lqKQJrt/Y4ojWQwEde+nQkpl4s8+S0tQlpytg15kEywSLlFP
evIBvdp1YnFCLqB7Ys3ZfLpdEDuY0GqqXwgulzvjT+zIAN79R1WfEepRQfTC
17lXq9n6xoBdHy8pi3+igml3v6rvhWwo98/3eb7iLXC+yGvPX1WN+tXeEoQv
dsBuo0gu47wyxPU5PPClSgeslXUPNTSohtrQN+/WxnWhB3b8tZR9vWz+ZYDp
muHOtXFUkNQOTrurWQFqSFn8aG8t2pi12cTAuRM9Udquq2w6DiutJyi5GD/Y
/xQ5pI7xQ8o2H5HjGD8Q02UzcH4QWvNKeDvGD+znk/8MbqXxVbpjb+Ag/6ZQ
ddoI2AyMaqS7N8IyUsh2W24KpD4WdcpaP4s4rhWNUTB9+7jE3iUJ0zenRBO7
IEzf3i3bpi+J6Zt14foF7OeTzAjQ6ooftppAkTqifEaXh6Cy2EPB0o0KrR4h
2aS0EYi/JXmnfy4MWmxcCHh+5cqnwvHn6z88v9ccguXX/VW3yVosv+5Ly/b4
svPLBBHXE9OCT6lgR62qeBYyBE958/ykp6lw0tpD7ULsCOTPU7kZ2dWCPN4E
kB5i/bGSsvZmc6w/lopuIOH9sReFktmC9ceBRJPyB7/TH/+v4w/Lr/cNmc/k
NshRKyo4m9yP6t+NS/21lYKqw+z2ynYNInuV3VcJGn1wfOmOctz/FpS2FiVg
9ZuhXluK168ENXDveqx+3RLqbPzY9cuEKwXXwif1qWAbU3VawGkQ0olC414r
22G/uYahYNQMfFo3T++uej2aDehdjfvfxvluq3H/m3qG1nEa07dOKZtWvD++
cjBWA7H1jQkrrhMKAoTrgeN7P5PqZW3gPcgtXng5AYWkZAtHc35AUqOVBk+O
dyDzUvfXMRg/eH6GBCOMH2KVbuw9hPGDjAdHFBnjh/u+69Tvs/mBCfqCaxSd
zWLRlus+flb+c6jy04RDwOIpFKTc5RLhMYKms4vel9zpQPzZrhE4/xI6onUO
Yvn9S0r+bXMsv1wTVo4ULL/xdQv7Ytj5ZUKUWP6+Y3sb4MBPr9riSNMo3GdP
zxYjKhI8JVvgUTKGjLU2vMw/04Pko7RO4t8/NCzoWYTzg4RcPZcdxg8lg5Qn
uP8110sRUmL3x0xxb29Um9aZc2j+NJ+oM728BHVXPwrpbXsJ6AhPKUGmF0WY
2toGnxtDx++qXBu4UwOlBaFLLta9g4WuUkPclhT0qYMgYH2rBpVJH8uZKc9h
1y8D3hiERNrWUMFPLuKodBQJZfnbK/AfboaenBjRtE/t6Pb1bnlqWg+8nlpX
8gDjB41FAz/i/iyib5MA7s9+ECjWxf1Zgtm2nLtsfmDCbp+RM6swfYsvTlIL
sBxG3oY881rDR1HIdHhjQcQAkqhIlDt7tR8cuHdy4e/fHGvJ54iYP5PkOnsV
/77E0WzaDX//Zi7m+QvbnzGDeNjIJGwbFVwt5FW55YdAOLbqQXU0FaIXJmhe
SJsAUdMptT7OLiiz2/a4EcuvpJu1aDKWX1UhgalQLL+npfPj8e93xh03vGf3
x8y451g62rSuBpZnPoosdR6EOonNO00pVBDXK5HJI8/ASqPtCx1F2uFusFcZ
/n4oVyf/CP58J92mV8MR0zf5Xd1KhZi+fed/vmA7W9+Y4g567llsqV8LwiPv
+xQ4jWFsdjapTzMPyCc8NonHU2C3d+Y93X2d6O9EeEcW
          "], 
         "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 
          0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 
          0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, \
-0.1, -0.1, -0.1, -0.1, -0.1}, "rho" -> 0.9699922204017639|>, <|
        "supportVectors" -> CompressedData["
1:eJztWWlUU9cWRkAQJUCtxqggIlptEKpSoUXwBCuDoiCTAwFlEFREUAEFERUF
HIqIgqCiRWUSVCyzyLBlNgwFE8KgBJJAwAkIk0NB6c2P6FvJS9UOr++tl2+t
u7LuOefus+/Ozrf3d6Lm7GXlKikhITEDuxZiF0Vh9sscJhViNjDnGrxhw5VY
3WUuj7KAbk40glAWojL7pn5PLQcJAazacEl2vdzPSHC8WSXD80BeHhKctzAz
Vo/pSBO5XnA86nLoYRXJDCS4LmbeKuaOog/jIWSV2qQbwn7w4UxOeOvJ8f2o
fVEQ5d+CyKLZu75shr3nZhOMo56BjnQpHhhH0Lx3dWEejgzQI05aPc9hCMqy
Ag4/Ps+CA1oaPT8HZaC4dTJl510eIoe13DCiJh0WhJzMO/a2Ex7brilJMLr/
fh+HwCGPC9tzRPonOH9k4PBAY1Q2ErQjCv6W2a8GvhZ+r6oftLZ9sfjeR5/n
IyJjDr7kwiGh9aLsfyoU7EeCb7AaoMGFcvnBSi74z6+NCzNpgQR7PHeSDBfk
F7yNK5Olg/mYT2QbFt/TTpSpcVh8zfeXakdg8b24iYB48R3aV7OEF98/6sc/
jZVtNTHq165/dhzZVI6i+vgKkc+VGyXl+tg1w/F46YxolV44ZmMS8UKLDfn4
xU+cckeA3qnutXNaCaQFn6iLSqHBnpjESi63EtW/8ziuZ9yCpGzXdo1VURFD
KX6BDuGXP/w9/9P4u+LrXKmbdsSqCe5wA77tmPcr0g57VTVHeTfQUzzay5f0
Io3r1C1yuGqUNmdgg4l+I1hMCDqdef8RRKRvKF7qXobaoogdlGuRQF7r5lK4
8JlQ/vafCb1YZXZb+Peb2H7e/HAu4s+7b2nCjxjcR9Os3G0HdW6JXC84HsZt
jH699wOv8tdJm57Z9WpW+vvxDhP9ZrqnMK9/DHz7fP9ErRPl31mvwSgDUxxp
c1fHA/lASVJ2RiuxWIoJ8kuKi9OnDKOV4fUpLUNlIJWzZ3paLR1UUwP81zSd
hUdhwcZfbqJBQCjRd4lPL2RNpL2LkmSL81cA7zin1uMftcL8SKt7a0LakdX3
IybcghpwkiEu1zTtRjSGYfKQJRtWP+HiePWNEFKiGMvjXx/bVVEY/x79gTl/
Lsa/A3izvUEY/0ZmlCi3FRS832/GVSe5JEqmyP3580HGfp3PueVIP16t5YZC
JhK0IwpH54XrBn0nXD/HP8H5t8wWzqfPBd8+37/PfX7iuB9/+jooD7n4Tq7Z
btEPowvmrD+QxoLQ6qQz2Tt7gKbhOWQRxwI1be1xibu7Ua6lTdOmGVRELUrt
cwgZRkozZyW1O5WBrKu/b9ybFpH1zVGKdmurTQ7if/65t/5gT9S94DifH0St
2xxwd6OKhM9H/fvU9+DPOx+bTb89pwkiVK+dDCgdQ4ltq/KKfd6g7qb0p7Yn
B5A+bp8hSaoQDo2tt7np/gxawpcvMpevgXyfradi2gFMpm3ZuoJCheDcPSee
0B6K+wcBaL/ykive3wa9DuET6InxYD3Z2a58SwM0j8MvCgxioAJv7Y3kcy9g
gWth3l1MX/hRQxUQpi8yDabYeGH6omspTuk+pi9sTpXnL/sXfTHLoL1Cb2oZ
+tT6xh//q+qb4DrB+sb3j3/Pz9+P2RcFUfsutVRwMFZuBzJOPtXY9SnId3Yc
4toxIFnTe9KGWwzYlWrR47hZgnQl4ZeRVox/My/Ttl3C+HdyrLU8j3/p/U9v
z8H4d3VU/Kujv9P//r/yQ9qtkCvZJBaEvx72T5/CBYlgyDzbwITLWqoy1SQu
LLkcpkhWfIwCjRKXZWP5O1blEcPTx14vb77xxPLXR7kfFWH5uzpaexrp3+jj
z/XrU/G/El+qQ094lzUL7lTfWnREqRzlaW3zML/8GGQJ5fq3b3ajSrOdcqkF
gK7Obr2nsJoDib2p7XYWxbD7eGfKzpXZgLN21csyakb348bXFpyqF/OvAMze
BOuojbLAruuFXtDRe0AJLTqSM6UOJO8Wsotm1qMXy+qMCMc6wAyfasLrz1we
UqhpGD/EbNCRiMT4IVryufrXGD+cYNxpDBLrYyF4/ZRMNwxhgaxyqX5ddC/U
c0IvvZJmw+ilBGv7qhFw3iwzQyOZhXBvui6kY/qiksta64Xpi4RbgRoKmL6Y
0OWduwjTFxdfH/g1WqwvhOBX6KjYyGEBFLquYermA+lc7FcTbzDBUrY+9Ru5
BlA1bGqsPNED95TyEnj1jWDm7JuO5W/k1ki3cCx/28jP9b/C8vcG07tCXN+E
113V1qI6pLbDCVxGhU5YH7jdXeVvHcSCOj/3F7uPDcD9A6/j2O+YUC6d5TAc
S4Nxy4+TDzY9BJU6JSelLQzURqc77IimoZKDyiv6KPlifhDA4kUmBW2nWYB/
m9NC6KlHb49V9MQ2tELKhUObOs/SkKtz1raFqlIkmes5jtcx/SbtZeVtj+k3
P/czkpsx/bZsdDGhGdNv40d3OMRj+i3L42rFdxLVH85zLe2SAmJKRO4vOF9V
6ZVc3V2MBO38p1H5mLh4a3zjn95/OEXfdGbqY7A5aBiXHjyOdFqDel3luAJJ
w2DNYunvBtHB1aNU5awaVNOfvLAA68/KvQqovP6s9FoMZw/Wn5FnFNry9EXd
OiZR3J8Jrxs1VVtHoDOAbXeDujPxAbIp43TozGXAPtUhU03nbjSRdP4bwsY2
FBg6cz+Dpy/me5QnYfxb+62PN09fKE79aoCnL9yuGDiGiPsHISRqk3rvebPg
pDVbyXiMC2Q10h3GDhY4dqS2eyQ/A3X8Dqv+C1xIf7h9JU8fz8r0leHlb0Rp
4jc+WP6Gqupa8v5/i4yWq16O5S//3Ku4b7efhlo1+tTzM/79X3V+9jHw/ePf
XypmuyZKBwjZ+aP2+ejpM76pGFELK2edz1iq+BKu+5fiLBqZ0JfdvzdhsBsR
vzzpF/HDAOo3xO/lnf+urdExxWH9GZHcr6qE9WffS5IUeOe/nGVX7S+I+zMh
5Ohc/VnWngWHC2qKDlKaIUQTP1wdyISs1Fwt3fNu8K3iQvPXuA441Ondy6tv
xtzyp7zzScfaawRefeNkRia0YvWtqjH+bsLvnE/+t+Pvim++XYFS5/RhlDZT
/dSBX4dQjKuL2qa3E0gjk8+VJhH7UGl/V3tnUQNw+jZynAofILNHh+ZW6HbA
u8K4JFurenBzMiqcl8RB8hSiFcPyqTi+AhiQ2u5A5jCBNWn6cFRWPrJNGn5G
yW2FkMFFmYG9FLSUlNGhMZWNYkPd62yx+PoP4w6WYvE9orfE1AqL77g8Qqw6
Fl/3nha1NnF8hTC2/nbD9BXSJI96T7cfk4qRTJVRTALGE65VWoPjPWnobM5F
9UwYBL0Kw6JMjH+5JE2DdRj/KpzcWsD7/42aMvxSG+NfM5oeSayPheGzPVqT
sYsNX9idnkoeroRtpwI275vCBNWzL+Ov3awH30ArWQX7fvgNvFvl4Q==
          "], 
         "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 
          0.1, 0.1, 0.1, 0.1, 0.1, 
          0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, \
-0.1, -0.1, -0.1}, "rho" -> -0.9534499391913414|>, <|
        "supportVectors" -> CompressedData["
1:eJztV3s0lGkYF9s6NoOssKFcalOhLbSt26vNJWysW4VD7uRaLXI5NkPoRjaX
WalkW5JQ65LIeAqTBt1GMuQ2zLhsaFDLbFn7ze6Zds9M31Fn/9pzPOd8Z873
vr/3eZ73mef8nt+n4hlq5yMsJCQkgT0a2GM9H5bem8mAFA/qilxiGbI+3KCd
5vUYZTvJow2a7fAyonVLwhwThP6nZtLbSlLL+wl96LkBGktSbeld3HMU04Kq
MGc6JF/6qCxLaQISHMzTxrQG4Jbs5hGPqtfQzlQLDZSrh1MwQ6/up8E91U6C
IWcAZqREWb5dFTBF+iGtLomBTAtNLxvQKLj1dRdpK/Z2uIF4vx96Dzx/eO/8
64PmBvT2kFLc+G4xN/cqCYUtmN/73oO33yhdUFXr2Q8fqx+w7FS8i7oDZo06
n/RCyTW73+otR9BOVnbP53pssBxhE55h/SufWC+Zw+3fMEeLDKx/43f0r1uD
9e+UrNUhIta/6WX1ir21tW/jrrzoIVZALcfNg7dPNItkPmdTkMEllc5CiXLE
7wfP4temfkncJnjPpSOEqE7lqv/8P/L88/L70POfLDl5YT2xGnmFS7f620zC
G3XV3dGlDEhqKThdGTgObRtDXtrkMkBFW3tJ/oFhVGXr0OG0koZodUUvXBNf
ISmFVQV9Ho0g6hMVnsvpXOxfPpxngnJ7iWoHpK3OOx7TMI/yey2q74Rx0HDH
L6OOx6eQASFiu7EIGdR9yNU3MX6IpCVJIIwfyg1lHEIxfhjSJUjdxvjB4QTl
lv6/+GGVYd9dvRWNaPJ0UnazVYlAHs35fZnWR6oE9uXsAhyntxbj4vnXT7Gf
Zs0euo4WwvHqy58f751X34X84xleXF1bCVczxT5wIYgXmfmMgjhz8Hu2cw9c
1vxu2Z7iHggushl3dxMyjjXN16/E6jvfHETi8m/ob1c5IVh9wxQnEZd/LbO0
5YwX+VcAR3MdTx2yZ8C1luIv4qQoqFrLL8j63DMQlacYlFwdRk1WgWJFtYAu
KnfXSFiyIH+iqM/Z5g4cSGZeCTSpBIK9j16FKR3dzl16v/bEo0X9wGdWnKNb
Vd4wwHloTI8YXwPUpLq4GzIPQfgmeaBO4REa039oKp8wCBqZPo7d2HyLabou
wdVnje45985g881EJ8aEO98kZ4b84hf1mYDpeW/aFbRrADQylpnHRrFBZnWV
uroTAyhaEkYU23E4xjy6r8aTAYk6f7Ry+eHywZxxfYwfFCv8ygMxfoiQ3pDD
5d88lu/Mu/SZxZ6zorvFBPmLrlQWEl1djfj3bazM1EiDpbh4/vWMc0lHlITL
ED+OtNaif3/dP+uJLkr3CwrxedTT5ee5EFb4gv7xDC8/3fqtykN3GHCyjVz5
8lAz+sZfZpYqPYDKPDWLJT4dROFDybGJUsOQGTEVW4vVl0xVJRth9Y3Ls67w
w+q7aVvgNW59mVov5gzfUd+/9VeDQNx8oj+LTQbEr994+gwPv9A98XAi5mIK
+qkV792fo2OpsFn+3nvjeXHjWnWSKtUfvT23abmuet/zp5BOm6V2uU1CaI7G
kvhjDAhVjNwb/eMT2OeVYLHOcRIVJ7u4FwX8CqPDE1Zm4q2wc62rf14fgONn
xl1fU2mgk9byLavt8SI/8JnowKhzhQgDLN3sz4faTqMu+uuvpDSpcFQ95QJJ
loN6RG7Vq0XPIOuOiL/4QTKqBAyw/jWOV84Oxvo3JXT9A65+UKE/Pmy0yA8C
uGLT5Q2ZqwfgvL+rfd90KWwJIqrM+kobj5Q0FRWTRlD7793M+iw2UAk2utzv
t1MjRK+z2HyLOhJml47NNzKpcE4Nm2/HwsW8Ehfnm4BtU35gH9zzCo1v970Q
sHMC5Oenp1cNMmDjxQ37OU9eww5/rRJNCgukFThrpDB9FvkGnXbF9NmVLGED
b0yf7ZAnylVj+uzM4ZoHi/pM0K4iJXbLCgaco8fFO2V4oy3X9wY3yPZD03Nt
cZX2cXQ7+6BfSn4J+hNzMv9n
          "], 
         "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 
          0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1}, 
         "rho" -> -0.976583769917488|>, <|"supportVectors" -> CompressedData["

1:eJztWndUU1keRgRUlOI4ICLCYgCVpqiAK8gNKopgQRSlKl1gKDqAgoJYBhQb
IFVRQaQIVoog9UeRjgqhSUlIAtHREUIxioC6N3+wcw7ZrLpzZvfM2XznvJPz
3r3vvvu+fPne97sv8vZepk78fHx80nhTxdvWPdeE9hbXIKFPcRcqtHtBSdUv
0sy0EVoinzUppTJQkotYC3nna+CbgqGwkCt1xvfQ1ON1KT3R24Py0GS72/52
yfF1pWi+qZvZiNZdrv2nHr8w2BYz+vNDNLWfgGGYxwfZzH8e792s+6LV8z7H
+V/D5PiT8+PWj9v8LOWG+pRSaUDYHJ51g1gHOkhL3ul1C1LLX2Nh6tWH7miu
N9KyZIG0w3tyEZUEbsuvMXU/0uGB/gkZ184ciMpWfVQSQkPz5aql1pMqocts
a3mywe/zsAl85x7nkst1XlPbTwwHDbdFPUJTx+EG/52PPgwvy+f8PjaoH5ir
UfDNfIZnLZYsjzvO0Z/b+N8KYU3WQqN3z8BcbHWk7uAwOPaP6GX7dcJcUsT6
A8JkyLwt65m/7DPiu1j+jhxNg4+z3Q7eO5mFPO9auFxyaEJNc/V3ENRawaFs
mcDpT30c+v2rYCOlIZZwM+m7eaSTGGIEwSqu54VuYqQP2b9H1wxlRfecYUL9
E/+V+31p0OMfUUDKGob0GEL82y+xcIlJa8jB+tUMqDLSw/rV+uUY/TDWr0Jq
vG8Z1q+WkMlxTaxfbtexnd5813F3Lpr8/N774DYet/2pxyf9gVu/fccemy/i
8/nq/L71Pibbzxh3ne07W4O6hXJm5Z8PQ/FHmj6EnC6GNvm1jzsSm6Fpb7+8
e5sAkeJ40ICtX/Xa0biHWL8LchO7I7B+/apfWihh/fqJ12w7ydMvB2R8fhqT
fEgDF1pDXU4EEx6KFAcvHaPBIQd/nVMpw1AyTTv6GoOC/J+FkpIPvkKaWpvX
WEuTkGJCB8kmmIUCyeQ8it0TuBBlUZv0sYPH7xTIBF1W/tRKhUKd8tIj99+i
F00sxfM9ZNQY62KiyhhAbtpbzxnovQFBY5PKFMyvTekpijnm1/jSmBGb36R5
siWNmN+CjrDI6zx+OeAm01c9R6kLciya22/KjSPC+cwd9nZUpHDpkp2gyVtU
la9bI+33AX0Ofb3oEfbfzum+i9Zh/808PNjrjf23T9GxpxT771nzFD3Eyw8c
+DHMoDRU6gXwzQu2aJxLhaABYfmyMxko4kGBVAL/K6Q4Um96x7UXud7Qvtgf
3wxVpZGzT7c3gaCPIlN4PxlN9BpIOMQ0o5qlzoXjtYU8/U7BM9OIaweaaRCs
ftVp6XUSyg9xWylm2w2/Ft6SzZqgoythLzVoWb/C09EllUnYH/Rm9Cuw/ffq
m9USbH9YIPHEiO2/GVb6hTd4/sCBrSeGDy/E+k1/ck8ndP8QCjKbM60nbgRF
jMV1ll7tR4vr7qofOfcW3IW3CHXh/ODR0no0CucHgtCRc+E4P3hYjfkq4Pxg
/bdjG4J5+YEDUbZ7LGL1aeBjo7FWWIMJUikNSY0JNEgQzCCeynoPspajOm/4
GVDjon+7E/NL8HWQvY/5XTtfYjQS8+u9tCRdGfPL8lBp49UXnEj0qBrpWtIM
P+SlXavyGoD2xWu2WJJpIL+9Urm4dRyk96wX9JChg5VaaDw7/z4nrhhNw/wW
vrm5m63f+mV5Rksxv7vHQiJ4+ZcTQhMvHUmerSDip5f6eskAKAhVOFNm0qHe
VmuJROU4hAWsPn1IcxQZS2ZsZvuDQ1Mtia3f2L1afGz9xvD/RliG+T1LftDG
45cTXjfSWvWDaTBDpkL3ecwANDJCrn4QoMPE1eRd1nXjYL9PSFoljYZEPr6M
y3zaCtWDtG1e7RGQfDdQRdSiGWa+9M5b4TMAV0aPjsXw0/9w3fu/wp/Fr1+x
rVgbgwZQ7LSVql0IxMvxSsK3qbBzRmPG8lktIKff3lZ9th8KxPOTu7F+pYzt
fTOxfiMdI53Z6zsUq9902fXxbap31al/o9//1/WHxFXqJJuMHjgrklWldYEJ
zo+3+O86iX3Wz+3twdPDUHp0NIH+mQqVAjk2LJx/p+mdsQrA+XfRc3E7cZx/
Ka2tNq44/5YHyKxn8vIvBzRWbC6iXKSB5KfcDqn+RvTpdFV/fEs3pMcdt+iL
aEZO9jkHVOWmE4WScm3Z+VfAy9SbnX/93ML49+H8qzOhIfUC51/BCVebWzj/
5rgnVq3hq/+9HttpmXostpzr9ae211V7pdW/KkNTx/lvo7pLWcPxVtsfvj4r
XddwYUYX7A7QT8j8ZRrxogopadEZUaLKuq0aAmtGUIDRBEkmpwE1DKWpstfX
K72KSOz6uOJmLOMQro+tpIvN2PXxcxOqMpG3PsnRb8JQ3kSqlQx0y9ukn1Jq
0O4njF4tBTIclntnqGb/CgkTo5dLmVNQYMjCI+x8lr3EvTIV++/T1T7eUdh/
xSSUhhdj/3W+vs6WV19wImUVcaDAmwahu+jim74MgpU88QHZlQa2vRk97mlv
gCDpajoUNwiZTS4bH2P9ymb7CrH1G16RstwH6zdETnsnYP1Gxsyq18P6jcwq
l6EUFaEy5kE/Ffl6JJ1oNyu1Npvr9ae2696S77gtmo0mx/na/Z1SvKR9cs33
/x4m5ze5f7WM7pQicIxjnP90/En0MzfdEQt/Chtlo7M0xd5Dkn+FyI42KjAf
Df2cPPIKKc8L9QvfMIyG9CV/vo/z2bYGLUMRnM+UrYbkxHE++zs/UXQlzmcM
nUTrOF4+40CuVuLDGdY0CCpqKAmofQHBapKs+kAq5GTkqWtHO8NqMdXtoyK9
cLzPe4D9fNs0WPnaAj/fbJ/elGI/3xjZkcnd+PlW13brcTJvfYcDhZZF4n0L
WOj+QsK5o2PvUKyTg7zFp5nE8R8uV6QqM1HF0MuevpIWYDDNGXbFNci487hC
lXYvfC5OSGW/n3e2MyhWTGWgObXKpv/q/fxfBX8Wv8PTXWysGFSgzV7Aisop
RGaprDe1ed0QPLIiO3CgFmkSs3pVJOgoPsTtuRnm158lEsD+/8OJtSsNTTG/
0/Kl4gmYX7f+DnkKj18OfNlzr2XBegGie6On8/nUMiRUZxCbjH3CqU59RNCz
GUXkXiFkwwisrdIvycb+O0hUW2eC/Vc01LFoHvZfUjrr/Srsv8bNa4m8+pgT
Pi4xamQPOsy1vChhxaqGA+eO7Tv8IxXkIt7funmnEXwDTWeIWg/BPwDyVU5V

          "], 
         "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 
          0.1, 0.1, 0.1, 0.1, 0.1, 
          0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, \
-0.1, -0.1, -0.1}, "rho" -> -0.9552753150463106|>, <|
        "supportVectors" -> CompressedData["
1:eJztV3k0lWkYN0RDRVQyla2LrgYNg5rIq5CtEkWWkZ1LlmoiNI0tW2XLcskW
RSVKN6aD9FiSdQwXkRL3ci2VvbLXfGaOOufeuSfz55xzf+d8/zzP733e9/ud
5/s97ydu62HkwM7GxsaLPTLYc8AkhetYaQ3iWki8XLmzF6RkvGONjZqgNbax
WSqbhjIJfK1dhkPARofxqJCkOv08RB+vy+qOP+T3EC3lXazaBef2lKGNRi7G
k8q5TPn08ctjzxKmT+cjet4KnSi3KZH7n+O92qodbe53GdZ/DUv1l87HjMfs
fOai431S2RTAaUeT0tTrQAUpizsMtSLZol1mRh596I7SPj1l8/fAFlHxriue
AjOrXE7mBZCQe64ZIdKuGTXz7zXAybaBXbn0iqCFPgZ9/y/QfNVAxGVk/mf9
qWQaH47zKdN14ftpt8dtP6AUHRFek9BRqH/io2DlSYFun5hiMmkCbifgkt9+
IgKn/uGqrJMDyLIs8JXpJjLSj5zVswx+jzLXiTxusnkCxc+jYlNnnrP0pYPL
lr7q1VIvoMCspT1DdA7hLt03sLXpQRKRkTach9+ip0WqNZu8p9DH8CHhwh4y
dHJ4Cu+ZocJ9r7HeXzoLoE/SvrsshILCTLPUELkKXhgfqLih9eU7sjz/zjWR
8DvT/enz/hN+E8/iChF9HWbwMSycmpAuYvQTDTknfvniZesVTdoqWJH4GwOf
Wf3lYn2UVlm4UAewrQs2a+LvAb8RHvHy0BwUc69YKJ19AElO1hvdce5Fzmk7
I4aTW+BpWeyqoPZm4DwjOcpj1YXme7U22CW0oBq8Y8lcbQmrf+nQaBST4tRC
gWC5qw74VDIqCnFR4LN+CYMl10VI81SUFNUvTyENgiuPLtcLzH/dWtt84zD/
xXGdvRiN+a+bxaynBOa/P4ud0whm+S8D4qxNzIh7KXDGUn43j/woCGU1ZDal
UyCdM0c9kPQBRMynVV6z08BCNjx5cb79qf7D9E1M35LXGUcX9a2XfqiHx/Q9
OhsSE8DSlwFc8/32ZPc2WOOtlj20bQQkuCodX31LhXpr5W0bquYg6lfFoFNK
00gm3sH4Jabvuep83nRM3yfWyTVXMH01Fc9pLvYv31S/UyBLXwbstt9x0PUg
FWTiVmmf9xmD9aIP8XgzClTJ8apVGQ5DWN8Fq2JbzD8UPzYszrebp5KHVbD5
tqXA6cEJbL55CWxPXpxvGTTHKVVsvtHX1z12daUJdz7D/h3CJHffoiJEnzfQ
348j9jLeU5f49PG4lBA/YXYSoucRJXV7nB9/iQdbCP+RfYvxHEuwtbix4E7z
/Gp9ZmB2PqUKZbH+cgpcaiktfHe6Dh0grJ+uFaAikq1sLu+6XuTZH3o+eO0A
xHtNnH+E6Vtau7VUDdPXP+NQgROm745dJ+4t6tsnN7qw51/03XTNhju7tpJh
36wAAm2sFNA/+Qef86rXxZ/f4n3AlP+192TG49Dm3qwSWbDs/hx6GwnyQjXL
5i/t69+gGFKIb/q8bge/Er77zTOIJU/Xdh4fB49kmW8CwyjgscXb1DexFazs
gnS3GY+j3FAL6xyX1zA0MKK/f3UD6EhaEjK6AYy/U+/cV0sGxej6w7SWZpY/
0GEldci8gIMCesePpHoYTqLOjrmf1srWwgV8RBpRcAZ1cZRU4Hyn0KF2r7/9
gc8nD1Sx/lUPFEtyw/o3wkO68THWv+IdzWfVWP7AwMvV4q+MF6VCKsHySPfk
XVBwDRCfdhRQH8yrzsklDqK22Zd9FQljULvGQGnxfnZ5MMDuKjbffPzOGMVi
862UeGth8f84zJPbjnU/Y8QuscYjbl3v0fBexzQXnREQ+jQ5KdJLge+vbXee
aZ0DDYJcnmwVDQQ2z0is1aOB9zyKsjQox/6b2VXtNQtBQyhgY5FWB7pytrjx
0cUmlr50uIOEx+o3UCClwz/QLM4eKeSbulUK9kD1mx9Xi7cNo7KkU04RWXno
L34kkLQ=
          "], 
         "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 
          0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1}, 
         "rho" -> -0.9715475291013718|>, <|"supportVectors" -> CompressedData["
1:eJztWAs0lGkYFuLYrSGVnVzSNLXJ9SjKCt8ooVRuKRHJnTBdEMlZbHRbpVym
6OYuoXJp09IbkxiXYkSTGswwSa1bk2Rj29/umfacmeao7ezu2XM85/znP/N9
7/e+7/ee53/ebz6CK9nGQ1RERASHPerYYyGXa/YkkQVuTTR6QWQhomxdIRLv
1oSSRF8Sl2q0wBHm1dbI8W4Q+Z/CpL2eQkxNQ5+7jk3nSBOn3xO6jnwhu8U4
mgWSilSDB0n90MiJSR4RZ8NYcobt9tp34OosIa+WzUISaTdc0nb3IHGyzb7t
8nQU4ntS1Dl6GK0a08Yzdt6F6WM+Tumjj6HY79I9PZG6D/EirB2ywiiVQuPz
z9dWk7PreioQv59/G9VPVLXd01u/OP7wZQNzhdwnsPmg8cXrh6aRYtXoaUqH
cSQ1ww3a4npcdHD9GF2xuB7VD2Wrl3XSoYpcRjccZQM1lcLZ01YMjvLldndi
WOiBVacqiV4llL8uYs157ptvIN77S/Pm9yPML2+8y8yA0RJQIDS+c9hNeyWR
wEnz+9R98ObHzAlW+BYmsB1y6Lsya9Dmu5yuFYuYEKz82lzDtQd9RUrUwtu3
o/AYhf1MTB+KlvhVZWH60KATuC8B0wfpud++Wojpg+d5Q5foKX0QQOZyUv+t
fSw4asuWMX0/CI4E0lWmDwtcunI7/LJfAFHOx2bozCBcb/I2uYnxd35RkMQE
f+OomVqBGH9jlFdaA8bf+CSpOiOMv/GFlYrtZWWoYmB3iBqhDslf2imVRSsS
Gp9/3iCd8DgHV4R4fibbX9TiEysj9T7/e+Dlx/udXMH2yBQPE/Dzd/3z0Ddg
ekU6rgFM5icW6kq/gbRQ6kzL1k4YKBnam8HtQaqzj4bErXmFUmJ8H9iV16DQ
4ZkHqSu7IEJ/mbmNTSNMK8WnELM4yLfvMaHduneKv3x4vyX/4bzV4iS/xgDP
41kVSKJ2LSWDxgCPWk3u9IBmdOrGWWIRcEH/nvHtooYWGCRpGFo9OgW4o+5l
s7c1A/3y8Jvlgf1g0axPShJl/2f96EvxT9U30DtJg+nPhlkOsXMdh6vB61iY
c/CcTlA+9SY99UojBIXbSOK2D4F6oofdU0x/w6qv4S5i+nvXJaXmNKa/Jjph
Josw/ZUeeeYVNaW/AtB319rot5EN6glfm4WHDsIc5Z9UVLaxoEoTZ1Rl3QdH
ug/tuOXKgmid3+pLMP3N3pPStwrTX8Vir6JdmP4Gy6qmTJwfUjmeIwYfOT+s
25osuUXqmkB8hlJhwIHSUsQ/b2lhSqR0FQi15x9POBfzvZJoIeK3oyxe1+lz
+6/xaEelhqwcwTx4cHXMGA/gBE3qXxiE5adbuWLBswoWHG8uL3m9txZt8J7z
libLRoWuGnm42V0o6Nnh8GiZHkgMfhU+cT4rpy0sN8LqG5G6qdgLq6+W3q6r
E/Xt1hwYN/xIff/sX1SBuJmR3pzBchDof7z+Jsx+sn0KsxMzk1JYdaL4k/nZ
+8sJ0MbXfLI9L25EvU5MiUrjh3Vas3RVOl62Qjz9La3NeQjIKerToo6wgKwY
Yn/gzEPY4fbDuiV2QyjvsKNLru8L6O3ptzCdUQ/mi528UzsA7OaR2lbT6KAT
V2fFaW6a0gc+SLJ7HYrFWLDe2fY82ZqL2hjvvpPRoMEhldgLFLlRxBT7uZJ4
YARtehT8hz5Ih+aDAcZfUtSCs/4Yf2PJS+/fxvhLYDTtN5rSBwG7vLWzqInK
bDjv7WTbwS2AZX6RhLeesqTn+dW5eZTnqOXXp92VSYNAm2mpO3H/8OPzSLdk
rL+Ffh9oM3H/UE7JGSdO3D8ESblN/b8QhN6C+7b+zGHUZ+x5wde8H/Dvudz5
XSxQu6TqM/rwHazx1szXqOKArMLoIpn1HAgZQyedLCvgcpKogbtJCazBR35T
upaBTu+/db/sWONUfflwBSkN1s1lwTlGRNS2BHe07Jq9P1WuE6pfLp9BaOlD
d87u8YrNzEe/A8zZkvI=
          "], 
         "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 
          0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1}, 
         "rho" -> -1.0018999367952348`|>}, 
      "ProbabilityCoefficients" -> {{-0.9797911643981934, 
       1.0801280736923218`}, {-1.3538047075271606`, 
       1.2609869241714478`}, {-0.8536525368690491, 
       0.931086540222168}, {-0.30830883979797363`, 
       0.31410613656044006`}, {-0.4535382091999054, 
       0.1301151067018509}, {-0.06263274699449539, -0.20916442573070526`}, \
{-0.6845471262931824, -0.7615318298339844}, {-0.4226028025150299, \
-0.4182533025741577}, {-0.975571870803833, -1.0292452573776245`}, \
{-0.5281072854995728, -0.6409253478050232}}, "MulticlassStrategy" -> 
      "OneVersusOne", "Processor" -> 
      MachineLearning`MLProcessor[
       "FirstValues", <|"Info" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
            "], "Type" -> "NumericalVector"|>, "Key" -> "(f2f6(f1f3f4f5f7))", 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
      "SupportVectorMachine", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "KernelType" -> <|
         "Value" -> "RadialBasisFunction", "Options" -> <||>|>, 
        "GammaScalingParameter" -> <|
         "Value" -> 0.019341626266517566`, "Options" -> <||>|>, 
        "SoftMarginParameter" -> <|"Value" -> 0.1, "Options" -> <||>|>, 
        "PolynomialDegree" -> <|"Value" -> 3, "Options" -> <||>|>, 
        "BiasParameter" -> <|"Value" -> 1, "Options" -> <||>|>, 
        "MulticlassStrategy" -> <|
         "Value" -> "OneVersusOne", "Options" -> <||>|>, 
        "Shrinking" -> <|"Value" -> True, "Options" -> <||>|>, 
        "KernelCacheSize" -> <|"Value" -> 100, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.143151`5.6073393796849915, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[1.5035804527786982`, 0.2392399774305571], "Accuracy" -> 
         Around[0.3263837789328387, 0.16923331038145822`], "EvaluationTime" -> 
         0.00026540478036899795`, "TestSize" -> 15, "ModelMemory" -> 97808, 
         "ModelUtility" -> -1.1323879183021348`, "TrainingSize" -> 60, 
         "TrainingTime" -> 0.1, "TrainingMemory" -> 277176, "ExperimentCount" -> 
         1, "MeanCrossEntropyHistory" -> {
           Around[1.5035804527786982`, 0.1691682103720635]}, 
         "AccuracyHistory" -> {
           Around[0.3263837789328387, 0.11966602137337685`]}, 
         "Configuration" -> {
          "SupportVectorMachine", "KernelType" -> "RadialBasisFunction", 
           "GammaScalingParameter" -> 0.019341626266517566`, 
           "SoftMarginParameter" -> 0.1, "PolynomialDegree" -> 3, 
           "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
           "Shrinking" -> True, "KernelCacheSize" -> 100}|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.0005165375833104807|>, 
             "SoftMarginParameter" -> <|"Value" -> 3|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5550239769505245`, 0.08111771388961818], "Accuracy" -> 
              Around[0.33669909792311253`, 0.08267554904537108], 
              "EvaluationTime" -> 0.0000612472570082303, "TestSize" -> 65, 
              "ModelMemory" -> 36000, "ModelUtility" -> -1.1450671396721104`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.12589254117941673`, 
              "TrainingMemory" -> 257296, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5550239769505245`, 0.0573588855656992]}, 
              "AccuracyHistory" -> {
                Around[0.33669909792311253`, 0.05846044136830288]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0000612472570082303, "MeanCrossEntropy" -> 
             Around[1.5550239769505245`, 0.08111771388961818], "ModelMemory" -> 
             36000, "TrainingMemory" -> 257296, "TrainingTime" -> 
             0.22031194706397927`|>, "Index" -> 1|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.019341626266517566`|>, 
             "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5551339334835188`, 0.08118448996278234], "Accuracy" -> 
              Around[0.33669909792311253`, 0.08267554904537108], 
              "EvaluationTime" -> 0.0000612472570082303, "TestSize" -> 65, 
              "ModelMemory" -> 36000, "ModelUtility" -> -1.1451456167468996`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 136976, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5551339334835188`, 0.05740610337985459]}, 
              "AccuracyHistory" -> {
                Around[0.33669909792311253`, 0.05846044136830288]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.5035804527786982`, 0.2392399774305571], "Accuracy" -> 
              Around[0.3263837789328387, 0.16923331038145822`], 
              "EvaluationTime" -> 0.00026540478036899795`, "TestSize" -> 15, 
              "ModelMemory" -> 97808, "ModelUtility" -> -1.1323879183021348`, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.1, "TrainingMemory" -> 
              277176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.5035804527786982`, 0.1691682103720635]}, 
              "AccuracyHistory" -> {
                Around[0.3263837789328387, 0.11966602137337685`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00026540478036899795`, "MeanCrossEntropy" -> 
             Around[1.5035804527786982`, 0.2392399774305571], "ModelMemory" -> 
             97808, "TrainingMemory" -> 277176, "TrainingTime" -> 
             0.1380957344480193|>, "Index" -> 2|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.02944636013215842|>, 
             "SoftMarginParameter" -> <|"Value" -> 1.|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           3|>, <|"Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.005495411267805034|>, 
             "SoftMarginParameter" -> <|"Value" -> 1.|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5585043789614814`, 0.0852749240421492], "Accuracy" -> 
              Around[0.33669909792311253`, 0.08267554904537108], 
              "EvaluationTime" -> 0.0000612472570082303, "TestSize" -> 65, 
              "ModelMemory" -> 36000, "ModelUtility" -> -1.1478075981111777`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 134632, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5585043789614814`, 0.060298477055371454`]}, 
              "AccuracyHistory" -> {
                Around[0.33669909792311253`, 0.05846044136830288]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.50548017170429, 0.23825236345548176`], "Accuracy" -> 
              Around[0.3263837789328387, 0.16923331038145822`], 
              "EvaluationTime" -> 0.00026540478036899795`, "TestSize" -> 15, 
              "ModelMemory" -> 100448, "ModelUtility" -> -1.1334851114264946`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 410104, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.50548017170429, 0.16846986183309312`]}, 
              "AccuracyHistory" -> {
                Around[0.3263837789328387, 0.11966602137337685`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00026540478036899795`, "MeanCrossEntropy" -> 
             Around[1.50548017170429, 0.23825236345548176`], "ModelMemory" -> 
             100448, "TrainingMemory" -> 410104, "TrainingTime" -> 
             0.30026655896064774`|>, "Index" -> 4|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.0062779718037132975`|>,
              "SoftMarginParameter" -> <|"Value" -> 3|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           5|>, <|"Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.030229737421387598`|>, 
             "SoftMarginParameter" -> <|"Value" -> 3|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.7695113103252196`, 0.16825224324634366`], "Accuracy" -> 
              Around[0.3670021282261428, 0.08432109421286127], 
              "EvaluationTime" -> 0.0000612472570082303, "TestSize" -> 65, 
              "ModelMemory" -> 39072, "ModelUtility" -> -1.2827396093069883`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 137608, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.7695113103252196`, 0.11897230214933809`]}, 
              "AccuracyHistory" -> {
                Around[0.3670021282261428, 0.05962401751498395]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0000612472570082303, "MeanCrossEntropy" -> 
             Around[1.7695113103252196`, 0.16825224324634366`], "ModelMemory" -> 
             39072, "TrainingMemory" -> 137608, "TrainingTime" -> 
             0.11041753528403378`|>, "Index" -> 6|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.022564232253405286`|>, 
             "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           7|>, <|"Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.00977195179401915|>, 
             "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           8|>, <|"Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.015047857556471422`|>, 
             "SoftMarginParameter" -> <|"Value" -> 1.|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           9|>, <|"Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.017686442147964332`|>, 
             "SoftMarginParameter" -> <|"Value" -> 3|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           10|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["SupportVectorMachine"]], 
           
           TypeSystem`Struct[{
            "KernelType", "GammaScalingParameter", "SoftMarginParameter", 
             "PolynomialDegree", "BiasParameter", "MulticlassStrategy", 
             "Shrinking", "KernelCacheSize"}, {
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[
                TypeSystem`Enumeration["RadialBasisFunction"]]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Real]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Real]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[TypeSystem`Boolean]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}]}]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 75, 
      "PreprocessorEvaluationTime" -> 2.08203125*^-6, "PreprocessorMemory" -> 
      178720, "InputDimension" -> 44, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.504445381309891, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.879152801780353`16.34131187617507*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.2865537162217762, 
          "ElapsedTimes" -> 0.33017, "ExperimentCounts" -> 4|>, <|
         "TrainingSizes" -> 60, "TimeBudgets" -> 0.4093624517453946, 
          "ElapsedTimes" -> 0.448002, "ExperimentCounts" -> 2|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, "ID" -> 
           3795572968267006573|>, 
         "f2" -> <|
          "Type" -> "Nominal", "Weight" -> 1, 
           "Values" -> {"Information Technology"}, "ID" -> 
           3401139331922032727|>, 
         "f3" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369}, "ID" -> 
           4714656301856831657|>, 
         "f4" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {23.778}, "ID" -> 
           4624390425862832796|>, 
         "f5" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {100.249}, "ID" -> 
           8583462845398299564|>, 
         "f6" -> <|
          "Type" -> "Text", "Weight" -> 1, "Values" -> {"Estimated data"}, 
           "ID" -> 3095956687388126824|>, 
         "f7" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {256.9105}, "ID" -> 
           1111199487588034056|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 0.954407, 
      "MaxTrainingMemory" -> 1047280, "DataMemory" -> 118040, 
      "FunctionMemory" -> 414464, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 12, 4, 14, 26, 41.794803`8.373697260499904}, 
        "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, "ProcessorType" -> 
      "ARM64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, {3.8788071459712963`*^9, 
   3.878807157009053*^9}, 3.878811636198832*^9, 3.8791492018173523`*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"1a6e8c8f-23d6-40e3-8316-87a094a0b09b"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Data type"], 
                   TextCell["Data type"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{
                   InterpretationBox[
                    Cell["Mixed"], 
                    TextCell["Mixed"]], 
                   StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]},
                  "RowDefault"],
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                  Short[#, 10]& ]],
                Annotation[#, 
                 
                 Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                   "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classes"], 
                   TextCell["Classes"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 InterpretationBox[
                  Cell["A"], 
                  TextCell["A"]], 
                 InterpretationBox[
                  Cell["B"], 
                  TextCell["B"]], 
                 InterpretationBox[
                  Cell["C"], 
                  TextCell["C"]], 
                 InterpretationBox[
                  Cell["D"], 
                  TextCell["D"]], 
                 InterpretationBox[
                  Cell["E"], 
                  TextCell["E"]]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"33.", "17."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    32.6383778932838737319`3., 16.9233310381458217364`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Method"], 
                   TextCell["Method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 
                 InterpretationBox[Cell[
                  "SupportVectorMachine",ExpressionUUID->
                   "ef9670f0-eb4a-438f-a856-272791a6b1c6"],
                  TextCell["SupportVectorMachine"]],
                 StyleBox[
                  TagBox[
                   
                   GridBox[{{"\"KernelType\"", "\"RadialBasisFunction\""}, {
                    "\"GammaScalingParameter\"", "0.019341626266517566`"}, {
                    "\"SoftMarginParameter\"", "0.1`"}, {
                    "\"PolynomialDegree\"", "3"}, {
                    "\"BiasParameter\"", "1"}, {
                    "\"MulticlassStrategy\"", "\"OneVersusOne\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                  "Verdana", StripOnInput -> False]],
                Annotation[#, 
                 Style[
                  
                  Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.019341626266517566`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {
                    "MulticlassStrategy", "OneVersusOne"}}, Alignment -> Left,
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                   Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                 "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"4.94`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"16.9`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                   Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"1.5035804527786982288`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.2392399774305571103`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "1.0251004979175839527`3.", "\", \"", 
                   "1.9820604076398125049`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 1.0251004979175839527`3., 
                   ", ", 1.9820604076398125049`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Model memory"], 
                   TextCell["Model memory"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"418.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training examples used"], 
                   TextCell["Training examples used"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               TemplateBox[{"75", "\"examples\"", "examples", "\"Examples\""},
                
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training time"], 
                   TextCell["Training time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               TemplateBox[{
                "954.`", "\"ms\"", "milliseconds", "\"Milliseconds\""},
                "Quantity"]},
              {
               ItemBox[
                
                DynamicModuleBox[{
                 MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                 DynamicBox[ToBoxes[
                   Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.44149096477310934`}, {
                    4.0943445622221, 0.4078492323431861}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.44149096477310934`}}, {{4.0943445622221, 
                    0.4078492323431861}}}]}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.38791619816351264`}, {
                    2.302585092994046, 0.49234084252328775`}, {
                    2.302585092994046, 0.49234084252328775`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, 0.23455062286119566`}, {
                    4.0943445622221, 0.5555047378280012}, {4.0943445622221, 
                    0.5555047378280012}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-2.178060225738475, 0.40521657586270926`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-2.178060225738475, 4.31748811353631}, {
                    0.40521657586270926`, 0.44149096477310934`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.33669909792311253`}, {
                    4.0943445622221, 0.3263837789328387}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.33669909792311253`}}, {{4.0943445622221, 
                    0.3263837789328387}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-2.178060225738475, 0.2909302936135151}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-2.178060225738475, 4.31748811353631}, {
                    0.2909302936135151, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.44149096477310934`}, {
                    2.302585092994046, 0.44149096477310934`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0005165375833104807}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.4415616727797165}, {
                    4.0943445622221, 0.4078492323431861}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.019341626266517566`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.44372662994955986`}, {
                    4.0943445622221, 0.40911189828120836`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.005495411267805034}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.5707034126028006}, {
                    2.302585092994046, 0.5707034126028006}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.030229737421387598`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.44149096477310934`}}, {{
                    2.302585092994046, 0.44149096477310934`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0005165375833104807}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.4415616727797165}}, {{
                    4.0943445622221, 0.4078492323431861}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.019341626266517566`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.44372662994955986`}}, {{
                    4.0943445622221, 0.40911189828120836`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.005495411267805034}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.5707034126028006}}, {{
                    2.302585092994046, 0.5707034126028006}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.030229737421387598`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-2.178060225738475, 0.39510496853553506`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-2.178060225738475, 4.31748811353631}, {
                    0.39510496853553506`, 0.5707034126028006}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, -1], 
                    Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, 
                    Plus[1]], Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                  ImageSizeCache->{330., {120., 126.}}],
                 DynamicModuleValues:>{}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> 
           ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  MachineLearning`MLInformationObject[
   ClassifierFunction[<|
    "ExampleNumber" -> 75, "ClassNumber" -> 5, 
     "Input" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|
           "Elevation" -> <|"Type" -> "Numerical"|>, 
            "GICS Sector Name" -> <|"Type" -> "Nominal"|>, 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Disclosure" -> <|"Type" -> "Text"|>, 
            "Revenue (USD mn)" -> <|"Type" -> "Numerical"|>|>, 
          "Output" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
            "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["FromDataset"], 
               MachineLearning`MLProcessor[
               "FromNamedFeatures", <|
                "FeatureNames" -> {
                  "Elevation", "GICS Sector Name", 
                   "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                   "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                   "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                   "Carbon Disclosure", "Revenue (USD mn)"}|>], 
               MachineLearning`MLProcessor[
               "Transpose", <|"FeatureNumber" -> 7|>], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {
                  "Numerical", "Nominal", "Numerical", "Numerical", 
                   "Numerical", "Text", "Numerical"}, 
                 "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6", "f7"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          False, "Invertibility" -> "Perfect", "StructurePreserving" -> False,
           "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
            "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Output" -> <|"(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["

1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
               "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
            MachineLearning`MLProcessor[
            "SynthesizeMissingValues", <|
             "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Distribution" -> 
              LearnedDistribution[<|
                "ExampleNumber" -> 75, "Preprocessor" -> 
                 MachineLearning`MLProcessor[
                  "ToMLDataset", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>, 
                    "f6" -> <|"Type" -> "Text"|>, 
                    "f7" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                  "Processor" -> 
                 MachineLearning`MLProcessor[
                  "Sequence", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 1621909218748444882|>], 
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>, 
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2074781423290265366|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 20679206186753951|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>, <|"" -> 1|>}, 
                    "MissingCode" -> Indeterminate, "Version" -> {13.1, 0}, 
                    "ID" -> 4023015169247141483, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "LogRescaleNumericalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Indices" -> {2, 4, 5}, 
                    "Centers" -> {0.43, 23.052, 256.593674903342}, 
                    "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
                    620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
                    3527897072513609120, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {146.57391774891778`, 3.693542625490828, 
                    68.22157333333334, 3.504982149660075, 
                    1.4086804722859232`}, 
                    "StandardDeviation" -> {253.37495961794207`, 
                    3.1699732836017724`, 118.62403407631172`, 
                    2.423277341145054, 1.2610287731963699`}, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2274174826257793629|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {11, 1}|>|>, 
                    "Boundaries" -> {{-0.5, -0.40909090909090906`, \
-0.3181818181818182, -0.2272727272727273, -0.13636363636363635`, \
-0.04545454545454547, 0.045454545454545414`, 0.13636363636363635`, 
                    0.2272727272727273, 0.31818181818181823`, 
                    0.40909090909090906`, 0.5}, {-0.5, 0.5}}, 
                    "Version" -> {13.1, 0}, "ID" -> 8505008840132824157, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>, 
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
                    Span[1, 2], 
                    Span[3, 7]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {13.1, 0}, "ID" -> 
                    373596144042670943|>]}, "Invertibility" -> "Approximate", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                 "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                 Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBmQFm/iFib1JlAgAAAAcAAAAHAAAANBt6Fr3csL/lG+Yz4ESRP7hBka92
l6I/3+CsXPnbnb8juBQyj++mPyQSP5BqJYY/vak1fWbb7z9Exb6rXA+mP3bs
bygIL6y/qBWDW9y8oz+sdTB+ZCFvP+M3K7whyrK/oZKNG3/O7792PFDDUfyQ
P9/U3bojxJC/o5bbS9uw5z8WAjGjisXkP97C+Aj2NcU/OamW7DSFoj9l4xTQ
yZiTv+5YNgcGV6G/JjWbdhS247/4DI4+z4GiP+damijBtq0/AUhvWGOt0r+S
UyYwEkrnv7xCV9Xbd5o/7dmZYqsIlL+U6TKOWh/fvyeCdPr2xcm/z+izHsbw
ab/DCMuYpSLrPyWlgzDxQ68/IU0Nlm9mh79gtGMp7lp6v5IjpI1bXuO/gG3Q
78EAir9w8Q54CT+tPz6D4J3Vndm/VLWB566j5T+EcC9VEICzv/LeOJ47T7W/
77C3YnYxuz+XzXfud2fkvwL5lh2DJOg/lXZTGNvFtb8Pcd+T9BKZv2lvrRrr
CbI/A8vXaYtBiL/H/s72
                    "], 
                   "Precisions" -> {0.4602875814560013, 0.9399443097653287, 
                    1.0616808801506838`, 1.6265466434380347`, 
                    4.517522263650691, 10.595148643942485`, 
                    23.23460552022561}, "NoisePrecision" -> None, "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781967`, 0.012269055622142968`, 
                    0.0013959895289638008`, -0.0005267240067510293, \
-0.00032143499611032286`, -0.00013378352049829329`, 0.0005265431937281588}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 6648082896216031031|>], 
                   "PostProcessor" -> 
                   MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7.|>,
                     "Key" -> "((f2f6)(f1f3f4f5f7))", "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                   "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 7, "Options" -> <||>|>|>|>, 
                 "TrainingInformation" -> <|
                  "Configurations" -> 
                   Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                    "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1557841622946289758|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                   Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                 "NaiveImputer" -> 
                 MachineLearning`MLProcessor[
                  "ImputeMissing", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                    "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1557841622946289758|>], "InputDimension" -> 0, 
                 "OutputDimension" -> 7, 
                 "Log" -> <|
                  "Example" -> 
                   MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, 
                    "ID" -> 2988406535272383851|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"Information Technology"}, "ID" -> 
                    8211126643196690843|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369},
                     "ID" -> 220143977676884624|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {23.778}, "ID" -> 8845109505593024510|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {100.249}, "ID" -> 827490798644983815|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 4409963340497863227|>, 
                    "f7" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {256.9105}, "ID" -> 5236914127772614391|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                   "TrainingTime" -> 0.0682, "MaxTrainingMemory" -> 219536, 
                   "DataMemory" -> 22976, "FunctionMemory" -> 86128, 
                   "LanguageVersion" -> {13.1, 0}, "Date" -> 
                   DateObject[{
                    2022, 12, 4, 14, 26, 40.924009`8.364553149753666}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, 
                   "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                 "LogPDFDistribution" -> 
                 MachineLearning`TailedQuantileDistribution[<|
                   "Quantiles" -> {-7.173238193477166, -7.173238193477166, \
-5.957762682813879, -5.505343391085791, -5.137053644875943, \
-4.839361849432994, -4.800994757869588, -4.736339520600383, \
-4.720994010399741, -4.71905825007799, -4.703766525124256}, 
                    "LeftBoundary" -> -5.957762682813879, "LeftScale" -> 
                    0.6077377553316436, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                 Around[36.60573897803041, 1.772055230348638], 
                 "EntropySampleSize" -> 10|>], 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
              "ID" -> 8833432794738512184|>], 
            MachineLearning`MLProcessor[
            "Threads", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>, 
                "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 8812518305512619507|>], 
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 7405342354547017736|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
              "Missing" -> "Allowed"|>], 
            MachineLearning`MLProcessor[
            "LogRescaleNumericalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
              "Indices" -> {2, 4, 5}, 
              "Centers" -> {0.43, 23.052, 256.593674903342}, 
              "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
               620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
              7299988401548215772, 
              "Output" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
            MachineLearning`MLProcessor[
            "Standardize", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
              "Mean" -> {146.57391774891778`, 3.693542625490828, 
               68.22157333333334, 3.504982149660075, 1.4086804722859232`}, 
              "StandardDeviation" -> {253.37495961794207`, 
               3.1699732836017724`, 118.62403407631172`, 2.423277341145054, 
               1.2610287731963699`}, 
              "Output" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 1400194064660864776|>], 
            MachineLearning`MLProcessor[
            "ToLowerCase", <|
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 3080611390123234620, 
              "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
            
            MachineLearning`MLProcessor[
            "RemoveDiacritics", <|
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 8393247813432535084, 
              "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
            
            MachineLearning`MLProcessor[
            "Threads", <|
             "Input" -> <|
               "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
                "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "EmbedNominalVector", <|
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>}, 
                  "Output" -> <|
                   "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>|>, 
                  "EmbeddingVectors" -> CompressedData["
1:eJxTTMoPSmVmYGBgBGIeIGZlwAANaDSyuINV5XF7IP0gJG/3fiC9wNDnNIjf
ICJ2FcR/IHn3Poi/gM/rKZgf6n8QrC7ZZSuIdtjqegMk77C36wKYvzLrFVje
m+cMWP3c+/vBtN3JS2D6yeWLYPkZKy+D+S8/gO0/YOZ2E2wP0+lLIJrBWOIc
WPzO1IcgdQ2LGjeB3TUp+SKYVtMFuy+h+e8TEH0gZu8JsL6j5o/B5gcFgd1z
QGXZU7D77ga+BKv/OBtsr0L9dYg7eOPvguXTp10Gm/vmJDgcFDacBZvv4HF9
Ith+wUiwvgajkndgfdOYHoHDbXHBcxCdECkFdndCbOtXsD9uJB4Bq1v48ybY
HTsegP3PYPvzEVi8+NYWsHv2tz0Em2N16SiY72lzDWzP1gO3wPoMs46A5BW2
L5wMlt+n82o/AO0BofY=
                   "], "Version" -> {13.1, 0}, "ID" -> 436956950344966148|>], 
                
                MachineLearning`MLProcessor[
                "Sequence", <|
                 "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Processors" -> {
                    MachineLearning`MLProcessor[
                    "TextToNominalSequence", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {13.1, 0}, "ID" -> 9037232907786629142, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", <|
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> {-9125122986955958911, \
-8920710729279180450, -8515397617198652367, -8156047279148961366, \
-5900137721653868194, -5516340669880835636, -4691435917638705529, \
-4484112905383790136, -3872414778415116274, -3607098371778122975, \
-3443150737398804539, -3355080348777836050, -2509905740948760720, \
-2159536488856785732, 242552411836269492, 450553210381435687, 
                    539691877398804025, 950421020428451240, 
                    1561895621580759179, 1579009397565082067, 
                    1671416204203290022, 2799484578252825308, 
                    3287432777910049379, 3477167097823690523, 
                    3576478456825362866, 4539722962543247872, 
                    5070765454536077049, 5138905625963890559, 
                    6058376361354581924, 6694985464746702812, 
                    6748311694457965250, 7603334142034012365, 
                    7731804819316663270, 8918825649307280967}, "Values" -> 
                    None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {13.1, 0}|>], 
                    "InverseDocumentFrequency" -> {1.91959284073794, 
                    3.624340932976365, 1.3217558399823195`, 
                    2.0149030205422647`, 2.0149030205422647`, 
                    2.120263536200091, 1.3217558399823195`, 
                    2.9311937524164198`, 1.2729656758128873`, 
                    1.91959284073794, 4.31748811353631, 2.120263536200091, 
                    4.31748811353631, 2.0149030205422647`, 
                    1.4842747694800942`, 2.0149030205422647`, 
                    2.120263536200091, 1.5448993912965292`, 
                    2.0149030205422647`, 1.3730491343698699`, 
                    2.0149030205422647`, 3.624340932976365, 0., 
                    0.11279549414534427`, 2.0149030205422647`, 
                    3.2188758248682006`, 1.4842747694800942`, 
                    2.9311937524164198`, 2.0149030205422647`, 
                    2.0149030205422647`, 0.5332984796180493, 
                    2.120263536200091, 4.31748811353631, 2.0149030205422647`},
                     "Version" -> {13.1, 0}, "ID" -> 7526152790873636702, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                  "Invertibility" -> "Impossible", "StructurePreserving" -> 
                  True, "Missing" -> "Forbidden"|>]}, "Invertibility" -> 
              "Impossible", "StructurePreserving" -> True, "Missing" -> 
              "Forbidden"|>], 
            MachineLearning`MLProcessor[
            "MergeVectors", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
                "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
                Span[1, 5], 
                Span[6, 39], 
                Span[40, 44]}, 
              "Wrappers" -> {Identity, SparseArray, Identity}, 
              "Output" -> <|
               "(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
                   "], "Type" -> "NumericalVector"|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 613954820935696947|>]}, 
          "Invertibility" -> "Impossible", "StructurePreserving" -> True, 
          "Missing" -> "Imputed"|>]|>, 
     "Output" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "ToVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 9119616879012754245|>], 
            MachineLearning`MLProcessor[
            "IntegerEncodeNominalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Index" -> {<|
                "A" -> 1, "B" -> 2, "C" -> 3, "D" -> 4, "E" -> 5|>}, 
              "MissingCode" -> 0, "Version" -> {13.1, 0}, "ID" -> 
              1482488055587057283, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
            MachineLearning`MLProcessor[
            "FromVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|
                 "Type" -> "NominalVector", "Weight" -> 1, 
                  "SetSize" -> {5}|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 4789940262906318728|>], 
            MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 5|>,
               "Key" -> "f1", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
       "Name" -> "class", 
       "Marginal" -> <|
        "A" -> 0.08750000000000001, "B" -> 0.2625, "C" -> 0.325, "D" -> 
         0.21250000000000002`, "E" -> 0.1125|>|>, "LabelSplitter" -> 
     MachineLearning`MLProcessor[
      "FeatureLabelSplit", <|
       "Processor" -> 
        MachineLearning`MLProcessor[
         "KeyIndexSplit", <|
          "Index" -> "Ratings", 
           "Order" -> {
            "Elevation", "GICS Sector Name", 
             "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
             "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
             "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
             "Carbon Disclosure", "Revenue (USD mn)", "Ratings"}|>], 
        "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
     "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
     "Prior" -> Automatic, "Utility" -> 
     SparseArray[
      Automatic, {5, 6}, 0., {
       1, {{0, 1, 2, 3, 4, 5}, {{2}, {3}, {4}, {5}, {6}}}, {1., 1., 1., 1., 
        1.}}], "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
     "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
     "Model" -> <|
      "SVMParameters" -> <|
        "KernelType" -> "RadialBasisFunction", "GammaScalingParameter" -> 
         0.019341626266517566`, "SoftMarginParameter" -> 0.1, 
         "PolynomialDegree" -> 3, "BiasParameter" -> 1, "MulticlassStrategy" -> 
         Automatic, "Shrinking" -> True, "KernelCacheSize" -> 100|>, 
       "TrainedModel" -> {<|"supportVectors" -> CompressedData["
1:eJxTTMoPSmViYGDgAmIdIDa6E2XnaXNtf29TWeHOA7f2Lzifu14r64j9Mluv
tNULJ+9vl824tF/n1X6GIQpc7p2ZrrxwkT2p+h5desqvzHoMp77kGtVTj6L5
HN7Mva9+reb4fqG3LjzXih/tV3sZvqgga8n+57xeupLPPu//39KnsefBpf2G
z5WdrH8+2m/2cf3biltb9t/i4viwt+2hvfGN0iazS0dHwxcNTC6sYYqY82D/
2u4PK1jTptpbhCiqciTu27+xoY/5bNrk/Wdi4vTjlF/s978r9mTt2av7X6qw
H8u4PnF/ndAqO6HIy/sF3d3PGJe82/9V/xXPDKZHJLtvsABahe+ffR23hewf
7V8T+dpBc+7W/SqCKzcl9l/fz7ddzeyg9D37az0M/1h2ftyfZrmiZmnBc3uV
Cd0GEVKX7APSv5XFtH61f36rqud+4pH97ltd9Rb9vDmaftHAq4a2Yw8kH+5X
mbXtXsD19/b7cu8oStu9sLfUCGr/1vTO/u1EoYSDn17srzzB+3Zl1qv9vx++
rgviObOf6XDng8X39+9/d5B3qf3JS/s5ND5WPL18cTR80cAym8UqbySu7e/k
PXqwuvq2PasK88drl/btX62fESjQ+9X+3WejvzPFru1fp/Qp3B1Yv/lzNPZu
BtZvEzaGHzQF1m/3pmg9Pgms36J905L3YqnfPva3zTzlvRbD/lNL70/1q99u
D5PPir8u9tv2gL14UFboZ7M1ONWji/d8uDbtR9EGe3R1LB79ud/lNsLFH7vb
3Liat47k8IOZD3MfLnW43Dcx//MUWw9eh7hnj0/w1DI5bN10R+sg84P9PEYH
D24U+Wrv0ndh5c0vR/YzbyuUXAcsf+VXVVf6AMvfWz0tbsLA8re6TavUCFj+
buG6/G/KaPmLAf497QoTu3Vnv/rkoF0+rfftgyx/u3/Yc2Z/IpuWna7Hc/vL
dx2Xfwl8tF/R2JgRVP5uDwy5Hgksfy/tW/U+Flj+CkjLLQOVv+yplaXz8ZS/
CcyX16SEbLOH0aT6A5d5uPjo4rD0i0tdXPWOCFmGEoLuI9YfMPmkZoWra5Wu
758gv7Cz+vB/+6X3PHceLPlp//z6xpehnZ/sbXjLHB2Y9+6v+x8WshpY/t7s
szPwA5a/u0tSuqYDy1938fgUJ2D527K9sOPFaPmLAYy/53MeLL+3/11sH8fV
pYv3BwslRR2Nv7L/BqOYQW3jXfs9xcYR0ZPe7F+gcGcXn9fT/Uvfrbof5X9w
f0H7k5XZLlv38wanWm1xvWF/YD7r2T1dF0bDFw14/2wxU/zzcH/UszdWjU27
9p9s29ewTeT8fqYdex/tk75g/8b6vKtE8+P9AE3kWT0=
           "], 
          "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 
           0.1, -0.1, -0.1, -0.1, -0.1, -0.1}, "rho" -> 
          1.0035914212465287`|>, <|"supportVectors" -> CompressedData["
1:eJztlntM01cUxxsejiCPlW0M52BhbRkYHgNjwfC4zMnqGJnQDKUMRWRAbYbi
FAYTgeEAO96rvBR08ooIyGiGBJicFpEBIqM/oCBQ+gDkIRQKgiOA7vcPW1LS
RP5YsiX9JPefe8899+Sbc7855ifP0EM0CASCLr6s8eUw4u/2qYsQ0hOjzjbw
huDnP8Jr9rBaUbmrZ2jlTQ6kmDIxsJ4Bwv+Ug6NdeaSbxWi792TYhCFJu03l
veBYSqfsSwP32SLxB8LY38Fo7qCe8JwMLKaPFkewSmFS39Nm15MlePlDhuVv
EgzsJ0kHnFdlQFXUzEUP/QpDujoL95KlaO9gZCIVe6DWVwnO2VgNv0IJVKcu
3NIOzUFOX5hTdIKaoTYhQ/NRKAe6Ao7bHSdNwWGR8Xj1o36YJr/WxhzIhjij
225GjF4g0mhde8/LYdluRi9fQ7bt+v4r/Fv6rjdfHjZCMqhiPHW3KqoDMrGC
G5Q5AAb1FlT+7lEkTCO80GpQQOj+W7FlEZOInJX6od87GPIOW4kKSFpGk0Pf
pYmDWoFW52FbvPpY3b9KzCQkt0l2SYF89e6o98A8ag4fMd/tNoX2W9JTVhLl
aC7b6AR/cQpi2vXnKlgzsCZ9GkfX6wKN+2xJiRhAztcvQx0Y6Fgqoid6BWp9
lSh3KSHPmgiBrf+Af+HCMNImayqEWDNU2jF9Xk9fRvIlh40CYyF4HSnccfRe
O9qxkZ9233EMLKyjOb70HujjdAssyidQMdOwT+QzvUVfRWZyQedn1Vve7ywT
53weX482z1mBA8Zrrjz0Np3lu0StUhmvvJ+2IMz985tfkHKc1qHM8OdmtX/v
j9FcBvtP39m2fpv5N+tTFaeqPv/3FOMW5VIg0bK41907wRlRzUOm+5BNgxOD
fmYcVe474En1XwZCesszUY4UVneyIqq/56LTVQxmRrAACYgfHSbZ9EMw30rr
0sa4un+VYH8yUaE4uYIKD5kZHEmZh4etMQ6BkVIQx2Q3YtxFqMglXZt9mQcx
3WysFPfffVSaUwDuv5Qbj7FjuP9eFInqR3H/TbvC6FD771bejf9pz0a/BJqc
W3jf3plFg4JlSqpYhHrymN7WE3LEcvT60cNtBl6wp03r8PlsSDPS1BWfz2qj
FsbO4fPZOOUrMQ+fzy77lbkhfD4b9vVqKfX45x8du/js63zmXZXvK58nLMYv
Cq/UIeU8qojxqXu+aNWw1U8+tg0j2je+sl5Z3PeNW/LjtsSryv+qvJnpwWOb
DALhjSRGD1EC8XJdc37KbZRd02hyQ2MSUZYe0itPjaFT1x3T5671QhuPs/PS
gAC0z1PmdQNFaH3M463g3F7UbhnatNbRpO5fJbrp2YVhvVJIsr0aYlmEoYZk
loPhiRGYaiox467LUEHmE3spdwr+AugJWMY=
           "], 
          "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 
           0.1, -0.1, -0.1, -0.1, -0.1, -0.1}, "rho" -> 
          0.9804292261600496|>, <|"supportVectors" -> CompressedData["
1:eJxTTMoPSmViYGDgAmIdIDa6E2XnaXNtf29TWeHOA7f2Lzifu14r64j9Mluv
tNULJ+9vl824tF/n1X6GIQpc7p2ZrrxwkT2p+h5desqvzHoMp77kGtVTj6L5
HN7Mva9+reb4fqG3LjzXih/tV3sZvqgga8n+57xeupLPPu//39KnsefBpf2G
z5WdrH8+2m/2cf3biltb9t/i4viwt+2hvfGN0iazS0dHwxcNTC6sYYqY82D/
2u4PK1jTptpbhCiqciTu27+xoY/5bNrk/Wdi4vTjlF/s978r9mTt2av7X6qw
H8u4PnF/ndAqO6HIy/sF3d3PGJe82/9V/xXPDKZHJLtvsABahe+ffR23hewf
7V8T+dpBc+7W/SqCKzcl9l/fz7ddzeyg9D37az0M/1h2ftyfZrmiZmnBc3uV
Cd0GEVKX7APSv5XFtH61f36rqud+4pH97ltd9Rb9vDmaftHAq4a2Yw8kH+5X
mbXtXsD19/b7cu8oStu9sLfUCGr/1vTO/u1EoYSDn17srzzB+3Zl1qv9vx++
rgviObOf6XDng8X39+9/d5B3qf3JS/s5ND5WPL18cTR80cAym8UqbySu7e/k
PXqwuvq2PasK88drl/btX62fESjQ+9X+3WejvzPFru0/83G5Dqj8PZq/55It
sPw9vHD600Jg+RsttTf0ALD8PR/wQMsBT/mbwHx5TUrINnsYTao/cJmHi48u
/tjd5sbVvHU47Y+r3hEhy1BC0H3E+gMm/8dDMUDi6t39j6JWXMpeesI+5MjT
x2Yqd/eXyX/x0E16bs/lMFVfIuKefd2T4neLgOWD24ejLyOB5UPC2YUSccDy
4enmyUvuAMuHU9cW71gyWj5ggN1RewSeSH61Xyet3FX164v99NRkxci/HA6/
hSYdXqb13v7wx2f3n+y7sv/p+4iniXtP2HvfqlM5Zv54/7+985eFBl3Yn5bo
uld12VN7npNaQXcDX46GLxr4xJwRG/30wf6H3JJfp2zZbR+67Ourk9vv7G/9
bLC59t1Je1OHTY+1RR/Zz27LOh8KDN/Kr7w1h4Hh22Bl5BEEDF/GnRKzlYHh
m/X2puK90fDFAP/D1l6RdGJxyLmQl9a97KA92ynX6UtO3tifekrvM2veZfuJ
22Yqb97/eb/VMcd9m4Htsw8OurYBwPYZX2fKHmFg++zSyq/fQO0z78tWDtNG
22cYoCRjmu7d3Ef7BaN6RaO/Ht+f3lUdVybyYL/8xG+LF66+sL+0NoidL+bj
fgBxEy9j
           "], 
          "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 
           0.1, -0.1, -0.1, -0.1, -0.1, -0.1}, "rho" -> 
          1.0037317156791687`|>, <|"supportVectors" -> CompressedData["
1:eJxTTMoPSmViYGDgAmIdIDa6E2XnaXNtf29TWeHOA7f2Lzifu14r64j9Mluv
tNULJ+9vl824tF/n1X6GIQpc7p2ZrrxwkT2p+h5desqvzHoMp77kGtVTj6L5
HN7Mva9+reb4fqG3LjzXih/tV3sZvqgga8n+57xeupLPPu//39KnsefBpf2G
z5WdrH8+2m/2cf3biltb9t/i4viwt+2hvfGN0iazS0dHwxcNTC6sYYqY82D/
2u4PK1jTptpbhCiqciTu27+xoY/5bNrk/Wdi4vTjlF/s978r9mTt2av7X6qw
H8u4PnF/ndAqO6HIy/sF3d3PGJe82/9V/xXPDKZHJLtvsABahe+ffR23hewf
7V8T+dpBc+7W/SqCKzcl9l/fz7ddzeyg9D37az0M/1h2ftyfZrmiZmnBc3uV
Cd0GEVKX7APSv5XFtH61f36rqud+4pH97ltd9Rb9vDmaftHAq4a2Yw8kH+5X
mbXtXsD19/b7cu8oStu9sLfUCGr/1vTO/u1EoYSDn17srzzB+3Zl1qv9vx++
rgviObOf6XDng8X39+9/d5B3qf3JS/s5ND5WPL18cTR80cAym8UqbySu7e/k
PXqwuvq2PasK88drl/btX62fESjQ+9X+3WejvzPFru3XmZoaemfqw/3Vxzfw
zW/cZH8kYfaJSckX7V1Mql1UdK/u5//+LL3p75PR8EUDVin6vjm+j/brTOF2
r638sF9EfruGRuTD/Uf1+OyOBr7d3/GkJX5X0sP9rSb/zmwF1m/LC2e/BdVv
MlvSN2cD67cyIa3ZB4D128Knad9tsNRvnuGz2MM4N2DYf0N2U17Vzp326PL+
3m7K0x+vw6keXXzKnLZ6WaZN9ujqpqt6PsjchxBvjZY9u2wFpjtgICl6yd+8
p6UEzccFcLnP9JCZwrODD/d3X9679UvRKXufDJEfJ4Ue2W9K0l3DJ/zYvvRZ
e22rwPP9a9qjE1YBy4eXz995uwHLBw/V2IyFwPIhVNLhlhOwfDCZcDpgtHzA
BOyPXkZtYX643ysueG5+4Gf7Wzd+WwrontzfotE7b7rYT/u7zLsPKVd9tz/J
6296G1g+9LxoTJ4FLB8q60uCJgPLh73TV/xVBpYPHaWcya2j5QMGsFA4F5x7
96v9W8e0eVke7/ZL/P/8We7xw/3aC7Qyf175vd85Q2+t7tGn+4Wkf6oIeD3d
X/HHvj/W/+D+ldOYbFJctu53lmgU3+l6w35S+a5ze7oujIYvGlhtL/vhtOjD
/XNuNDRFTkmxN9oQkXtY7MH+46+NeRSvvrU/MLMwvXfpWnsAeqcqJw==
           "], 
          "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 
           0.1, -0.1, -0.1, -0.1, -0.1, -0.1}, "rho" -> 
          0.9888952150940895|>, <|"supportVectors" -> CompressedData["
1:eJztWms0Vesalko7uVQ7l12Sy1aS7I1QyKd2C6kohdxSKJJbRZEjVJSORFaR
SCWKXEKS64uQW6XFynVhuYXjstxFceb8sfY+Z62zdnXO2WOfMc56xlhjjfl9
7/zmN9/xjud53jmnuJWzwVFODg4OUewni/3K+cQmnreRIMy47cetH9sh6o6K
mnXjMyDryRDAn4pIbUMCW0glwMGAncYRi4wWP0WM4/Wr05zOZWUhxnn9XVqS
YR3JLOMZx4mR/t6rOdMQY1yY1M624/m/jfuZrX4d95h5H3RYmT387NTl9sX1
WYHV/qRD88Ucv6+HUzfEhLWIfaC84KUgUHyQ1OzbQIfDFFCVWaIrZTEGxc88
vZtuUuGc3IaBp75pKHovV/FN63fIYg8tUGYjGaT9ArIufu6EJsPdRQ8JBb9e
x8JrzCHc7jnL/THO+4x4j7wnZiDGdVjBY1/G5Mh65vuq+EXOdpl89hfPpyM4
TUKwKPw8Uzyr9b8WfOYzlx5Ta6HWujyybAcNPNa9jg7UboCH5oK0JVw04JH+
HF28iAx6c66hLVh+rx0pF4jG8qt39qViMJbf2ybCCM/v2JkqBTy//+4+/mzs
aKkKk7z/4Jvz2E7q4pdcWMryvBJCXKaraT1cjlmQdmv1IFw8oB3cL9cOOYLy
PUcyZ4DcKel8QqgIAmGyPgvjhzKJBl6cHyaXLuo6hvHDSFhIcD7GD4THhEfq
/4If6Dg8vybR5sBzRP//1vtgtR6rY8bxDm31erJTMsvrH/J8cXA1h+sX9/e1
90GfL14el5lr1QZc0i66DSKlqNl+SqOhtgWSUgwminR7kE7XbcpaVRokX7ry
lhhfAyfDYl/RaK9Q9azDZVWtBjTfcE/3XAUJUZbGSCsLv/mP8/Zn4Y+qX6tX
Ksk+BnWQQvPc1CE1jRQDJyskRFyAHO/QWqIwiDY8IFku5q1EyRIjxtrq70H/
O99r6QWNEJxqXKhkX4xaiDId5fdDwWzPMes82T6m+h2+7n+7YlcSMz/Gtt7U
885E9Hl7yzrBma0FSMjA3nBUOZFlPON4IO39ralTv+kWPW6BznXHSdHUX8fp
9fu1eWNcn74/VnGs9hfiPErcqsOreai7o4zHi1MzI61ZpnB+G/AoFBamrhhH
O4Kq4xvGimH+85M/JL8mw5oET4/ddSHQGHhJ63uTGvD0l3FTcB2EZ9w1s0TO
dnb9MmC266qRYGMzrAs1yN7t14oMtsxo03Kr4AiXjMZGnQ+ohrLt0di+dtDt
ofHi/kHYr4j/Dq5vroY7iZi+Xfilbd2PmL6NCO465YvpW2hakUhLbu6v11t5
78jiuPJ0ltenz/tquXf+jVaC1GPEGx7zpSPGdVjhglSQiu9mZh5c2MPr0SDG
XE/fCvr69P196/nc8/56d71vFrJ2W15lpz8Mn6QljM4lU8G/Mu56xokBqNng
NKYfTQVxRcV5sS4fUOa+A3UmK0mIlJ8wZOE3jpauEo1rPVIMi456uEV/bGDr
G0Oc1UUxcpJEHQSvuR/g+XIOxbbszCp0/Yg+1KX2GgaMIHXeM9s05+fB+Tmj
A0/s+6AhSONnPZ4qyHG1uRrWCqAtZGmzvZwElzJPXumpecf2ZwxQnHReXHi2
BQYtgr4jx8bA/uVWpiWWtVA/T/BnL18Kyj2teNDsRj9IH83LeoH5M3eSPx/C
/Fn61hUHnDF/1q3Eu7QA82cHrpbkqP2DPxPd2lqqKlCMvlbf6OP/LX1jjGPU
N/r+6Mf0+v3S+qzA6rpK+/gstERawYyXJ0HraC/wdHacp5lS4NHG00uMEyng
mKA/cPgQh6Zws5c+7h80YpQ9MzD/wPeCEKqI+QeRe5JuZZh/EFLqVwC2f2Ca
R7obNGSaitBy0ZlTPDdmUbNQExXSqPBC1rpG+/goIn560ak3Wg1RD9/MNGP6
lh5ZYxuB6dvyO/t5cH0jD/cmSWD6pkuMmbzwO/3b/yv/Jif6RWVoUiFoatwj
dQUNOC5BekhtG0TKreGq1KSBQmQgvxl/E/IixKplYPwwV+EQhvdvzhNPPjph
/OAqMozw/k33lqKQJrt/Y4ojWQwEde+nQkpl4s8+S0tQlpytg15kEywSLlFP
evIBvdp1YnFCLqB7Ys3ZfLpdEDuY0GqqXwgulzvjT+zIAN79R1WfEepRQfTC
17lXq9n6xoBdHy8pi3+igml3v6rvhWwo98/3eb7iLXC+yGvPX1WN+tXeEoQv
dsBuo0gu47wyxPU5PPClSgeslXUPNTSohtrQN+/WxnWhB3b8tZR9vWz+ZYDp
muHOtXFUkNQOTrurWQFqSFn8aG8t2pi12cTAuRM9Udquq2w6DiutJyi5GD/Y
/xQ5pI7xQ8o2H5HjGD8Q02UzcH4QWvNKeDvGD+znk/8MbqXxVbpjb+Ag/6ZQ
ddoI2AyMaqS7N8IyUsh2W24KpD4WdcpaP4s4rhWNUTB9+7jE3iUJ0zenRBO7
IEzf3i3bpi+J6Zt14foF7OeTzAjQ6ooftppAkTqifEaXh6Cy2EPB0o0KrR4h
2aS0EYi/JXmnfy4MWmxcCHh+5cqnwvHn6z88v9ccguXX/VW3yVosv+5Ly/b4
svPLBBHXE9OCT6lgR62qeBYyBE958/ykp6lw0tpD7ULsCOTPU7kZ2dWCPN4E
kB5i/bGSsvZmc6w/lopuIOH9sReFktmC9ceBRJPyB7/TH/+v4w/Lr/cNmc/k
NshRKyo4m9yP6t+NS/21lYKqw+z2ynYNInuV3VcJGn1wfOmOctz/FpS2FiVg
9ZuhXluK168ENXDveqx+3RLqbPzY9cuEKwXXwif1qWAbU3VawGkQ0olC414r
22G/uYahYNQMfFo3T++uej2aDehdjfvfxvluq3H/m3qG1nEa07dOKZtWvD++
cjBWA7H1jQkrrhMKAoTrgeN7P5PqZW3gPcgtXng5AYWkZAtHc35AUqOVBk+O
dyDzUvfXMRg/eH6GBCOMH2KVbuw9hPGDjAdHFBnjh/u+69Tvs/mBCfqCaxSd
zWLRlus+flb+c6jy04RDwOIpFKTc5RLhMYKms4vel9zpQPzZrhE4/xI6onUO
Yvn9S0r+bXMsv1wTVo4ULL/xdQv7Ytj5ZUKUWP6+Y3sb4MBPr9riSNMo3GdP
zxYjKhI8JVvgUTKGjLU2vMw/04Pko7RO4t8/NCzoWYTzg4RcPZcdxg8lg5Qn
uP8110sRUmL3x0xxb29Um9aZc2j+NJ+oM728BHVXPwrpbXsJ6AhPKUGmF0WY
2toGnxtDx++qXBu4UwOlBaFLLta9g4WuUkPclhT0qYMgYH2rBpVJH8uZKc9h
1y8D3hiERNrWUMFPLuKodBQJZfnbK/AfboaenBjRtE/t6Pb1bnlqWg+8nlpX
8gDjB41FAz/i/iyib5MA7s9+ECjWxf1Zgtm2nLtsfmDCbp+RM6swfYsvTlIL
sBxG3oY881rDR1HIdHhjQcQAkqhIlDt7tR8cuHdy4e/fHGvJ54iYP5PkOnsV
/77E0WzaDX//Zi7m+QvbnzGDeNjIJGwbFVwt5FW55YdAOLbqQXU0FaIXJmhe
SJsAUdMptT7OLiiz2/a4EcuvpJu1aDKWX1UhgalQLL+npfPj8e93xh03vGf3
x8y451g62rSuBpZnPoosdR6EOonNO00pVBDXK5HJI8/ASqPtCx1F2uFusFcZ
/n4oVyf/CP58J92mV8MR0zf5Xd1KhZi+fed/vmA7W9+Y4g567llsqV8LwiPv
+xQ4jWFsdjapTzMPyCc8NonHU2C3d+Y93X2d6O9EeEcW
           "], 
          "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 
           0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 
           0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, \
-0.1, -0.1, -0.1, -0.1, -0.1}, "rho" -> 0.9699922204017639|>, <|
         "supportVectors" -> CompressedData["
1:eJztWWlUU9cWRkAQJUCtxqggIlptEKpSoUXwBCuDoiCTAwFlEFREUAEFERUF
HIqIgqCiRWUSVCyzyLBlNgwFE8KgBJJAwAkIk0NB6c2P6FvJS9UOr++tl2+t
u7LuOefus+/Ozrf3d6Lm7GXlKikhITEDuxZiF0Vh9sscJhViNjDnGrxhw5VY
3WUuj7KAbk40glAWojL7pn5PLQcJAazacEl2vdzPSHC8WSXD80BeHhKctzAz
Vo/pSBO5XnA86nLoYRXJDCS4LmbeKuaOog/jIWSV2qQbwn7w4UxOeOvJ8f2o
fVEQ5d+CyKLZu75shr3nZhOMo56BjnQpHhhH0Lx3dWEejgzQI05aPc9hCMqy
Ag4/Ps+CA1oaPT8HZaC4dTJl510eIoe13DCiJh0WhJzMO/a2Ex7brilJMLr/
fh+HwCGPC9tzRPonOH9k4PBAY1Q2ErQjCv6W2a8GvhZ+r6oftLZ9sfjeR5/n
IyJjDr7kwiGh9aLsfyoU7EeCb7AaoMGFcvnBSi74z6+NCzNpgQR7PHeSDBfk
F7yNK5Olg/mYT2QbFt/TTpSpcVh8zfeXakdg8b24iYB48R3aV7OEF98/6sc/
jZVtNTHq165/dhzZVI6i+vgKkc+VGyXl+tg1w/F46YxolV44ZmMS8UKLDfn4
xU+cckeA3qnutXNaCaQFn6iLSqHBnpjESi63EtW/8ziuZ9yCpGzXdo1VURFD
KX6BDuGXP/w9/9P4u+LrXKmbdsSqCe5wA77tmPcr0g57VTVHeTfQUzzay5f0
Io3r1C1yuGqUNmdgg4l+I1hMCDqdef8RRKRvKF7qXobaoogdlGuRQF7r5lK4
8JlQ/vafCb1YZXZb+Peb2H7e/HAu4s+7b2nCjxjcR9Os3G0HdW6JXC84HsZt
jH699wOv8tdJm57Z9WpW+vvxDhP9ZrqnMK9/DHz7fP9ErRPl31mvwSgDUxxp
c1fHA/lASVJ2RiuxWIoJ8kuKi9OnDKOV4fUpLUNlIJWzZ3paLR1UUwP81zSd
hUdhwcZfbqJBQCjRd4lPL2RNpL2LkmSL81cA7zin1uMftcL8SKt7a0LakdX3
IybcghpwkiEu1zTtRjSGYfKQJRtWP+HiePWNEFKiGMvjXx/bVVEY/x79gTl/
Lsa/A3izvUEY/0ZmlCi3FRS832/GVSe5JEqmyP3580HGfp3PueVIP16t5YZC
JhK0IwpH54XrBn0nXD/HP8H5t8wWzqfPBd8+37/PfX7iuB9/+jooD7n4Tq7Z
btEPowvmrD+QxoLQ6qQz2Tt7gKbhOWQRxwI1be1xibu7Ua6lTdOmGVRELUrt
cwgZRkozZyW1O5WBrKu/b9ybFpH1zVGKdmurTQ7if/65t/5gT9S94DifH0St
2xxwd6OKhM9H/fvU9+DPOx+bTb89pwkiVK+dDCgdQ4ltq/KKfd6g7qb0p7Yn
B5A+bp8hSaoQDo2tt7np/gxawpcvMpevgXyfradi2gFMpm3ZuoJCheDcPSee
0B6K+wcBaL/ykive3wa9DuET6InxYD3Z2a58SwM0j8MvCgxioAJv7Y3kcy9g
gWth3l1MX/hRQxUQpi8yDabYeGH6omspTuk+pi9sTpXnL/sXfTHLoL1Cb2oZ
+tT6xh//q+qb4DrB+sb3j3/Pz9+P2RcFUfsutVRwMFZuBzJOPtXY9SnId3Yc
4toxIFnTe9KGWwzYlWrR47hZgnQl4ZeRVox/My/Ttl3C+HdyrLU8j3/p/U9v
z8H4d3VU/Kujv9P//r/yQ9qtkCvZJBaEvx72T5/CBYlgyDzbwITLWqoy1SQu
LLkcpkhWfIwCjRKXZWP5O1blEcPTx14vb77xxPLXR7kfFWH5uzpaexrp3+jj
z/XrU/G/El+qQ094lzUL7lTfWnREqRzlaW3zML/8GGQJ5fq3b3ajSrOdcqkF
gK7Obr2nsJoDib2p7XYWxbD7eGfKzpXZgLN21csyakb348bXFpyqF/OvAMze
BOuojbLAruuFXtDRe0AJLTqSM6UOJO8Wsotm1qMXy+qMCMc6wAyfasLrz1we
UqhpGD/EbNCRiMT4IVryufrXGD+cYNxpDBLrYyF4/ZRMNwxhgaxyqX5ddC/U
c0IvvZJmw+ilBGv7qhFw3iwzQyOZhXBvui6kY/qiksta64Xpi4RbgRoKmL6Y
0OWduwjTFxdfH/g1WqwvhOBX6KjYyGEBFLquYermA+lc7FcTbzDBUrY+9Ru5
BlA1bGqsPNED95TyEnj1jWDm7JuO5W/k1ki3cCx/28jP9b/C8vcG07tCXN+E
113V1qI6pLbDCVxGhU5YH7jdXeVvHcSCOj/3F7uPDcD9A6/j2O+YUC6d5TAc
S4Nxy4+TDzY9BJU6JSelLQzURqc77IimoZKDyiv6KPlifhDA4kUmBW2nWYB/
m9NC6KlHb49V9MQ2tELKhUObOs/SkKtz1raFqlIkmes5jtcx/SbtZeVtj+k3
P/czkpsx/bZsdDGhGdNv40d3OMRj+i3L42rFdxLVH85zLe2SAmJKRO4vOF9V
6ZVc3V2MBO38p1H5mLh4a3zjn95/OEXfdGbqY7A5aBiXHjyOdFqDel3luAJJ
w2DNYunvBtHB1aNU5awaVNOfvLAA68/KvQqovP6s9FoMZw/Wn5FnFNry9EXd
OiZR3J8Jrxs1VVtHoDOAbXeDujPxAbIp43TozGXAPtUhU03nbjSRdP4bwsY2
FBg6cz+Dpy/me5QnYfxb+62PN09fKE79aoCnL9yuGDiGiPsHISRqk3rvebPg
pDVbyXiMC2Q10h3GDhY4dqS2eyQ/A3X8Dqv+C1xIf7h9JU8fz8r0leHlb0Rp
4jc+WP6Gqupa8v5/i4yWq16O5S//3Ku4b7efhlo1+tTzM/79X3V+9jHw/ePf
XypmuyZKBwjZ+aP2+ejpM76pGFELK2edz1iq+BKu+5fiLBqZ0JfdvzdhsBsR
vzzpF/HDAOo3xO/lnf+urdExxWH9GZHcr6qE9WffS5IUeOe/nGVX7S+I+zMh
5Ohc/VnWngWHC2qKDlKaIUQTP1wdyISs1Fwt3fNu8K3iQvPXuA441Ondy6tv
xtzyp7zzScfaawRefeNkRia0YvWtqjH+bsLvnE/+t+Pvim++XYFS5/RhlDZT
/dSBX4dQjKuL2qa3E0gjk8+VJhH7UGl/V3tnUQNw+jZynAofILNHh+ZW6HbA
u8K4JFurenBzMiqcl8RB8hSiFcPyqTi+AhiQ2u5A5jCBNWn6cFRWPrJNGn5G
yW2FkMFFmYG9FLSUlNGhMZWNYkPd62yx+PoP4w6WYvE9orfE1AqL77g8Qqw6
Fl/3nha1NnF8hTC2/nbD9BXSJI96T7cfk4qRTJVRTALGE65VWoPjPWnobM5F
9UwYBL0Kw6JMjH+5JE2DdRj/KpzcWsD7/42aMvxSG+NfM5oeSayPheGzPVqT
sYsNX9idnkoeroRtpwI275vCBNWzL+Ov3awH30ArWQX7fvgNvFvl4Q==
           "], 
          "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 
           0.1, 0.1, 0.1, 0.1, 0.1, 
           0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, \
-0.1, -0.1, -0.1}, "rho" -> -0.9534499391913414|>, <|
         "supportVectors" -> CompressedData["
1:eJztV3s0lGkYF9s6NoOssKFcalOhLbSt26vNJWysW4VD7uRaLXI5NkPoRjaX
WalkW5JQ65LIeAqTBt1GMuQ2zLhsaFDLbFn7ze6Zds9M31Fn/9pzPOd8Z873
vr/3eZ73mef8nt+n4hlq5yMsJCQkgT0a2GM9H5bem8mAFA/qilxiGbI+3KCd
5vUYZTvJow2a7fAyonVLwhwThP6nZtLbSlLL+wl96LkBGktSbeld3HMU04Kq
MGc6JF/6qCxLaQISHMzTxrQG4Jbs5hGPqtfQzlQLDZSrh1MwQ6/up8E91U6C
IWcAZqREWb5dFTBF+iGtLomBTAtNLxvQKLj1dRdpK/Z2uIF4vx96Dzx/eO/8
64PmBvT2kFLc+G4xN/cqCYUtmN/73oO33yhdUFXr2Q8fqx+w7FS8i7oDZo06
n/RCyTW73+otR9BOVnbP53pssBxhE55h/SufWC+Zw+3fMEeLDKx/43f0r1uD
9e+UrNUhIta/6WX1ir21tW/jrrzoIVZALcfNg7dPNItkPmdTkMEllc5CiXLE
7wfP4temfkncJnjPpSOEqE7lqv/8P/L88/L70POfLDl5YT2xGnmFS7f620zC
G3XV3dGlDEhqKThdGTgObRtDXtrkMkBFW3tJ/oFhVGXr0OG0koZodUUvXBNf
ISmFVQV9Ho0g6hMVnsvpXOxfPpxngnJ7iWoHpK3OOx7TMI/yey2q74Rx0HDH
L6OOx6eQASFiu7EIGdR9yNU3MX6IpCVJIIwfyg1lHEIxfhjSJUjdxvjB4QTl
lv6/+GGVYd9dvRWNaPJ0UnazVYlAHs35fZnWR6oE9uXsAhyntxbj4vnXT7Gf
Zs0euo4WwvHqy58f751X34X84xleXF1bCVczxT5wIYgXmfmMgjhz8Hu2cw9c
1vxu2Z7iHggushl3dxMyjjXN16/E6jvfHETi8m/ob1c5IVh9wxQnEZd/LbO0
5YwX+VcAR3MdTx2yZ8C1luIv4qQoqFrLL8j63DMQlacYlFwdRk1WgWJFtYAu
KnfXSFiyIH+iqM/Z5g4cSGZeCTSpBIK9j16FKR3dzl16v/bEo0X9wGdWnKNb
Vd4wwHloTI8YXwPUpLq4GzIPQfgmeaBO4REa039oKp8wCBqZPo7d2HyLabou
wdVnje45985g881EJ8aEO98kZ4b84hf1mYDpeW/aFbRrADQylpnHRrFBZnWV
uroTAyhaEkYU23E4xjy6r8aTAYk6f7Ry+eHywZxxfYwfFCv8ygMxfoiQ3pDD
5d88lu/Mu/SZxZ6zorvFBPmLrlQWEl1djfj3bazM1EiDpbh4/vWMc0lHlITL
ED+OtNaif3/dP+uJLkr3CwrxedTT5ee5EFb4gv7xDC8/3fqtykN3GHCyjVz5
8lAz+sZfZpYqPYDKPDWLJT4dROFDybGJUsOQGTEVW4vVl0xVJRth9Y3Ls67w
w+q7aVvgNW59mVov5gzfUd+/9VeDQNx8oj+LTQbEr994+gwPv9A98XAi5mIK
+qkV792fo2OpsFn+3nvjeXHjWnWSKtUfvT23abmuet/zp5BOm6V2uU1CaI7G
kvhjDAhVjNwb/eMT2OeVYLHOcRIVJ7u4FwX8CqPDE1Zm4q2wc62rf14fgONn
xl1fU2mgk9byLavt8SI/8JnowKhzhQgDLN3sz4faTqMu+uuvpDSpcFQ95QJJ
loN6RG7Vq0XPIOuOiL/4QTKqBAyw/jWOV84Oxvo3JXT9A65+UKE/Pmy0yA8C
uGLT5Q2ZqwfgvL+rfd90KWwJIqrM+kobj5Q0FRWTRlD7793M+iw2UAk2utzv
t1MjRK+z2HyLOhJml47NNzKpcE4Nm2/HwsW8Ehfnm4BtU35gH9zzCo1v970Q
sHMC5Oenp1cNMmDjxQ37OU9eww5/rRJNCgukFThrpDB9FvkGnXbF9NmVLGED
b0yf7ZAnylVj+uzM4ZoHi/pM0K4iJXbLCgaco8fFO2V4oy3X9wY3yPZD03Nt
cZX2cXQ7+6BfSn4J+hNzMv9n
           "], 
          "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 
           0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1}, 
          "rho" -> -0.976583769917488|>, <|"supportVectors" -> CompressedData["
1:eJztWndUU1keRgRUlOI4ICLCYgCVpqiAK8gNKopgQRSlKl1gKDqAgoJYBhQb
IFVRQaQIVoog9UeRjgqhSUlIAtHREUIxioC6N3+wcw7ZrLpzZvfM2XznvJPz
3r3vvvu+fPne97sv8vZepk78fHx80nhTxdvWPdeE9hbXIKFPcRcqtHtBSdUv
0sy0EVoinzUppTJQkotYC3nna+CbgqGwkCt1xvfQ1ON1KT3R24Py0GS72/52
yfF1pWi+qZvZiNZdrv2nHr8w2BYz+vNDNLWfgGGYxwfZzH8e792s+6LV8z7H
+V/D5PiT8+PWj9v8LOWG+pRSaUDYHJ51g1gHOkhL3ul1C1LLX2Nh6tWH7miu
N9KyZIG0w3tyEZUEbsuvMXU/0uGB/gkZ184ciMpWfVQSQkPz5aql1pMqocts
a3mywe/zsAl85x7nkst1XlPbTwwHDbdFPUJTx+EG/52PPgwvy+f8PjaoH5ir
UfDNfIZnLZYsjzvO0Z/b+N8KYU3WQqN3z8BcbHWk7uAwOPaP6GX7dcJcUsT6
A8JkyLwt65m/7DPiu1j+jhxNg4+z3Q7eO5mFPO9auFxyaEJNc/V3ENRawaFs
mcDpT30c+v2rYCOlIZZwM+m7eaSTGGIEwSqu54VuYqQP2b9H1wxlRfecYUL9
E/+V+31p0OMfUUDKGob0GEL82y+xcIlJa8jB+tUMqDLSw/rV+uUY/TDWr0Jq
vG8Z1q+WkMlxTaxfbtexnd5813F3Lpr8/N774DYet/2pxyf9gVu/fccemy/i
8/nq/L71Pibbzxh3ne07W4O6hXJm5Z8PQ/FHmj6EnC6GNvm1jzsSm6Fpb7+8
e5sAkeJ40ICtX/Xa0biHWL8LchO7I7B+/apfWihh/fqJ12w7ydMvB2R8fhqT
fEgDF1pDXU4EEx6KFAcvHaPBIQd/nVMpw1AyTTv6GoOC/J+FkpIPvkKaWpvX
WEuTkGJCB8kmmIUCyeQ8it0TuBBlUZv0sYPH7xTIBF1W/tRKhUKd8tIj99+i
F00sxfM9ZNQY62KiyhhAbtpbzxnovQFBY5PKFMyvTekpijnm1/jSmBGb36R5
siWNmN+CjrDI6zx+OeAm01c9R6kLciya22/KjSPC+cwd9nZUpHDpkp2gyVtU
la9bI+33AX0Ofb3oEfbfzum+i9Zh/808PNjrjf23T9GxpxT771nzFD3Eyw8c
+DHMoDRU6gXwzQu2aJxLhaABYfmyMxko4kGBVAL/K6Q4Um96x7UXud7Qvtgf
3wxVpZGzT7c3gaCPIlN4PxlN9BpIOMQ0o5qlzoXjtYU8/U7BM9OIaweaaRCs
ftVp6XUSyg9xWylm2w2/Ft6SzZqgoythLzVoWb/C09EllUnYH/Rm9Cuw/ffq
m9USbH9YIPHEiO2/GVb6hTd4/sCBrSeGDy/E+k1/ck8ndP8QCjKbM60nbgRF
jMV1ll7tR4vr7qofOfcW3IW3CHXh/ODR0no0CucHgtCRc+E4P3hYjfkq4Pxg
/bdjG4J5+YEDUbZ7LGL1aeBjo7FWWIMJUikNSY0JNEgQzCCeynoPspajOm/4
GVDjon+7E/NL8HWQvY/5XTtfYjQS8+u9tCRdGfPL8lBp49UXnEj0qBrpWtIM
P+SlXavyGoD2xWu2WJJpIL+9Urm4dRyk96wX9JChg5VaaDw7/z4nrhhNw/wW
vrm5m63f+mV5Rksxv7vHQiJ4+ZcTQhMvHUmerSDip5f6eskAKAhVOFNm0qHe
VmuJROU4hAWsPn1IcxQZS2ZsZvuDQ1Mtia3f2L1afGz9xvD/RliG+T1LftDG
45cTXjfSWvWDaTBDpkL3ecwANDJCrn4QoMPE1eRd1nXjYL9PSFoljYZEPr6M
y3zaCtWDtG1e7RGQfDdQRdSiGWa+9M5b4TMAV0aPjsXw0/9w3fu/wp/Fr1+x
rVgbgwZQ7LSVql0IxMvxSsK3qbBzRmPG8lktIKff3lZ9th8KxPOTu7F+pYzt
fTOxfiMdI53Z6zsUq9902fXxbap31al/o9//1/WHxFXqJJuMHjgrklWldYEJ
zo+3+O86iX3Wz+3twdPDUHp0NIH+mQqVAjk2LJx/p+mdsQrA+XfRc3E7cZx/
Ka2tNq44/5YHyKxn8vIvBzRWbC6iXKSB5KfcDqn+RvTpdFV/fEs3pMcdt+iL
aEZO9jkHVOWmE4WScm3Z+VfAy9SbnX/93ML49+H8qzOhIfUC51/BCVebWzj/
5rgnVq3hq/+9HttpmXostpzr9ae211V7pdW/KkNTx/lvo7pLWcPxVtsfvj4r
XddwYUYX7A7QT8j8ZRrxogopadEZUaLKuq0aAmtGUIDRBEkmpwE1DKWpstfX
K72KSOz6uOJmLOMQro+tpIvN2PXxcxOqMpG3PsnRb8JQ3kSqlQx0y9ukn1Jq
0O4njF4tBTIclntnqGb/CgkTo5dLmVNQYMjCI+x8lr3EvTIV++/T1T7eUdh/
xSSUhhdj/3W+vs6WV19wImUVcaDAmwahu+jim74MgpU88QHZlQa2vRk97mlv
gCDpajoUNwiZTS4bH2P9ymb7CrH1G16RstwH6zdETnsnYP1Gxsyq18P6jcwq
l6EUFaEy5kE/Ffl6JJ1oNyu1Npvr9ae2696S77gtmo0mx/na/Z1SvKR9cs33
/x4m5ze5f7WM7pQicIxjnP90/En0MzfdEQt/Chtlo7M0xd5Dkn+FyI42KjAf
Df2cPPIKKc8L9QvfMIyG9CV/vo/z2bYGLUMRnM+UrYbkxHE++zs/UXQlzmcM
nUTrOF4+40CuVuLDGdY0CCpqKAmofQHBapKs+kAq5GTkqWtHO8NqMdXtoyK9
cLzPe4D9fNs0WPnaAj/fbJ/elGI/3xjZkcnd+PlW13brcTJvfYcDhZZF4n0L
WOj+QsK5o2PvUKyTg7zFp5nE8R8uV6QqM1HF0MuevpIWYDDNGXbFNci487hC
lXYvfC5OSGW/n3e2MyhWTGWgObXKpv/q/fxfBX8Wv8PTXWysGFSgzV7Aisop
RGaprDe1ed0QPLIiO3CgFmkSs3pVJOgoPsTtuRnm158lEsD+/8OJtSsNTTG/
0/Kl4gmYX7f+DnkKj18OfNlzr2XBegGie6On8/nUMiRUZxCbjH3CqU59RNCz
GUXkXiFkwwisrdIvycb+O0hUW2eC/Vc01LFoHvZfUjrr/Srsv8bNa4m8+pgT
Pi4xamQPOsy1vChhxaqGA+eO7Tv8IxXkIt7funmnEXwDTWeIWg/BPwDyVU5V

           "], 
          "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 
           0.1, 0.1, 0.1, 0.1, 0.1, 
           0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, \
-0.1, -0.1, -0.1}, "rho" -> -0.9552753150463106|>, <|
         "supportVectors" -> CompressedData["
1:eJztV3k0lWkYN0RDRVQyla2LrgYNg5rIq5CtEkWWkZ1LlmoiNI0tW2XLcskW
RSVKN6aD9FiSdQwXkRL3ci2VvbLXfGaOOufeuSfz55xzf+d8/zzP733e9/ud
5/s97ydu62HkwM7GxsaLPTLYc8AkhetYaQ3iWki8XLmzF6RkvGONjZqgNbax
WSqbhjIJfK1dhkPARofxqJCkOv08RB+vy+qOP+T3EC3lXazaBef2lKGNRi7G
k8q5TPn08ctjzxKmT+cjet4KnSi3KZH7n+O92qodbe53GdZ/DUv1l87HjMfs
fOai431S2RTAaUeT0tTrQAUpizsMtSLZol1mRh596I7SPj1l8/fAFlHxriue
AjOrXE7mBZCQe64ZIdKuGTXz7zXAybaBXbn0iqCFPgZ9/y/QfNVAxGVk/mf9
qWQaH47zKdN14ftpt8dtP6AUHRFek9BRqH/io2DlSYFun5hiMmkCbifgkt9+
IgKn/uGqrJMDyLIs8JXpJjLSj5zVswx+jzLXiTxusnkCxc+jYlNnnrP0pYPL
lr7q1VIvoMCspT1DdA7hLt03sLXpQRKRkTach9+ip0WqNZu8p9DH8CHhwh4y
dHJ4Cu+ZocJ9r7HeXzoLoE/SvrsshILCTLPUELkKXhgfqLih9eU7sjz/zjWR
8DvT/enz/hN+E8/iChF9HWbwMSycmpAuYvQTDTknfvniZesVTdoqWJH4GwOf
Wf3lYn2UVlm4UAewrQs2a+LvAb8RHvHy0BwUc69YKJ19AElO1hvdce5Fzmk7
I4aTW+BpWeyqoPZm4DwjOcpj1YXme7U22CW0oBq8Y8lcbQmrf+nQaBST4tRC
gWC5qw74VDIqCnFR4LN+CYMl10VI81SUFNUvTyENgiuPLtcLzH/dWtt84zD/
xXGdvRiN+a+bxaynBOa/P4ud0whm+S8D4qxNzIh7KXDGUn43j/woCGU1ZDal
UyCdM0c9kPQBRMynVV6z08BCNjx5cb79qf7D9E1M35LXGUcX9a2XfqiHx/Q9
OhsSE8DSlwFc8/32ZPc2WOOtlj20bQQkuCodX31LhXpr5W0bquYg6lfFoFNK
00gm3sH4Jabvuep83nRM3yfWyTVXMH01Fc9pLvYv31S/UyBLXwbstt9x0PUg
FWTiVmmf9xmD9aIP8XgzClTJ8apVGQ5DWN8Fq2JbzD8UPzYszrebp5KHVbD5
tqXA6cEJbL55CWxPXpxvGTTHKVVsvtHX1z12daUJdz7D/h3CJHffoiJEnzfQ
348j9jLeU5f49PG4lBA/YXYSoucRJXV7nB9/iQdbCP+RfYvxHEuwtbix4E7z
/Gp9ZmB2PqUKZbH+cgpcaiktfHe6Dh0grJ+uFaAikq1sLu+6XuTZH3o+eO0A
xHtNnH+E6Vtau7VUDdPXP+NQgROm745dJ+4t6tsnN7qw51/03XTNhju7tpJh
36wAAm2sFNA/+Qef86rXxZ/f4n3AlP+192TG49Dm3qwSWbDs/hx6GwnyQjXL
5i/t69+gGFKIb/q8bge/Er77zTOIJU/Xdh4fB49kmW8CwyjgscXb1DexFazs
gnS3GY+j3FAL6xyX1zA0MKK/f3UD6EhaEjK6AYy/U+/cV0sGxej6w7SWZpY/
0GEldci8gIMCesePpHoYTqLOjrmf1srWwgV8RBpRcAZ1cZRU4Hyn0KF2r7/9
gc8nD1Sx/lUPFEtyw/o3wkO68THWv+IdzWfVWP7AwMvV4q+MF6VCKsHySPfk
XVBwDRCfdhRQH8yrzsklDqK22Zd9FQljULvGQGnxfnZ5MMDuKjbffPzOGMVi
862UeGth8f84zJPbjnU/Y8QuscYjbl3v0fBexzQXnREQ+jQ5KdJLge+vbXee
aZ0DDYJcnmwVDQQ2z0is1aOB9zyKsjQox/6b2VXtNQtBQyhgY5FWB7pytrjx
0cUmlr50uIOEx+o3UCClwz/QLM4eKeSbulUK9kD1mx9Xi7cNo7KkU04RWXno
L34kkLQ=
           "], 
          "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 
           0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1}, 
          "rho" -> -0.9715475291013718|>, <|
         "supportVectors" -> CompressedData["
1:eJztWAs0lGkYFuLYrSGVnVzSNLXJ9SjKCt8ooVRuKRHJnTBdEMlZbHRbpVym
6OYuoXJp09IbkxiXYkSTGswwSa1bk2Rj29/umfacmeao7ezu2XM85/znP/N9
7/e+7/ee53/ebz6CK9nGQ1RERASHPerYYyGXa/YkkQVuTTR6QWQhomxdIRLv
1oSSRF8Sl2q0wBHm1dbI8W4Q+Z/CpL2eQkxNQ5+7jk3nSBOn3xO6jnwhu8U4
mgWSilSDB0n90MiJSR4RZ8NYcobt9tp34OosIa+WzUISaTdc0nb3IHGyzb7t
8nQU4ntS1Dl6GK0a08Yzdt6F6WM+Tumjj6HY79I9PZG6D/EirB2ywiiVQuPz
z9dWk7PreioQv59/G9VPVLXd01u/OP7wZQNzhdwnsPmg8cXrh6aRYtXoaUqH
cSQ1ww3a4npcdHD9GF2xuB7VD2Wrl3XSoYpcRjccZQM1lcLZ01YMjvLldndi
WOiBVacqiV4llL8uYs157ptvIN77S/Pm9yPML2+8y8yA0RJQIDS+c9hNeyWR
wEnz+9R98ObHzAlW+BYmsB1y6Lsya9Dmu5yuFYuYEKz82lzDtQd9RUrUwtu3
o/AYhf1MTB+KlvhVZWH60KATuC8B0wfpud++Wojpg+d5Q5foKX0QQOZyUv+t
fSw4asuWMX0/CI4E0lWmDwtcunI7/LJfAFHOx2bozCBcb/I2uYnxd35RkMQE
f+OomVqBGH9jlFdaA8bf+CSpOiOMv/GFlYrtZWWoYmB3iBqhDslf2imVRSsS
Gp9/3iCd8DgHV4R4fibbX9TiEysj9T7/e+Dlx/udXMH2yBQPE/Dzd/3z0Ddg
ekU6rgFM5icW6kq/gbRQ6kzL1k4YKBnam8HtQaqzj4bErXmFUmJ8H9iV16DQ
4ZkHqSu7IEJ/mbmNTSNMK8WnELM4yLfvMaHduneKv3x4vyX/4bzV4iS/xgDP
41kVSKJ2LSWDxgCPWk3u9IBmdOrGWWIRcEH/nvHtooYWGCRpGFo9OgW4o+5l
s7c1A/3y8Jvlgf1g0axPShJl/2f96EvxT9U30DtJg+nPhlkOsXMdh6vB61iY
c/CcTlA+9SY99UojBIXbSOK2D4F6oofdU0x/w6qv4S5i+nvXJaXmNKa/Jjph
Josw/ZUeeeYVNaW/AtB319rot5EN6glfm4WHDsIc5Z9UVLaxoEoTZ1Rl3QdH
ug/tuOXKgmid3+pLMP3N3pPStwrTX8Vir6JdmP4Gy6qmTJwfUjmeIwYfOT+s
25osuUXqmkB8hlJhwIHSUsQ/b2lhSqR0FQi15x9POBfzvZJoIeK3oyxe1+lz
+6/xaEelhqwcwTx4cHXMGA/gBE3qXxiE5adbuWLBswoWHG8uL3m9txZt8J7z
libLRoWuGnm42V0o6Nnh8GiZHkgMfhU+cT4rpy0sN8LqG5G6qdgLq6+W3q6r
E/Xt1hwYN/xIff/sX1SBuJmR3pzBchDof7z+Jsx+sn0KsxMzk1JYdaL4k/nZ
+8sJ0MbXfLI9L25EvU5MiUrjh3Vas3RVOl62Qjz9La3NeQjIKerToo6wgKwY
Yn/gzEPY4fbDuiV2QyjvsKNLru8L6O3ptzCdUQ/mi528UzsA7OaR2lbT6KAT
V2fFaW6a0gc+SLJ7HYrFWLDe2fY82ZqL2hjvvpPRoMEhldgLFLlRxBT7uZJ4
YARtehT8hz5Ih+aDAcZfUtSCs/4Yf2PJS+/fxvhLYDTtN5rSBwG7vLWzqInK
bDjv7WTbwS2AZX6RhLeesqTn+dW5eZTnqOXXp92VSYNAm2mpO3H/8OPzSLdk
rL+Ffh9oM3H/UE7JGSdO3D8ESblN/b8QhN6C+7b+zGHUZ+x5wde8H/Dvudz5
XSxQu6TqM/rwHazx1szXqOKArMLoIpn1HAgZQyedLCvgcpKogbtJCazBR35T
upaBTu+/db/sWONUfflwBSkN1s1lwTlGRNS2BHe07Jq9P1WuE6pfLp9BaOlD
d87u8YrNzEe/A8zZkvI=
           "], 
          "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 
           0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1}, 
          "rho" -> -1.0018999367952348`|>}, 
       "ProbabilityCoefficients" -> {{-0.9797911643981934, 
        1.0801280736923218`}, {-1.3538047075271606`, 
        1.2609869241714478`}, {-0.8536525368690491, 
        0.931086540222168}, {-0.30830883979797363`, 
        0.31410613656044006`}, {-0.4535382091999054, 
        0.1301151067018509}, {-0.06263274699449539, -0.20916442573070526`}, \
{-0.6845471262931824, -0.7615318298339844}, {-0.4226028025150299, \
-0.4182533025741577}, {-0.975571870803833, -1.0292452573776245`}, \
{-0.5281072854995728, -0.6409253478050232}}, "MulticlassStrategy" -> 
       "OneVersusOne", "Processor" -> 
       MachineLearning`MLProcessor[
        "FirstValues", <|"Info" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
             "], "Type" -> "NumericalVector"|>, "Key" -> "(f2f6(f1f3f4f5f7))",
           "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
       "SupportVectorMachine", "PostProcessor" -> 
       MachineLearning`MLProcessor["Identity"], 
       "Options" -> <|
        "KernelType" -> <|
          "Value" -> "RadialBasisFunction", "Options" -> <||>|>, 
         "GammaScalingParameter" -> <|
          "Value" -> 0.019341626266517566`, "Options" -> <||>|>, 
         "SoftMarginParameter" -> <|"Value" -> 0.1, "Options" -> <||>|>, 
         "PolynomialDegree" -> <|"Value" -> 3, "Options" -> <||>|>, 
         "BiasParameter" -> <|"Value" -> 1, "Options" -> <||>|>, 
         "MulticlassStrategy" -> <|
          "Value" -> "OneVersusOne", "Options" -> <||>|>, 
         "Shrinking" -> <|"Value" -> True, "Options" -> <||>|>, 
         "KernelCacheSize" -> <|"Value" -> 100, "Options" -> <||>|>|>|>, 
     "TrainingInformation" -> <|
      "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
       Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
       "PreprocessingTime" -> 0.143151`5.6073393796849915, "LossName" -> 
       "MeanCrossEntropy", "BestModelInformation" -> 
       Dataset[<|
         "MeanCrossEntropy" -> 
          Around[1.5035804527786982`, 0.2392399774305571], "Accuracy" -> 
          Around[0.3263837789328387, 0.16923331038145822`], "EvaluationTime" -> 
          0.00026540478036899795`, "TestSize" -> 15, "ModelMemory" -> 97808, 
          "ModelUtility" -> -1.1323879183021348`, "TrainingSize" -> 60, 
          "TrainingTime" -> 0.1, "TrainingMemory" -> 277176, 
          "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
            Around[1.5035804527786982`, 0.1691682103720635]}, 
          "AccuracyHistory" -> {
            Around[0.3263837789328387, 0.11966602137337685`]}, 
          "Configuration" -> {
           "SupportVectorMachine", "KernelType" -> "RadialBasisFunction", 
            "GammaScalingParameter" -> 0.019341626266517566`, 
            "SoftMarginParameter" -> 0.1, "PolynomialDegree" -> 3, 
            "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
            "Shrinking" -> True, "KernelCacheSize" -> 100}|>, 
         TypeSystem`Struct[{
          "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
           "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
           "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
           "AccuracyHistory", "Configuration"}, {
          TypeSystem`AnyType, TypeSystem`AnyType, 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Tuple[{
             TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType}]}], <||>], "Configurations" -> 
       Dataset[<|<|
           "Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|"Value" -> 0.0005165375833104807|>,
               "SoftMarginParameter" -> <|"Value" -> 3|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.5550239769505245`, 0.08111771388961818], "Accuracy" -> 
               Around[0.33669909792311253`, 0.08267554904537108], 
               "EvaluationTime" -> 0.0000612472570082303, "TestSize" -> 65, 
               "ModelMemory" -> 36000, "ModelUtility" -> -1.1450671396721104`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.12589254117941673`, 
               "TrainingMemory" -> 257296, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.5550239769505245`, 0.0573588855656992]}, 
               "AccuracyHistory" -> {
                 Around[0.33669909792311253`, 0.05846044136830288]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.0000612472570082303, "MeanCrossEntropy" -> 
              Around[1.5550239769505245`, 0.08111771388961818], "ModelMemory" -> 
              36000, "TrainingMemory" -> 257296, "TrainingTime" -> 
              0.22031194706397927`|>, "Index" -> 1|>, <|
           "Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|"Value" -> 0.019341626266517566`|>,
               "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.5551339334835188`, 0.08118448996278234], "Accuracy" -> 
               Around[0.33669909792311253`, 0.08267554904537108], 
               "EvaluationTime" -> 0.0000612472570082303, "TestSize" -> 65, 
               "ModelMemory" -> 36000, "ModelUtility" -> -1.1451456167468996`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.0630957344480193, 
               "TrainingMemory" -> 136976, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.5551339334835188`, 0.05740610337985459]}, 
               "AccuracyHistory" -> {
                 Around[0.33669909792311253`, 0.05846044136830288]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.5035804527786982`, 0.2392399774305571], "Accuracy" -> 
               Around[0.3263837789328387, 0.16923331038145822`], 
               "EvaluationTime" -> 0.00026540478036899795`, "TestSize" -> 15, 
               "ModelMemory" -> 97808, "ModelUtility" -> -1.1323879183021348`,
                "TrainingSize" -> 60, "TrainingTime" -> 0.1, "TrainingMemory" -> 
               277176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[1.5035804527786982`, 0.1691682103720635]}, 
               "AccuracyHistory" -> {
                 Around[0.3263837789328387, 0.11966602137337685`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00026540478036899795`, "MeanCrossEntropy" -> 
              Around[1.5035804527786982`, 0.2392399774305571], "ModelMemory" -> 
              97808, "TrainingMemory" -> 277176, "TrainingTime" -> 
              0.1380957344480193|>, "Index" -> 2|>, <|
           "Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|"Value" -> 0.02944636013215842|>, 
              "SoftMarginParameter" -> <|"Value" -> 1.|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
              1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
            3|>, <|"Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|"Value" -> 0.005495411267805034|>, 
              "SoftMarginParameter" -> <|"Value" -> 1.|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.5585043789614814`, 0.0852749240421492], "Accuracy" -> 
               Around[0.33669909792311253`, 0.08267554904537108], 
               "EvaluationTime" -> 0.0000612472570082303, "TestSize" -> 65, 
               "ModelMemory" -> 36000, "ModelUtility" -> -1.1478075981111777`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.0630957344480193, 
               "TrainingMemory" -> 134632, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.5585043789614814`, 0.060298477055371454`]}, 
               "AccuracyHistory" -> {
                 Around[0.33669909792311253`, 0.05846044136830288]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.50548017170429, 0.23825236345548176`], "Accuracy" -> 
               Around[0.3263837789328387, 0.16923331038145822`], 
               "EvaluationTime" -> 0.00026540478036899795`, "TestSize" -> 15, 
               "ModelMemory" -> 100448, 
               "ModelUtility" -> -1.1334851114264946`, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
               410104, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[1.50548017170429, 0.16846986183309312`]}, 
               "AccuracyHistory" -> {
                 Around[0.3263837789328387, 0.11966602137337685`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00026540478036899795`, "MeanCrossEntropy" -> 
              Around[1.50548017170429, 0.23825236345548176`], "ModelMemory" -> 
              100448, "TrainingMemory" -> 410104, "TrainingTime" -> 
              0.30026655896064774`|>, "Index" -> 4|>, <|
           "Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|
               "Value" -> 0.0062779718037132975`|>, 
              "SoftMarginParameter" -> <|"Value" -> 3|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
              1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
            5|>, <|"Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|"Value" -> 0.030229737421387598`|>,
               "SoftMarginParameter" -> <|"Value" -> 3|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.7695113103252196`, 0.16825224324634366`], "Accuracy" -> 
               Around[0.3670021282261428, 0.08432109421286127], 
               "EvaluationTime" -> 0.0000612472570082303, "TestSize" -> 65, 
               "ModelMemory" -> 39072, "ModelUtility" -> -1.2827396093069883`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.0630957344480193, 
               "TrainingMemory" -> 137608, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.7695113103252196`, 0.11897230214933809`]}, 
               "AccuracyHistory" -> {
                 Around[0.3670021282261428, 0.05962401751498395]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.0000612472570082303, "MeanCrossEntropy" -> 
              Around[1.7695113103252196`, 0.16825224324634366`], 
              "ModelMemory" -> 39072, "TrainingMemory" -> 137608, 
              "TrainingTime" -> 0.11041753528403378`|>, "Index" -> 6|>, <|
           "Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|"Value" -> 0.022564232253405286`|>,
               "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
              1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
            7|>, <|"Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|"Value" -> 0.00977195179401915|>, 
              "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
              1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
            8|>, <|"Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|"Value" -> 0.015047857556471422`|>,
               "SoftMarginParameter" -> <|"Value" -> 1.|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
              1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
            9|>, <|"Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|"Value" -> 0.017686442147964332`|>,
               "SoftMarginParameter" -> <|"Value" -> 3|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
              1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
            10|>|>, 
         TypeSystem`Assoc[
          TypeSystem`Struct[{"Value", "Options"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["SupportVectorMachine"]], 
            
            TypeSystem`Struct[{
             "KernelType", "GammaScalingParameter", "SoftMarginParameter", 
              "PolynomialDegree", "BiasParameter", "MulticlassStrategy", 
              "Shrinking", "KernelCacheSize"}, {
              TypeSystem`Struct[{"Value"}, {
                TypeSystem`Atom[
                 TypeSystem`Enumeration["RadialBasisFunction"]]}], 
              TypeSystem`Struct[{"Value"}, {
                TypeSystem`Atom[Real]}], 
              TypeSystem`Struct[{"Value"}, {
                TypeSystem`Atom[Real]}], 
              TypeSystem`Struct[{"Value"}, {
                TypeSystem`Atom[Integer]}], 
              TypeSystem`Struct[{"Value"}, {
                TypeSystem`Atom[Integer]}], 
              TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
              TypeSystem`Struct[{"Value"}, {
                TypeSystem`Atom[TypeSystem`Boolean]}], 
              TypeSystem`Struct[{"Value"}, {
                TypeSystem`Atom[Integer]}]}]}], 
          
          TypeSystem`Struct[{
           "Experiments", "PredictedPerformances", "Index"}, {
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
               "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory",
                "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, 1], 
               TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
             TypeSystem`AnyLength], 
            
            TypeSystem`Struct[{
             "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
              "TrainingMemory", "TrainingTime"}, {
              TypeSystem`Atom[Real], TypeSystem`AnyType, 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real]}], 
            TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 75, 
       "PreprocessorEvaluationTime" -> 2.08203125*^-6, "PreprocessorMemory" -> 
       178720, "InputDimension" -> 44, "OutputDimension" -> 1, 
       "BaselineLogProbability" -> -1.504445381309891, "VariableBudget" -> 
       True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
       False, "NaturalStop" -> True, "AbortStop" -> False, 
       "LastReportingTime" -> 3.879152801780353`16.34131187617507*^9, 
       "RoundPartitioning" -> 
       Dataset[{<|
          "TrainingSizes" -> 10, "TimeBudgets" -> 0.2865537162217762, 
           "ElapsedTimes" -> 0.33017, "ExperimentCounts" -> 4|>, <|
          "TrainingSizes" -> 60, "TimeBudgets" -> 0.4093624517453946, 
           "ElapsedTimes" -> 0.448002, "ExperimentCounts" -> 2|>}, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
            "ExperimentCounts"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 2], <||>]|>, "AnomalyDetector" -> 
     None, "Log" -> <|
      "Example" -> 
       MachineLearning`MLDataset[<|
         "f1" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, "ID" -> 
            3795572968267006573|>, 
          "f2" -> <|
           "Type" -> "Nominal", "Weight" -> 1, 
            "Values" -> {"Information Technology"}, "ID" -> 
            3401139331922032727|>, 
          "f3" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369}, "ID" -> 
            4714656301856831657|>, 
          "f4" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {23.778}, "ID" -> 
            4624390425862832796|>, 
          "f5" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {100.249}, "ID" -> 
            8583462845398299564|>, 
          "f6" -> <|
           "Type" -> "Text", "Weight" -> 1, "Values" -> {"Estimated data"}, 
            "ID" -> 3095956687388126824|>, 
          "f7" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {256.9105}, "ID" -> 
            1111199487588034056|>|>, <|
         "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0,
           "RawExample" -> False|>], "TrainingTime" -> 0.954407, 
       "MaxTrainingMemory" -> 1047280, "DataMemory" -> 118040, 
       "FunctionMemory" -> 414464, "LanguageVersion" -> {13.1, 0}, "Date" -> 
       DateObject[{2022, 12, 4, 14, 26, 41.794803`8.373697260499904}, 
         "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, "ProcessorType" -> 
       "ARM64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
       "Evaluations" -> {}|>|>]]]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, {3.8788071459712963`*^9, 
   3.878807157009053*^9}, 3.878811636198832*^9, 3.8791492024280863`*^9},
 CellLabel->"Out[71]=",ExpressionUUID->"4ae6d7f2-fd29-4774-afa6-ad663918e046"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"cm", " ", "=", 
    RowBox[{"ClassifierMeasurements", "[", 
     RowBox[{"cRisk", ",", "testset"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Test", " ", "our", " ", "classifier", " ", "on", " ", "the", " ", "test", 
    " ", "set"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<The accuracy is: \>\"", ",", 
    RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}], " ", "]"}], 
  RowBox[{"(*", 
   RowBox[{
   "Plot", " ", "the", " ", "accuracy", " ", "of", " ", "our", " ", "model"}],
    "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"AccuracyAss", " ", "=", " ", 
   RowBox[{"Append", "[", 
    RowBox[{"AccuracyAss", ",", " ", 
     RowBox[{"\"\<SupportVectorMachine\>\"", "->", 
      RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Plot", " ", "the", " ", "Confusion", " ", "Matrix"}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.878619179671941*^9, 3.8786191833045883`*^9}, {
   3.8786192222213593`*^9, 3.878619249704307*^9}, {3.878619342065884*^9, 
   3.878619346687873*^9}, {3.878619378625424*^9, 3.8786193862338676`*^9}, 
   3.878805729554159*^9, 3.878805819596631*^9, {3.878806143346759*^9, 
   3.878806195391272*^9}, {3.878806763106118*^9, 3.878806811062291*^9}, {
   3.878806841172628*^9, 3.878806863962813*^9}, {3.8788071595906687`*^9, 
   3.8788071669267473`*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"21382602-c388-449e-99f7-a16ab30307db"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"The accuracy is: \"\>", "\[InvisibleSpace]", 
   "0.3684210526315789`"}],
  SequenceForm["The accuracy is: ", 0.3684210526315789],
  Editable->False]], "Print",
 CellChangeTimes->{3.878806864557898*^9, 3.8788071688546124`*^9, 
  3.87881163954853*^9, 3.8791492075417137`*^9},
 CellLabel->
  "During evaluation of \
In[72]:=",ExpressionUUID->"694fb85b-4c9b-497e-b385-960bf9bcc1a4"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBghWIQGwI+2BNLT1qr98Sh/o19rBBrrpT8M/uPcxprheQu
Eq2fXHqg7IXRD6tE1rk/vGXPgAKGn73yq2zLJy94a68tmBDx/9Ir+8fcdi94
jj0i2RwApcZ0Mw==
   "], {{0, 0}, {5, 5}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.05263157894736842`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "A", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.05263157894736842}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["7", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "7", "\" examples of \"", "\"B\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.3684210526315789`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{7, " examples of ", "B", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.3684210526315789}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["7", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "7", "\" examples of \"", "\"C\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.3684210526315789`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.5384615384615384`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{7, " examples of ", "C", " correctly classified"}], 
         Row[{"Precision = ", 0.3684210526315789}], 
         Row[{"Recall = ", 1.}], 
         Row[{"FScore = ", 0.5384615384615384}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "2", "\" examples of \"", "\"D\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.10526315789473684`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{2, " examples of ", "D", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.10526315789473684`}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "2", "\" examples of \"", "\"E\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.10526315789473684`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{2, " examples of ", "E", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.10526315789473684`}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 4.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" of class \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " of class ", "A"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 3.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "7", "\" example\"", "\"s\"", "\" of class \"", "\"B\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{7, " example", "s", " of class ", "B"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "7", "\" example\"", "\"s\"", "\" of class \"", "\"C\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{7, " example", "s", " of class ", "C"}], 
        Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "2", "\" example\"", "\"s\"", "\" of class \"", "\"D\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{2, " example", "s", " of class ", "D"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "2", "\" example\"", "\"s\"", "\" of class \"", "\"E\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{2, " example", "s", " of class ", "E"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "A"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"B\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "B"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "19", "\" example\"", "\"s\"", "\" classified as \"", "\"C\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.3684210526315789`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{19, " example", "s", " classified as ", "C"}], 
        Row[{"Precision = ", 0.3684210526315789}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"D\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "D"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"E\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "E"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{4.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 0.], TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 0.], TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 0.], TraditionalForm]}}, {{4.5, 
       FormBox["1", TraditionalForm]}, {3.5, 
       FormBox["7", TraditionalForm]}, {2.5, 
       FormBox["7", TraditionalForm]}, {1.5, 
       FormBox["2", TraditionalForm]}, {0.5, 
       FormBox["2", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["19", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->13,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->228.,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{
  3.878619184460875*^9, 3.878619347255011*^9, 3.878619387156837*^9, 
   3.878715848704851*^9, {3.878715890521706*^9, 3.8787158953838463`*^9}, {
   3.878805538696899*^9, 3.878805553604134*^9}, 3.878806818221781*^9, 
   3.878806864604879*^9, 3.878807168896861*^9, 3.878811639592146*^9, 
   3.879149207590951*^9},
 CellLabel->"Out[75]=",ExpressionUUID->"7f50d843-6b87-46f2-8a4d-f19882a0bf25"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Nearest Neighbors", "Subsubsection",
 CellChangeTimes->{{3.878805416699134*^9, 
  3.878805417721744*^9}},ExpressionUUID->"9942841c-f629-4f6a-b284-\
312b9ff53265"],

Cell["Train a classifier from nearest neighbor examples", "Text",
 CellChangeTimes->{{3.878805704170437*^9, 3.8788057223306637`*^9}, {
  3.878805766632689*^9, 
  3.87880578974465*^9}},ExpressionUUID->"5dfadb55-1804-475e-af67-\
fd5a3fa3ada6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cRisk", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainingset", "->", "\"\<Ratings\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<NearestNeighbors\>\""}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Information", "[", "cRisk", "]"}]}], "Input",
 CellChangeTimes->{{3.8786185865414057`*^9, 3.878618597824006*^9}, {
  3.878618646892776*^9, 3.878618648994371*^9}, {3.878618877270843*^9, 
  3.878618880432907*^9}, {3.878618998083866*^9, 3.878619004451974*^9}, {
  3.8786191510115213`*^9, 3.878619159945651*^9}, {3.8786192237272882`*^9, 
  3.878619223941098*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"81eb6b46-1115-4683-ad4f-4a7788f50766"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"A\"", "\"B\"", "\"C\"", "\"D\"", "\"E\""},
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"A\"", "\"B\"", "\"C\"", "\"D\"", "\"E\""},
                    "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["75", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 75, "ClassNumber" -> 5, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "Elevation" -> <|"Type" -> "Numerical"|>, 
           "GICS Sector Name" -> <|"Type" -> "Nominal"|>, 
           "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Disclosure" -> <|"Type" -> "Text"|>, 
           "Revenue (USD mn)" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
           "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|
               "FeatureNames" -> {
                 "Elevation", "GICS Sector Name", 
                  "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                  "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                  "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                  "Carbon Disclosure", "Revenue (USD mn)"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 7|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Numerical", "Nominal", "Numerical", "Numerical", 
                  "Numerical", "Text", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6", "f7"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
           "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|"(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
              "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 75, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>, 
                    "f6" -> <|"Type" -> "Text"|>, 
                    "f7" -> <|"Type" -> "Numerical"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 1621909218748444882|>], 
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>, 
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2074781423290265366|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 20679206186753951|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>, <|"" -> 1|>}, 
                    "MissingCode" -> Indeterminate, "Version" -> {13.1, 0}, 
                    "ID" -> 4023015169247141483, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "LogRescaleNumericalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Indices" -> {2, 4, 5}, 
                    "Centers" -> {0.43, 23.052, 256.593674903342}, 
                    "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
                    620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
                    3527897072513609120, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {146.57391774891778`, 3.693542625490828, 
                    68.22157333333334, 3.504982149660075, 
                    1.4086804722859232`}, 
                    "StandardDeviation" -> {253.37495961794207`, 
                    3.1699732836017724`, 118.62403407631172`, 
                    2.423277341145054, 1.2610287731963699`}, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2274174826257793629|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {11, 1}|>|>, 
                    "Boundaries" -> {{-0.5, -0.40909090909090906`, \
-0.3181818181818182, -0.2272727272727273, -0.13636363636363635`, \
-0.04545454545454547, 0.045454545454545414`, 0.13636363636363635`, 
                    0.2272727272727273, 0.31818181818181823`, 
                    0.40909090909090906`, 0.5}, {-0.5, 0.5}}, 
                    "Version" -> {13.1, 0}, "ID" -> 8505008840132824157, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>, 
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
                    Span[1, 2], 
                    Span[3, 7]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {13.1, 0}, "ID" -> 
                    373596144042670943|>]}, "Invertibility" -> "Approximate", 
                   "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBmQFm/iFib1JlAgAAAAcAAAAHAAAANBt6Fr3csL/lG+Yz4ESRP7hBka92
l6I/3+CsXPnbnb8juBQyj++mPyQSP5BqJYY/vak1fWbb7z9Exb6rXA+mP3bs
bygIL6y/qBWDW9y8oz+sdTB+ZCFvP+M3K7whyrK/oZKNG3/O7792PFDDUfyQ
P9/U3bojxJC/o5bbS9uw5z8WAjGjisXkP97C+Aj2NcU/OamW7DSFoj9l4xTQ
yZiTv+5YNgcGV6G/JjWbdhS247/4DI4+z4GiP+damijBtq0/AUhvWGOt0r+S
UyYwEkrnv7xCV9Xbd5o/7dmZYqsIlL+U6TKOWh/fvyeCdPr2xcm/z+izHsbw
ab/DCMuYpSLrPyWlgzDxQ68/IU0Nlm9mh79gtGMp7lp6v5IjpI1bXuO/gG3Q
78EAir9w8Q54CT+tPz6D4J3Vndm/VLWB566j5T+EcC9VEICzv/LeOJ47T7W/
77C3YnYxuz+XzXfud2fkvwL5lh2DJOg/lXZTGNvFtb8Pcd+T9BKZv2lvrRrr
CbI/A8vXaYtBiL/H/s72
                   "], 
                  "Precisions" -> {0.4602875814560013, 0.9399443097653287, 
                   1.0616808801506838`, 1.6265466434380347`, 
                   4.517522263650691, 10.595148643942485`, 23.23460552022561},
                   "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781967`, 0.012269055622142968`, 
                    0.0013959895289638008`, -0.0005267240067510293, \
-0.00032143499611032286`, -0.00013378352049829329`, 0.0005265431937281588}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 6648082896216031031|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7.|>,
                     "Key" -> "((f2f6)(f1f3f4f5f7))", "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 7, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                    "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1557841622946289758|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                   "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                   "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 7, 
                   "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   1557841622946289758|>], "InputDimension" -> 0, 
                "OutputDimension" -> 7, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, 
                    "ID" -> 2988406535272383851|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"Information Technology"}, "ID" -> 
                    8211126643196690843|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369},
                     "ID" -> 220143977676884624|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {23.778}, "ID" -> 8845109505593024510|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {100.249}, "ID" -> 827490798644983815|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 4409963340497863227|>, 
                    "f7" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {256.9105}, "ID" -> 5236914127772614391|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.068858, "MaxTrainingMemory" -> 219608, 
                  "DataMemory" -> 22976, "FunctionMemory" -> 86128, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 12, 4, 14, 26, 55.902642`8.500007307606808}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, 
                  "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-7.173238193477166, -7.173238193477166, \
-5.957762682813879, -5.505343391085791, -5.137053644875943, \
-4.839361849432994, -4.800994757869588, -4.736339520600383, \
-4.720994010399741, -4.71905825007799, -4.703766525124256}, 
                   "LeftBoundary" -> -5.957762682813879, "LeftScale" -> 
                   0.6077377553316436, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[36.60573897803041, 1.772055230348638], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 8833432794738512184|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>, 
               "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                 "Version" -> {13.1, 0}, "ID" -> 8812518305512619507|>], 
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Version" -> {13.1, 0}, "ID" -> 7405342354547017736|>]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"|>], 
           MachineLearning`MLProcessor[
           "LogRescaleNumericalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Indices" -> {2, 4, 5}, 
             "Centers" -> {0.43, 23.052, 256.593674903342}, 
             "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
              620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
             7299988401548215772, 
             "Output" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Mean" -> {146.57391774891778`, 3.693542625490828, 
              68.22157333333334, 3.504982149660075, 1.4086804722859232`}, 
             "StandardDeviation" -> {253.37495961794207`, 3.1699732836017724`,
               118.62403407631172`, 2.423277341145054, 1.2610287731963699`}, 
             "Output" -> <|
              "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 1400194064660864776|>], 
           MachineLearning`MLProcessor[
           "ToLowerCase", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 3080611390123234620, 
             "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "RemoveDiacritics", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 8393247813432535084, 
             "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
               "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Index" -> {<|
                   "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>}, 
                 "Output" -> <|
                  "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> CompressedData["
1:eJxTTMoPSmVmYGBgBGIeIGZlwAANaDSyuINV5XF7IP0gJG/3fiC9wNDnNIjf
ICJ2FcR/IHn3Poi/gM/rKZgf6n8QrC7ZZSuIdtjqegMk77C36wKYvzLrFVje
m+cMWP3c+/vBtN3JS2D6yeWLYPkZKy+D+S8/gO0/YOZ2E2wP0+lLIJrBWOIc
WPzO1IcgdQ2LGjeB3TUp+SKYVtMFuy+h+e8TEH0gZu8JsL6j5o/B5gcFgd1z
QGXZU7D77ga+BKv/OBtsr0L9dYg7eOPvguXTp10Gm/vmJDgcFDacBZvv4HF9
Ith+wUiwvgajkndgfdOYHoHDbXHBcxCdECkFdndCbOtXsD9uJB4Bq1v48ybY
HTsegP3PYPvzEVi8+NYWsHv2tz0Em2N16SiY72lzDWzP1gO3wPoMs46A5BW2
L5wMlt+n82o/AO0BofY=
                  "], "Version" -> {13.1, 0}, "ID" -> 436956950344966148|>], 
               MachineLearning`MLProcessor[
               "Sequence", <|
                "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Processors" -> {
                   MachineLearning`MLProcessor[
                   "TextToNominalSequence", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {13.1, 0}, "ID" -> 9037232907786629142, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                   MachineLearning`MLProcessor[
                   "NominalSequenceToTFIDFVector", <|
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> {-9125122986955958911, \
-8920710729279180450, -8515397617198652367, -8156047279148961366, \
-5900137721653868194, -5516340669880835636, -4691435917638705529, \
-4484112905383790136, -3872414778415116274, -3607098371778122975, \
-3443150737398804539, -3355080348777836050, -2509905740948760720, \
-2159536488856785732, 242552411836269492, 450553210381435687, 
                    539691877398804025, 950421020428451240, 
                    1561895621580759179, 1579009397565082067, 
                    1671416204203290022, 2799484578252825308, 
                    3287432777910049379, 3477167097823690523, 
                    3576478456825362866, 4539722962543247872, 
                    5070765454536077049, 5138905625963890559, 
                    6058376361354581924, 6694985464746702812, 
                    6748311694457965250, 7603334142034012365, 
                    7731804819316663270, 8918825649307280967}, "Values" -> 
                    None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {13.1, 0}|>], 
                    "InverseDocumentFrequency" -> {1.91959284073794, 
                    3.624340932976365, 1.3217558399823195`, 
                    2.0149030205422647`, 2.0149030205422647`, 
                    2.120263536200091, 1.3217558399823195`, 
                    2.9311937524164198`, 1.2729656758128873`, 
                    1.91959284073794, 4.31748811353631, 2.120263536200091, 
                    4.31748811353631, 2.0149030205422647`, 
                    1.4842747694800942`, 2.0149030205422647`, 
                    2.120263536200091, 1.5448993912965292`, 
                    2.0149030205422647`, 1.3730491343698699`, 
                    2.0149030205422647`, 3.624340932976365, 0., 
                    0.11279549414534427`, 2.0149030205422647`, 
                    3.2188758248682006`, 1.4842747694800942`, 
                    2.9311937524164198`, 2.0149030205422647`, 
                    2.0149030205422647`, 0.5332984796180493, 
                    2.120263536200091, 4.31748811353631, 2.0149030205422647`},
                     "Version" -> {13.1, 0}, "ID" -> 7526152790873636702, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                 "Invertibility" -> "Impossible", "StructurePreserving" -> 
                 True, "Missing" -> "Forbidden"|>]}, "Invertibility" -> 
             "Impossible", "StructurePreserving" -> True, "Missing" -> 
             "Forbidden"|>], 
           MachineLearning`MLProcessor[
           "MergeVectors", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
               "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
               Span[1, 5], 
               Span[6, 39], 
               Span[40, 44]}, "Wrappers" -> {Identity, SparseArray, Identity},
              "Output" -> <|
              "(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
                  "], "Type" -> "NumericalVector"|>|>, "Version" -> {13.1, 0},
              "ID" -> 613954820935696947|>]}, "Invertibility" -> "Impossible",
          "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 9119616879012754245|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|
               "A" -> 1, "B" -> 2, "C" -> 3, "D" -> 4, "E" -> 5|>}, 
             "MissingCode" -> 0, "Version" -> {13.1, 0}, "ID" -> 
             1482488055587057283, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {5}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 4789940262906318728|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 5|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "A" -> 0.08750000000000001, "B" -> 0.2625, "C" -> 0.325, "D" -> 
        0.21250000000000002`, "E" -> 0.1125|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Ratings", 
          "Order" -> {
           "Elevation", "GICS Sector Name", 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
            "Carbon Disclosure", "Revenue (USD mn)", "Ratings"}|>], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {5, 6}, 0., {
      1, {{0, 1, 2, 3, 4, 5}, {{2}, {3}, {4}, {5}, {6}}}, {1., 1., 1., 1., 
       1.}}], "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "NeighborsFunction" -> 
      MachineLearning`PackageScope`NeighborsFunction[
       "BruteForce", {CompressedData["
1:eJztWgk0lmvXFqXRkEoqJaGkOUOTbCpDVIaSIpUhU6SBIpRkLClRFCJFURoM
CXGbh6hkJtNrVobXmFD9932+9Z5/LS0LJ33ndD6t1brW3vvae19734/H43lf
bk1jpSP0dHR0y/F/OYI3jiiX3qDAjr3ejCqx6WiuVnfZq8ocoLuS2FmG/XZC
37IisC3HHiz9AdtMX+o8n7/Jh7WlqmLbRQsgg3lh9wscTw63OE/iLq2UrHBs
l2sflyT5u76buJVjdEafi6KwP5o16j7pd+N0uxXpY/7WKef+8Xo0QU4hJQDj
Ywe1w8EGHyFlfLh6l1cuMPq/OOyP/d9tXfgJ/4mt4zv3oFx4sqhdRRr312fd
lkHqfXNqnE90Mrw4MecJ1ifbQGUierLaHiwnebsKT/8xx4FUszf3cL2c+lhF
os/Kft4Zgs/f6217iePyZew1ITifW1BwHNHDEm1ym+hb4yN1gsx57vvePY+w
Pv4jsVGE3ybBfpL0y2CSFyb99O+su9KMdb/pWZJCdJ+rOdVCsLZ1X60G3q/O
hoeWpC5HqZU80W84ZTsjybvevVaL7Mnn/ts+Mo+VZMAmotfL3uCdMs5jm/eF
l1W2FtL1JB6W4Pida1bppP/GVIm4MNzfPJ2pOQjr8ltYGs2MeWornLzIXPGd
B3kIuol3+BIdNjY7JEi/hWXXHYh/mcn27kO4/hZKcK2QeRpK/yxW1In1c9U+
nEDOuc794xyi96AaeBN+0GEXo9t4/37RHnlyWP8sjgvPyblycblJ/TFHsilP
OM6zSHvG7HshFDF+9XROWlcNBqu8W0W/VMGXqQbHQ7D/wQmv5k3Y1nqfkfME
22lUyk7jQle4YnP6RFR8CXioVPJuxvGzK5c1P8NxYctUWTFsr8zo8ST2FY2M
WaR++qJiJsLjkNM0fY7t2IxFsYQnLCK9/sDcHKQeb1O+D2NjfYuc1LQsGCfm
oGZZ+B7GGyudIvE19TxbiI4THgFpVGoakp904UoY7h+fWpEYjOuVMJjOJ/W5
gi3Md2B9HHaJLF7Yn2L8Kof4WcxDEJnL4isK3ovr7XnRz0jiYUsMUwIxLggz
ZSS8Rt6JqXo4P1JxT+F+zJOs9pUhuorHN0wk8WIXsdW7sD6zHHtmwPbOLBEZ
Jsx3brigdRvXSY13m3oR6xab2MxLdEtRUxpJHbmSc7ypeL+81y6vJvXE7olY
RGD9Rnn5Z91x3oZop9wbRI93ri6p8/21oQfpZ97FZEnOxawfrqrLJwCPqdYC
cg6vZOI0yDxU8RWbFXD/Psqnc0pYV0BLcIUq5r0TX93zAPPqtx/hvouxS39H
rQru691nVhGEbQWvx/MeYrSb4f4lEdc/cfqxoPyxGMgpj95A9n7dKbHWENdd
L0u9T/aF3uQ5kfOsP1dv1oD3f+ewTBjZv5y841lyjg88JF3IOcc/ebdFBecl
H/ZKv671Hi1ebuamrJQNTyWsOfVLwuHY4/16LtjPGa4bdhTbHioidG7Yvv/Y
ahnzfny9vjN6KmCQjHy81m3SwnFfBcbkGzguYmtRdRrbc174lbpie9eZJMFr
GD+zTqzVwX43bTcdUtf67q5wXWzz+RbnqNt1ITmXXlmCMnzqencrEMx/x6rB
eqgMmRlcpT+I/SJtT5vNMD/7m6HDRqlidO25SoIw7h8hmpdK+jw/Ta0+heMl
zrZSM7C+XSbK292xP+muR+0J7Be3WXjLCGOA8HUFUu8ce1UEib8RMjlF8FpS
wCoTHD/HFizGhvNz4oJbiR7Lp3G3DmBctLKIUQ/HY0y0L3lgfWGbZ+4xxraA
WhsXK+abnzdRIvuZYMLXOgXrvv1RaBbJP/zmLgfp9y3WN5DsV0G3+zSpx/xS
0k0Q6+dhPHOJ7MfJjJpFdLB57Z5G0Lj70ZdjuL71xrUySjgv6Ca9qPa2CNg4
e1YP6ROm3ShG5mF20n5F5qVPcqq8h3Udd6gJOop5MR/v7iF1O1b1rib1OMq1
DUhfqakM28i+QgScfAh6LS6v3oPr1yw0Zl+3IxM5bOdS/kO/md9eFlxXwexl
BplD42ih9k3Md2jMOC+I9/+kI9V2GdZv5ODgS66Xs1TOLnKuwlttX87EeduE
LLbxrsiHPLe37xcH1iL3sOURcfYU9H66hDwP9p9mE/CKx/ZN+k88S7E9qe5U
5GqTFgjcLKvz6K4b5O8SkEQ4rr6T6iyA47yBXqYJ2DZLq9u/GNu39nMA8bd7
uF4jdcvVPokS/6r1R5+SulZlZZHlGsngP2NBXDZG5TniJVsy8O/R/Hx1/Zu5
aFP/Go4i7C+ZMokai/kMyjvrvr/OQeXuAtUZuP8iirMC0VXDp11B6lnYC5iu
xfpstlYuIXOpzY1VJv4rxkvfkv4C5nQ++bieYfELXhJnmbW4fRFGe651imSO
6dLSWYI4n3XegsAKzGPs1jQqw5jSUvaI5EvPPqRN9NUJM7GSuhvoxZlJv1iP
h1/JvvqrJWdpYd1zZiXLkrlqw9zul2LU0ZCM5cP7rS8560zqcvrxmKZj/UZq
vaZER8DFwgiiI7+tMYSgCWcbkH7joji8eHDeVo4Ls6Mki9Ap/rggss81cnXC
ZM85QV3dRG9LAlMAYF1Mu49sDMe8zKWRsvyY56F7tf2Pc3jEKkj22JFqdojY
MWIvlUmd8NkvLvMSXVJmQjPY82HFCYdzulg/+yHbInLOviyX4kmeisreTD7M
7zIX+k72H1vPaumO9UvH+k8ge+PRuniHxLf4O9wmeSyf63RtvtaAvx5LXpli
I8zmSuPYkpMCWglLx1/E/ru1Op9Fse1Y9rTgArZv9ZztvUlfhRzm6+Wg5R8h
p7J11gYc57dziiJ8EUaFc8LYNmNN30n4naez1hK/5EPJB6TOw8pTqaRfzcrW
r5ux7ey+P8P/SzFEF19188EodC1ToTb3PSRacm5pzYiBCf366vewX7DI1EYE
88tY7/GLcLxFajt1tGJxf9PgQm07XM9xX4AY4Hj4lNxv7lhfO7vcSdL/nUKl
gDj2cxe9PyOG8e6FJaJ3ST96e0eiS8dn82GS73ZzciaJd636OM0T5088Ym7q
i3lBhRM+kv4Hdj2dTeayjTzh2ID17bmUErMJ27Wb/A4QvqPpZC1SJ51fJ6YP
6w5Wk4i5g/NeF9x7eR/jtAwBJbJf6QjJlWTe2cJNa8n+Diy02EryIsJeJxO9
su73PpP9yN4UnE10GzQXc5fjvOtnot++upQNXUbLCojuSfbn4sk5yeVuFCfn
MYm/zYzsLd53whvC29Nr70rq5W6JcrLFyK/QU0T6incYXyX1p0gl3CH+aL73
M0txfZdluU85yyqQxYWJ4XVY/1uFY+5kLhfBwg6yh6Jn3IqEr69fWSWE99/4
Jn8R2b/ZvvPjiI709CX5pJ9cVnIV0UP3n3/WNPygvCPxvmT8D/6h8K/mDYXh
hn6p6+kyh6w7sL9baCJn+atXw9YzUv7vgsM9FxpvpOc4kD/c8/pfwYTW42bL
uIe/jwWbK1I3zkoe298Q2HbV/tZruRCkbtVp6Kn34s99bVe5PXHv5GeD7o8W
H5g3FM7105gcmJE0JN9aUTXQwiPxBx5NL80e2P8/9cOGPcdA/lA4sP9I8Wfz
h4vDPRcab6TnSOPT9jvYef0sHmbIfay950ddNP9g8V+Ff7XfwLz/lu7h7ul3
2eOv7j92XY2s77/lunodUHFj1/nIH/KK5oceOxsVNWi9oeKDYcAFvVpqLPrL
exlM72jrHK3+o53/T8PB9vv3PF8N/Twz9nz1c/h3P18ZHCpk79s8+u8JfhUO
pfeClFnNJ2rKP3ae323ffxVnKxkod4g8Rtbt59sL3CP+nFdeTorHo/rJoPPT
4gPzhkLRe9zFD5mHvj+8TjN+kFmf8AOPppdmD+w/sP7AOda+P2YwriN1UP5Q
OLD/SPFn84eLwz0XGm+k50jj0/Y72HmNvRcdXf1/N469F/3vInOrX7CDafX/
7Pz/LRz7e/DX9h/t/H8ajvZ+f1ccu1/9Xjj2XnR09P5b3os6Uwtu9px8hswV
Iz63L/3/+5m7t/35+fShg9ajxQfm/Wqk6aXZA/vb8Lmsu7D+xbDnGMgfaf+f
1f+rcLjnQuON9Bxp/KH2+7M4dr8aHb3/lvvV2HP7r+0/2vn/NBxsv+Nlrhp9
XvAcvd66Unf6mug/4x582yv14wa/v9HiA/N+NdL00uyB/Sc0MJkXL4wcdA6R
Oe1Wk0v+vvcsA/X/KhzuudB4Iz1HGn+o6+Rncez34Ojo/bf8HqyWFi3KP/bj
5zV2avPfBD4c/PlyYHywOjQ/DRmkJ8/b5BL+l/cyWJ/BeEPNMVT9oezR0j9w
TyPN/1U4VL+R7nekOHa/Gh29/5b71f86jn2/fQzH8J+P28qzPHju+v/5c3ct
dBF7ouc5RPNrqt3/eqzW9E97INLitLyDFi/3zacz+YFH89NwYP/BcDDeQP9A
3bQ4rd/AOQbm306oOhIw3uIHvcO1R4qDzTVwT4PlD7f/wL0MxRuMP1g/Gp+2
3191nY49X42O3rHnq7+GjU0uaA1H+pA60z4IrNG+V/CPn2cM/4MDz2vs88Gx
zwd/xeeDv9v3rce+3/6/hWPPV6Ojd+z5anj9x66rkfX93a+rqpxaFp4JqT/w
B/pp9kAcqu5IeYPlDeUfap7h8v+qPVIc7p5Gmv+zvOHue6g903DsezK/tv9o
5//T8J/y/XbrLCH7CP7sv13HGP4eOPZ8NTp6f/fnq43aq3Ya7qwCVa62msWB
FJgi3DVPtvMtOEnVBrVpdiPhRJGFdQkUML7zIF/CjgJmsYdZCmopoGXJ97pK
jTme3y1uodGMImA+0Gf7kJIHDnIfHGsc0xGnydFe9mcUSJEMjDRRLYJktsDI
V5qV4Ce4Mkc9uAJWTRfmr/hUAJznrwt8za8EA86atGmLP8DEqkbVcAYKrFkt
/ar8CgW6gkRl5gV/ALcTlvT7vCtBM23dE2ulQnA17nDfLMMU7xh/xfOzPAVm
XpWMd+Iogm+1l/ayl5TClHGX7yy9EIX6ZbgVOPLL4LHk9KQbXFUgz84laKwW
gCZ2e3W5vvREAYLiLdGnKNDcKvWI5dob6I9z/MAGVaB5cWF+yKJC8FkYp6ij
UAzvrmerFh6gixf8bDw54Uw5CCsyq0txVsALEb9nEw9QYP3Ct7uNyrrQWyVX
b91cCuywbj89D+uJUX3FWjOnC7Uz6Kmr1VbCR2v71Mo5FADZZWICHxKR++G9
+z0kKOBpJHhccnM6evLYzidCnAI56s0udbsp8H1vSN6cLePjH8F8auYsCvgZ
pXZ8WJIL+yx2Tj4knwcmejdXlBlVQaDoPd4mjgKQ+2Irwt1PAcb+Ou2cY/lg
KdKyrdg+EBQcQ1PtYirBZfwUE81VpVA1J80yqpQpPoNpdt8+30qIOhbsp7Op
DGbctDxxEn1CICDddr//Ghw/JC9ZlvUGOLunJtqGlCDpnfXOBZ+LYIZD8Iyl
26rQoe+lRyJbY2CiyF65nrRSxCPN+bY/6Sta7j5V2sqcCjzS10LviL+GfSxC
bqLUdvCWWcC816EVLufGRnSefI0mciaJvrvZAij2yI7KdTHQ5FOxpMAyDU5e
X8gh5f4R8rQyvNO3UaGUMXxy1OWrSI+S9TrctRUc7o0PvTm/BRj5j8sWc6Yi
R6bQVBHnVnDL6ckoOdgGMZsS4888aULh+3ML73L1IdmDu32MFTsQ+9cXxRzN
2WiPpYTvc9tx8SGXqQ8n6NxAT6kWQtV8vehgXXX6NCv6eN17WadmHWsBuhl2
+7OnV8ISN6XoHXYVSMuULUtPvg2qVB/mHA1IRz566rsrOp7AhqvWdpr239EU
vmCpfWZN4LS7ilXqOxW2LbgRKszSDY/3fxJf6hMB17juOlkkfUd7VqVVBub0
olUM7jK9bCmoRd1lUn7APVBjmhYsdaQRzr/KirPMKIJmCZ07BjItYLfy9hF+
nxwUlByyyelQG3oyj+fS2d5ORJk6p8s9PAbx3n5RrlDYitgW9J2cdv0bMlFf
s3HKmlawTvVIZl3UAi49XebPZ1Lhaebj1dasKcgw+5jO5cAE5F1kbbPfXRux
RT7wTjVuAY72go9r6VVguuqVWWpdaeDElJJgYfEBqdY1bbxgEw1MZmKBjUta
QF64nuXipRbolfwmtnkNFSX7z4w4w9sCBo7v8pjo2+BSKPP6oGOxaOnlwK7M
6fkgfO2Uoo9jNfioZfax+FQiDknWhxx4D5Kna+7pJVDhq0qYrXFWG7rsYtju
4foVHXl9XYNVqBaMTq75IK1UD/yXbFYnb/RAM7ki+fn3U2ATiHAfacxD2s0d
YmFmJZCZbL72kCn+udOb2ZPBVoWya+1vfx5fBeLXvRZPeVgJbM3bphWcqgKR
8UnsqMwamS954+ssXQxeZ95/tr8YC8+YYu34eylwcY/0taaVVVBq0CNWnFcO
Oi+3m+++gO9/XsvH2ThSoOh9F9/lijLEc/m5vKZGJSop6tvAuiIDvl5MbfbK
K4Ury3L85zswx6/fw803SSMOBJ0/v17EeRwiQksFEhgqIcx9dpfV3Co43zKF
O8EhGClt6JOmvsqCfv5Fe88+ocCe5NpqEd4yWGt4gbtHhy0+s7/b0GlyD3oj
PUnZ6DsF1LjFn5bpU8DfPIlJvqASeKcHhWpcLYSA8u1RCSZfkKf1zoYNeymo
LvuBa2NlEuxm01RNOZQH02qqz1FVy8BuBXtXplUlcHzv6FhQTYEoe4O1LIdL
4bzytHEVnh3I44gW9/6vk+KVA7s+ZkSWQpxRKfc8sQZUOvsDBYVSgCMgyz/b
lwK7xLNSG7IpQGeLwlzz8P1jpa7hLu8PwPha0uM+vm7XPttnlMReCYWL1m9X
LaNA57dvIR/FY0H3ksXB0zMrYQIvQ1tBThxk2MdZv5j5DngZk3TKJ1XBqzlr
hbq3UoD1k4SN0csGNC2XqW3BnCq48aHB3/trJcT3WrVOVSwDppDO9oo8uvgm
z47bkzeUguykwvEsS97g6zJigqFaD1rs+XXhDTMKbD3zoXHRq2RwcFQZd72+
FE4yVdzxEamAcOmm8fuwbce7+mJJbxdKWckslqLYDCui1u9XMq5B03Nct+hO
KYMKc9fonNB2CNVc8Zh5RjXqv31/94HXfaA4MTt41eQ8WNyo4n/c4D7wfXvn
bHi4DO4fYKdOZaRCAffGl8V+uXBCy3yTTUA7xLCvadCI7IOQp0rdibIN6J2Z
QdPxi+1gzGm276xnHmR76Cksr21BvC4uGhMUmpAt/5U7HuxfUJDnuf01rrlo
2eYda8av70DPrV0Y3ui4QX6QYUXK2hY0bW1CwvOZXWj3ATFldp8+cH0azeFL
X480GAXEVsjUI/vMwKsRR5vhNFenzArNetQQkhb82KMBuYjUHr9t3o7411j7
LInpg8PVwRWGDz5Ca0Tbyfsd9Yg5crFIwrxyVF/4vFHZqR2xn1web57SiUBj
WqqkQCMqGse+2upCGXqw4tRUlcdlEB4cuXLdDR1Y5ieg/yWvDxpi7i0I7a9C
rr2eJfG3m1Ef2/WkQIFWZNexOsyqJQNt4Fdy6LZpQS+Xa+VK63cg3wnB4jah
3cBnKhO+vqIPvFdyMWaKU2EiR4poyKN6fD9Y2THhWC5K+yQ4jTu/GXHvShGI
ze+D/KPmQtxBZcDl2n3v7qNseLRKT5H1SheifxlbFTcvG2UeFlkyK6UPfGza
HwWlf4Fnc/QY1HQb0YJ1c2Ib/PtA+ECm3QHUCOujTxxK8CtH2jOm1j1VDkDZ
BQH1qXfrEeO3JuOE0FpEd2pD9l7lDkSXtDuqf0kTRB3XdN9lVoHu2E5Wcmgr
QmrCj67u396AJBSmWtMxdYG8miVFwrcWOdbYHorWpMAj4S2yIqpd8PzhgmNR
S7+hoJs8Xk3fPcC0zsHKjrUeNA8yzl32gIK4JAoL0hyboZ5JdsWcug7YKDBV
lk+9E6bxf/VNnpgP71WauQ0LxsfHjVt3w7u2HOXX8BgfnZ0IMrW3yhZvpEL8
2R7fqm+VcEjr4vYlym3IYN2OS5JiHyE1SjR9rtlnVMYQk8hz9jM6ohmuu5yL
Id5Stj+HMzwLZR04uOogTwMs8885NJkpE21zyQ4q7kyG/iXjdt0RLUJ8HZlK
j/SrUW6ZxINOxSrIXXasUx7fB6aI31jFsQ/r6C2tSbxJhd7oxIIUr2pUby0U
W6D/BfGw6yu1eVJBYIaT2bWt7ajAme7b+Kg2EGU6LSHOEAsqUsuS4k43oNuq
urrXznaiV6cE96ldbwKjYPnmwwfp4oVYlu/qYaqGrXorQ1ak1MKtq3VrKKEN
sOj145VnLjVBUltdRU1cHgiLh1Yvm1WFml3ZDie0N4B7/8uaXR3ZsEC1Z9NH
+lpgvRx602puC1rr7cyixvIBpckdnRz8CiHXF7d4wlAHxN86oXslIATN3btl
ghFnFew4H+knq1iDTK2UJjIfaIOWjrVfb7EXQNOmd5IcF6vhqqXQxRPCPcjK
j7fozYYudLAvrWWbczXwun1qWr7nIyg6e20+GPYGdusrPHQy6QQq+7elCtz0
8evXz2eIuN2Czmi0LFV+1wnMb9f5n55VAV0J5+h71hTCc77zs5NVGuFBbl6C
agcVYjMkMr5PakVpcfriV1QaoKF6j7Xck2r0fwKY4tI=
         "], CompressedData["
1:eJwBZQKa/SFib1JlAQAAAEsAAAAGhRb8DiT+P6YAdc4RHwFAJUZi7zz/CEDk
LkzgIS0GQA1be6PdHvM/NfhMpMg2B0A6r/sTXgz4P3exotE0ViFAXWrgK7cP
/D8eART3JE37P+HmqqlxIQ9AABwuRaGMAEALXOogpU0FQGLhf2nm3Pc/kzPE
gKaMAEDHckB+TOP+P0tGrLasMgZAcNY/azTLEUBBcC0/eVINQHLRJCiemAtA
tQ9aJrPtJ0BVEXXQHYnqP4vCeAZHyQBAXMDoFXjVJUCX/Hdt5lwGQOgNwPjR
H/E/nzE2CP+D9j9EtXkVJXD9P/9TX206mPA/rdoI7jAAKEBq960YJv4UQNxd
FFULwBBAlBcrmE/GAUB4TE2QkBAEQPyhOa1wBPs/9xzgZ6ROFUD7Dggxl1oQ
QJqO15lpYQ1AtnacmSc78j/Se2TkC20JQMaNTAdsNPQ/pN2GWUUQDkCRdnP8
dHbwPxv2PSbqeQxAFIBvfZbqIECKyjWJiXDzP5BR6a2lDQhAaBsMLrdoCkDc
GjHuAcIDQAHEp+ZKaghA4fosheVO/j9ucY/s48PuP3IIs3K5jBNA1dbGSB/1
8D84IPzH9moGQIE7QbdvXuk/Mz0Z9Vya+j/8TgAhdYf5P9IQF5Yne+g/G/Qp
afBIDkB8qRZjuUMKQKTM9B2VLQZAONyHAYsNCEBsbjvGmv8gQE4pr03+eP8/
7LwAIGfTFECE2tFbc8/6P/J9H3pGef8/59N4pmtPFUAVnxBxvsv7Pxa3K7fs
8PU/TKmUXFX2CECXh8uqn4P4P4N+Pkjp9ABAjm+hMNiOD0DxdAwX
         "]}], "NeighborsNumber" -> 50, 
      "ClassPriors" -> {0.08750000000000001, 0.2625, 0.325, 
       0.21250000000000002`, 0.1125}, "TrainingOutput" -> 
      RawArray["UnsignedInteger8",{5, 3, 3, 3, 5, 4, 4, 1, 2, 2, 3, 3, 2, 2, 
        4, 5, 3, 3, 5, 4, 4, 1, 2, 2, 3, 3, 2, 2, 4, 5, 3, 3, 4, 4, 1, 2, 3, 
        3, 2, 2, 4, 5, 3, 3, 4, 4, 1, 2, 3, 3, 2, 2, 4, 5, 3, 3, 4, 1, 2, 3, 
        3, 2, 2, 4, 5, 3, 3, 4, 1, 2, 3, 3, 2, 2, 4}], 
      "DistributionSmoothing" -> 0.5, "Processor" -> 
      MachineLearning`MLProcessor[
       "FirstValues", <|"Info" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
            "], "Type" -> "NumericalVector"|>, "Key" -> "(f2f6(f1f3f4f5f7))", 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
      "NearestNeighbors", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NeighborsNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
        "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
        "NearestMethod" -> <|"Value" -> "Scan", "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.129893`5.565130740848548, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[1.4987313455797022`, 0.06365966422662989], "Accuracy" -> 
         Around[0.3263837789328387, 0.06908920965277063], "EvaluationTime" -> 
         0.000016745909543397192`, "TestSize" -> 45, "ModelMemory" -> 29368., 
         "ModelUtility" -> -1.1062738888266277`, "TrainingSize" -> 60, 
         "TrainingTime" -> 0.0025118864315095794`, "TrainingMemory" -> 
         206070., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
           Around[1.4763490220159943`, 0.09415360809439308], 
           Around[1.4818551020667152`, 0.10354774750993911`], 
           Around[1.5379899126563978`, 0.12234952968892622`]}, 
         "AccuracyHistory" -> {
           Around[0.3263837789328387, 0.11966602137337685`], 
           Around[0.3263837789328387, 0.11966602137337683`], 
           Around[0.3263837789328387, 0.11966602137337685`]}, 
         "Configuration" -> {
          "NearestNeighbors", "NeighborsNumber" -> Automatic, 
           "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
         "FinalTrainingSize" -> 75|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NearestNeighbors", 
           "Options" -> <|
            "NeighborsNumber" -> <|"Value" -> Automatic|>, 
             "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
             "NearestMethod" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[2.2317550473264305`, 0.1575292369908921], "Accuracy" -> 
              Around[0.21548697671099126`, 0.07193022356065097], 
              "EvaluationTime" -> 4.865042554105199*^-6, "TestSize" -> 65, 
              "ModelMemory" -> 11136, "ModelUtility" -> -1.509998038939139, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0031622776601683794`, 
              "TrainingMemory" -> 86840, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.2317550473264305`, 0.11138999171140253`]}, 
              "AccuracyHistory" -> {
                Around[0.21548697671099126`, 0.05086234885200067]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.4987313455797022`, 0.06365966422662989], "Accuracy" -> 
              Around[0.3263837789328387, 0.06908920965277063], 
              "EvaluationTime" -> 0.000016745909543397192`, "TestSize" -> 45, 
              "ModelMemory" -> 29368., "ModelUtility" -> -1.1062738888266277`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.0025118864315095794`,
               "TrainingMemory" -> 206070., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[1.4763490220159943`, 0.09415360809439308], 
                Around[1.4818551020667152`, 0.10354774750993911`], 
                Around[1.5379899126563978`, 0.12234952968892622`]}, 
              "AccuracyHistory" -> {
                Around[0.3263837789328387, 0.11966602137337685`], 
                Around[0.3263837789328387, 0.11966602137337683`], 
                Around[0.3263837789328387, 0.11966602137337685`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000016745909543397192`, "MeanCrossEntropy" -> 
             Around[1.4987313455797022`, 0.06365966422662989], "ModelMemory" -> 
             29368., "TrainingMemory" -> 206070., "TrainingTime" -> 
             0.0050461924838005635`|>, "Index" -> 1|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            2], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], <||>], "MaxTrainingSize" -> 75, 
      "PreprocessorEvaluationTime" -> 2.10546875*^-6, "PreprocessorMemory" -> 
      178720, "InputDimension" -> 44, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.504445381309891, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.879152815961472`16.341311877762735*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.0025978600000000004`, 
          "ElapsedTimes" -> 0.004564, "ExperimentCounts" -> 1|>, <|
         "TrainingSizes" -> 60, "TimeBudgets" -> 0.012989300000000002`, 
          "ElapsedTimes" -> 0.011365, "ExperimentCounts" -> 3|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, "ID" -> 
           3795572968267006573|>, 
         "f2" -> <|
          "Type" -> "Nominal", "Weight" -> 1, 
           "Values" -> {"Information Technology"}, "ID" -> 
           3401139331922032727|>, 
         "f3" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369}, "ID" -> 
           4714656301856831657|>, 
         "f4" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {23.778}, "ID" -> 
           4624390425862832796|>, 
         "f5" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {100.249}, "ID" -> 
           8583462845398299564|>, 
         "f6" -> <|
          "Type" -> "Text", "Weight" -> 1, "Values" -> {"Estimated data"}, 
           "ID" -> 3095956687388126824|>, 
         "f7" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {256.9105}, "ID" -> 
           1111199487588034056|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 0.169675, 
      "MaxTrainingMemory" -> 524880, "DataMemory" -> 118040, "FunctionMemory" -> 
      285632, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 12, 4, 14, 26, 55.985813`8.500652963371868}, 
        "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, "ProcessorType" -> 
      "ARM64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, 3.8788071767848167`*^9, 
   3.878811643047717*^9, 3.8791492159968452`*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"da7cb8fa-e3c7-4a74-90b7-10200472e58e"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Data type"], 
                   TextCell["Data type"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{
                   InterpretationBox[
                    Cell["Mixed"], 
                    TextCell["Mixed"]], 
                   StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]},
                  "RowDefault"],
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                  Short[#, 10]& ]],
                Annotation[#, 
                 
                 Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                   "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classes"], 
                   TextCell["Classes"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 InterpretationBox[
                  Cell["A"], 
                  TextCell["A"]], 
                 InterpretationBox[
                  Cell["B"], 
                  TextCell["B"]], 
                 InterpretationBox[
                  Cell["C"], 
                  TextCell["C"]], 
                 InterpretationBox[
                  Cell["D"], 
                  TextCell["D"]], 
                 InterpretationBox[
                  Cell["E"], 
                  TextCell["E"]]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"33.", "7."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    32.6383778932838737319`3., 6.9089209652770628978`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Method"], 
                   TextCell["Method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 
                 InterpretationBox[Cell[
                  "NearestNeighbors",ExpressionUUID->
                   "2b8ea365-8683-4b0b-b531-4744ce0158e0"],
                  TextCell["NearestNeighbors"]],
                 StyleBox[
                  TagBox[
                   
                   GridBox[{{"\"NeighborsNumber\"", "50"}, {
                    "\"DistributionSmoothing\"", "0.5`"}, {
                    "\"NearestMethod\"", "\"Scan\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                  "Verdana", StripOnInput -> False]],
                Annotation[#, 
                 Style[
                  
                  Grid[{{"NeighborsNumber", 50}, {
                    "DistributionSmoothing", 0.5}, {"NearestMethod", "Scan"}},
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                   GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                 "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"2.03`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"44.6`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                   Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"1.4987313455797022232`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0636596642266298862`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "1.3714120171264423398`3.", "\", \"", 
                   "1.6260506740329621067`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 1.3714120171264423398`3., 
                   ", ", 1.6260506740329621067`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Model memory"], 
                   TextCell["Model memory"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"289.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training examples used"], 
                   TextCell["Training examples used"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               TemplateBox[{"75", "\"examples\"", "examples", "\"Examples\""},
                
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training time"], 
                   TextCell["Training time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               TemplateBox[{
                "169.`", "\"ms\"", "milliseconds", "\"Milliseconds\""},
                "Quantity"]},
              {
               ItemBox[
                
                DynamicModuleBox[{
                 MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                 DynamicBox[ToBoxes[
                   Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8027882926750595}, {
                    4.0943445622221, 0.40461898062971785`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.8027882926750595}}, {{4.0943445622221, 
                    0.40461898062971785`}}}]}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.7295879806094983}, {
                    2.302585092994046, 0.8709938584667972}, {
                    2.302585092994046, 0.8709938584667972}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, 0.3612148001264365}, {
                    4.0943445622221, 0.4462173464715679}, {4.0943445622221, 
                    0.4462173464715679}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-2.178060225738475, 0.37345997233943207`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-2.178060225738475, 4.31748811353631}, {
                    0.37345997233943207`, 0.8027882926750595}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.21548697671099126`}, {
                    4.0943445622221, 0.3263837789328387}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.21548697671099126`}}, {{4.0943445622221, 
                    0.3263837789328387}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-2.178060225738475, 0.1741968175905175}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-2.178060225738475, 4.31748811353631}, {
                    0.1741968175905175, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8027882926750595}, {
                    4.0943445622221, 0.40461898062971785`}, {4.0943445622221, 
                    0.40461898062971785`}}]}, 
                    Column[{
                    Style["NearestNeighbors", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NeighborsNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}, {
                    "NearestMethod", Automatic}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8027882926750595}}, {{
                    4.0943445622221, 0.40461898062971785`}}, {{
                    4.0943445622221, 0.40461898062971785`}}}]}, 
                    Column[{
                    Style["NearestNeighbors", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NeighborsNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}, {
                    "NearestMethod", Automatic}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-2.178060225738475, 0.37345997233943207`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-2.178060225738475, 4.31748811353631}, {
                    0.37345997233943207`, 0.8027882926750595}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, -1], 
                    Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, 
                    Plus[1]], Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                  ImageSizeCache->{330., {122., 127.}}],
                 DynamicModuleValues:>{}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> 
           ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  MachineLearning`MLInformationObject[
   ClassifierFunction[<|
    "ExampleNumber" -> 75, "ClassNumber" -> 5, 
     "Input" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|
           "Elevation" -> <|"Type" -> "Numerical"|>, 
            "GICS Sector Name" -> <|"Type" -> "Nominal"|>, 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Disclosure" -> <|"Type" -> "Text"|>, 
            "Revenue (USD mn)" -> <|"Type" -> "Numerical"|>|>, 
          "Output" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
            "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["FromDataset"], 
               MachineLearning`MLProcessor[
               "FromNamedFeatures", <|
                "FeatureNames" -> {
                  "Elevation", "GICS Sector Name", 
                   "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                   "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                   "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                   "Carbon Disclosure", "Revenue (USD mn)"}|>], 
               MachineLearning`MLProcessor[
               "Transpose", <|"FeatureNumber" -> 7|>], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {
                  "Numerical", "Nominal", "Numerical", "Numerical", 
                   "Numerical", "Text", "Numerical"}, 
                 "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6", "f7"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          False, "Invertibility" -> "Perfect", "StructurePreserving" -> False,
           "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
            "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Output" -> <|"(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["

1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
               "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
            MachineLearning`MLProcessor[
            "SynthesizeMissingValues", <|
             "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Distribution" -> 
              LearnedDistribution[<|
                "ExampleNumber" -> 75, "Preprocessor" -> 
                 MachineLearning`MLProcessor[
                  "ToMLDataset", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>, 
                    "f6" -> <|"Type" -> "Text"|>, 
                    "f7" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                  "Processor" -> 
                 MachineLearning`MLProcessor[
                  "Sequence", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 1621909218748444882|>], 
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>, 
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2074781423290265366|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 20679206186753951|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>, <|"" -> 1|>}, 
                    "MissingCode" -> Indeterminate, "Version" -> {13.1, 0}, 
                    "ID" -> 4023015169247141483, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "LogRescaleNumericalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Indices" -> {2, 4, 5}, 
                    "Centers" -> {0.43, 23.052, 256.593674903342}, 
                    "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
                    620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
                    3527897072513609120, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {146.57391774891778`, 3.693542625490828, 
                    68.22157333333334, 3.504982149660075, 
                    1.4086804722859232`}, 
                    "StandardDeviation" -> {253.37495961794207`, 
                    3.1699732836017724`, 118.62403407631172`, 
                    2.423277341145054, 1.2610287731963699`}, 
                    "Output" -> <|
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2274174826257793629|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {11, 1}|>|>, 
                    "Boundaries" -> {{-0.5, -0.40909090909090906`, \
-0.3181818181818182, -0.2272727272727273, -0.13636363636363635`, \
-0.04545454545454547, 0.045454545454545414`, 0.13636363636363635`, 
                    0.2272727272727273, 0.31818181818181823`, 
                    0.40909090909090906`, 0.5}, {-0.5, 0.5}}, 
                    "Version" -> {13.1, 0}, "ID" -> 8505008840132824157, 
                    "Output" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>, 
                    "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
                    Span[1, 2], 
                    Span[3, 7]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {13.1, 0}, "ID" -> 
                    373596144042670943|>]}, "Invertibility" -> "Approximate", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                 "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                 Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBmQFm/iFib1JlAgAAAAcAAAAHAAAANBt6Fr3csL/lG+Yz4ESRP7hBka92
l6I/3+CsXPnbnb8juBQyj++mPyQSP5BqJYY/vak1fWbb7z9Exb6rXA+mP3bs
bygIL6y/qBWDW9y8oz+sdTB+ZCFvP+M3K7whyrK/oZKNG3/O7792PFDDUfyQ
P9/U3bojxJC/o5bbS9uw5z8WAjGjisXkP97C+Aj2NcU/OamW7DSFoj9l4xTQ
yZiTv+5YNgcGV6G/JjWbdhS247/4DI4+z4GiP+damijBtq0/AUhvWGOt0r+S
UyYwEkrnv7xCV9Xbd5o/7dmZYqsIlL+U6TKOWh/fvyeCdPr2xcm/z+izHsbw
ab/DCMuYpSLrPyWlgzDxQ68/IU0Nlm9mh79gtGMp7lp6v5IjpI1bXuO/gG3Q
78EAir9w8Q54CT+tPz6D4J3Vndm/VLWB566j5T+EcC9VEICzv/LeOJ47T7W/
77C3YnYxuz+XzXfud2fkvwL5lh2DJOg/lXZTGNvFtb8Pcd+T9BKZv2lvrRrr
CbI/A8vXaYtBiL/H/s72
                    "], 
                   "Precisions" -> {0.4602875814560013, 0.9399443097653287, 
                    1.0616808801506838`, 1.6265466434380347`, 
                    4.517522263650691, 10.595148643942485`, 
                    23.23460552022561}, "NoisePrecision" -> None, "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781967`, 0.012269055622142968`, 
                    0.0013959895289638008`, -0.0005267240067510293, \
-0.00032143499611032286`, -0.00013378352049829329`, 0.0005265431937281588}, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 6648082896216031031|>], 
                   "PostProcessor" -> 
                   MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7.|>,
                     "Key" -> "((f2f6)(f1f3f4f5f7))", "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                   "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 7, "Options" -> <||>|>|>|>, 
                 "TrainingInformation" -> <|
                  "Configurations" -> 
                   Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                    "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1557841622946289758|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                   Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                 "NaiveImputer" -> 
                 MachineLearning`MLProcessor[
                  "ImputeMissing", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {0.10539827666781965`, 0.012269055622142968`, 
                    0.0013959895289637327`, -0.0005267240067510641, \
-0.00032143499611037723`, -0.00013378352049824886`, 0.0005265431937281691}, 
                    "StandardDeviation" -> {0.2336748535148706, 
                    0.32111585513998464`, 0.9989140580916157, 
                    0.9992891216961265, 0.9999122924148031, 
                    0.9998629533873012, 0.999126702363375}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f2f6)(f1f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1557841622946289758|>], "InputDimension" -> 0, 
                 "OutputDimension" -> 7, 
                 "Log" -> <|
                  "Example" -> 
                   MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, 
                    "ID" -> 2988406535272383851|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"Information Technology"}, "ID" -> 
                    8211126643196690843|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369},
                     "ID" -> 220143977676884624|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {23.778}, "ID" -> 8845109505593024510|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {100.249}, "ID" -> 827490798644983815|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 4409963340497863227|>, 
                    "f7" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {256.9105}, "ID" -> 5236914127772614391|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                   "TrainingTime" -> 0.068858, "MaxTrainingMemory" -> 219608, 
                   "DataMemory" -> 22976, "FunctionMemory" -> 86128, 
                   "LanguageVersion" -> {13.1, 0}, "Date" -> 
                   DateObject[{
                    2022, 12, 4, 14, 26, 55.902642`8.500007307606808}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, 
                   "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                 "LogPDFDistribution" -> 
                 MachineLearning`TailedQuantileDistribution[<|
                   "Quantiles" -> {-7.173238193477166, -7.173238193477166, \
-5.957762682813879, -5.505343391085791, -5.137053644875943, \
-4.839361849432994, -4.800994757869588, -4.736339520600383, \
-4.720994010399741, -4.71905825007799, -4.703766525124256}, 
                    "LeftBoundary" -> -5.957762682813879, "LeftScale" -> 
                    0.6077377553316436, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                 Around[36.60573897803041, 1.772055230348638], 
                 "EntropySampleSize" -> 10|>], 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
              "ID" -> 8833432794738512184|>], 
            MachineLearning`MLProcessor[
            "Threads", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>, 
                "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "(f1f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 8812518305512619507|>], 
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 7405342354547017736|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
              "Missing" -> "Allowed"|>], 
            MachineLearning`MLProcessor[
            "LogRescaleNumericalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
              "Indices" -> {2, 4, 5}, 
              "Centers" -> {0.43, 23.052, 256.593674903342}, 
              "Cutoffs" -> {0.3070000000000002, 0.7430000000000023, 
               620.9010016845891}, "Version" -> {13.1, 0}, "ID" -> 
              7299988401548215772, 
              "Output" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>|>], 
            MachineLearning`MLProcessor[
            "Standardize", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
              "Mean" -> {146.57391774891778`, 3.693542625490828, 
               68.22157333333334, 3.504982149660075, 1.4086804722859232`}, 
              "StandardDeviation" -> {253.37495961794207`, 
               3.1699732836017724`, 118.62403407631172`, 2.423277341145054, 
               1.2610287731963699`}, 
              "Output" -> <|
               "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 1400194064660864776|>], 
            MachineLearning`MLProcessor[
            "ToLowerCase", <|
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 3080611390123234620, 
              "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
            
            MachineLearning`MLProcessor[
            "RemoveDiacritics", <|
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 8393247813432535084, 
              "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
            
            MachineLearning`MLProcessor[
            "Threads", <|
             "Input" -> <|
               "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
                "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "EmbedNominalVector", <|
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f2" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>}, 
                  "Output" -> <|
                   "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>|>, 
                  "EmbeddingVectors" -> CompressedData["
1:eJxTTMoPSmVmYGBgBGIeIGZlwAANaDSyuINV5XF7IP0gJG/3fiC9wNDnNIjf
ICJ2FcR/IHn3Poi/gM/rKZgf6n8QrC7ZZSuIdtjqegMk77C36wKYvzLrFVje
m+cMWP3c+/vBtN3JS2D6yeWLYPkZKy+D+S8/gO0/YOZ2E2wP0+lLIJrBWOIc
WPzO1IcgdQ2LGjeB3TUp+SKYVtMFuy+h+e8TEH0gZu8JsL6j5o/B5gcFgd1z
QGXZU7D77ga+BKv/OBtsr0L9dYg7eOPvguXTp10Gm/vmJDgcFDacBZvv4HF9
Ith+wUiwvgajkndgfdOYHoHDbXHBcxCdECkFdndCbOtXsD9uJB4Bq1v48ybY
HTsegP3PYPvzEVi8+NYWsHv2tz0Em2N16SiY72lzDWzP1gO3wPoMs46A5BW2
L5wMlt+n82o/AO0BofY=
                   "], "Version" -> {13.1, 0}, "ID" -> 436956950344966148|>], 
                
                MachineLearning`MLProcessor[
                "Sequence", <|
                 "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Processors" -> {
                    MachineLearning`MLProcessor[
                    "TextToNominalSequence", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {13.1, 0}, "ID" -> 9037232907786629142, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", <|
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> {-9125122986955958911, \
-8920710729279180450, -8515397617198652367, -8156047279148961366, \
-5900137721653868194, -5516340669880835636, -4691435917638705529, \
-4484112905383790136, -3872414778415116274, -3607098371778122975, \
-3443150737398804539, -3355080348777836050, -2509905740948760720, \
-2159536488856785732, 242552411836269492, 450553210381435687, 
                    539691877398804025, 950421020428451240, 
                    1561895621580759179, 1579009397565082067, 
                    1671416204203290022, 2799484578252825308, 
                    3287432777910049379, 3477167097823690523, 
                    3576478456825362866, 4539722962543247872, 
                    5070765454536077049, 5138905625963890559, 
                    6058376361354581924, 6694985464746702812, 
                    6748311694457965250, 7603334142034012365, 
                    7731804819316663270, 8918825649307280967}, "Values" -> 
                    None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {13.1, 0}|>], 
                    "InverseDocumentFrequency" -> {1.91959284073794, 
                    3.624340932976365, 1.3217558399823195`, 
                    2.0149030205422647`, 2.0149030205422647`, 
                    2.120263536200091, 1.3217558399823195`, 
                    2.9311937524164198`, 1.2729656758128873`, 
                    1.91959284073794, 4.31748811353631, 2.120263536200091, 
                    4.31748811353631, 2.0149030205422647`, 
                    1.4842747694800942`, 2.0149030205422647`, 
                    2.120263536200091, 1.5448993912965292`, 
                    2.0149030205422647`, 1.3730491343698699`, 
                    2.0149030205422647`, 3.624340932976365, 0., 
                    0.11279549414534427`, 2.0149030205422647`, 
                    3.2188758248682006`, 1.4842747694800942`, 
                    2.9311937524164198`, 2.0149030205422647`, 
                    2.0149030205422647`, 0.5332984796180493, 
                    2.120263536200091, 4.31748811353631, 2.0149030205422647`},
                     "Version" -> {13.1, 0}, "ID" -> 7526152790873636702, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                  "Invertibility" -> "Impossible", "StructurePreserving" -> 
                  True, "Missing" -> "Forbidden"|>]}, "Invertibility" -> 
              "Impossible", "StructurePreserving" -> True, "Missing" -> 
              "Forbidden"|>], 
            MachineLearning`MLProcessor[
            "MergeVectors", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f2" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
                "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                "(f1f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Spans" -> {
                Span[1, 5], 
                Span[6, 39], 
                Span[40, 44]}, 
              "Wrappers" -> {Identity, SparseArray, Identity}, 
              "Output" -> <|
               "(f2f6(f1f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
                   "], "Type" -> "NumericalVector"|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 613954820935696947|>]}, 
          "Invertibility" -> "Impossible", "StructurePreserving" -> True, 
          "Missing" -> "Imputed"|>]|>, 
     "Output" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "ToVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 9119616879012754245|>], 
            MachineLearning`MLProcessor[
            "IntegerEncodeNominalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Index" -> {<|
                "A" -> 1, "B" -> 2, "C" -> 3, "D" -> 4, "E" -> 5|>}, 
              "MissingCode" -> 0, "Version" -> {13.1, 0}, "ID" -> 
              1482488055587057283, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
            MachineLearning`MLProcessor[
            "FromVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|
                 "Type" -> "NominalVector", "Weight" -> 1, 
                  "SetSize" -> {5}|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 4789940262906318728|>], 
            MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 5|>,
               "Key" -> "f1", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
       "Name" -> "class", 
       "Marginal" -> <|
        "A" -> 0.08750000000000001, "B" -> 0.2625, "C" -> 0.325, "D" -> 
         0.21250000000000002`, "E" -> 0.1125|>|>, "LabelSplitter" -> 
     MachineLearning`MLProcessor[
      "FeatureLabelSplit", <|
       "Processor" -> 
        MachineLearning`MLProcessor[
         "KeyIndexSplit", <|
          "Index" -> "Ratings", 
           "Order" -> {
            "Elevation", "GICS Sector Name", 
             "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
             "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
             "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
             "Carbon Disclosure", "Revenue (USD mn)", "Ratings"}|>], 
        "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
     "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
     "Prior" -> Automatic, "Utility" -> 
     SparseArray[
      Automatic, {5, 6}, 0., {
       1, {{0, 1, 2, 3, 4, 5}, {{2}, {3}, {4}, {5}, {6}}}, {1., 1., 1., 1., 
        1.}}], "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
     "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
     "Model" -> <|
      "NeighborsFunction" -> 
       MachineLearning`PackageScope`NeighborsFunction[
        "BruteForce", {CompressedData["
1:eJztWgk0lmvXFqXRkEoqJaGkOUOTbCpDVIaSIpUhU6SBIpRkLClRFCJFURoM
CXGbh6hkJtNrVobXmFD9932+9Z5/LS0LJ33ndD6t1brW3vvae19734/H43lf
bk1jpSP0dHR0y/F/OYI3jiiX3qDAjr3ejCqx6WiuVnfZq8ocoLuS2FmG/XZC
37IisC3HHiz9AdtMX+o8n7/Jh7WlqmLbRQsgg3lh9wscTw63OE/iLq2UrHBs
l2sflyT5u76buJVjdEafi6KwP5o16j7pd+N0uxXpY/7WKef+8Xo0QU4hJQDj
Ywe1w8EGHyFlfLh6l1cuMPq/OOyP/d9tXfgJ/4mt4zv3oFx4sqhdRRr312fd
lkHqfXNqnE90Mrw4MecJ1ifbQGUierLaHiwnebsKT/8xx4FUszf3cL2c+lhF
os/Kft4Zgs/f6217iePyZew1ITifW1BwHNHDEm1ym+hb4yN1gsx57vvePY+w
Pv4jsVGE3ybBfpL0y2CSFyb99O+su9KMdb/pWZJCdJ+rOdVCsLZ1X60G3q/O
hoeWpC5HqZU80W84ZTsjybvevVaL7Mnn/ts+Mo+VZMAmotfL3uCdMs5jm/eF
l1W2FtL1JB6W4Pida1bppP/GVIm4MNzfPJ2pOQjr8ltYGs2MeWornLzIXPGd
B3kIuol3+BIdNjY7JEi/hWXXHYh/mcn27kO4/hZKcK2QeRpK/yxW1In1c9U+
nEDOuc794xyi96AaeBN+0GEXo9t4/37RHnlyWP8sjgvPyblycblJ/TFHsilP
OM6zSHvG7HshFDF+9XROWlcNBqu8W0W/VMGXqQbHQ7D/wQmv5k3Y1nqfkfME
22lUyk7jQle4YnP6RFR8CXioVPJuxvGzK5c1P8NxYctUWTFsr8zo8ST2FY2M
WaR++qJiJsLjkNM0fY7t2IxFsYQnLCK9/sDcHKQeb1O+D2NjfYuc1LQsGCfm
oGZZ+B7GGyudIvE19TxbiI4THgFpVGoakp904UoY7h+fWpEYjOuVMJjOJ/W5
gi3Md2B9HHaJLF7Yn2L8Kof4WcxDEJnL4isK3ovr7XnRz0jiYUsMUwIxLggz
ZSS8Rt6JqXo4P1JxT+F+zJOs9pUhuorHN0wk8WIXsdW7sD6zHHtmwPbOLBEZ
Jsx3brigdRvXSY13m3oR6xab2MxLdEtRUxpJHbmSc7ypeL+81y6vJvXE7olY
RGD9Rnn5Z91x3oZop9wbRI93ri6p8/21oQfpZ97FZEnOxawfrqrLJwCPqdYC
cg6vZOI0yDxU8RWbFXD/Psqnc0pYV0BLcIUq5r0TX93zAPPqtx/hvouxS39H
rQru691nVhGEbQWvx/MeYrSb4f4lEdc/cfqxoPyxGMgpj95A9n7dKbHWENdd
L0u9T/aF3uQ5kfOsP1dv1oD3f+ewTBjZv5y841lyjg88JF3IOcc/ebdFBecl
H/ZKv671Hi1ebuamrJQNTyWsOfVLwuHY4/16LtjPGa4bdhTbHioidG7Yvv/Y
ahnzfny9vjN6KmCQjHy81m3SwnFfBcbkGzguYmtRdRrbc174lbpie9eZJMFr
GD+zTqzVwX43bTcdUtf67q5wXWzz+RbnqNt1ITmXXlmCMnzqencrEMx/x6rB
eqgMmRlcpT+I/SJtT5vNMD/7m6HDRqlidO25SoIw7h8hmpdK+jw/Ta0+heMl
zrZSM7C+XSbK292xP+muR+0J7Be3WXjLCGOA8HUFUu8ce1UEib8RMjlF8FpS
wCoTHD/HFizGhvNz4oJbiR7Lp3G3DmBctLKIUQ/HY0y0L3lgfWGbZ+4xxraA
WhsXK+abnzdRIvuZYMLXOgXrvv1RaBbJP/zmLgfp9y3WN5DsV0G3+zSpx/xS
0k0Q6+dhPHOJ7MfJjJpFdLB57Z5G0Lj70ZdjuL71xrUySjgv6Ca9qPa2CNg4
e1YP6ROm3ShG5mF20n5F5qVPcqq8h3Udd6gJOop5MR/v7iF1O1b1rib1OMq1
DUhfqakM28i+QgScfAh6LS6v3oPr1yw0Zl+3IxM5bOdS/kO/md9eFlxXwexl
BplD42ih9k3Md2jMOC+I9/+kI9V2GdZv5ODgS66Xs1TOLnKuwlttX87EeduE
LLbxrsiHPLe37xcH1iL3sOURcfYU9H66hDwP9p9mE/CKx/ZN+k88S7E9qe5U
5GqTFgjcLKvz6K4b5O8SkEQ4rr6T6iyA47yBXqYJ2DZLq9u/GNu39nMA8bd7
uF4jdcvVPokS/6r1R5+SulZlZZHlGsngP2NBXDZG5TniJVsy8O/R/Hx1/Zu5
aFP/Go4i7C+ZMokai/kMyjvrvr/OQeXuAtUZuP8iirMC0VXDp11B6lnYC5iu
xfpstlYuIXOpzY1VJv4rxkvfkv4C5nQ++bieYfELXhJnmbW4fRFGe651imSO
6dLSWYI4n3XegsAKzGPs1jQqw5jSUvaI5EvPPqRN9NUJM7GSuhvoxZlJv1iP
h1/JvvqrJWdpYd1zZiXLkrlqw9zul2LU0ZCM5cP7rS8560zqcvrxmKZj/UZq
vaZER8DFwgiiI7+tMYSgCWcbkH7joji8eHDeVo4Ls6Mki9Ap/rggss81cnXC
ZM85QV3dRG9LAlMAYF1Mu49sDMe8zKWRsvyY56F7tf2Pc3jEKkj22JFqdojY
MWIvlUmd8NkvLvMSXVJmQjPY82HFCYdzulg/+yHbInLOviyX4kmeisreTD7M
7zIX+k72H1vPaumO9UvH+k8ge+PRuniHxLf4O9wmeSyf63RtvtaAvx5LXpli
I8zmSuPYkpMCWglLx1/E/ru1Op9Fse1Y9rTgArZv9ZztvUlfhRzm6+Wg5R8h
p7J11gYc57dziiJ8EUaFc8LYNmNN30n4naez1hK/5EPJB6TOw8pTqaRfzcrW
r5ux7ey+P8P/SzFEF19188EodC1ToTb3PSRacm5pzYiBCf366vewX7DI1EYE
88tY7/GLcLxFajt1tGJxf9PgQm07XM9xX4AY4Hj4lNxv7lhfO7vcSdL/nUKl
gDj2cxe9PyOG8e6FJaJ3ST96e0eiS8dn82GS73ZzciaJd636OM0T5088Ym7q
i3lBhRM+kv4Hdj2dTeayjTzh2ID17bmUErMJ27Wb/A4QvqPpZC1SJ51fJ6YP
6w5Wk4i5g/NeF9x7eR/jtAwBJbJf6QjJlWTe2cJNa8n+Diy02EryIsJeJxO9
su73PpP9yN4UnE10GzQXc5fjvOtnot++upQNXUbLCojuSfbn4sk5yeVuFCfn
MYm/zYzsLd53whvC29Nr70rq5W6JcrLFyK/QU0T6incYXyX1p0gl3CH+aL73
M0txfZdluU85yyqQxYWJ4XVY/1uFY+5kLhfBwg6yh6Jn3IqEr69fWSWE99/4
Jn8R2b/ZvvPjiI709CX5pJ9cVnIV0UP3n3/WNPygvCPxvmT8D/6h8K/mDYXh
hn6p6+kyh6w7sL9baCJn+atXw9YzUv7vgsM9FxpvpOc4kD/c8/pfwYTW42bL
uIe/jwWbK1I3zkoe298Q2HbV/tZruRCkbtVp6Kn34s99bVe5PXHv5GeD7o8W
H5g3FM7105gcmJE0JN9aUTXQwiPxBx5NL80e2P8/9cOGPcdA/lA4sP9I8Wfz
h4vDPRcab6TnSOPT9jvYef0sHmbIfay950ddNP9g8V+Ff7XfwLz/lu7h7ul3
2eOv7j92XY2s77/lunodUHFj1/nIH/KK5oceOxsVNWi9oeKDYcAFvVpqLPrL
exlM72jrHK3+o53/T8PB9vv3PF8N/Twz9nz1c/h3P18ZHCpk79s8+u8JfhUO
pfeClFnNJ2rKP3ae323ffxVnKxkod4g8Rtbt59sL3CP+nFdeTorHo/rJoPPT
4gPzhkLRe9zFD5mHvj+8TjN+kFmf8AOPppdmD+w/sP7AOda+P2YwriN1UP5Q
OLD/SPFn84eLwz0XGm+k50jj0/Y72HmNvRcdXf1/N469F/3vInOrX7CDafX/
7Pz/LRz7e/DX9h/t/H8ajvZ+f1ccu1/9Xjj2XnR09P5b3os6Uwtu9px8hswV
Iz63L/3/+5m7t/35+fShg9ajxQfm/Wqk6aXZA/vb8Lmsu7D+xbDnGMgfaf+f
1f+rcLjnQuON9Bxp/KH2+7M4dr8aHb3/lvvV2HP7r+0/2vn/NBxsv+Nlrhp9
XvAcvd66Unf6mug/4x582yv14wa/v9HiA/N+NdL00uyB/Sc0MJkXL4wcdA6R
Oe1Wk0v+vvcsA/X/KhzuudB4Iz1HGn+o6+Rncez34Ojo/bf8HqyWFi3KP/bj
5zV2avPfBD4c/PlyYHywOjQ/DRmkJ8/b5BL+l/cyWJ/BeEPNMVT9oezR0j9w
TyPN/1U4VL+R7nekOHa/Gh29/5b71f86jn2/fQzH8J+P28qzPHju+v/5c3ct
dBF7ouc5RPNrqt3/eqzW9E97INLitLyDFi/3zacz+YFH89NwYP/BcDDeQP9A
3bQ4rd/AOQbm306oOhIw3uIHvcO1R4qDzTVwT4PlD7f/wL0MxRuMP1g/Gp+2
3191nY49X42O3rHnq7+GjU0uaA1H+pA60z4IrNG+V/CPn2cM/4MDz2vs88Gx
zwd/xeeDv9v3rce+3/6/hWPPV6Ojd+z5anj9x66rkfX93a+rqpxaFp4JqT/w
B/pp9kAcqu5IeYPlDeUfap7h8v+qPVIc7p5Gmv+zvOHue6g903DsezK/tv9o
5//T8J/y/XbrLCH7CP7sv13HGP4eOPZ8NTp6f/fnq43aq3Ya7qwCVa62msWB
FJgi3DVPtvMtOEnVBrVpdiPhRJGFdQkUML7zIF/CjgJmsYdZCmopoGXJ97pK
jTme3y1uodGMImA+0Gf7kJIHDnIfHGsc0xGnydFe9mcUSJEMjDRRLYJktsDI
V5qV4Ce4Mkc9uAJWTRfmr/hUAJznrwt8za8EA86atGmLP8DEqkbVcAYKrFkt
/ar8CgW6gkRl5gV/ALcTlvT7vCtBM23dE2ulQnA17nDfLMMU7xh/xfOzPAVm
XpWMd+Iogm+1l/ayl5TClHGX7yy9EIX6ZbgVOPLL4LHk9KQbXFUgz84laKwW
gCZ2e3W5vvREAYLiLdGnKNDcKvWI5dob6I9z/MAGVaB5cWF+yKJC8FkYp6ij
UAzvrmerFh6gixf8bDw54Uw5CCsyq0txVsALEb9nEw9QYP3Ct7uNyrrQWyVX
b91cCuywbj89D+uJUX3FWjOnC7Uz6Kmr1VbCR2v71Mo5FADZZWICHxKR++G9
+z0kKOBpJHhccnM6evLYzidCnAI56s0udbsp8H1vSN6cLePjH8F8auYsCvgZ
pXZ8WJIL+yx2Tj4knwcmejdXlBlVQaDoPd4mjgKQ+2Irwt1PAcb+Ou2cY/lg
KdKyrdg+EBQcQ1PtYirBZfwUE81VpVA1J80yqpQpPoNpdt8+30qIOhbsp7Op
DGbctDxxEn1CICDddr//Ghw/JC9ZlvUGOLunJtqGlCDpnfXOBZ+LYIZD8Iyl
26rQoe+lRyJbY2CiyF65nrRSxCPN+bY/6Sta7j5V2sqcCjzS10LviL+GfSxC
bqLUdvCWWcC816EVLufGRnSefI0mciaJvrvZAij2yI7KdTHQ5FOxpMAyDU5e
X8gh5f4R8rQyvNO3UaGUMXxy1OWrSI+S9TrctRUc7o0PvTm/BRj5j8sWc6Yi
R6bQVBHnVnDL6ckoOdgGMZsS4888aULh+3ML73L1IdmDu32MFTsQ+9cXxRzN
2WiPpYTvc9tx8SGXqQ8n6NxAT6kWQtV8vehgXXX6NCv6eN17WadmHWsBuhl2
+7OnV8ISN6XoHXYVSMuULUtPvg2qVB/mHA1IRz566rsrOp7AhqvWdpr239EU
vmCpfWZN4LS7ilXqOxW2LbgRKszSDY/3fxJf6hMB17juOlkkfUd7VqVVBub0
olUM7jK9bCmoRd1lUn7APVBjmhYsdaQRzr/KirPMKIJmCZ07BjItYLfy9hF+
nxwUlByyyelQG3oyj+fS2d5ORJk6p8s9PAbx3n5RrlDYitgW9J2cdv0bMlFf
s3HKmlawTvVIZl3UAi49XebPZ1Lhaebj1dasKcgw+5jO5cAE5F1kbbPfXRux
RT7wTjVuAY72go9r6VVguuqVWWpdaeDElJJgYfEBqdY1bbxgEw1MZmKBjUta
QF64nuXipRbolfwmtnkNFSX7z4w4w9sCBo7v8pjo2+BSKPP6oGOxaOnlwK7M
6fkgfO2Uoo9jNfioZfax+FQiDknWhxx4D5Kna+7pJVDhq0qYrXFWG7rsYtju
4foVHXl9XYNVqBaMTq75IK1UD/yXbFYnb/RAM7ki+fn3U2ATiHAfacxD2s0d
YmFmJZCZbL72kCn+udOb2ZPBVoWya+1vfx5fBeLXvRZPeVgJbM3bphWcqgKR
8UnsqMwamS954+ssXQxeZ95/tr8YC8+YYu34eylwcY/0taaVVVBq0CNWnFcO
Oi+3m+++gO9/XsvH2ThSoOh9F9/lijLEc/m5vKZGJSop6tvAuiIDvl5MbfbK
K4Ury3L85zswx6/fw803SSMOBJ0/v17EeRwiQksFEhgqIcx9dpfV3Co43zKF
O8EhGClt6JOmvsqCfv5Fe88+ocCe5NpqEd4yWGt4gbtHhy0+s7/b0GlyD3oj
PUnZ6DsF1LjFn5bpU8DfPIlJvqASeKcHhWpcLYSA8u1RCSZfkKf1zoYNeymo
LvuBa2NlEuxm01RNOZQH02qqz1FVy8BuBXtXplUlcHzv6FhQTYEoe4O1LIdL
4bzytHEVnh3I44gW9/6vk+KVA7s+ZkSWQpxRKfc8sQZUOvsDBYVSgCMgyz/b
lwK7xLNSG7IpQGeLwlzz8P1jpa7hLu8PwPha0uM+vm7XPttnlMReCYWL1m9X
LaNA57dvIR/FY0H3ksXB0zMrYQIvQ1tBThxk2MdZv5j5DngZk3TKJ1XBqzlr
hbq3UoD1k4SN0csGNC2XqW3BnCq48aHB3/trJcT3WrVOVSwDppDO9oo8uvgm
z47bkzeUguykwvEsS97g6zJigqFaD1rs+XXhDTMKbD3zoXHRq2RwcFQZd72+
FE4yVdzxEamAcOmm8fuwbce7+mJJbxdKWckslqLYDCui1u9XMq5B03Nct+hO
KYMKc9fonNB2CNVc8Zh5RjXqv31/94HXfaA4MTt41eQ8WNyo4n/c4D7wfXvn
bHi4DO4fYKdOZaRCAffGl8V+uXBCy3yTTUA7xLCvadCI7IOQp0rdibIN6J2Z
QdPxi+1gzGm276xnHmR76Cksr21BvC4uGhMUmpAt/5U7HuxfUJDnuf01rrlo
2eYda8av70DPrV0Y3ui4QX6QYUXK2hY0bW1CwvOZXWj3ATFldp8+cH0azeFL
X480GAXEVsjUI/vMwKsRR5vhNFenzArNetQQkhb82KMBuYjUHr9t3o7411j7
LInpg8PVwRWGDz5Ca0Tbyfsd9Yg5crFIwrxyVF/4vFHZqR2xn1web57SiUBj
WqqkQCMqGse+2upCGXqw4tRUlcdlEB4cuXLdDR1Y5ieg/yWvDxpi7i0I7a9C
rr2eJfG3m1Ef2/WkQIFWZNexOsyqJQNt4Fdy6LZpQS+Xa+VK63cg3wnB4jah
3cBnKhO+vqIPvFdyMWaKU2EiR4poyKN6fD9Y2THhWC5K+yQ4jTu/GXHvShGI
ze+D/KPmQtxBZcDl2n3v7qNseLRKT5H1SheifxlbFTcvG2UeFlkyK6UPfGza
HwWlf4Fnc/QY1HQb0YJ1c2Ib/PtA+ECm3QHUCOujTxxK8CtH2jOm1j1VDkDZ
BQH1qXfrEeO3JuOE0FpEd2pD9l7lDkSXtDuqf0kTRB3XdN9lVoHu2E5Wcmgr
QmrCj67u396AJBSmWtMxdYG8miVFwrcWOdbYHorWpMAj4S2yIqpd8PzhgmNR
S7+hoJs8Xk3fPcC0zsHKjrUeNA8yzl32gIK4JAoL0hyboZ5JdsWcug7YKDBV
lk+9E6bxf/VNnpgP71WauQ0LxsfHjVt3w7u2HOXX8BgfnZ0IMrW3yhZvpEL8
2R7fqm+VcEjr4vYlym3IYN2OS5JiHyE1SjR9rtlnVMYQk8hz9jM6ohmuu5yL
Id5Stj+HMzwLZR04uOogTwMs8885NJkpE21zyQ4q7kyG/iXjdt0RLUJ8HZlK
j/SrUW6ZxINOxSrIXXasUx7fB6aI31jFsQ/r6C2tSbxJhd7oxIIUr2pUby0U
W6D/BfGw6yu1eVJBYIaT2bWt7ajAme7b+Kg2EGU6LSHOEAsqUsuS4k43oNuq
urrXznaiV6cE96ldbwKjYPnmwwfp4oVYlu/qYaqGrXorQ1ak1MKtq3VrKKEN
sOj145VnLjVBUltdRU1cHgiLh1Yvm1WFml3ZDie0N4B7/8uaXR3ZsEC1Z9NH
+lpgvRx602puC1rr7cyixvIBpckdnRz8CiHXF7d4wlAHxN86oXslIATN3btl
ghFnFew4H+knq1iDTK2UJjIfaIOWjrVfb7EXQNOmd5IcF6vhqqXQxRPCPcjK
j7fozYYudLAvrWWbczXwun1qWr7nIyg6e20+GPYGdusrPHQy6QQq+7elCtz0
8evXz2eIuN2Czmi0LFV+1wnMb9f5n55VAV0J5+h71hTCc77zs5NVGuFBbl6C
agcVYjMkMr5PakVpcfriV1QaoKF6j7Xck2r0fwKY4tI=
          "], CompressedData["
1:eJwBZQKa/SFib1JlAQAAAEsAAAAGhRb8DiT+P6YAdc4RHwFAJUZi7zz/CEDk
LkzgIS0GQA1be6PdHvM/NfhMpMg2B0A6r/sTXgz4P3exotE0ViFAXWrgK7cP
/D8eART3JE37P+HmqqlxIQ9AABwuRaGMAEALXOogpU0FQGLhf2nm3Pc/kzPE
gKaMAEDHckB+TOP+P0tGrLasMgZAcNY/azTLEUBBcC0/eVINQHLRJCiemAtA
tQ9aJrPtJ0BVEXXQHYnqP4vCeAZHyQBAXMDoFXjVJUCX/Hdt5lwGQOgNwPjR
H/E/nzE2CP+D9j9EtXkVJXD9P/9TX206mPA/rdoI7jAAKEBq960YJv4UQNxd
FFULwBBAlBcrmE/GAUB4TE2QkBAEQPyhOa1wBPs/9xzgZ6ROFUD7Dggxl1oQ
QJqO15lpYQ1AtnacmSc78j/Se2TkC20JQMaNTAdsNPQ/pN2GWUUQDkCRdnP8
dHbwPxv2PSbqeQxAFIBvfZbqIECKyjWJiXDzP5BR6a2lDQhAaBsMLrdoCkDc
GjHuAcIDQAHEp+ZKaghA4fosheVO/j9ucY/s48PuP3IIs3K5jBNA1dbGSB/1
8D84IPzH9moGQIE7QbdvXuk/Mz0Z9Vya+j/8TgAhdYf5P9IQF5Yne+g/G/Qp
afBIDkB8qRZjuUMKQKTM9B2VLQZAONyHAYsNCEBsbjvGmv8gQE4pr03+eP8/
7LwAIGfTFECE2tFbc8/6P/J9H3pGef8/59N4pmtPFUAVnxBxvsv7Pxa3K7fs
8PU/TKmUXFX2CECXh8uqn4P4P4N+Pkjp9ABAjm+hMNiOD0DxdAwX
          "]}], "NeighborsNumber" -> 50, 
       "ClassPriors" -> {0.08750000000000001, 0.2625, 0.325, 
        0.21250000000000002`, 0.1125}, "TrainingOutput" -> 
       RawArray["UnsignedInteger8",{5, 3, 3, 3, 5, 4, 4, 1, 2, 2, 3, 3, 2, 2, 
         4, 5, 3, 3, 5, 4, 4, 1, 2, 2, 3, 3, 2, 2, 4, 5, 3, 3, 4, 4, 1, 2, 3, 
         3, 2, 2, 4, 5, 3, 3, 4, 4, 1, 2, 3, 3, 2, 2, 4, 5, 3, 3, 4, 1, 2, 3, 
         3, 2, 2, 4, 5, 3, 3, 4, 1, 2, 3, 3, 2, 2, 4}], 
       "DistributionSmoothing" -> 0.5, "Processor" -> 
       MachineLearning`MLProcessor[
        "FirstValues", <|"Info" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeJZM0HgpD0hWg4M5o3SUJoBDD4QpAGMIlQf
             "], "Type" -> "NumericalVector"|>, "Key" -> "(f2f6(f1f3f4f5f7))",
           "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
       "NearestNeighbors", "PostProcessor" -> 
       MachineLearning`MLProcessor["Identity"], 
       "Options" -> <|
        "NeighborsNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
         "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
         "NearestMethod" -> <|"Value" -> "Scan", "Options" -> <||>|>|>|>, 
     "TrainingInformation" -> <|
      "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
       Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
       "PreprocessingTime" -> 0.129893`5.565130740848548, "LossName" -> 
       "MeanCrossEntropy", "BestModelInformation" -> 
       Dataset[<|
         "MeanCrossEntropy" -> 
          Around[1.4987313455797022`, 0.06365966422662989], "Accuracy" -> 
          Around[0.3263837789328387, 0.06908920965277063], "EvaluationTime" -> 
          0.000016745909543397192`, "TestSize" -> 45, "ModelMemory" -> 29368.,
           "ModelUtility" -> -1.1062738888266277`, "TrainingSize" -> 60, 
          "TrainingTime" -> 0.0025118864315095794`, "TrainingMemory" -> 
          206070., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
            Around[1.4763490220159943`, 0.09415360809439308], 
            Around[1.4818551020667152`, 0.10354774750993911`], 
            Around[1.5379899126563978`, 0.12234952968892622`]}, 
          "AccuracyHistory" -> {
            Around[0.3263837789328387, 0.11966602137337685`], 
            Around[0.3263837789328387, 0.11966602137337683`], 
            Around[0.3263837789328387, 0.11966602137337685`]}, 
          "Configuration" -> {
           "NearestNeighbors", "NeighborsNumber" -> Automatic, 
            "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
          "FinalTrainingSize" -> 75|>, 
         TypeSystem`Struct[{
          "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
           "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
           "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
           "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
          TypeSystem`AnyType, TypeSystem`AnyType, 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Vector[TypeSystem`AnyType, 3], 
           TypeSystem`Vector[TypeSystem`AnyType, 3], 
           TypeSystem`Tuple[{
             TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType}], 
           TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
       Dataset[<|<|
           "Value" -> "NearestNeighbors", 
            "Options" -> <|
             "NeighborsNumber" -> <|"Value" -> Automatic|>, 
              "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
              "NearestMethod" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[2.2317550473264305`, 0.1575292369908921], "Accuracy" -> 
               Around[0.21548697671099126`, 0.07193022356065097], 
               "EvaluationTime" -> 4.865042554105199*^-6, "TestSize" -> 65, 
               "ModelMemory" -> 11136, "ModelUtility" -> -1.509998038939139, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.0031622776601683794`,
                "TrainingMemory" -> 86840, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[2.2317550473264305`, 0.11138999171140253`]}, 
               "AccuracyHistory" -> {
                 Around[0.21548697671099126`, 0.05086234885200067]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.4987313455797022`, 0.06365966422662989], "Accuracy" -> 
               Around[0.3263837789328387, 0.06908920965277063], 
               "EvaluationTime" -> 0.000016745909543397192`, "TestSize" -> 45,
                "ModelMemory" -> 29368., 
               "ModelUtility" -> -1.1062738888266277`, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.0025118864315095794`, "TrainingMemory" -> 
               206070., "ExperimentCount" -> 3, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.4763490220159943`, 0.09415360809439308], 
                 Around[1.4818551020667152`, 0.10354774750993911`], 
                 Around[1.5379899126563978`, 0.12234952968892622`]}, 
               "AccuracyHistory" -> {
                 Around[0.3263837789328387, 0.11966602137337685`], 
                 Around[0.3263837789328387, 0.11966602137337683`], 
                 Around[0.3263837789328387, 0.11966602137337685`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.000016745909543397192`, "MeanCrossEntropy" -> 
              Around[1.4987313455797022`, 0.06365966422662989], "ModelMemory" -> 
              29368., "TrainingMemory" -> 206070., "TrainingTime" -> 
              0.0050461924838005635`|>, "Index" -> 1|>|>, 
         TypeSystem`Assoc[
          TypeSystem`Struct[{"Value", "Options"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3]}], 
          
          TypeSystem`Struct[{
           "Experiments", "PredictedPerformances", "Index"}, {
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
               "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory",
                "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
             2], 
            
            TypeSystem`Struct[{
             "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
              "TrainingMemory", "TrainingTime"}, {
              TypeSystem`Atom[Real], TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real]}], 
            TypeSystem`Atom[Integer]}], 1], <||>], "MaxTrainingSize" -> 75, 
       "PreprocessorEvaluationTime" -> 2.10546875*^-6, "PreprocessorMemory" -> 
       178720, "InputDimension" -> 44, "OutputDimension" -> 1, 
       "BaselineLogProbability" -> -1.504445381309891, "VariableBudget" -> 
       True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
       False, "NaturalStop" -> True, "AbortStop" -> False, 
       "LastReportingTime" -> 3.879152815961472`16.341311877762735*^9, 
       "RoundPartitioning" -> 
       Dataset[{<|
          "TrainingSizes" -> 10, "TimeBudgets" -> 0.0025978600000000004`, 
           "ElapsedTimes" -> 0.004564, "ExperimentCounts" -> 1|>, <|
          "TrainingSizes" -> 60, "TimeBudgets" -> 0.012989300000000002`, 
           "ElapsedTimes" -> 0.011365, "ExperimentCounts" -> 3|>}, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
            "ExperimentCounts"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 2], <||>]|>, "AnomalyDetector" -> 
     None, "Log" -> <|
      "Example" -> 
       MachineLearning`MLDataset[<|
         "f1" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4.}, "ID" -> 
            3795572968267006573|>, 
          "f2" -> <|
           "Type" -> "Nominal", "Weight" -> 1, 
            "Values" -> {"Information Technology"}, "ID" -> 
            3401139331922032727|>, 
          "f3" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9.369}, "ID" -> 
            4714656301856831657|>, 
          "f4" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {23.778}, "ID" -> 
            4624390425862832796|>, 
          "f5" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {100.249}, "ID" -> 
            8583462845398299564|>, 
          "f6" -> <|
           "Type" -> "Text", "Weight" -> 1, "Values" -> {"Estimated data"}, 
            "ID" -> 3095956687388126824|>, 
          "f7" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {256.9105}, "ID" -> 
            1111199487588034056|>|>, <|
         "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0,
           "RawExample" -> False|>], "TrainingTime" -> 0.169675, 
       "MaxTrainingMemory" -> 524880, "DataMemory" -> 118040, 
       "FunctionMemory" -> 285632, "LanguageVersion" -> {13.1, 0}, "Date" -> 
       DateObject[{2022, 12, 4, 14, 26, 55.985813`8.500652963371868}, 
         "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, "ProcessorType" -> 
       "ARM64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
       "Evaluations" -> {}|>|>]]]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, 3.8788071767848167`*^9, 
   3.878811643047717*^9, 3.8791492164883966`*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"db5dab49-151c-4d34-a599-a0a5d3272d45"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"cm", " ", "=", 
    RowBox[{"ClassifierMeasurements", "[", 
     RowBox[{"cRisk", ",", "testset"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Test", " ", "our", " ", "classifier", " ", "on", " ", "the", " ", "test", 
    " ", "set"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<The accuracy is: \>\"", ",", 
    RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}], " ", "]"}], 
  RowBox[{"(*", 
   RowBox[{
   "Plot", " ", "the", " ", "accuracy", " ", "of", " ", "our", " ", "model"}],
    "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"AccuracyAss", " ", "=", " ", 
   RowBox[{"Append", "[", 
    RowBox[{"AccuracyAss", ",", " ", 
     RowBox[{"\"\<NearestNeighbors\>\"", "->", 
      RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Plot", " ", "the", " ", "Confusion", " ", "Matrix"}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.878619179671941*^9, 3.8786191833045883`*^9}, {
   3.8786192222213593`*^9, 3.878619249704307*^9}, {3.878619342065884*^9, 
   3.878619346687873*^9}, {3.878619378625424*^9, 3.8786193862338676`*^9}, 
   3.878805729554159*^9, 3.878805819596631*^9, {3.878806143346759*^9, 
   3.878806195391272*^9}, {3.878806763106118*^9, 3.878806811062291*^9}, {
   3.878806841172628*^9, 3.878806863962813*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"5e92e43d-3a8d-417e-8227-9da67103f984"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"The accuracy is: \"\>", "\[InvisibleSpace]", 
   "0.47368421052631576`"}],
  SequenceForm["The accuracy is: ", 0.47368421052631576`],
  Editable->False]], "Print",
 CellChangeTimes->{3.878806864557898*^9, 3.8788071796386433`*^9, 
  3.878811645673299*^9, 3.879149220880064*^9},
 CellLabel->
  "During evaluation of \
In[78]:=",ExpressionUUID->"b4456bd7-89f8-4acc-a7bf-3ac3b4fc851b"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBghWIQGwI+2KPTTne5Vl458NZ+Kf9djYc+r+3Tfmq2CDM/
wSmOyxxS6cFmL0z+YZXIOveHt+wZUADl9va95PS2SXhjH+dy27B0+lP71uDA
JnnBc/bOhod9LMXe2Mdsrw0+HvzQPn/Ott0iHyro5l9KaQDrnp0q
   "], {{0, 0}, {5, 5}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.14285714285714285`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "A", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.14285714285714285`}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "3", "\" examples of \"", "\"B\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.42857142857142855`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.42857142857142855`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.42857142857142855`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{3, " examples of ", "B", " correctly classified"}], 
         Row[{"Precision = ", 0.42857142857142855`}], 
         Row[{"Recall = ", 0.42857142857142855`}], 
         Row[{"FScore = ", 0.42857142857142855`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.14285714285714285`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.14285714285714285`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "C", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.14285714285714285`}], 
         Row[{"Row fraction = ", 0.14285714285714285`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.14285714285714285`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.5`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "D", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.14285714285714285`}], 
         Row[{"Row fraction = ", 0.5}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.14285714285714285`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.5`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "E", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.14285714285714285`}], 
         Row[{"Row fraction = ", 0.5}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "4", "\" examples of \"", "\"B\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.3333333333333333`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.5714285714285714`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{4, " examples of ", "B", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.3333333333333333}], 
         Row[{"Row fraction = ", 0.5714285714285714}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "6", "\" examples of \"", "\"C\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.5`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.8571428571428571`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.631578947368421`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{6, " examples of ", "C", " correctly classified"}], 
         Row[{"Precision = ", 0.5}], 
         Row[{"Recall = ", 0.8571428571428571}], 
         Row[{"FScore = ", 0.631578947368421}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.08333333333333333`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.5`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "D", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.08333333333333333}], 
         Row[{"Row fraction = ", 0.5}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.08333333333333333`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.5`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "E", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.08333333333333333}], 
         Row[{"Row fraction = ", 0.5}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 4.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" of class \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " of class ", "A"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 3.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "7", "\" example\"", "\"s\"", "\" of class \"", "\"B\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.42857142857142855`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{7, " example", "s", " of class ", "B"}], 
        Row[{"Recall = ", 0.42857142857142855`}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "7", "\" example\"", "\"s\"", "\" of class \"", "\"C\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.8571428571428571`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{7, " example", "s", " of class ", "C"}], 
        Row[{"Recall = ", 0.8571428571428571}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "2", "\" example\"", "\"s\"", "\" of class \"", "\"D\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{2, " example", "s", " of class ", "D"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "2", "\" example\"", "\"s\"", "\" of class \"", "\"E\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{2, " example", "s", " of class ", "E"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "A"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "7", "\" example\"", "\"s\"", "\" classified as \"", "\"B\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.42857142857142855`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{7, " example", "s", " classified as ", "B"}], 
        Row[{"Precision = ", 0.42857142857142855`}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "12", "\" example\"", "\"s\"", "\" classified as \"", "\"C\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.5`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{12, " example", "s", " classified as ", "C"}], 
        Row[{"Precision = ", 0.5}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"D\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "D"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"E\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "E"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{4.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 0.], TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 0.], TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 0.], TraditionalForm]}}, {{4.5, 
       FormBox["1", TraditionalForm]}, {3.5, 
       FormBox["7", TraditionalForm]}, {2.5, 
       FormBox["7", TraditionalForm]}, {1.5, 
       FormBox["2", TraditionalForm]}, {0.5, 
       FormBox["2", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["7", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["12", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->13,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->228.,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{
  3.878619184460875*^9, 3.878619347255011*^9, 3.878619387156837*^9, 
   3.878715848704851*^9, {3.878715890521706*^9, 3.8787158953838463`*^9}, {
   3.878805538696899*^9, 3.878805553604134*^9}, 3.878806818221781*^9, 
   3.878806864604879*^9, 3.878807179681567*^9, 3.878811645716255*^9, 
   3.87914922092896*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"ee188ae2-29da-4391-94a9-950c0f740643"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Neural Network", "Subsection",
 CellChangeTimes->{{3.878618143305781*^9, 3.878618144962409*^9}, {
  3.8786189939708767`*^9, 3.8786190030333223`*^9}, {3.87871708806336*^9, 
  3.8787170907151747`*^9}},ExpressionUUID->"167a82f5-aa47-4220-90ca-\
39153e030b4f"],

Cell[CellGroupData[{

Cell["Encoding Data", "Subsubsection",
 CellChangeTimes->{{3.87871957306065*^9, 
  3.878719585487999*^9}},ExpressionUUID->"af6df2e6-1db6-4012-946a-\
f093b8cea41f"],

Cell["\<\
Categorical variables cannot be used directly in neural networks and must be \
encoded as arrays.
Therefore, we create \[OpenCurlyDoubleQuote]Class\[CloseCurlyDoubleQuote] \
encoders that encode the categorical variables as one-hot encoded vectors\
\>", "Text",
 CellChangeTimes->{
  3.878719595602223*^9, {3.87871982798316*^9, 
   3.878719847961817*^9}},ExpressionUUID->"231b4959-cb15-4d63-a49e-\
e3c934e96ca1"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"sectorEncoder", "=", 
  RowBox[{"NetEncoder", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Class\>\"", ",", 
     RowBox[{"DeleteDuplicates", "[", 
      RowBox[{"Normal", "[", 
       RowBox[{"datasetML", "[", 
        RowBox[{"All", ",", "\"\<GICS Sector Name\>\""}], "]"}], "]"}], "]"}],
      ",", "\"\<UnitVector\>\""}], "}"}], "]"}]}], "\n", 
 RowBox[{"disclosureEncoder", "=", 
  RowBox[{"NetEncoder", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Class\>\"", ",", 
     RowBox[{"DeleteDuplicates", "[", 
      RowBox[{"Normal", "[", 
       RowBox[{"datasetML", "[", 
        RowBox[{"All", ",", " ", "\"\<Carbon Disclosure\>\""}], "]"}], "]"}], 
      "]"}], ",", "\"\<UnitVector\>\""}], "}"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.878719510991486*^9, 3.878719557128503*^9}, {
   3.878719695460547*^9, 3.878719697302268*^9}, {3.878719754708007*^9, 
   3.8787198129482393`*^9}, {3.878720175522973*^9, 3.878720185570636*^9}, {
   3.878722587877328*^9, 3.878722599416089*^9}, {3.878722879307081*^9, 
   3.878722879706128*^9}, {3.878724455305957*^9, 3.8787244800862913`*^9}, 
   3.878725378813992*^9, {3.87872541427944*^9, 3.878725477918508*^9}, {
   3.878810332977583*^9, 3.8788103344915447`*^9}, {3.8788119060859737`*^9, 
   3.878811919123225*^9}, {3.879149272745099*^9, 3.879149273071574*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"2e8dbd1c-5f09-4c5e-9338-71b2c43249c3"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Class\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 11\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"], "SummaryItem"]}}, 
               BaselinePosition -> Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Class\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Labels\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TooltipBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"\\\"Financials\\\"\"", ",", "\"\\\"Real Estate\\\"\"", 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "8", "\[RightSkeleton]"}], ",",
                     "\"\\\"Utilities\\\"\""}], "}"}], 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Financials\"", ",", "\"Real Estate\"", ",", 
                    "\"Materials\"", ",", "\"Industrials\"", ",", 
                    "\"Communication Services\"", ",", 
                    "\"Consumer Discretionary\"", ",", "\"Consumer Staples\"",
                     ",", "\"Information Technology\"", ",", "\"Energy\"", 
                    ",", "\"Health Care\"", ",", "\"Utilities\""}], "}"}]], 
                    Annotation[#, {
                    "Financials", "Real Estate", "Materials", "Industrials", 
                    "Communication Services", "Consumer Discretionary", 
                    "Consumer Staples", "Information Technology", "Energy", 
                    "Health Care", "Utilities"}, "Tooltip"]& ], Short], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output Form\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"IndicatorVector\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Dimensions\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"{}\"", 
                    StyleBox["\"  (scalar)\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Multilabel\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["False", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 11\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"], "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8787195131639967`*^9, 3.878719538579525*^9}, 
   3.878719814955491*^9, 3.878719849094001*^9, 3.8787201868911448`*^9, {
   3.878722600153029*^9, 3.878722604373269*^9}, 3.8787226527964697`*^9, 
   3.878722881383275*^9, {3.878724466417713*^9, 3.878724480665699*^9}, {
   3.878724540332926*^9, 3.87872455913796*^9}, 3.878725321422592*^9, {
   3.878725379399231*^9, 3.8787254915835037`*^9}, 3.878725527069076*^9, 
   3.878726811463031*^9, 3.878807199244649*^9, 3.878810335757403*^9, {
   3.8788116503302193`*^9, 3.878811687851829*^9}, 3.8788118448568277`*^9, {
   3.87881191558842*^9, 3.8788119196165657`*^9}, 3.8791492737449017`*^9},
 CellLabel->"Out[82]=",ExpressionUUID->"f11ba17f-f461-4265-b043-ab27685a9dba"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Class\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 12\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"], "SummaryItem"]}}, 
               BaselinePosition -> Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Class\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Labels\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TooltipBox[
                    RowBox[{"{", 
                    RowBox[{"\"\\\"Estimated data\\\"\"", ",", 
                    
                    RowBox[{
                    "\"\\\"Estimate used instea\"", "\[Ellipsis]", 
                    "\"ver global operations\\\"\""}], ",", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], ",",
                     "\"\\\"Value derived from fuel use provided in Annual \
Report/Financial Accounts Disclosure\\\"\""}], "}"}], 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Estimated data\"", ",", 
                    "\"Estimate used instead of disclosure - data does not \
cover global operations\"", ",", 
                    "\"Value derived from data provided in \
Environmental/CSR\"", ",", 
                    "\"Value derived from data provided in Annual \
Report/Financial Accounts Disclosure\"", ",", 
                    "\"Estimate based on partial data disclosure in \
Environmental/CSR\"", ",", 
                    "\"Exact Value from Annual Report/10K/Financial Accounts \
Disclosure\"", ",", "\"Exact Value from Environmental/CSR\"", ",", 
                    "\"Derived from previous year\"", ",", 
                    "\"Value summed up from data provided in \
Environmental/CSR\"", ",", 
                    "\"Value summed up from data provided in Annual \
Report/Financial Accounts Disclosure\"", ",", 
                    "\"Value derived from fuel use provided in \
Environmental/CSR\"", ",", 
                    "\"Value derived from fuel use provided in Annual \
Report/Financial Accounts Disclosure\""}], "}"}]], 
                    Annotation[#, {
                    "Estimated data", 
                    "Estimate used instead of disclosure - data does not \
cover global operations", 
                    "Value derived from data provided in Environmental/CSR", 
                    "Value derived from data provided in Annual \
Report/Financial Accounts Disclosure", 
                    "Estimate based on partial data disclosure in \
Environmental/CSR", 
                    "Exact Value from Annual Report/10K/Financial Accounts \
Disclosure", "Exact Value from Environmental/CSR", 
                    "Derived from previous year", 
                    "Value summed up from data provided in Environmental/CSR",
                     "Value summed up from data provided in Annual \
Report/Financial Accounts Disclosure", 
                    "Value derived from fuel use provided in \
Environmental/CSR", 
                    "Value derived from fuel use provided in Annual \
Report/Financial Accounts Disclosure"}, "Tooltip"]& ], Short], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output Form\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"IndicatorVector\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Dimensions\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"{}\"", 
                    StyleBox["\"  (scalar)\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Multilabel\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["False", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 12\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"], "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8787195131639967`*^9, 3.878719538579525*^9}, 
   3.878719814955491*^9, 3.878719849094001*^9, 3.8787201868911448`*^9, {
   3.878722600153029*^9, 3.878722604373269*^9}, 3.8787226527964697`*^9, 
   3.878722881383275*^9, {3.878724466417713*^9, 3.878724480665699*^9}, {
   3.878724540332926*^9, 3.87872455913796*^9}, 3.878725321422592*^9, {
   3.878725379399231*^9, 3.8787254915835037`*^9}, 3.878725527069076*^9, 
   3.878726811463031*^9, 3.878807199244649*^9, 3.878810335757403*^9, {
   3.8788116503302193`*^9, 3.878811687851829*^9}, 3.8788118448568277`*^9, {
   3.87881191558842*^9, 3.8788119196165657`*^9}, 3.8791492737559853`*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"9db8aca7-6fdd-49c8-a490-2403583828d8"]
}, Open  ]],

Cell["Applying the encoders to class labels produces unit vectors", "Text",
 CellChangeTimes->{
  3.878719892174232*^9},ExpressionUUID->"4d8415d2-03cc-48ed-aee2-\
c53a40dd79be"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"sectorEncoder", "/@", 
   RowBox[{"DeleteDuplicates", "[", 
    RowBox[{"Normal", "[", 
     RowBox[{"trainingset", "[", 
      RowBox[{"All", ",", "\"\<GICS Sector Name\>\""}], "]"}], "]"}], "]"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"disclosureEncoder", "/@", 
   RowBox[{"DeleteDuplicates", "[", 
    RowBox[{"Normal", "[", 
     RowBox[{"trainingset", "[", 
      RowBox[{"All", ",", "\"\<Carbon Disclosure\>\""}], "]"}], "]"}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.878719903392746*^9, 3.878719957267705*^9}, {
  3.8787201932620077`*^9, 3.878720203671546*^9}, {3.878722873636928*^9, 
  3.878722874481845*^9}, {3.878724509008936*^9, 3.8787245215822353`*^9}, {
  3.8787246795733337`*^9, 3.878724683635604*^9}, {3.87872529713558*^9, 
  3.878725307439637*^9}, {3.878725411938355*^9, 3.878725443890374*^9}, {
  3.8787255199919357`*^9, 3.878725524438147*^9}, {3.8787259904186707`*^9, 
  3.8787260709203444`*^9}, {3.878726753600051*^9, 3.8787267771256866`*^9}, {
  3.878726808576733*^9, 3.878726816110383*^9}, {3.878810325968855*^9, 
  3.878810327249482*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"0b8e8eb7-f51e-4c87-bb31-bd641db423ae"],

Cell["Applying the Decoder to class labels that we want to predict", "Text",
 CellChangeTimes->{{3.8787267717815857`*^9, 3.8787267979689217`*^9}, 
   3.878807200429632*^9},ExpressionUUID->"a21c5f12-ea36-4f7b-9a81-\
5804c3f222f8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ratingsDecoder", " ", "=", " ", 
   RowBox[{"NetDecoder", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Class\>\"", ",", 
      RowBox[{"DeleteDuplicates", "[", 
       RowBox[{"Normal", "[", 
        RowBox[{"datasetML", "[", 
         RowBox[{"All", ",", " ", "\"\<Ratings\>\""}], "]"}], "]"}], "]"}]}], 
     " ", "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.878726818243514*^9, 3.8788103282336187`*^9, 
  3.878811943039888*^9},
 CellLabel->"In[86]:=",ExpressionUUID->"c367e224-5d5f-4cad-8e0d-a2c397b5c8a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create a Network", "Subsubsection",
 CellChangeTimes->{{3.87871957306065*^9, 3.878719585487999*^9}, {
  3.8787200083687477`*^9, 
  3.878720013962109*^9}},ExpressionUUID->"988cb0f7-88bc-42af-8fce-\
d6f30b501fca"],

Cell["\<\
Create a network with an input corresponding to each feature and using a \
\[OpenCurlyDoubleQuote]Categorize\[CloseCurlyDoubleQuote] decoder to \
interpret the output of the net
The input features are first concatenated together before being further \
processed.\
\>", "Text",
 CellChangeTimes->{{3.8787200350499887`*^9, 3.8787200467022676`*^9}, {
  3.878810420414648*^9, 
  3.878810456142879*^9}},ExpressionUUID->"8cb8e66e-cdad-4527-820a-\
8cedc6abee3d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"CatenateLayer", "[", "]"}], ",", 
      RowBox[{"LinearLayer", "[", "]"}], ",", "LogisticSigmoid"}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NetPort", "[", "\"\<Elevation\>\"", "]"}], ",", 
         RowBox[{"NetPort", "[", "\"\<GICS Sector Name\>\"", "]"}], ",", 
         RowBox[{
         "NetPort", "[", 
          "\"\<Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\>\"", "]"}], ",", 
         RowBox[{
         "NetPort", "[", 
          "\"\<Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\>\"", "]"}], ",", 
         RowBox[{
         "NetPort", "[", 
          "\"\<Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\>\"", "]"}], ",", 
         RowBox[{"NetPort", "[", "\"\<Carbon Disclosure\>\"", "]"}], ",", 
         RowBox[{"NetPort", "[", "\"\<Revenue (USD mn)\>\"", "]"}]}], "}"}], "->",
        "1"}], ",", 
      RowBox[{"1", "->", 
       RowBox[{"2", "->", 
        RowBox[{"3", "->", 
         RowBox[{"NetPort", "[", "\"\<Ratings\>\"", "]"}]}]}]}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{"\"\<Elevation\>\"", "->", "\"\<Scalar\>\""}], ",", 
    RowBox[{"\"\<GICS Sector Name\>\"", "->", "sectorEncoder"}], ",", 
    RowBox[{
    "\"\<Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\>\"", "->", 
     "\"\<Scalar\>\""}], ",", 
    RowBox[{
    "\"\<Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\>\"", "->", 
     "\"\<Scalar\>\""}], ",", 
    RowBox[{
    "\"\<Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\>\"", "->", 
     "\"\<Scalar\>\""}], ",", 
    RowBox[{"\"\<Carbon Disclosure\>\"", "->", "disclosureEncoder"}], ",", 
    RowBox[{"\"\<Revenue (USD mn)\>\"", "->", "\"\<Scalar\>\""}], ",", 
    RowBox[{"\"\<Ratings\>\"", "->", "ratingsDecoder"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.878720051420597*^9, 3.878720051425008*^9}, {
   3.878720083151984*^9, 3.878720136502512*^9}, {3.878720349837907*^9, 
   3.8787205487838097`*^9}, {3.8787208848753977`*^9, 3.878720891481406*^9}, 
   3.878723218987296*^9, 3.878724657828973*^9, 3.878724701983767*^9, 
   3.878725446922914*^9, 3.8787260823840933`*^9},
 CellLabel->"In[87]:=",ExpressionUUID->"14ea714b-552d-4cab-b1a4-42b227f9b31a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["7", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Ratings\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Carbon Di..\"", "\"Carbon Disclosure\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Carbon Disclosure", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999919615308, 
                    3.00000008038469}], 
                    
                    Offset[{0, -13.5}, {-2.999999919615308, 
                    3.00000008038469}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Carbon In..\"", 
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                    "Tooltip"]& ], TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Carbon In..\"", 
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                    "Tooltip"]& ], TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999464102047`, 
                    2.0000001071795874`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Carbon In..\"", 
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                    "Tooltip"]& ], TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999196153078`, 
                    3.0000001071795874`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Elevation\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999998928204104`, 
                    4.000000107179587}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"GICS Sect..\"", "\"GICS Sector Name\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "GICS Sector Name", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999998660255134`, 
                    5.000000107179586}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Revenue (..\"", "\"Revenue (USD mn)\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Revenue (USD mn)", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999998392306164`, 
                    6.000000107179586}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999196153082`, 
                    3.000000053589793}], 
                    
                    Offset[{0, -13.5}, {-1.9999999196153082`, 
                    3.000000053589793}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999196153085, 
                    3.000000026794896}], 
                    
                    Offset[{0, -13.5}, {-0.9999999196153085, 
                    3.000000026794896}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Ratings\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {8.038469108735353*^-8, 
                    2.999999999999999}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"12\"", TraditionalForm], 
                    
                    Offset[{-5.217758092674727, 
                    1.7392528529019}, {-3.4790568996283615`, 
                    1.5628292687083438`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.3162277914367091,
                     0.9486832895772231}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{-4.919349484592804, 
                    2.459674907063232}, {-3.4559016434844807`, 
                    2.08819669372554}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.4472136194660422,
                     0.8944271790168734}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-3.4499999316730117`, 
                    2.550000092442394}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{1.4737193576586097`*^-7, 
                    5.499999999999999}, {-3.4499999196153084`, 
                    3.0000000924423937`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897411974723`*^-8}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.889087400733705, 
                    3.889087192318315}, {-3.449999907557604, 
                    3.4500000924423935`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067622396936, -0.7071068001334009}], 
                    InsetBox[
                    FormBox["\"11\"", TraditionalForm], 
                    
                    Offset[{4.919349616406269, 
                    2.459674643436303}, {-3.4559015946211247`, 
                    3.911803491475518}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.44721357153387326`, -0.894427202982958}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{5.217758185880922, 
                    1.7392525732833155`}, {-3.479056822610673, 
                    4.437170917733599}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.31622774059696646`, -0.948683306523804}], 
                    InsetBox[
                    FormBox["\"28\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999999}, {-2.4499999196153084`, 
                    3.0000000656474968`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"5\"", TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-1.4499999196153084`, 
                    3.0000000388525994`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999999, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox["\"5\"", TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-0.44999991961530866`, 
                    3.000000012057703}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999999, -2.6794896967885513`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 12\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Carbon Disclosure\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input6\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 12\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Carbon Disclosure", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input6"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999464102047`, 
                    2.0000001071795874`}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input4\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input4"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999196153078`, 
                    3.0000001071795874`}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input5\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input5"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999998928204104`, 
                    4.000000107179587}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Elevation\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Elevation", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999998660255134`, 
                    5.000000107179586}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 11\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"GICS Sector Name\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 11\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"GICS Sector Name", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999998392306164`, 
                    6.000000107179586}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Revenue (USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input7\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Revenue (USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input7"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999919615308, 
                    3.00000008038469}, {-1.9999999196153082`, 
                    3.000000053589793}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 28\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 28\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999196153082`, 
                    3.000000053589793}, {-0.9999999196153085, 
                    3.000000026794896}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999196153085, 3.000000026794896}, {
                    8.038469108735353*^-8, 2.999999999999999}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Ratings\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Ratings"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4790568996283615`, 
                    1.5628292687083438`}, {-0.25, 0}, 
                    Offset[8], {1.0000000803846905`, 2.9999999732051017`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 12\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Carbon Disclosure\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input6\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 12\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Carbon Disclosure", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input6"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4559016434844807`, 
                    2.08819669372554}, {-0.25, 0}, 
                    Offset[8], {1.0000000535897935`, 1.9999999732051021`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4499999316730117`, 
                    2.550000092442394}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948965`, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input4\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input4"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4499999196153084`, 
                    3.0000000924423937`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794897411974716`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input5\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input5"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999907557604, 
                    3.4500000924423935`}, {-0.25, 0}, 
                    Offset[8], {0.9999999732051021, -1.000000026794897}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Elevation\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Elevation", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4559015946211247`, 
                    3.911803491475518}, {-0.25, 0}, 
                    Offset[8], {0.9999999464102052, -2.000000026794896}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 11\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"GICS Sector Name\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 11\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"GICS Sector Name", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.479056822610673, 
                    4.437170917733599}, {-0.25, 0}, 
                    Offset[8], {0.9999999196153082, -3.000000026794896}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Revenue (USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input7\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Revenue (USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input7"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999196153084`, 
                    3.0000000656474968`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 28\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 28\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999196153084`, 
                    3.0000000388525994`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999991961530866`, 
                    3.000000012057703}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Ratings\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Ratings"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999999999987`, 1.0717958811647137`*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Carbon Disclosure\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Carbon Disclosure", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999919615308, 3.00000008038469}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.3], 
                    
                    LineBox[{{-0.2, 0.2}, {-0.1, 0.2}, {0., 
                    0.}, {-0.1, -0.2}, {-0.2, -0.2}}], 
                    LineBox[{{0., 0.}, {0.2, 0.}}], 
                    LineBox[{{0.125, 0.075}, {0.2, 0.}, {0.125, -0.075}}]}, 
                    ImageSize -> 16], {-2.999999919615308, 
                    3.00000008038469}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CatenateLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["1", Bold], 
                    Style[
                    CatenateLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", Bold,
                     StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style[
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", Bold]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999464102047`, 2.0000001071795874`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", Bold,
                     StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style[
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", Bold]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999196153078`, 3.0000001071795874`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", Bold,
                     StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style[
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", Bold]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999998928204104`, 4.000000107179587}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Elevation\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Elevation", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999998660255134`, 5.000000107179586}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"GICS Sector Name\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["GICS Sector Name", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999998392306164`, 6.000000107179586}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Revenue (USD mn)\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Revenue (USD mn)", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-1.9999999196153082`, 
                    3.000000053589793}], 
                    
                    Offset[{-10.5, -10.5}, {-1.9999999196153082`, 
                    3.000000053589793}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-1.9999999196153082`, 
                    3.000000053589793}], 
                    
                    Offset[{10.5, 10.5}, {-1.9999999196153082`, 
                    3.000000053589793}]]], 
                    InsetBox[
                    GraphicsBox[
                    
                    GraphicsComplexBox[{{0.1, 0}, {-0.3, 1}, {0.5, 1}, {
                    1.3, 1}, {0.9, 0}}, {{
                    Opacity[0.2], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[3.5], 
                    GrayLevel[0.33], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 
                    18], {-1.9999999196153082`, 3.000000053589793}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "LinearLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["2", Bold], 
                    Style[
                    LinearLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-0.9999999196153085, 3.000000026794896}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm2toFFcUx7faRtNnrMVa+ggtCCr6RUkb/ZI0FF9UaFPGap479965oYjR
rkZtPzRSELFgIbSljZVWXWcmqFA/hFIfoEFUJLH91Ar2Qy2ljYigqTGEvvR/
NpuwOzub3e0+5q47f7i7O7szy5nfnnPPfZx9kW2sl1MCgcDm6Xio17e9Ggrp
771VgQOtffM7be2GWNm+xWgzQtVsKt5chPYG2oMB5bXaawOKXD6/7OTzy04F
5ce59bQQ4WrO7bcNbr0rhL3bEPZXeH0Mr88Y3P4Bxz+jDRbSriyUN37BoDmH
c1MHk8/B4zzakDR67qbb8mVXjpUzfpqmTRXCXA4/+gLMfsuEVSnzQzw+h/jb
STGXLbNS4iebD7xgGPZeKey/0mUCxn9SH4drvhHC+gS++j6eDfSH9Wi1Mhhe
RHEvG8PP5PIm86iM+bW2fj0dDHaAxUgKVsNSWMdx7geGbq9sadn/bD5uwGNl
xA/54GX4zuWk3IR9C7G8j/pBTessy5fRCiltfjTegE/9ncTXriAWpXy9++F8
GqugUvJbsaJrGuLQTMLtmsEsRrm3EMYqqEn5Sa37CTDqc2WH3NHYGH68UIYq
qqT8OP/ySbAbcPG5m+gH/XnfmFw5IMdWRMYZifnhsq6bLxXaSIWVwK+p6eAj
NN9yYXe2ocGc4YWRCiuOH+UBcOpNjFnrVAnm1nQUx4/m+i79XZ+m7Sn3ykDF
NcEP86gNLuwGGNv3mJcGKq4IP0M3XwOrfxzsriKPzPbaQMW1mrFDlWB1w8Fu
SNfD8702TnWVlZXXI19ccrD7F+O7VV7bVgxaupSdTBincHu713YVgyQ3xfJl
HXHshLCPem1XMYjWKRGno3H8MLfwc21qjc1rrV+I2Tg/sLzt54t01DkFY+Tv
xn1ugh8z13ptWTGI9nli+7sIP2F3eW1XMQjzizXOXFtbs/5Hubj7Ia9tU11C
mIsT9nuE/UdFxfMtXtumuqLzi0HHGHmUMXNJwK9/mVTNzQdmItf+5IxbjPOC
0VN8fklEexPws34XdrtjTvP5uSi6/n7BZR20Bx8/EHOqz88hWnOC333vspZ3
gvYiHaf7/GIkg4cW0rpdYsxa52hfw+USn19UBrObMSa5477+/umjSS4reX7w
q1lS9BxOUo/Sm2Lfp2T5UR0UcmmIanbc2OGzz9Koqyg5fpH1E25tRVz+nqQm
ZSRmfJdKJcEvUofCzLW0vklzh0lq7vo5t+dl8NX3HT+qm2Ps4ALJ7Qbw+hhM
Ljr3xtzq7pBjN9XUdGb6lx3l+VH/TnNQ8gsjGK7CfdahvUl1X+DTgVj8CHzC
GNuepnXNlKzi/W2YrpfrzKf+p3nK80uXRSYtWq/YkYN6lKLgR+uU2ba62var
r1Q1HamsrAoFxu47F+3DHH5XPlrG/gff+g/92a+I8W+lsHZRrFMfkJtfM0HK
+x94XCcetL9F+THSz3HrGI7343kP7bfS/3Qks5fJVnMujesKaJ7y/BSXzy87
+fzuc90D7bU4NA==
                    "], {{0, 25.}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.}, 
                    PlotRange -> {{0, 40.}, {0, 25.}}, ImageSize -> 20], 
                    TraditionalForm]], {-0.9999999196153085, 
                    3.000000026794896}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["3", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{8.038469108735353*^-8, 2.999999999999999}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Ratings\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Ratings", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999919615308, 
                    3.00000008038469}, {-3.9999999732051017`, 
                    1.0000001071795879`}, {-3.9999999464102047`, 
                    2.0000001071795874`}, {-3.9999999196153078`, 
                    3.0000001071795874`}, {-3.9999998928204104`, 
                    4.000000107179587}, {-3.9999998660255134`, 
                    5.000000107179586}, {-3.9999998392306164`, 
                    6.000000107179586}, {-1.9999999196153082`, 
                    3.000000053589793}, {-0.9999999196153085, 
                    3.000000026794896}, {8.038469108735353*^-8, 
                    2.999999999999999}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 8, 8, 8, 8, 8, 8, 21, 21, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {284.9999985262806, 369.9999999999999}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{35.499994105122624`, 29.5}, {25., 15.}},
                     ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Elevation\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Elevation\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Elevation"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Elevation\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Elevation"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"scalar\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"GICS Sector Name\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"GICS Sector Name\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"GICS Sector Name"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"GICS Sector Name\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"GICS Sector Name"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    FrameStyle -> GrayLevel[0, 0], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    
                    ToString[{
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                    InputForm]], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    
                    RowBox[{"{", 
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    "}"}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"scalar\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    FrameStyle -> GrayLevel[0, 0], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    
                    ToString[{
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"}, 
                    InputForm]], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    
                    RowBox[{"{", 
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    "}"}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"scalar\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    FrameStyle -> GrayLevel[0, 0], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    
                    ToString[{
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"}, 
                    InputForm]], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    
                    RowBox[{"{", 
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    "}"}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"scalar\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Carbon Disclosure\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Carbon Disclosure\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Carbon Disclosure"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Carbon Disclosure\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Carbon Disclosure"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Revenue (USD mn)\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Revenue (USD mn)\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Revenue (USD mn)"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Revenue (USD mn)\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Revenue (USD mn)"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"scalar\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Ratings\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Ratings\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Ratings"}, InputForm]], Method -> "Preemptive",
                     PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Ratings\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Ratings"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    Part[<|"Nodes" -> <|
                    "1" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|
                    "Input1" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input4" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input5" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input6" -> NeuralNetworks`TensorT[{12}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input7" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{5, 28}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {5}, "$OutputSize" -> 5, 
                    "$InputSize" -> 28, "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Elevation" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.1.4"|>, 
                    "GICS Sector Name" -> <|
                    "Form" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> Tooltip[{
                    "\"Financials\"", "\"Real Estate\"", 
                    Skeleton[8], "\"Utilities\""}, {
                    "Financials", "Real Estate", "Materials", "Industrials", 
                    "Communication Services", "Consumer Discretionary", 
                    "Consumer Staples", "Information Technology", "Energy", 
                    "Health Care", "Utilities"}], "OutputForm" -> 
                    "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                    False, "$Count" -> 11, "$Version" -> "13.1.4"|>, 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.1.4"|>, 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.1.4"|>, 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.1.4"|>, 
                    "Carbon Disclosure" -> <|
                    "Form" -> NeuralNetworks`TensorT[{12}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> Tooltip[{
                    "\"Estimated data\"", 
                    "\"Estimate used instead of disclosure - data does not \
cover global operations\"", 
                    Skeleton[9], 
                    "\"Value derived from fuel use provided in Annual \
Report/Financial Accounts Disclosure\""}, {
                    "Estimated data", 
                    "Estimate used instead of disclosure - data does not \
cover global operations", 
                    "Value derived from data provided in Environmental/CSR", 
                    "Value derived from data provided in Annual \
Report/Financial Accounts Disclosure", 
                    "Estimate based on partial data disclosure in \
Environmental/CSR", 
                    "Exact Value from Annual Report/10K/Financial Accounts \
Disclosure", "Exact Value from Environmental/CSR", 
                    "Derived from previous year", 
                    "Value summed up from data provided in Environmental/CSR",
                     "Value summed up from data provided in Annual \
Report/Financial Accounts Disclosure", 
                    "Value derived from fuel use provided in \
Environmental/CSR", 
                    "Value derived from fuel use provided in Annual \
Report/Financial Accounts Disclosure"}], "OutputForm" -> "IndicatorVector", 
                    "Dimensions" -> {}, "Multilabel" -> False, "$Count" -> 12,
                     "$Version" -> "13.1.4"|>, 
                    "Revenue (USD mn)" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.1.4"|>|>, 
                    "Outputs" -> <|
                    "Ratings" -> <|
                    "Form" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT], "Type" -> "Class", "Labels" -> 
                    Tooltip[{"\"C\"", "\"E\"", 
                    Skeleton[2], "\"A\""}, {"C", "E", "B", "D", "A"}], 
                    "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                    5, "$Rank" -> 0, "$Version" -> "13.1.4"|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Elevation"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "GICS Sector Name"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Carbon Disclosure"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input7"] -> 
                    NeuralNetworks`NetPath["Inputs", "Revenue (USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Ratings"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Carbon Disclosure"], 
                    NeuralNetworks`NetPath["Nodes", "1"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Inputs", "Elevation"], 
                    NeuralNetworks`NetPath["Inputs", "GICS Sector Name"], 
                    NeuralNetworks`NetPath["Inputs", "Revenue (USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "2"], 
                    NeuralNetworks`NetPath["Nodes", "3"], 
                    NeuralNetworks`NetPath["Outputs", "Ratings"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Carbon Disclosure"], 
                    NeuralNetworks`NetPath["Nodes", "1"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Inputs", "Elevation"], 
                    NeuralNetworks`NetPath["Inputs", "GICS Sector Name"], 
                    NeuralNetworks`NetPath["Inputs", "Revenue (USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "2"], 
                    NeuralNetworks`NetPath["Nodes", "3"], 
                    NeuralNetworks`NetPath["Outputs", "Ratings"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.8787205504770603`*^9, {3.878720886103607*^9, 3.8787208935777817`*^9}, 
   3.878722665121871*^9, {3.878723217105832*^9, 3.87872322051511*^9}, {
   3.878724686696789*^9, 3.8787247023725758`*^9}, 3.8787253265518827`*^9, 
   3.8787253897763*^9, {3.878725424468122*^9, 3.87872548506365*^9}, 
   3.878725530059272*^9, 3.8787261003232718`*^9, 3.878726821386449*^9, 
   3.878807209605792*^9, 3.8788103408935747`*^9, {3.878811665104473*^9, 
   3.878811695031193*^9}, 3.8788118518267317`*^9, 3.878811949922965*^9, 
   3.879149316995925*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"bb8c37ce-a6b5-465b-9257-8df27473890e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Training the Net", "Subsubsection",
 CellChangeTimes->{{3.878723326833516*^9, 
  3.878723337087538*^9}},ExpressionUUID->"99246540-7d26-482a-814f-\
c78318188484"],

Cell[TextData[{
 "Train the net on the training data. NetTrain will automatically attach a \
Cross Entropy Loss layer to the output of the net\nWe set up two parameters:\n\
- \[OpenCurlyDoubleQuote]",
 StyleBox["Max",
  FontWeight->"Bold"],
 " ",
 StyleBox["Training",
  FontWeight->"Bold"],
 " ",
 StyleBox["Rounds",
  FontWeight->"Bold"],
 "\[CloseCurlyDoubleQuote]: is an option that specifies how many times to \
traverse the training data\n- \[OpenCurlyDoubleQuote]",
 StyleBox["Learning",
  FontWeight->"Bold"],
 " ",
 StyleBox["Rate",
  FontWeight->"Bold"],
 "\[CloseCurlyDoubleQuote]: is an option that specifies the rate at which to \
adjust neural net weights in order to minimize the training loss."
}], "Text",
 CellChangeTimes->{{3.8787264716665154`*^9, 3.878726490862109*^9}, {
  3.878810714496086*^9, 3.87881076971*^9}, {3.878810871069847*^9, 
  3.878810881237308*^9}},ExpressionUUID->"7be345d5-6033-4892-8119-\
db0692a1b24f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"results", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net", ",", "trainingset", ",", "All", ",", 
     RowBox[{"MaxTrainingRounds", "->", "1000"}], ",", " ", 
     RowBox[{"LearningRate", "->", "0.01"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"NetTrained", "=", 
  RowBox[{"results", "[", "\"\<TrainedNet\>\"", "]"}]}]}], "Input",
 CellChangeTimes->{{3.87872334170339*^9, 3.8787233675617456`*^9}, {
   3.8787240381723833`*^9, 3.8787240409329233`*^9}, 3.878724080194976*^9, {
   3.8787241385126467`*^9, 3.87872414244069*^9}, {3.878726154132513*^9, 
   3.878726162524501*^9}, {3.87872620718442*^9, 3.8787262230165863`*^9}, {
   3.878726501400774*^9, 3.878726517612896*^9}, {3.878810514967195*^9, 
   3.878810608388391*^9}, {3.87881067318223*^9, 3.878810710209969*^9}, {
   3.878810787168318*^9, 3.8788108059277887`*^9}, {3.878810924092107*^9, 
   3.878810949323271*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"1f19a39f-3020-4330-b84d-cdd628f2f64c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["7", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Ratings\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Carbon Di..\"", "\"Carbon Disclosure\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Carbon Disclosure", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999919615308, 
                    3.00000008038469}], 
                    
                    Offset[{0, -13.5}, {-2.999999919615308, 
                    3.00000008038469}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Carbon In..\"", 
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                    "Tooltip"]& ], TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Carbon In..\"", 
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                    "Tooltip"]& ], TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999464102047`, 
                    2.0000001071795874`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Carbon In..\"", 
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                    "Tooltip"]& ], TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999196153078`, 
                    3.0000001071795874`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Elevation\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999998928204104`, 
                    4.000000107179587}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"GICS Sect..\"", "\"GICS Sector Name\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "GICS Sector Name", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999998660255134`, 
                    5.000000107179586}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Revenue (..\"", "\"Revenue (USD mn)\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Revenue (USD mn)", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999998392306164`, 
                    6.000000107179586}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999196153082`, 
                    3.000000053589793}], 
                    
                    Offset[{0, -13.5}, {-1.9999999196153082`, 
                    3.000000053589793}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999196153085, 
                    3.000000026794896}], 
                    
                    Offset[{0, -13.5}, {-0.9999999196153085, 
                    3.000000026794896}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Ratings\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {8.038469108735353*^-8, 
                    2.999999999999999}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"12\"", TraditionalForm], 
                    
                    Offset[{-5.217758092674727, 
                    1.7392528529019}, {-3.4790568996283615`, 
                    1.5628292687083438`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.3162277914367091,
                     0.9486832895772231}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{-4.919349484592804, 
                    2.459674907063232}, {-3.4559016434844807`, 
                    2.08819669372554}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.4472136194660422,
                     0.8944271790168734}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-3.4499999316730117`, 
                    2.550000092442394}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{1.4737193576586097`*^-7, 
                    5.499999999999999}, {-3.4499999196153084`, 
                    3.0000000924423937`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897411974723`*^-8}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.889087400733705, 
                    3.889087192318315}, {-3.449999907557604, 
                    3.4500000924423935`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067622396936, -0.7071068001334009}], 
                    InsetBox[
                    FormBox["\"11\"", TraditionalForm], 
                    
                    Offset[{4.919349616406269, 
                    2.459674643436303}, {-3.4559015946211247`, 
                    3.911803491475518}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.44721357153387326`, -0.894427202982958}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{5.217758185880922, 
                    1.7392525732833155`}, {-3.479056822610673, 
                    4.437170917733599}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.31622774059696646`, -0.948683306523804}], 
                    InsetBox[
                    FormBox["\"28\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999999}, {-2.4499999196153084`, 
                    3.0000000656474968`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"5\"", TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-1.4499999196153084`, 
                    3.0000000388525994`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999999, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox["\"5\"", TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-0.44999991961530866`, 
                    3.000000012057703}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999999, -2.6794896967885513`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 12\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Carbon Disclosure\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input6\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 12\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Carbon Disclosure", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input6"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999464102047`, 
                    2.0000001071795874`}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input4\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input4"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999196153078`, 
                    3.0000001071795874`}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input5\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input5"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999998928204104`, 
                    4.000000107179587}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Elevation\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Elevation", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999998660255134`, 
                    5.000000107179586}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 11\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"GICS Sector Name\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 11\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"GICS Sector Name", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999998392306164`, 
                    6.000000107179586}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Revenue (USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input7\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Revenue (USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input7"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999919615308, 
                    3.00000008038469}, {-1.9999999196153082`, 
                    3.000000053589793}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 28\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 28\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999196153082`, 
                    3.000000053589793}, {-0.9999999196153085, 
                    3.000000026794896}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999196153085, 3.000000026794896}, {
                    8.038469108735353*^-8, 2.999999999999999}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Ratings\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Ratings"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4790568996283615`, 
                    1.5628292687083438`}, {-0.25, 0}, 
                    Offset[8], {1.0000000803846905`, 2.9999999732051017`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 12\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Carbon Disclosure\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input6\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 12\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Carbon Disclosure", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input6"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4559016434844807`, 
                    2.08819669372554}, {-0.25, 0}, 
                    Offset[8], {1.0000000535897935`, 1.9999999732051021`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4499999316730117`, 
                    2.550000092442394}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948965`, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input4\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input4"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4499999196153084`, 
                    3.0000000924423937`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794897411974716`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input5\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input5"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999907557604, 
                    3.4500000924423935`}, {-0.25, 0}, 
                    Offset[8], {0.9999999732051021, -1.000000026794897}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Elevation\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Elevation", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4559015946211247`, 
                    3.911803491475518}, {-0.25, 0}, 
                    Offset[8], {0.9999999464102052, -2.000000026794896}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 11\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"GICS Sector Name\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 11\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"GICS Sector Name", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.479056822610673, 
                    4.437170917733599}, {-0.25, 0}, 
                    Offset[8], {0.9999999196153082, -3.000000026794896}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Revenue (USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input7\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Revenue (USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input7"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999196153084`, 
                    3.0000000656474968`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 28\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 28\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999196153084`, 
                    3.0000000388525994`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999991961530866`, 
                    3.000000012057703}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Ratings\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Ratings"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999999999987`, 1.0717958811647137`*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Carbon Disclosure\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Carbon Disclosure", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999919615308, 3.00000008038469}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.3], 
                    
                    LineBox[{{-0.2, 0.2}, {-0.1, 0.2}, {0., 
                    0.}, {-0.1, -0.2}, {-0.2, -0.2}}], 
                    LineBox[{{0., 0.}, {0.2, 0.}}], 
                    LineBox[{{0.125, 0.075}, {0.2, 0.}, {0.125, -0.075}}]}, 
                    ImageSize -> 16], {-2.999999919615308, 
                    3.00000008038469}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CatenateLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["1", Bold], 
                    Style[
                    CatenateLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", Bold,
                     StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style[
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", Bold]}], 
                    "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999464102047`, 2.0000001071795874`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", Bold,
                     StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style[
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", Bold]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999196153078`, 3.0000001071795874`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", Bold,
                     StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style[
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", Bold]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999998928204104`, 4.000000107179587}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Elevation\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Elevation", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999998660255134`, 5.000000107179586}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"GICS Sector Name\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["GICS Sector Name", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999998392306164`, 6.000000107179586}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Revenue (USD mn)\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Revenue (USD mn)", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-1.9999999196153082`, 
                    3.000000053589793}], 
                    
                    Offset[{-10.5, -10.5}, {-1.9999999196153082`, 
                    3.000000053589793}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-1.9999999196153082`, 
                    3.000000053589793}], 
                    
                    Offset[{10.5, 10.5}, {-1.9999999196153082`, 
                    3.000000053589793}]]], 
                    InsetBox[
                    GraphicsBox[
                    
                    GraphicsComplexBox[{{0.1, 0}, {-0.3, 1}, {0.5, 1}, {
                    1.3, 1}, {0.9, 0}}, {{
                    Opacity[0.2], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[3.5], 
                    RGBColor[0.33, 0.33, 0.33], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 
                    18], {-1.9999999196153082`, 3.000000053589793}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "LinearLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["2", Bold], 
                    Style[
                    LinearLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-0.9999999196153085, 3.000000026794896}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm2toFFcUx7faRtNnrMVa+ggtCCr6RUkb/ZI0FF9UaFPGap479965oYjR
rkZtPzRSELFgIbSljZVWXWcmqFA/hFIfoEFUJLH91Ar2Qy2ljYigqTGEvvR/
NpuwOzub3e0+5q47f7i7O7szy5nfnnPPfZx9kW2sl1MCgcDm6Xio17e9Ggrp
771VgQOtffM7be2GWNm+xWgzQtVsKt5chPYG2oMB5bXaawOKXD6/7OTzy04F
5ce59bQQ4WrO7bcNbr0rhL3bEPZXeH0Mr88Y3P4Bxz+jDRbSriyUN37BoDmH
c1MHk8/B4zzakDR67qbb8mVXjpUzfpqmTRXCXA4/+gLMfsuEVSnzQzw+h/jb
STGXLbNS4iebD7xgGPZeKey/0mUCxn9SH4drvhHC+gS++j6eDfSH9Wi1Mhhe
RHEvG8PP5PIm86iM+bW2fj0dDHaAxUgKVsNSWMdx7geGbq9sadn/bD5uwGNl
xA/54GX4zuWk3IR9C7G8j/pBTessy5fRCiltfjTegE/9ncTXriAWpXy9++F8
GqugUvJbsaJrGuLQTMLtmsEsRrm3EMYqqEn5Sa37CTDqc2WH3NHYGH68UIYq
qqT8OP/ySbAbcPG5m+gH/XnfmFw5IMdWRMYZifnhsq6bLxXaSIWVwK+p6eAj
NN9yYXe2ocGc4YWRCiuOH+UBcOpNjFnrVAnm1nQUx4/m+i79XZ+m7Sn3ykDF
NcEP86gNLuwGGNv3mJcGKq4IP0M3XwOrfxzsriKPzPbaQMW1mrFDlWB1w8Fu
SNfD8702TnWVlZXXI19ccrD7F+O7VV7bVgxaupSdTBincHu713YVgyQ3xfJl
HXHshLCPem1XMYjWKRGno3H8MLfwc21qjc1rrV+I2Tg/sLzt54t01DkFY+Tv
xn1ugh8z13ptWTGI9nli+7sIP2F3eW1XMQjzizXOXFtbs/5Hubj7Ia9tU11C
mIsT9nuE/UdFxfMtXtumuqLzi0HHGHmUMXNJwK9/mVTNzQdmItf+5IxbjPOC
0VN8fklEexPws34XdrtjTvP5uSi6/n7BZR20Bx8/EHOqz88hWnOC333vspZ3
gvYiHaf7/GIkg4cW0rpdYsxa52hfw+USn19UBrObMSa5477+/umjSS4reX7w
q1lS9BxOUo/Sm2Lfp2T5UR0UcmmIanbc2OGzz9Koqyg5fpH1E25tRVz+nqQm
ZSRmfJdKJcEvUofCzLW0vklzh0lq7vo5t+dl8NX3HT+qm2Ps4ALJ7Qbw+hhM
Ljr3xtzq7pBjN9XUdGb6lx3l+VH/TnNQ8gsjGK7CfdahvUl1X+DTgVj8CHzC
GNuepnXNlKzi/W2YrpfrzKf+p3nK80uXRSYtWq/YkYN6lKLgR+uU2ba62var
r1Q1HamsrAoFxu47F+3DHH5XPlrG/gff+g/92a+I8W+lsHZRrFMfkJtfM0HK
+x94XCcetL9F+THSz3HrGI7343kP7bfS/3Qks5fJVnMujesKaJ7y/BSXzy87
+fzuc90D7bU4NA==
                    "], {{0, 25.}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.}, 
                    PlotRange -> {{0, 40.}, {0, 25.}}, ImageSize -> 20], 
                    TraditionalForm]], {-0.9999999196153085, 
                    3.000000026794896}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["3", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{8.038469108735353*^-8, 2.999999999999999}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Ratings\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Ratings", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999919615308, 
                    3.00000008038469}, {-3.9999999732051017`, 
                    1.0000001071795879`}, {-3.9999999464102047`, 
                    2.0000001071795874`}, {-3.9999999196153078`, 
                    3.0000001071795874`}, {-3.9999998928204104`, 
                    4.000000107179587}, {-3.9999998660255134`, 
                    5.000000107179586}, {-3.9999998392306164`, 
                    6.000000107179586}, {-1.9999999196153082`, 
                    3.000000053589793}, {-0.9999999196153085, 
                    3.000000026794896}, {8.038469108735353*^-8, 
                    2.999999999999999}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 8, 8, 8, 8, 8, 8, 21, 21, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {284.9999985262806, 369.9999999999999}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{35.499994105122624`, 29.5}, {25., 15.}},
                     ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Elevation\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Elevation\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Elevation"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Elevation\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Elevation"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"scalar\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"GICS Sector Name\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"GICS Sector Name\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"GICS Sector Name"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"GICS Sector Name\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"GICS Sector Name"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    FrameStyle -> GrayLevel[0, 0], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    
                    ToString[{
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                    InputForm]], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    
                    RowBox[{"{", 
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    "}"}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"scalar\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    FrameStyle -> GrayLevel[0, 0], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    
                    ToString[{
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"}, 
                    InputForm]], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    
                    RowBox[{"{", 
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    "}"}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"scalar\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    FrameStyle -> GrayLevel[0, 0], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    
                    ToString[{
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"}, 
                    InputForm]], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    
                    RowBox[{"{", 
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    "}"}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"scalar\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Carbon Disclosure\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Carbon Disclosure\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Carbon Disclosure"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Carbon Disclosure\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Carbon Disclosure"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Revenue (USD mn)\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Revenue (USD mn)\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Revenue (USD mn)"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Revenue (USD mn)\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Revenue (USD mn)"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"scalar\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Ratings\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Ratings\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Ratings"}, InputForm]], Method -> "Preemptive",
                     PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Ratings\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Ratings"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "1" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|
                    "Input1" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input4" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input5" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input6" -> NeuralNetworks`TensorT[{12}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input7" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5, 28}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{5}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {5}, "$OutputSize" -> 5, 
                    "$InputSize" -> 28, "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Elevation" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.1.4"|>, 
                    "GICS Sector Name" -> <|
                    "Form" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> Tooltip[{
                    "\"Financials\"", "\"Real Estate\"", 
                    Skeleton[8], "\"Utilities\""}, {
                    "Financials", "Real Estate", "Materials", "Industrials", 
                    "Communication Services", "Consumer Discretionary", 
                    "Consumer Staples", "Information Technology", "Energy", 
                    "Health Care", "Utilities"}], "OutputForm" -> 
                    "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                    False, "$Count" -> 11, "$Version" -> "13.1.4"|>, 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.1.4"|>, 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.1.4"|>, 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.1.4"|>, 
                    "Carbon Disclosure" -> <|
                    "Form" -> NeuralNetworks`TensorT[{12}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> Tooltip[{
                    "\"Estimated data\"", 
                    "\"Estimate used instead of disclosure - data does not \
cover global operations\"", 
                    Skeleton[9], 
                    "\"Value derived from fuel use provided in Annual \
Report/Financial Accounts Disclosure\""}, {
                    "Estimated data", 
                    "Estimate used instead of disclosure - data does not \
cover global operations", 
                    "Value derived from data provided in Environmental/CSR", 
                    "Value derived from data provided in Annual \
Report/Financial Accounts Disclosure", 
                    "Estimate based on partial data disclosure in \
Environmental/CSR", 
                    "Exact Value from Annual Report/10K/Financial Accounts \
Disclosure", "Exact Value from Environmental/CSR", 
                    "Derived from previous year", 
                    "Value summed up from data provided in Environmental/CSR",
                     "Value summed up from data provided in Annual \
Report/Financial Accounts Disclosure", 
                    "Value derived from fuel use provided in \
Environmental/CSR", 
                    "Value derived from fuel use provided in Annual \
Report/Financial Accounts Disclosure"}], "OutputForm" -> "IndicatorVector", 
                    "Dimensions" -> {}, "Multilabel" -> False, "$Count" -> 12,
                     "$Version" -> "13.1.4"|>, 
                    "Revenue (USD mn)" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.1.4"|>|>, 
                    "Outputs" -> <|
                    "Ratings" -> <|
                    "Form" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT], "Type" -> "Class", "Labels" -> 
                    Tooltip[{"\"C\"", "\"E\"", 
                    Skeleton[2], "\"A\""}, {"C", "E", "B", "D", "A"}], 
                    "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                    5, "$Rank" -> 0, "$Version" -> "13.1.4"|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Elevation"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "GICS Sector Name"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Carbon Disclosure"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input7"] -> 
                    NeuralNetworks`NetPath["Inputs", "Revenue (USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Ratings"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Carbon Disclosure"], 
                    NeuralNetworks`NetPath["Nodes", "1"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Inputs", "Elevation"], 
                    NeuralNetworks`NetPath["Inputs", "GICS Sector Name"], 
                    NeuralNetworks`NetPath["Inputs", "Revenue (USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "2"], 
                    NeuralNetworks`NetPath["Nodes", "3"], 
                    NeuralNetworks`NetPath["Outputs", "Ratings"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Carbon Disclosure"], 
                    NeuralNetworks`NetPath["Nodes", "1"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Inputs", "Elevation"], 
                    NeuralNetworks`NetPath["Inputs", "GICS Sector Name"], 
                    NeuralNetworks`NetPath["Inputs", "Revenue (USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "2"], 
                    NeuralNetworks`NetPath["Nodes", "3"], 
                    NeuralNetworks`NetPath["Outputs", "Ratings"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.878726129928315*^9, 3.878726168428197*^9}, {
   3.8787262156484528`*^9, 3.87872622961639*^9}, {3.878726512796131*^9, 
   3.878726522953801*^9}, 3.8788072152668047`*^9, 3.878810347274686*^9, {
   3.87881054488463*^9, 3.878810614535725*^9}, {3.878810679069372*^9, 
   3.878810716436698*^9}, {3.87881079352073*^9, 3.878810811943788*^9}, 
   3.878810893326872*^9, {3.878810929803438*^9, 3.8788109548774137`*^9}, {
   3.878811673755396*^9, 3.878811702022273*^9}, 3.8788118587791557`*^9, 
   3.8788119571211853`*^9, 3.87914947438482*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"a88ae073-efa3-44f1-b6b5-4a08f3dfec5c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing the Trained Neural Network", "Subsubsection",
 CellChangeTimes->{{3.878726643694363*^9, 
  3.8787266533838167`*^9}},ExpressionUUID->"d901b0fe-9ce0-49d2-8e3b-\
639446d55d30"],

Cell["Plot the accuracy of the Neural Network on the Test Set", "Text",
 CellChangeTimes->{{3.878726714067416*^9, 3.878726732353978*^9}, {
  3.8787275933293257`*^9, 
  3.878727603654995*^9}},ExpressionUUID->"0f267815-5b34-49df-b044-\
4d26ff756c83"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Print", "[", 
  RowBox[{"\"\<The accuracy is: \>\"", ",", 
   RowBox[{"NetMeasurements", "[", 
    RowBox[{"NetTrained", ",", "testset", ",", "\"\<Accuracy\>\""}], "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AccuracyAss", " ", "=", " ", 
   RowBox[{"Append", "[", 
    RowBox[{"AccuracyAss", ",", " ", 
     RowBox[{"\"\<NeuralNetwork\>\"", "->", 
      RowBox[{"NetMeasurements", "[", 
       RowBox[{"NetTrained", ",", "testset", ",", "\"\<Accuracy\>\""}], 
       "]"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.878726605514142*^9, 3.878726617155772*^9}, 
   3.8787275887903347`*^9, {3.8788072618505507`*^9, 3.8788072659244833`*^9}, {
   3.878808579828779*^9, 3.8788085937210493`*^9}, {3.878808694140306*^9, 
   3.8788087103939*^9}, {3.878809380337645*^9, 3.8788093840805483`*^9}, {
   3.8788095453820143`*^9, 3.8788095671976147`*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"deb6a3ce-1b71-4899-8dd5-f97cc198ad11"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"The accuracy is: \"\>", "\[InvisibleSpace]", 
   "0.7157894678806004`"}],
  SequenceForm["The accuracy is: ", 0.7157894678806004],
  Editable->False]], "Print",
 CellChangeTimes->{{3.878811676406455*^9, 3.87881170464396*^9}, 
   3.8788118611968727`*^9, 3.878811959898769*^9, {3.8791494767883453`*^9, 
   3.879149479841407*^9}},
 CellLabel->
  "During evaluation of \
In[92]:=",ExpressionUUID->"a2d0d067-31c5-496a-b332-0f513e8a4767"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Comparing Accuracies", "Subsection",
 CellChangeTimes->{{3.878810999599156*^9, 
  3.87881101388165*^9}},ExpressionUUID->"f64bedb0-e15f-4b5c-a1ee-\
62184bc03531"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"BarChart", "[", 
    RowBox[{"AccuracyAss", ",", " ", 
     RowBox[{"ChartLabels", "->", 
      RowBox[{"Keys", "[", "AccuracyAss", "]"}]}], ",", " ", 
     RowBox[{"BarOrigin", "->", "Left"}]}], "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.878811025981831*^9, 3.878811028862319*^9}, {
   3.878811082183075*^9, 3.878811133392282*^9}, {3.878811171674322*^9, 
   3.878811252198371*^9}, 3.878811291695615*^9, {3.878811486032049*^9, 
   3.878811491626598*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"b63792d8-88da-43de-b740-10156776cce8"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{0., 0.43075018208302984`}, {0., 6.451201747997087}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
     0.6579999999999999], Thickness[Small]}], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6579999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 0.5487982520029133}, {0.47368421052631576`, 
             1.4512017479970867`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{103.75, 269.2319941347904}, {43.23573840961669, 
            65.67027935662888}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.47368421052631576`]& ,
         TagBoxNote->"0.47368421052631576"],
        StyleBox["0.47368421052631576`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.47368421052631576`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6579999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 1.5487982520029133`}, {0.47368421052631576`, 
             2.4512017479970867`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{103.75, 269.2319941347904}, {18.928938796825932`,
             41.36347974383813}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.47368421052631576`]& ,
         TagBoxNote->"0.47368421052631576"],
        StyleBox["0.47368421052631576`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.47368421052631576`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6579999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 2.5487982520029133`}, {0.47368421052631576`, 
             3.4512017479970867`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{103.75, 269.2319941347904}, {-5.377860815964823, 
            17.056680131047372`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.47368421052631576`]& ,
         TagBoxNote->"0.47368421052631576"],
        StyleBox["0.47368421052631576`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.47368421052631576`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6579999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 3.5487982520029133`}, {0.3684210526315789, 
             4.451201747997087}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{103.75, 
            232.56932877150362`}, {-29.684660428755592`, -7.250119481743383}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.3684210526315789]& ,
         TagBoxNote->"0.3684210526315789"],
        StyleBox["0.3684210526315789`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.3684210526315789, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6579999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 4.548798252002913}, {0.47368421052631576`, 
             5.451201747997087}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{103.75, 
            269.2319941347904}, {-53.99146004154633, -31.556919094534152`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.47368421052631576`]& ,
         TagBoxNote->"0.47368421052631576"],
        StyleBox["0.47368421052631576`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.47368421052631576`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6579999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 5.548798252002913}, {0.7157894678806004, 
             6.451201747997087}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{103.75, 
            353.55612244897964`}, {-78.2982596543371, -55.86371870732489}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.7157894678806004]& ,
         TagBoxNote->"0.7157894678806004"],
        StyleBox["0.7157894678806004`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.7157894678806004, {}], 
        "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
   StyleBox[
    StyleBox[{
      {Thickness[Tiny], 
       LineBox[{{0., 0.43075018208302984`}, {0., 6.5716107793153675`}}], 
       StyleBox[{}, "GraphicsLabel",
        StripOnInput->False]}, 
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0., 0.5487982520029133}, 
           Offset[{-6., 0.}, {0., 0.5487982520029133}]}], 
         LineBox[{{0., 6.451201747997087}, 
           Offset[{-6., 0.}, {0., 
            6.451201747997087}]}], {{}, {}, {}, {}, {}, {}, {
           LineBox[{{0., 1.4512017479970867`}, 
             Offset[{-4., 0.}, {0., 1.4512017479970867`}]}], 
           LineBox[{{0., 1.5487982520029133`}, 
             Offset[{-4., 0.}, {0., 1.5487982520029133`}]}], 
           LineBox[{{0., 2.4512017479970867`}, 
             Offset[{-4., 0.}, {0., 2.4512017479970867`}]}], 
           LineBox[{{0., 2.5487982520029133`}, 
             Offset[{-4., 0.}, {0., 2.5487982520029133`}]}], 
           LineBox[{{0., 3.4512017479970867`}, 
             Offset[{-4., 0.}, {0., 3.4512017479970867`}]}], 
           LineBox[{{0., 3.5487982520029133`}, 
             Offset[{-4., 0.}, {0., 3.5487982520029133`}]}], 
           LineBox[{{0., 4.451201747997087}, 
             Offset[{-4., 0.}, {0., 4.451201747997087}]}], 
           LineBox[{{0., 4.548798252002913}, 
             Offset[{-4., 0.}, {0., 4.548798252002913}]}], 
           LineBox[{{0., 5.451201747997087}, 
             Offset[{-4., 0.}, {0., 5.451201747997087}]}], 
           LineBox[{{0., 5.548798252002913}, 
             Offset[{-4., 0.}, {0., 5.548798252002913}]}]}, {}}}, 
        StyleBox[
         {Thickness[Tiny], 
          InsetBox["\<\"LogisticRegression\"\>", Offset[{-2, 0}, {0., 1.}], 
           NCache[ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]], 
           Automatic, {1, 0}], 
          InsetBox["\<\"GradientBoostedTrees\"\>", Offset[{-2, 0}, {0., 2.}], 
           NCache[ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]], 
           Automatic, {1, 0}], 
          InsetBox["\<\"RandomForest\"\>", Offset[{-2, 0}, {0., 3.}], NCache[
           ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]], 
           Automatic, {1, 0}], 
          InsetBox["\<\"SupportVectorMachine\"\>", Offset[{-2, 0}, {0., 4.}], 
           NCache[ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]], 
           Automatic, {1, 0}], 
          InsetBox["\<\"NearestNeighbors\"\>", Offset[{-2, 0}, {0., 5.}], 
           NCache[ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]], 
           Automatic, {1, 0}], 
          InsetBox["\<\"NeuralNetwork\"\>", Offset[{-2, 0}, {0., 6.}], NCache[
           ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]], 
           Automatic, {1, 0}]}, "GraphicsLabel",
         StripOnInput->False]}, "GraphicsTicks",
       StripOnInput->False]},
     Antialiasing->False], "GraphicsAxes",
    StripOnInput->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, False},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0.43075018208302984`},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, None}]], "Output",
 CellChangeTimes->{
  3.878811133888937*^9, 3.878811175820257*^9, {3.878811210339319*^9, 
   3.8788112458324823`*^9}, 3.878811292309379*^9, 3.878811493093472*^9, 
   3.878811970869577*^9, 3.87914948452833*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"661d2b07-6855-4162-88e1-2400a95c8419"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{316, Automatic}, {Automatic, 50}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Mac OS X ARM (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"2d1442fc-8e41-45cf-86ce-0b9d40cf737d"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 88, 0, 98, "Title",ExpressionUUID->"3d5c901c-528e-40ea-bfb5-6cae8602de3b"],
Cell[671, 24, 94, 0, 53, "Subtitle",ExpressionUUID->"e7479a40-b674-4689-a1e6-7937b2c177d6"],
Cell[768, 26, 100, 0, 31, "Subsubtitle",ExpressionUUID->"439ae915-0578-422b-b930-d6d3dc9f7065"],
Cell[CellGroupData[{
Cell[893, 30, 219, 4, 67, "Section",ExpressionUUID->"7dace181-d0f9-4283-b4a9-94e43c143822"],
Cell[CellGroupData[{
Cell[1137, 38, 160, 3, 54, "Subsection",ExpressionUUID->"94903ccb-4645-43a4-b5e5-28857714dfcf"],
Cell[1300, 43, 1447, 33, 94, "Input",ExpressionUUID->"fc7511cd-d7b9-430d-bc85-259db4bc506b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2784, 81, 236, 4, 54, "Subsection",ExpressionUUID->"35896a36-bc89-45d7-aa4c-67e8432be11c"],
Cell[CellGroupData[{
Cell[3045, 89, 3554, 82, 241, "Input",ExpressionUUID->"64e06684-09ba-41b9-8f8e-61ae4922557f"],
Cell[6602, 173, 83400, 1592, 241, "Output",ExpressionUUID->"6594553f-0a03-4904-a3e8-69227a7a8a6e"],
Cell[90005, 1767, 88210, 1664, 241, "Output",ExpressionUUID->"5d947c5c-cf83-43f2-8bf3-13cc19e3d9d7"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[178276, 3438, 263, 4, 67, "Section",ExpressionUUID->"09b8ec3b-6ad4-4052-b6db-39219809bea4"],
Cell[CellGroupData[{
Cell[178564, 3446, 139, 3, 54, "Subsection",ExpressionUUID->"718b3489-2255-4bf6-9e53-6fbf72095c28"],
Cell[178706, 3451, 732, 14, 104, "Text",ExpressionUUID->"709f453a-bbea-4521-b17e-2c6be2d07fba"],
Cell[CellGroupData[{
Cell[179463, 3469, 4298, 111, 262, "Input",ExpressionUUID->"2de772f5-4145-4495-9373-d8e224bc076d"],
Cell[183764, 3582, 1119, 18, 34, "Output",ExpressionUUID->"759a7a49-0be5-483a-a445-601f7fc30034"],
Cell[184886, 3602, 15556, 317, 241, "Output",ExpressionUUID->"b633ea02-2342-4947-91fc-622b8d1c7e49"],
Cell[200445, 3921, 9788, 267, 238, "Output",ExpressionUUID->"0df3c1dd-8376-46a4-bd0c-e4c125296705"],
Cell[CellGroupData[{
Cell[210258, 4192, 1113, 19, 24, "Print",ExpressionUUID->"466109ad-4feb-44c8-99e9-dbe54e674d99"],
Cell[211374, 4213, 1129, 19, 24, "Print",ExpressionUUID->"fb897a89-962f-42cc-a7c7-eae155a40bce"],
Cell[212506, 4234, 1143, 20, 24, "Print",ExpressionUUID->"ae7e5938-3c18-48af-a979-2c8fb2649a77"],
Cell[213652, 4256, 1102, 19, 24, "Print",ExpressionUUID->"75c72ed6-5422-4573-88e7-166b71a4bdda"]
}, Open  ]]
}, Open  ]],
Cell[214781, 4279, 512, 9, 35, "Text",ExpressionUUID->"1a6fc14d-0418-469d-b9d5-9f5a2764ee89"],
Cell[CellGroupData[{
Cell[215318, 4292, 1697, 40, 115, "Input",ExpressionUUID->"2e930372-2ce5-4b8c-89e1-74e90910d3f2"],
Cell[217018, 4334, 83893, 1598, 241, "Output",ExpressionUUID->"5b018c09-6354-461e-9ad5-09863ba8ede4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[300960, 5938, 307, 5, 54, "Subsection",ExpressionUUID->"056fde69-d6a3-4d9e-a2ac-b269c1f5fc2c"],
Cell[CellGroupData[{
Cell[301292, 5947, 1643, 37, 73, "Input",ExpressionUUID->"750190a8-3600-4615-bbeb-0c8e1dcd2654"],
Cell[302938, 5986, 34262, 623, 201, "Output",ExpressionUUID->"605e6967-8cf3-408f-a1f3-aeb7069b5223"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[337249, 6615, 296, 5, 54, "Subsection",ExpressionUUID->"c2596125-a273-4404-a475-df67a84893ae"],
Cell[CellGroupData[{
Cell[337570, 6624, 787, 17, 52, "Input",ExpressionUUID->"71b43137-8fd0-4fca-a3e2-e31cd7015633"],
Cell[338360, 6643, 88226, 1660, 241, "Output",ExpressionUUID->"7401c444-e85b-4d94-9a9c-d6be2a62b23e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[426635, 8309, 338, 6, 54, "Subsection",ExpressionUUID->"13e1a9e6-dd50-4c06-9ec7-817728819780"],
Cell[CellGroupData[{
Cell[426998, 8319, 5121, 131, 325, "Input",ExpressionUUID->"aca8cf41-acc7-4aa4-b9d0-698571a4bee2"],
Cell[432122, 8452, 89436, 1683, 241, "Output",ExpressionUUID->"0c0fd10b-1622-4030-94a5-c13aaeabc8e6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[521607, 10141, 370, 6, 54, "Subsection",ExpressionUUID->"2841fd97-a03b-47f0-825e-747d3de9d265"],
Cell[CellGroupData[{
Cell[522002, 10151, 2157, 61, 136, "Input",ExpressionUUID->"89c65a73-b4ee-4482-9bc9-332b9a5ea9b8"],
Cell[524162, 10214, 90513, 1699, 241, "Output",ExpressionUUID->"16a879e6-a176-42b0-b30f-319cd2467be0"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[614736, 11920, 217, 4, 67, "Section",ExpressionUUID->"9cfeceee-578b-479e-9e2b-6bb082aed526"],
Cell[CellGroupData[{
Cell[614978, 11928, 166, 3, 54, "Subsection",ExpressionUUID->"23ccf5ee-bcae-4dce-ad62-cf12062b8105"],
Cell[615147, 11933, 751, 19, 81, "Text",ExpressionUUID->"6b2ba3af-bd0c-404b-9a30-d5bc7bfff9d7"],
Cell[615901, 11954, 2758, 65, 157, "Input",ExpressionUUID->"7d247cef-d508-4632-b82d-0c996ff173ab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[618696, 12024, 215, 4, 54, "Subsection",ExpressionUUID->"cd9d058a-068e-49c5-a54a-179c014ccdab"],
Cell[CellGroupData[{
Cell[618936, 12032, 221, 4, 45, "Subsubsection",ExpressionUUID->"919c1118-c19d-49c2-b1cb-cdc52c16953a"],
Cell[619160, 12038, 321, 6, 35, "Text",ExpressionUUID->"358fc56b-581c-400b-a2cb-e1fe47c98ca6"],
Cell[CellGroupData[{
Cell[619506, 12048, 742, 13, 52, "Input",ExpressionUUID->"e494084e-deed-4ffe-a42a-57f607634d26"],
Cell[620251, 12063, 88794, 1613, 62, "Output",ExpressionUUID->"a3d025c4-fb74-4589-877e-0d3667d04c3a"],
Cell[709048, 13678, 128878, 2482, 551, "Output",ExpressionUUID->"bc87a0b7-95df-4db9-95b8-03f098b45676"]
}, Open  ]],
Cell[CellGroupData[{
Cell[837963, 16165, 1567, 36, 115, "Input",ExpressionUUID->"f50b7281-5b28-4bee-886b-6e43d141e559"],
Cell[839533, 16203, 430, 10, 24, "Print",ExpressionUUID->"504c4b6c-4f9f-4e9f-8fda-836c73daa707"],
Cell[839966, 16215, 37943, 979, 260, "Output",ExpressionUUID->"274d7e19-81e4-4c66-8270-10b2508d89c5"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[877958, 17200, 226, 4, 45, "Subsubsection",ExpressionUUID->"f53d6bbd-1785-4c17-836e-57829fcc4856"],
Cell[878187, 17206, 324, 6, 35, "Text",ExpressionUUID->"032cc1ba-9cd4-4b67-9266-120a6c713934"],
Cell[CellGroupData[{
Cell[878536, 17216, 744, 13, 52, "Input",ExpressionUUID->"bfdaded8-2093-4087-9ae1-340f7ee79d36"],
Cell[879283, 17231, 193547, 3345, 62, "Output",ExpressionUUID->"5d0b9905-77cc-4a4a-a50d-66740e372ec2"],
Cell[1072833, 20578, 236949, 4216, 551, "Output",ExpressionUUID->"f8e3d25a-4657-45cf-8622-5928656bdee1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1309819, 24799, 1567, 36, 115, "Input",ExpressionUUID->"c6d61c84-957f-4aed-afc0-70d0ed8abe2a"],
Cell[1311389, 24837, 430, 10, 24, "Print",ExpressionUUID->"3986c4b5-6279-4480-bd7a-9ee7ee82502d"],
Cell[1311822, 24849, 38026, 981, 260, "Output",ExpressionUUID->"e522a136-640c-408b-bf22-836d83ca170c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1349897, 25836, 262, 4, 45, "Subsubsection",ExpressionUUID->"af039915-bf9f-4d39-af0a-2865838c6fc3"],
Cell[1350162, 25842, 323, 6, 35, "Text",ExpressionUUID->"accec003-1c7f-4fff-8f86-6d6171f252b3"],
Cell[CellGroupData[{
Cell[1350510, 25852, 740, 13, 52, "Input",ExpressionUUID->"6853ef91-287f-4ced-be7c-af92b49c909c"],
Cell[1351253, 25867, 116969, 2063, 62, "Output",ExpressionUUID->"34e34a87-91df-476d-bfed-9e33963b8a3d"],
Cell[1468225, 27932, 136478, 2489, 552, "Output",ExpressionUUID->"c6f9cc4f-3acc-436e-bbb5-2c39f1a3aa4c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1604740, 30426, 1585, 37, 115, "Input",ExpressionUUID->"99020af7-66ff-4247-b63c-5a1edaef53dc"],
Cell[1606328, 30465, 448, 10, 24, "Print",ExpressionUUID->"6ea8b8f3-ee15-41cd-bc9a-573b8cdc3672"],
Cell[1606779, 30477, 37809, 975, 259, "Output",ExpressionUUID->"bc484430-7154-48c5-9beb-d9650260c42c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1644637, 31458, 224, 4, 45, "Subsubsection",ExpressionUUID->"707033d6-fc97-4519-873d-86d56ff114d1"],
Cell[1644864, 31464, 289, 4, 35, "Text",ExpressionUUID->"072a572c-19ec-4e50-8160-bd35294883af"],
Cell[CellGroupData[{
Cell[1645178, 31472, 726, 13, 52, "Input",ExpressionUUID->"0ad5282a-88fd-4696-b81a-c71cc5893931"],
Cell[1645907, 31487, 101382, 1844, 62, "Output",ExpressionUUID->"1a6e8c8f-23d6-40e3-8316-87a094a0b09b"],
Cell[1747292, 33333, 128178, 2414, 551, "Output",ExpressionUUID->"4ae6d7f2-fd29-4774-afa6-ad663918e046"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1875507, 35752, 1599, 37, 115, "Input",ExpressionUUID->"21382602-c388-449e-99f7-a16ab30307db"],
Cell[1877109, 35791, 428, 10, 24, "Print",ExpressionUUID->"694fb85b-4c9b-497e-b385-960bf9bcc1a4"],
Cell[1877540, 35803, 37240, 961, 259, "Output",ExpressionUUID->"7f50d843-6b87-46f2-8a4d-f19882a0bf25"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1914829, 36770, 168, 3, 45, "Subsubsection",ExpressionUUID->"9942841c-f629-4f6a-b284-312b9ff53265"],
Cell[1915000, 36775, 241, 4, 35, "Text",ExpressionUUID->"5dfadb55-1804-475e-af67-fd5a3fa3ada6"],
Cell[CellGroupData[{
Cell[1915266, 36783, 694, 13, 52, "Input",ExpressionUUID->"81eb6b46-1115-4683-ad4f-4a7788f50766"],
Cell[1915963, 36798, 74505, 1379, 62, "Output",ExpressionUUID->"da7cb8fa-e3c7-4a74-90b7-10200472e58e"],
Cell[1990471, 38179, 93028, 1796, 555, "Output",ExpressionUUID->"db5dab49-151c-4d34-a599-a0a5d3272d45"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2083536, 39980, 1541, 36, 115, "Input",ExpressionUUID->"5e92e43d-3a8d-417e-8227-9da67103f984"],
Cell[2085080, 40018, 430, 10, 24, "Print",ExpressionUUID->"b4456bd7-89f8-4acc-a7bf-3ac3b4fc851b"],
Cell[2085513, 40030, 37817, 975, 260, "Output",ExpressionUUID->"ee188ae2-29da-4391-94a9-950c0f740643"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2123391, 41012, 262, 4, 54, "Subsection",ExpressionUUID->"167a82f5-aa47-4220-90ca-39153e030b4f"],
Cell[CellGroupData[{
Cell[2123678, 41020, 163, 3, 45, "Subsubsection",ExpressionUUID->"af6df2e6-1db6-4012-946a-f093b8cea41f"],
Cell[2123844, 41025, 422, 9, 58, "Text",ExpressionUUID->"231b4959-cb15-4d63-a49e-e3c934e96ca1"],
Cell[CellGroupData[{
Cell[2124291, 41038, 1399, 27, 52, "Input",ExpressionUUID->"2e8dbd1c-5f09-4c5e-9338-71b2c43249c3"],
Cell[2125693, 41067, 7107, 143, 63, "Output",ExpressionUUID->"f11ba17f-f461-4265-b043-ab27685a9dba"],
Cell[2132803, 41212, 8640, 173, 63, "Output",ExpressionUUID->"9db8aca7-6fdd-49c8-a490-2403583828d8"]
}, Open  ]],
Cell[2141458, 41388, 177, 3, 35, "Text",ExpressionUUID->"4d8415d2-03cc-48ed-aee2-c53a40dd79be"],
Cell[2141638, 41393, 1208, 24, 52, "Input",ExpressionUUID->"0b8e8eb7-f51e-4c87-bb31-bd641db423ae"],
Cell[2142849, 41419, 229, 3, 35, "Text",ExpressionUUID->"a21c5f12-ea36-4f7b-9a81-5804c3f222f8"],
Cell[2143081, 41424, 550, 13, 30, "Input",ExpressionUUID->"c367e224-5d5f-4cad-8e0d-a2c397b5c8a9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2143668, 41442, 217, 4, 45, "Subsubsection",ExpressionUUID->"988cb0f7-88bc-42af-8fce-d6f30b501fca"],
Cell[2143888, 41448, 465, 10, 58, "Text",ExpressionUUID->"8cb8e66e-cdad-4527-820a-8cedc6abee3d"],
Cell[CellGroupData[{
Cell[2144378, 41462, 2343, 52, 157, "Input",ExpressionUUID->"14ea714b-552d-4cab-b1a4-42b227f9b31a"],
Cell[2146724, 41516, 224060, 4532, 691, "Output",ExpressionUUID->"bb8c37ce-a6b5-465b-9257-8df27473890e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2370833, 46054, 167, 3, 45, "Subsubsection",ExpressionUUID->"99246540-7d26-482a-814f-c78318188484"],
Cell[2371003, 46059, 941, 25, 104, "Text",ExpressionUUID->"7be345d5-6033-4892-8119-db0692a1b24f"],
Cell[CellGroupData[{
Cell[2371969, 46088, 982, 17, 52, "Input",ExpressionUUID->"1f19a39f-3020-4330-b84d-cdd628f2f64c"],
Cell[2372954, 46107, 223152, 4504, 65, "Output",ExpressionUUID->"a88ae073-efa3-44f1-b6b5-4a08f3dfec5c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2596155, 50617, 187, 3, 45, "Subsubsection",ExpressionUUID->"d901b0fe-9ce0-49d2-8e3b-639446d55d30"],
Cell[2596345, 50622, 248, 4, 35, "Text",ExpressionUUID->"0f267815-5b34-49df-b044-4d26ff756c83"],
Cell[CellGroupData[{
Cell[2596618, 50630, 974, 19, 52, "Input",ExpressionUUID->"deb6a3ce-1b71-4899-8dd5-f97cc198ad11"],
Cell[2597595, 50651, 481, 11, 24, "Print",ExpressionUUID->"a2d0d067-31c5-496a-b332-0f513e8a4767"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2598137, 50669, 167, 3, 54, "Subsection",ExpressionUUID->"f64bedb0-e15f-4b5c-a1ee-62184bc03531"],
Cell[CellGroupData[{
Cell[2598329, 50676, 653, 13, 94, "Input",ExpressionUUID->"b63792d8-88da-43de-b740-10156776cce8"],
Cell[2598985, 50691, 10013, 244, 191, "Output",ExpressionUUID->"661d2b07-6855-4162-88e1-2400a95c8419"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

