(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   3920932,      78492]
NotebookOptionsPosition[   3900216,      78148]
NotebookOutlinePosition[   3900654,      78165]
CellTagsIndexPosition[   3900611,      78162]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Predicting Climate Risks", "Title",
 CellChangeTimes->{
  3.879155723926409*^9},ExpressionUUID->"3d5c901c-528e-40ea-bfb5-\
6cae8602de3b"],

Cell["MGT529- Data Science and Machine Learning II", "Subtitle",
 CellChangeTimes->{
  3.879155728340694*^9},ExpressionUUID->"e7479a40-b674-4689-a1e6-\
7937b2c177d6"],

Cell["Jeanne Fernandez, Dario Scalabrin ", "Subsubtitle",
 CellChangeTimes->{
  3.879155732027416*^9},ExpressionUUID->"439ae915-0578-422b-b930-\
d6d3dc9f7065"],

Cell[CellGroupData[{

Cell["Data Loading & Cleaning", "Section",
 CellChangeTimes->{{3.877882042179366*^9, 3.877882055356389*^9}, {
  3.8778893815568857`*^9, 
  3.877889387854753*^9}},ExpressionUUID->"7dace181-d0f9-4283-b4a9-\
94e43c143822"],

Cell[CellGroupData[{

Cell["Data Loading", "Subsection",
 CellChangeTimes->{{3.877882058823523*^9, 
  3.877882061508025*^9}},ExpressionUUID->"94903ccb-4645-43a4-b5e5-\
28857714dfcf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ds", " ", "=", " ", 
    RowBox[{"Import", "[", 
     RowBox[{
     "\"\<https://raw.githubusercontent.com/scalabrindario/predicting-climate-\
risks/main/data/dataset.csv\>\"", ",", " ", "\"\<Dataset\>\"", ",", " ", 
      RowBox[{"\"\<HeaderLines\>\"", " ", "\[Rule]", " ", "1"}]}], "]"}]}], 
   ";"}], 
  RowBox[{"(*", 
   RowBox[{"Import", " ", "dataset", " ", "sample"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"comp", " ", "=", " ", 
    RowBox[{"Import", "[", 
     RowBox[{
     "\"\<https://raw.githubusercontent.com/scalabrindario/predicting-climate-\
risks/main/data/company_information.csv\>\"", ",", " ", "\"\<Dataset\>\"", 
      ",", " ", 
      RowBox[{"\"\<HeaderLines\>\"", " ", "\[Rule]", " ", "1"}]}], "]"}]}], 
   ";"}], 
  RowBox[{"(*", 
   RowBox[{"Import", " ", "company", " ", "information"}], "*)"}]}]}], "Input",\

 CellChangeTimes->{{3.877882155173353*^9, 3.877882233086768*^9}, {
   3.877889276711831*^9, 3.877889320051159*^9}, {3.877889368631003*^9, 
   3.8778893690756893`*^9}, 3.8784898834160337`*^9, {3.878489924575973*^9, 
   3.878489955668668*^9}, {3.878490108390555*^9, 3.878490113641554*^9}, {
   3.878490505952305*^9, 3.878490508768412*^9}, {3.87849066090661*^9, 
   3.878490670695458*^9}, {3.878492856576652*^9, 3.8784928608632383`*^9}, {
   3.879354526479218*^9, 3.879354527596731*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"fc7511cd-d7b9-430d-bc85-259db4bc506b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data Cleaning", "Subsection",
 CellChangeTimes->{{3.877882058823523*^9, 3.877882061508025*^9}, {
   3.877889406517935*^9, 3.877889407751175*^9}, 
   3.8784911565823393`*^9},ExpressionUUID->"35896a36-bc89-45d7-aa4c-\
67e8432be11c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ds", " ", "=", " ", 
    RowBox[{
     RowBox[{"KeyDrop", "[", 
      RowBox[{"{", "\"\<\>\"", "}"}], "]"}], "@", "ds"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Drop", " ", "emtpy", " ", "column"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ds", " ", "=", " ", 
    RowBox[{
     RowBox[{"KeyDrop", "[", 
      RowBox[{"{", "\"\<Activity Description\>\"", "}"}], "]"}], "@", 
     "ds"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Drop", " ", "activity", " ", "column"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ds", " ", "=", " ", 
    RowBox[{"ds", "[", 
     RowBox[{"All", ",", 
      RowBox[{"KeyMap", "[", 
       RowBox[{"Replace", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Ultimate Parent Name\>\"", "->", "\"\<Company\>\""}], 
          ",", " ", 
          RowBox[{"\"\<Ultimate Parent ISIN\>\"", "->", "\"\<ISIN\>\""}], ",", 
          RowBox[{
          "\"\<ExposureScore_Composite_ModerateHigh_2020\>\"", " ", "->", 
           " ", "\"\<Risk2020\>\""}], ",", "\[IndentingNewLine]", 
          RowBox[{
          "\"\<ExposureScore_Composite_ModerateHigh_2030\>\"", " ", "->", 
           " ", "\"\<Risk2030\>\""}], ",", 
          RowBox[{
          "\"\<ExposureScore_Composite_ModerateHigh_2040\>\"", " ", "->", 
           " ", "\"\<Risk2040\>\""}], ",", 
          RowBox[{
          "\"\<ExposureScore_Composite_ModerateHigh_2050\>\"", " ", "->", 
           " ", "\"\<Risk2050\>\""}], ",", 
          RowBox[{
          "\"\<ExposureScore_Composite_ModerateHigh_2060\>\"", " ", "->", 
           "\"\<Risk2060\>\""}], ",", "\[IndentingNewLine]", 
          RowBox[{
          "\"\<ExposureScore_Composite_ModerateHigh_2070\>\"", " ", "->", 
           " ", "\"\<Risk2070\>\""}], ",", 
          RowBox[{
          "\"\<ExposureScore_Composite_ModerateHigh_2080\>\"", " ", "->", 
           " ", "\"\<Risk2080\>\""}], ",", "\[IndentingNewLine]", 
          RowBox[{
          "\"\<ExposureScore_Composite_ModerateHigh_2090\>\"", "->", " ", 
           "\"\<Risk2090\>\""}]}], "}"}], "]"}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Rename", " ", "columns", " ", "name"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"ds", ",", " ", "5"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"comp", " ", "=", " ", 
    RowBox[{
     RowBox[{"KeyDrop", "[", 
      RowBox[{"{", "\"\<\>\"", "}"}], "]"}], "@", "comp"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Drop", " ", "emtpy", " ", "column"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"comp", ",", " ", "5"}], "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.877882155173353*^9, 3.877882233086768*^9}, {
   3.877889276711831*^9, 3.877889320051159*^9}, {3.877889368631003*^9, 
   3.8778893690756893`*^9}, {3.8778894126624193`*^9, 3.877889423407289*^9}, {
   3.877889459383305*^9, 3.8778894845215483`*^9}, {3.877889566017929*^9, 
   3.877889588273754*^9}, {3.877889627649275*^9, 3.877889817726323*^9}, {
   3.877889863794015*^9, 3.877889867382916*^9}, {3.877889963648498*^9, 
   3.8778899642708073`*^9}, 3.877890035751668*^9, {3.8784901464207277`*^9, 
   3.878490159646762*^9}, 3.8784902110953283`*^9, {3.878490551607078*^9, 
   3.878490552886361*^9}, {3.878491133677877*^9, 3.878491152768239*^9}, {
   3.878492863880169*^9, 3.878492878427312*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"64e06684-09ba-41b9-8f8e-61ae4922557f"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Company" -> "SEGRO Plc", "Country" -> "Germany", "ISIN" -> 
        "GB00B5ZN1N88", "Latitude" -> 51.21567, "Longitude" -> 6.81319, 
        "Risk2020" -> 65, "Risk2030" -> 67, "Risk2040" -> 67, "Risk2050" -> 
        71, "Risk2060" -> 74, "Risk2070" -> 76, "Risk2080" -> 79, "Risk2090" -> 
        80|>, <|"Company" -> "Banco Santander S.A.", "Country" -> "Spain", 
        "ISIN" -> "ES0113900J37", "Latitude" -> 37.88147, 
        "Longitude" -> -4.79092, "Risk2020" -> 81, "Risk2030" -> 83, 
        "Risk2040" -> 83, "Risk2050" -> 84, "Risk2060" -> 83, "Risk2070" -> 
        84, "Risk2080" -> 86, "Risk2090" -> 86|>, <|
       "Company" -> "Raiffeisen Gruppe", "Country" -> "Switzerland", "ISIN" -> 
        "", "Latitude" -> 47.04393, "Longitude" -> 7.276119, "Risk2020" -> 70,
         "Risk2030" -> 72, "Risk2040" -> 68, "Risk2050" -> 70, "Risk2060" -> 
        76, "Risk2070" -> 79, "Risk2080" -> 82, "Risk2090" -> 83|>, <|
       "Company" -> "Walgreens Boots Alliance Inc.", "Country" -> 
        "United Kingdom", "ISIN" -> "US9314271084", "Latitude" -> 56.0235994, 
        "Longitude" -> -3.9084897, "Risk2020" -> 70, "Risk2030" -> 76, 
        "Risk2040" -> 75, "Risk2050" -> 79, "Risk2060" -> 77, "Risk2070" -> 
        81, "Risk2080" -> 82, "Risk2090" -> 85|>, <|
       "Company" -> "Fastighets AB Balder", "Country" -> "Sweden", "ISIN" -> 
        "SE0000455057", "Latitude" -> 57.67661, "Longitude" -> 12.00585, 
        "Risk2020" -> 67, "Risk2030" -> 68, "Risk2040" -> 68, "Risk2050" -> 
        74, "Risk2060" -> 78, "Risk2070" -> 79, "Risk2080" -> 81, "Risk2090" -> 
        84|>}, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "Country"} -> 1, {All, "ISIN"} -> 1, {All, "Latitude"} -> 
        1, {All, "Longitude"} -> 1, {All, "Risk2020"} -> 1, {All, "Risk2030"} -> 
        1, {All, "Risk2040"} -> 1, {All, "Risk2050"} -> 1, {All, "Risk2060"} -> 
        1, {All, "Risk2070"} -> 1, {All, "Risk2080"} -> 1, {All, "Risk2090"} -> 
        1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> TypeSystem`PackageScope`AtomShape[324.8], "Country" -> 
            TypeSystem`PackageScope`AtomShape[156.8], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "Latitude" -> 
            TypeSystem`PackageScope`AtomShape[60], "Longitude" -> 
            TypeSystem`PackageScope`AtomShape[60], "Risk2020" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2030" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2040" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2050" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2060" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2070" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2080" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2090" -> 
            TypeSystem`PackageScope`AtomShape[34]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "Country", "ISIN", "Latitude", "Longitude", "Risk2020", 
         "Risk2030", "Risk2040", "Risk2050", "Risk2060", "Risk2070", 
         "Risk2080", "Risk2090"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer]}], 5], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "Country"} -> 1, {All, "ISIN"} -> 1, {All, "Latitude"} -> 
        1, {All, "Longitude"} -> 1, {All, "Risk2020"} -> 1, {All, "Risk2030"} -> 
        1, {All, "Risk2040"} -> 1, {All, "Risk2050"} -> 1, {All, "Risk2060"} -> 
        1, {All, "Risk2070"} -> 1, {All, "Risk2080"} -> 1, {All, "Risk2090"} -> 
        1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> TypeSystem`PackageScope`AtomShape[324.8], "Country" -> 
            TypeSystem`PackageScope`AtomShape[156.8], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "Latitude" -> 
            TypeSystem`PackageScope`AtomShape[60], "Longitude" -> 
            TypeSystem`PackageScope`AtomShape[60], "Risk2020" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2030" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2040" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2050" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2060" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2070" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2080" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2090" -> 
            TypeSystem`PackageScope`AtomShape[34]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "Country", "ISIN", "Latitude", "Longitude", "Risk2020", 
         "Risk2030", "Risk2040", "Risk2050", "Risk2060", "Risk2070", 
         "Risk2080", "Risk2090"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer]}], 5], "Path" -> {}, "DisplayedRowCount" -> 
     5, "DisplayedColumnCount" -> 10, "DataRowCount" -> 5, "DataColumnCount" -> 
     13, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Company", 
                  Style[
                  "Company", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Company"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Company"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Country", 
                  Style[
                  "Country", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Country"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Country"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ISIN", 
                  Style[
                  "ISIN", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ISIN"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ISIN"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Latitude", 
                  Style[
                  "Latitude", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Latitude"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Latitude"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Longitude", 
                  Style[
                  "Longitude", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Longitude"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Longitude"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2020", 
                  Style[
                  "Risk2020", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2020"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2020"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2030", 
                  Style[
                  "Risk2030", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2030"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2030"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2040", 
                  Style[
                  "Risk2040", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2040"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2040"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2050", 
                  Style[
                  "Risk2050", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2050"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2050"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2060", 
                  Style[
                  "Risk2060", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2060"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2060"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["SEGRO Plc", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{324.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Germany", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["GB00B5ZN1N88", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["51.2157"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6.81319"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["65"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["67"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["67"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["71"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["74"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Banco Santander S.A.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{324.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Spain", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ES0113900J37", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["37.8815"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-4.79092"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["81"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["83"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["83"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["84"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["83"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Raiffeisen Gruppe", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{324.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Switzerland", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["47.0439"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["7.27612"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["70"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["72"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["68"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["70"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["76"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Walgreens Boots Alliance Inc.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{324.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["United Kingdom", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["US9314271084", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["56.0236"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-3.90849"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["70"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["76"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["75"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["79"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["77"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Fastighets AB Balder", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{324.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Sweden", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["SE0000455057", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["57.6766"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["12.0059"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["67"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["68"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["68"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["74"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["78"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[True, 13, 1], {1, 13 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[False, 13, 1], {1, 13 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[13, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[13, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 2 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 2, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 5 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 5, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 100000000, {}]], MenuEvaluator -> Automatic]}],
                     " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[False, 13, 1], {1, 13 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[True, 13, 1], {1, 13 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{1079., {108.134033203125, 113.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{1079., {108.134033203125, 113.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.878492879714177*^9, 3.878617216432308*^9, 3.878715008748741*^9, 
   3.878805382545115*^9, 3.879148942302202*^9, 3.879155098450674*^9, 
   3.879155922821879*^9, 3.879325253165563*^9, {3.879354541168386*^9, 
   3.8793545548178177`*^9}, 3.879416651061475*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"6c1bf2d0-3b83-4766-8cb3-b432e1fb1961"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "TCUID" -> 48552, "Company" -> "Kuehne + Nagel International AG", 
        "Country" -> "SWITZERLAND", "ISIN" -> "CH0025238863", 
        "GICS Sector Name" -> "Industrials", "Carbon-Scope 1  (tonnes CO2e)" -> 
        176850.956, "Carbon-Scope 2  (tonnes CO2e)" -> 179751.057, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 2.372950234*^6, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 8.147, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 8.28, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 109.311, 
        "Carbon Disclosure" -> 
        "Value summed up from data provided in Environmental/CSR", 
        "Revenue (USD mn)" -> 21708.303737671948`|>, <|
       "TCUID" -> 229973, "Company" -> "Unieuro S.p.A.", "Country" -> "ITALY",
         "ISIN" -> "IT0005239881", "GICS Sector Name" -> 
        "Consumer Discretionary", "Carbon-Scope 1  (tonnes CO2e)" -> 988.211, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 25331.528, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 140678.397, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 0.363, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 9.305, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 51.677, 
        "Carbon Disclosure" -> 
        "Value summed up from data provided in Annual Report/Financial \
Accounts Disclosure", "Revenue (USD mn)" -> 2722.2762|>, <|
       "TCUID" -> 247763, "Company" -> "Sivers Semiconductors AB (publ)", 
        "Country" -> "SWEDEN", "ISIN" -> "SE0003917798", "GICS Sector Name" -> 
        "Information Technology", "Carbon-Scope 1  (tonnes CO2e)" -> 912.567, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 584.621, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 2173.206, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 62.997, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 40.358, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 150.023, 
        "Carbon Disclosure" -> "Estimated data", "Revenue (USD mn)" -> 
        14.48582404087|>, <|
       "TCUID" -> 191105, "Company" -> "Safilo Group S.p.A.", "Country" -> 
        "ITALY", "ISIN" -> "IT0004604762", "GICS Sector Name" -> 
        "Consumer Discretionary", "Carbon-Scope 1  (tonnes CO2e)" -> 
        10344.961, "Carbon-Scope 2  (tonnes CO2e)" -> 21496.98, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 87914.252, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 11.632, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 24.172, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 98.854, 
        "Carbon Disclosure" -> "Exact Value from Environmental/CSR", 
        "Revenue (USD mn)" -> 889.330670441942|>, <|
       "TCUID" -> 42800, "Company" -> "Iberdrola, S.A.", "Country" -> "SPAIN",
         "ISIN" -> "ES0144580Y14", "GICS Sector Name" -> "Utilities", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 1.3002609*^7, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 1.890456*^6, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 3.907877435*^6, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 344.198, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 50.043, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 103.447, 
        "Carbon Disclosure" -> "Exact Value from CDP", "Revenue (USD mn)" -> 
        37776.53429622234|>}, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "TCUID"} -> 
        1, {All, "Company"} -> 1, {All, "Country"} -> 1, {All, "ISIN"} -> 
        1, {All, "GICS Sector Name"} -> 
        1, {All, "Carbon-Scope 1  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 2  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 3 (tonnes CO2e)"} -> 
        1, {All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Disclosure"} -> 1, {All, "Revenue (USD mn)"} -> 1|>, 
       
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "TCUID" -> TypeSystem`PackageScope`AtomShape[34], "Company" -> 
            TypeSystem`PackageScope`AtomShape[347.20000000000005`], "Country" -> 
            TypeSystem`PackageScope`AtomShape[123.20000000000002`], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "GICS Sector Name" -> 
            TypeSystem`PackageScope`AtomShape[246.40000000000003`], 
            "Carbon-Scope 1  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 2  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 3 (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "Carbon Disclosure" -> 
            TypeSystem`PackageScope`AtomShape[560.], "Revenue (USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "TCUID", "Company", "Country", "ISIN", "GICS Sector Name", 
         "Carbon-Scope 1  (tonnes CO2e)", "Carbon-Scope 2  (tonnes CO2e)", 
         "Carbon-Scope 3 (tonnes CO2e)", 
         "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", "Carbon Disclosure",
          "Revenue (USD mn)"}, {
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real]}], 5], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "TCUID"} -> 
        1, {All, "Company"} -> 1, {All, "Country"} -> 1, {All, "ISIN"} -> 
        1, {All, "GICS Sector Name"} -> 
        1, {All, "Carbon-Scope 1  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 2  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 3 (tonnes CO2e)"} -> 
        1, {All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Disclosure"} -> 1, {All, "Revenue (USD mn)"} -> 1|>, 
       
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "TCUID" -> TypeSystem`PackageScope`AtomShape[34], "Company" -> 
            TypeSystem`PackageScope`AtomShape[347.20000000000005`], "Country" -> 
            TypeSystem`PackageScope`AtomShape[123.20000000000002`], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "GICS Sector Name" -> 
            TypeSystem`PackageScope`AtomShape[246.40000000000003`], 
            "Carbon-Scope 1  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 2  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 3 (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "Carbon Disclosure" -> 
            TypeSystem`PackageScope`AtomShape[560.], "Revenue (USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "TCUID", "Company", "Country", "ISIN", "GICS Sector Name", 
         "Carbon-Scope 1  (tonnes CO2e)", "Carbon-Scope 2  (tonnes CO2e)", 
         "Carbon-Scope 3 (tonnes CO2e)", 
         "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", "Carbon Disclosure",
          "Revenue (USD mn)"}, {
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real]}], 5], "Path" -> {}, "DisplayedRowCount" -> 5, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 5, "DataColumnCount" -> 
     13, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["TCUID", 
                  Style[
                  "TCUID", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "TCUID"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "TCUID"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Company", 
                  Style[
                  "Company", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Company"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Company"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Country", 
                  Style[
                  "Country", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Country"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Country"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ISIN", 
                  Style[
                  "ISIN", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ISIN"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ISIN"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["GICS Sector Name", 
                  Style[
                  "GICS Sector Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "GICS Sector Name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "GICS Sector Name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 1  (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 1  (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 1  (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 1  (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 2  (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 2  (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 2  (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 2  (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 3 (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 3 (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 3 (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 3 (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                  Style[
                  "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                  Style[
                  "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"}, 
                "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["48552"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Kuehne + Nagel International AG", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["SWITZERLAND", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["CH0025238863", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Industrials", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["176851."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["179751."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2372950."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["8.147"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["8.28"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["229973"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Unieuro S.p.A.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ITALY", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["IT0005239881", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Consumer Discretionary", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["988.211"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["25331.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["140678."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.363"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["9.305"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["247763"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Sivers Semiconductors AB (publ)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["SWEDEN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["SE0003917798", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Information Technology", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["912.567"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["584.621"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2173.21"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["62.997"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["40.358"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["191105"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Safilo Group S.p.A.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ITALY", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["IT0004604762", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Consumer Discretionary", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["10345.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["21497.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["87914.3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["11.632"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24.172"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["42800"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Iberdrola, S.A.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["SPAIN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ES0144580Y14", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Utilities", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["13002609."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1890456."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3907877."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["344.198"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["50.043"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[True, 13, 1], {1, 13 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[False, 13, 1], {1, 13 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[13, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[13, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 2 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 2, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 5 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 5, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 100000000, {}]], MenuEvaluator -> Automatic]}],
                     " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[False, 13, 1], {1, 13 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[True, 13, 1], {1, 13 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{1304., {108.134033203125, 113.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{1304., {108.134033203125, 113.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.878492879714177*^9, 3.878617216432308*^9, 3.878715008748741*^9, 
   3.878805382545115*^9, 3.879148942302202*^9, 3.879155098450674*^9, 
   3.879155922821879*^9, 3.879325253165563*^9, {3.879354541168386*^9, 
   3.8793545548178177`*^9}, 3.8794166511986237`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"ee9b18ee-9898-4963-8ed6-69783a6b2297"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Feature Engineering", "Section",
 CellChangeTimes->{{3.877882042179366*^9, 3.877882055356389*^9}, {
  3.8778893815568857`*^9, 3.877889387854753*^9}, {3.8784907159983683`*^9, 
  3.878490721079863*^9}},ExpressionUUID->"09b8ec3b-6ad4-4052-b6db-\
39219809bea4"],

Cell[CellGroupData[{

Cell["Integral Score ", "Subsection",
 CellChangeTimes->{
  3.878095202888431*^9},ExpressionUUID->"718b3489-2255-4bf6-9e53-\
6fbf72095c28"],

Cell["\<\
Our goal it to give a summary of the risk approximation by decade into one \
scalar statistic, called Integral Score. 
We first visualise several options for this score, given the risk values by \
decade.
One can fit a function given the risk approximation for several years, and \
then integrate the resulting curve.
The choice of score then boils down to the choice of approximation.\
\>", "Text",
 CellChangeTimes->{{3.878095305913897*^9, 3.878095370787418*^9}, {
  3.8781074730571938`*^9, 3.878107496759869*^9}, {3.878107594724197*^9, 
  3.878107668134574*^9}, {3.878110381495985*^9, 3.878110396451376*^9}, {
  3.8781104565792303`*^9, 3.878110566684598*^9}, {3.8791559279498043`*^9, 
  3.879155929461714*^9}},ExpressionUUID->"709f453a-bbea-4521-b17e-\
2c6be2d07fba"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "2020", ",", " ", "2030", ",", " ", "2040", ",", "2050", ",", "2060", ",",
      "2070", ",", " ", "2080", ",", " ", "2090"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"yRandom", " ", "=", " ", 
   RowBox[{"Normal", "@", 
    RowBox[{"Values", "@", 
     RowBox[{
      RowBox[{"RandomSample", "[", 
       RowBox[{
        RowBox[{"ds", "[", 
         RowBox[{"All", ",", " ", 
          RowBox[{"{", 
           RowBox[{"6", ";;", "13"}], "}"}]}], "]"}], ",", "1"}], "]"}], "[", 
      
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}]}]}]}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "We", " ", "pick", " ", "one", " ", "row", " ", "at", " ", "random", " ", 
    "to", " ", "illustrate", " ", "all", " ", "the", " ", "possible", " ", 
    "scores"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{"Transpose", "@", 
    RowBox[{"Normal", "@", 
     RowBox[{"{", 
      RowBox[{"x", ",", "yRandom"}], "}"}]}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"line", " ", "=", " ", 
   RowBox[{"Fit", "[", 
    RowBox[{"data", ",", " ", 
     RowBox[{"{", 
      RowBox[{"1", ",", "z"}], "}"}], ",", " ", "z"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"parabola", " ", "=", " ", 
   RowBox[{"Fit", "[", 
    RowBox[{"data", ",", " ", 
     RowBox[{"{", 
      RowBox[{"1", ",", "z", ",", 
       RowBox[{"z", "^", "2"}]}], "}"}], ",", " ", "z"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"polynomial3", " ", "=", " ", 
   RowBox[{"Fit", "[", 
    RowBox[{"data", ",", " ", 
     RowBox[{"{", 
      RowBox[{"1", ",", "z", ",", 
       RowBox[{"z", "^", "2"}], ",", 
       RowBox[{"z", "^", "3"}]}], "}"}], ",", " ", "z"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{"data", ",", 
     RowBox[{"PlotStyle", "->", "Red"}]}], "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"line", ",", " ", "parabola", ",", " ", "polynomial3"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"z", ",", "2010", ",", "2100"}], "}"}], ",", " ", 
     RowBox[{"PlotLegends", "->", "\"\<Expressions\>\""}]}], "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"BarChart", "[", "yRandom", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", 
  RowBox[{"\"\<Linear approximation (line): \>\"", ",", " ", 
   RowBox[{"Integrate", "[", 
    RowBox[{"line", ",", 
     RowBox[{"{", 
      RowBox[{"z", ",", "2020", ",", "2100"}], "}"}]}], "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", 
  RowBox[{"\"\<Quardatic approximation (parabola): \>\"", ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{"parabola", ",", 
     RowBox[{"{", 
      RowBox[{"z", ",", "2020", ",", "2100"}], "}"}]}], "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", 
  RowBox[{"\"\<Third degree approximation (polynomial3): \>\"", ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{"polynomial3", ",", 
     RowBox[{"{", 
      RowBox[{"z", ",", "2020", ",", "2100"}], "}"}]}], "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", 
  RowBox[{"\"\<Rectangle approximation (barchart): \>\"", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"Total", "@", "yRandom"}], ")"}], "*", "10"}]}], "]"}]}], "Input",\

 CellChangeTimes->{{3.878095988419815*^9, 3.878096008451264*^9}, {
   3.878096246426421*^9, 3.878096249028542*^9}, {3.87809736728378*^9, 
   3.8780973906733418`*^9}, 3.878097432467164*^9, {3.878097478162343*^9, 
   3.8780974995002832`*^9}, {3.8780983570920067`*^9, 3.878098417799266*^9}, {
   3.878098491380351*^9, 3.87809849395568*^9}, {3.87809898606929*^9, 
   3.8780989909869013`*^9}, {3.878107175408936*^9, 3.878107175612001*^9}, {
   3.878107205692005*^9, 3.878107358687537*^9}, {3.8781074188971367`*^9, 
   3.878107421340673*^9}, {3.878109452000227*^9, 3.878109498076082*^9}, {
   3.878109557921968*^9, 3.8781096290645742`*^9}, {3.878109816628388*^9, 
   3.878109816734045*^9}, {3.878110581079624*^9, 3.8781106177289267`*^9}, {
   3.87849120512105*^9, 3.878491209011669*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"2de772f5-4145-4495-9373-d8e224bc076d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "67", ",", "70", ",", "69", ",", "81", ",", "84", ",", "84", ",", "86", ",",
    "88"}], "}"}]], "Output",
 CellChangeTimes->{
  3.878098992066743*^9, 3.878099331598818*^9, 3.878099368325416*^9, {
   3.878107182896913*^9, 3.87810720691947*^9}, {3.87810723821165*^9, 
   3.878107276352625*^9}, 3.8781073240250177`*^9, {3.878107422738969*^9, 
   3.878107453848839*^9}, {3.878107756105233*^9, 3.878107760910823*^9}, 
   3.87810783859802*^9, {3.8781080362344112`*^9, 3.878108065411766*^9}, 
   3.8781094596677227`*^9, {3.878109571943493*^9, 3.87810959893552*^9}, 
   3.878109630289406*^9, {3.8781097915711803`*^9, 3.8781098474344463`*^9}, {
   3.878110619585442*^9, 3.878110622826226*^9}, {3.878490683574058*^9, 
   3.878490686083373*^9}, 3.87849085128356*^9, 3.878490941270187*^9, {
   3.8784911611531076`*^9, 3.8784911727022753`*^9}, {3.878491209407058*^9, 
   3.878491211387108*^9}, 3.878492609902875*^9, 3.878617218535305*^9, 
   3.878715011509631*^9, 3.8788053848095617`*^9, 3.879148945149165*^9, 
   3.879155930705359*^9, 3.879325256209025*^9, 3.879354559722999*^9, 
   3.879416660013793*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"640ecbe7-a4e3-420a-b284-4b076116ecec"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          AbsoluteThickness[1.6], 
          RGBColor[1, 0, 0]], 
         PointBox[{{2020., 67.}, {2030., 70.}, {2040., 69.}, {2050., 81.}, {
          2060., 84.}, {2070., 84.}, {2080., 86.}, {2090., 
          88.}}]}}}, {{}, {}}}, {{{{}, {}, 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwV0X0wlVkcB/DLYImQRgwiirnJzV1D3nbzXXm/cZ/73Jcnk6JrlZcZL1uZ
QqXdxPaim8YWZZ6TXb1Qse1U3poU1lWWUhqySmrrRu1avVHbbY8/zpz5zO+c
8z3nd1zVWWyKoUAgiKVjdh4JzRcIUnlYH6taGj0lxSk/dZgTdZJBXETOayky
hdElAdRt6Xp1xRsp9HPtrHNm618nnnjxTopFQxddxmbrY4us9n2UQp01vrIj
jXoBm5diyEB3PH5HSQaPbRsGEk+ZM5h64//BOouH7t2wp9CZwZYdwQubc2l+
1Fh3VASDNHNRzOMddP8lp7NtGQyWHNq1/+keHoOvepIKNAxWv7B/t+sAD/Hq
XFdlI4PnUSS94gjd3yV3KxphMLkz01RynEdAqqdXv7EM12qrmgereWjv5lom
i2QQ/Nmc+/Qsj9G178USVob6J84JJb/S9XNyEpg8Ge5MZktqG3nYDzhrz/Ey
NL1eLD1zjUdqeqhFbIcMln8sLFjZxWPaPTF+zksZ7tcZ/8b20nx9/TPneSzM
N/jO/zxA+/PfTAETyOILi47i4hEews6mic4kFltbvzEpfcoju/Z8ZVkRC9kq
kwteL3kILleyBedZkL7GxOjXNP9hS8zVfhYJPheD9B9ovtd9ieNHFlnhJuWR
BgTC8I3uV93kSNtSO6/PiCA7zzPkcqQclZZT1dWmBNMDzzf0ZMlRVCcO9LMg
sI4b6ggsl0Pezg9dsiLQaCCYaJKDi7hY+v18AmaGhDU9lsO2pyXK0o7g2E6/
7ocmCphdTbV75kCwyLNd5eqtwGNhxGSdM4E9+b31tEqB74469Ird6Hofvboo
X4GgnLI2Aw+CNRPLbQp/VqAl1qDx8FIC0nbEoF+rgEsNabIS0XpSZvemVwo0
b3rSNySm+R6hlQ62SliKFk6ofQm0pjF1S4KUqFj3wSEggKBknqRTolZiRNMr
7Qmm9RWFLjeLlTAKuVsaF0KwzWMZe+CcEuo1+WNOqwhSv+o7mHFPie1bHIJr
IwhGM0+bVc8o0fUx4cwPMfS+XdtK37qqMP2pz0USR9A2fm3iQLQKTwyDTtyR
0X56Bv+Yn6mC0eZI0S9KgiRNvXfxTyo8+kvS7hdPMGizZsF4iwpVdwuTLyXQ
+yTmDmhGVSjzirffnUQw2X+wSmHKASXCfvNv6fvVQzVZIg4V/zysdqQevf63
wnY5hylV+eZl1EJXI6MW6hp3Q1sJdeOj5WoTMYc57cPcPurbCXucq3w43PtU
OmKaQv9X5X30pj+HtM1vdcYbaT8lRSXuoRxuPKhrsqUmtZX+t6idQtX73Kl1
Zg3Psldx6LXuWxZOna19ENYaxsH3wpnMPdSacLGBPJKDXrf2jeEm2o+Q4e2F
qzlwjE2nDbWAnxR6xHJouKItd6OG3njwFnXyXj//UOrbreIVdlIO2sVWebup
dYF7p87LOLju74w5TC2sOH5SznLIm8p3PEmdPd3AzFCLruta22bPvzJ8IUzB
Ya+QP3h79vwF/64bpx49pFw/Sq3ZajJXo+QQ+N7ce3I2755jq5+KQ9n6G58/
U9v7fpkxTP0/RFYoIw==
           "]]}, Annotation[#, "Charting`Private`Tag$11737#1"]& ], 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwdz38w1Hkcx/HltK1fS4zD+pUfGYphivOr4Z3fbO3aH98vsqhVVzpsfl4R
EeF0+XnmTlvZzGUWc04ad8hNDo3ubvPj2Iak8qs47jLW9cOJe3/74zvfeczz
9f185mstlvBPqtNotCP4UO9p/xwa7XQ90BScrCk6BxrdxYHmlMnq6TEGB1Ic
wko9KbMs7RRaHNjSNdZP/diZ3B4mB3ZPtlvNUpbyzKWfckAs+ct3IBEtSviG
b8+BRWl0bukX6Na7G/IgDqyte2zoS9BtO2WqQg5k5PpYdGehQ5+a+mtyIVHb
OXwmF/3aSFZRyAW7iotX5ovQSqlfynsuHF4yeXPx63rIl091FPhEwKtQ2Zm6
GuzW7EXNzAhYzUthsKXonnPPPdsj4H7zje6JBvQZI8L87wigPe3Omm9CexRv
btrw4Mc5S1HpHTxvK804QMSD0dWz7OZO7Hvf/9FYyYMulS1Xfh+tOje03ccD
5iOLC76DuKf3VOa948Hjlh13+UPYD24roxz5oH3czXBbiX19Ps8ulg87dQZK
SqaxJ01kjpbzIbPnEL18HvvbzCjTHj7wAuitTivog3k5u1b4IBvujA9TUfcr
nwwYC0C0v917awN9fmlGFSQASRC9NkRNBvkrw4PmaQJIzGjeNawhw/+yk8I1
AVxjrjU0MNCyfPnNAQFcbnH1ctfBvTDG1GRZAIL++skOPbSRI6HQE0JkcHv5
JUPcS0c2sj8TgpHiXijTGO2jrVkYLQTNX04bv2Sh7Z/p8vKEMOMQvNpiie6b
HQ+6JYS0b1lDrjZ4nnK0dKxXCN6p1b1q9ti1flAtzAjh3hG1zipHdLa4+c62
EKxuy7r0nHFv5zgzb0ZA96m54UlXNHQ5xXoRwHS2WBa7obmS6woBAXWxGyxP
T7S76dhhCQHTlUNchQ+e1xbYPl9CgIbfWDnHD/tgZfLmTQLEUTmz5gHYA10+
WfiJgPMZLJ/mYOzL+mJbBQGD/4nkheHokVn9rRkC3n0YtmJzcJ/hWxb4hoA5
de/rozy0zmzSbgYJGukhzt8TaCEREMki4fkCu989Gr+/zF4N2EvCjbH8hA4R
9vhD/tOeJFQ7RZsUHEM/lvxWFUIClDr8qX0C91EsM28hCXWvnzWYUU4PCj+L
XiNr0/dR1l8/0Yi+vUfdiI2mKadEBgQJWv1TkWVUv6Qkl9DjH8qnGSfRX6am
10SSkJj+7+KOz3Hfy+ZOHCWh70lLlxFlv1f/aMeQYO4vLttD2Z+e7Yce0h/e
F0R5ZIjfiHZrlacUUTYsY6aLSNhajFlXP4Xe39TKiCMhMsLggQE6f+4C3Qfd
9vPDWhuqm46HJaMTit09/Kmuo1szin5oq5ddQHVWk0tdPAnWVx6EV1F++d3c
7+jstRyzW9T+gE7hJtr518WeXspHc4vij5FQ7FB/deTj/TkvK9EvKoi4F5Sv
bh7oQ3u91XZZpZyklqxCV8f1bW9TfvRVld1xEv4H4jsTcg==
           "]]}, Annotation[#, "Charting`Private`Tag$11737#2"]& ], 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.560181, 0.691569, 0.194885], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1: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
           "]]}, Annotation[#, "Charting`Private`Tag$11737#3"]& ]}}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, 
     AxesOrigin -> {2018.5416666666713`, 65.83333333333348}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{2018.5416666666713`, 2090.}, {65.83333333333348, 88.}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"line", "parabola", "polynomial3"}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.560181, 0.691569, 0.194885]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm], ",", 
               TagBox[#3, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.878098992066743*^9, 3.878099331598818*^9, 3.878099368325416*^9, {
   3.878107182896913*^9, 3.87810720691947*^9}, {3.87810723821165*^9, 
   3.878107276352625*^9}, 3.8781073240250177`*^9, {3.878107422738969*^9, 
   3.878107453848839*^9}, {3.878107756105233*^9, 3.878107760910823*^9}, 
   3.87810783859802*^9, {3.8781080362344112`*^9, 3.878108065411766*^9}, 
   3.8781094596677227`*^9, {3.878109571943493*^9, 3.87810959893552*^9}, 
   3.878109630289406*^9, {3.8781097915711803`*^9, 3.8781098474344463`*^9}, {
   3.878110619585442*^9, 3.878110622826226*^9}, {3.878490683574058*^9, 
   3.878490686083373*^9}, 3.87849085128356*^9, 3.878490941270187*^9, {
   3.8784911611531076`*^9, 3.8784911727022753`*^9}, {3.878491209407058*^9, 
   3.878491211387108*^9}, 3.878492609902875*^9, 3.878617218535305*^9, 
   3.878715011509631*^9, 3.8788053848095617`*^9, 3.879148945149165*^9, 
   3.879155930705359*^9, 3.879325256209025*^9, 3.879354559722999*^9, 
   3.879416660253731*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"2f102a83-0c0d-404e-a8d8-c75bf4108241"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{0.39075018208302986`, 0.}, {8.451201747997086, 0.}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
     Thickness[Small]}], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 67.},
              "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{20.246716333592264`, 
            57.840870883457754`}, {-53.584926878237226`, 
            100.97172611871373`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 67]& ,
         TagBoxNote->"67"],
        StyleBox["67", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[67, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
             70.}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{61.35266806641336, 
            98.94682261627885}, {-60.48298596765294, 100.97172611871373`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 70]& ,
         TagBoxNote->"70"],
        StyleBox["70", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[70, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
             69.}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{102.45861979923444`, 
            140.05277434909993`}, {-58.18363293784772, 100.97172611871373`}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, 69]& ,
         TagBoxNote->"69"],
        StyleBox["69", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[69, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 81.}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{143.56457153205554`, 
            181.15872608192103`}, {-85.77586929551056, 100.97172611871373`}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, 81]& ,
         TagBoxNote->"81"],
        StyleBox["81", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[81, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 84.}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{184.67052326487664`, 
            222.26467781474213`}, {-92.67392838492627, 100.97172611871373`}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, 84]& ,
         TagBoxNote->"84"],
        StyleBox["84", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[84, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{5.548798252002913, 0.}, {6.451201747997087, 84.}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{225.7764749976977, 
            263.3706295475632}, {-92.67392838492627, 100.97172611871373`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 84]& ,
         TagBoxNote->"84"],
        StyleBox["84", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[84, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{6.548798252002913, 0.}, {7.451201747997087, 86.}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{266.8824267305188, 
            304.47658128038427`}, {-97.27263444453676, 100.97172611871373`}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, 86]& ,
         TagBoxNote->"86"],
        StyleBox["86", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[86, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{7.548798252002913, 0.}, {8.451201747997086, 88.}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{307.9883784633399, 
            345.5825330132053}, {-101.87134050414723`, 100.97172611871373`}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, 88]& ,
         TagBoxNote->"88"],
        StyleBox["88", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[88, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
   StyleBox[
    StyleBox[{
      {Thickness[Tiny], 
       LineBox[{{0.39075018208302986`, 0.}, {8.612410779315367, 0.}}], 
       StyleBox[{}, "GraphicsLabel",
        StripOnInput->False]}, 
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0.5487982520029133, 0.}, 
           Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 0.}]}],
          LineBox[{{8.451201747997086, 0.}, 
           Offset[{-1.102182119232618*^-15, -6.}, {8.451201747997086, 
            0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
        StyleBox[{}, "GraphicsLabel",
         StripOnInput->False]}, "GraphicsTicks",
       StripOnInput->False]},
     Antialiasing->False], "GraphicsAxes",
    StripOnInput->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.39075018208302986`, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{
  3.878098992066743*^9, 3.878099331598818*^9, 3.878099368325416*^9, {
   3.878107182896913*^9, 3.87810720691947*^9}, {3.87810723821165*^9, 
   3.878107276352625*^9}, 3.8781073240250177`*^9, {3.878107422738969*^9, 
   3.878107453848839*^9}, {3.878107756105233*^9, 3.878107760910823*^9}, 
   3.87810783859802*^9, {3.8781080362344112`*^9, 3.878108065411766*^9}, 
   3.8781094596677227`*^9, {3.878109571943493*^9, 3.87810959893552*^9}, 
   3.878109630289406*^9, {3.8781097915711803`*^9, 3.8781098474344463`*^9}, {
   3.878110619585442*^9, 3.878110622826226*^9}, {3.878490683574058*^9, 
   3.878490686083373*^9}, 3.87849085128356*^9, 3.878490941270187*^9, {
   3.8784911611531076`*^9, 3.8784911727022753`*^9}, {3.878491209407058*^9, 
   3.878491211387108*^9}, 3.878492609902875*^9, 3.878617218535305*^9, 
   3.878715011509631*^9, 3.8788053848095617`*^9, 3.879148945149165*^9, 
   3.879155930705359*^9, 3.879325256209025*^9, 3.879354559722999*^9, 
   3.879416660334338*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"110fb143-ad43-4452-ab06-5b20a512a04b"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Linear approximation (line): \"\>", "\[InvisibleSpace]", 
   "6420.952380952389`"}],
  SequenceForm["Linear approximation (line): ", 6420.952380952389],
  Editable->False]], "Print",
 CellChangeTimes->{{3.878107238329743*^9, 3.878107276508223*^9}, 
   3.878107324138131*^9, {3.8781074228993597`*^9, 3.878107454003121*^9}, {
   3.878107756220397*^9, 3.87810776106087*^9}, 3.878107838740787*^9, {
   3.8781080364435863`*^9, 3.8781080655675163`*^9}, 3.8781094601917057`*^9, {
   3.8781095726128073`*^9, 3.878109599220655*^9}, 3.878109630566448*^9, {
   3.8781097918409157`*^9, 3.878109847741796*^9}, {3.87811061987574*^9, 
   3.8781106231039658`*^9}, {3.878490683843603*^9, 3.8784906861542788`*^9}, 
   3.878490851355443*^9, 3.878490941341604*^9, {3.8784911612271547`*^9, 
   3.878491172773608*^9}, {3.878491209476358*^9, 3.878491211457273*^9}, 
   3.8784926100106277`*^9, 3.878617218677796*^9, 3.878715011801186*^9, 
   3.878805385108643*^9, 3.879148945384584*^9, 3.879155930987974*^9, 
   3.879325256463355*^9, 3.879354559828231*^9, 3.8794166603483152`*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"df0ea3dd-2f3e-40c0-9aef-fcfb27224d22"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Quardatic approximation (parabola): \"\>", "\[InvisibleSpace]",
    "6414.126984126982`"}],
  SequenceForm["Quardatic approximation (parabola): ", 6414.126984126982],
  Editable->False]], "Print",
 CellChangeTimes->{{3.878107238329743*^9, 3.878107276508223*^9}, 
   3.878107324138131*^9, {3.8781074228993597`*^9, 3.878107454003121*^9}, {
   3.878107756220397*^9, 3.87810776106087*^9}, 3.878107838740787*^9, {
   3.8781080364435863`*^9, 3.8781080655675163`*^9}, 3.8781094601917057`*^9, {
   3.8781095726128073`*^9, 3.878109599220655*^9}, 3.878109630566448*^9, {
   3.8781097918409157`*^9, 3.878109847741796*^9}, {3.87811061987574*^9, 
   3.8781106231039658`*^9}, {3.878490683843603*^9, 3.8784906861542788`*^9}, 
   3.878490851355443*^9, 3.878490941341604*^9, {3.8784911612271547`*^9, 
   3.878491172773608*^9}, {3.878491209476358*^9, 3.878491211457273*^9}, 
   3.8784926100106277`*^9, 3.878617218677796*^9, 3.878715011801186*^9, 
   3.878805385108643*^9, 3.879148945384584*^9, 3.879155930987974*^9, 
   3.879325256463355*^9, 3.879354559828231*^9, 3.8794166603498774`*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"ad181318-7b76-4b11-a2e4-893aecfd621b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Third degree approximation (polynomial3): \"\>", 
   "\[InvisibleSpace]", "6380.894660949707`"}],
  SequenceForm[
  "Third degree approximation (polynomial3): ", 6380.894660949707],
  Editable->False]], "Print",
 CellChangeTimes->{{3.878107238329743*^9, 3.878107276508223*^9}, 
   3.878107324138131*^9, {3.8781074228993597`*^9, 3.878107454003121*^9}, {
   3.878107756220397*^9, 3.87810776106087*^9}, 3.878107838740787*^9, {
   3.8781080364435863`*^9, 3.8781080655675163`*^9}, 3.8781094601917057`*^9, {
   3.8781095726128073`*^9, 3.878109599220655*^9}, 3.878109630566448*^9, {
   3.8781097918409157`*^9, 3.878109847741796*^9}, {3.87811061987574*^9, 
   3.8781106231039658`*^9}, {3.878490683843603*^9, 3.8784906861542788`*^9}, 
   3.878490851355443*^9, 3.878490941341604*^9, {3.8784911612271547`*^9, 
   3.878491172773608*^9}, {3.878491209476358*^9, 3.878491211457273*^9}, 
   3.8784926100106277`*^9, 3.878617218677796*^9, 3.878715011801186*^9, 
   3.878805385108643*^9, 3.879148945384584*^9, 3.879155930987974*^9, 
   3.879325256463355*^9, 3.879354559828231*^9, 3.879416660351656*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"d86d3d00-845d-4c2e-9b3e-dec235ce90a8"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Rectangle approximation (barchart): \"\>", "\[InvisibleSpace]",
    "6290"}],
  SequenceForm["Rectangle approximation (barchart): ", 6290],
  Editable->False]], "Print",
 CellChangeTimes->{{3.878107238329743*^9, 3.878107276508223*^9}, 
   3.878107324138131*^9, {3.8781074228993597`*^9, 3.878107454003121*^9}, {
   3.878107756220397*^9, 3.87810776106087*^9}, 3.878107838740787*^9, {
   3.8781080364435863`*^9, 3.8781080655675163`*^9}, 3.8781094601917057`*^9, {
   3.8781095726128073`*^9, 3.878109599220655*^9}, 3.878109630566448*^9, {
   3.8781097918409157`*^9, 3.878109847741796*^9}, {3.87811061987574*^9, 
   3.8781106231039658`*^9}, {3.878490683843603*^9, 3.8784906861542788`*^9}, 
   3.878490851355443*^9, 3.878490941341604*^9, {3.8784911612271547`*^9, 
   3.878491172773608*^9}, {3.878491209476358*^9, 3.878491211457273*^9}, 
   3.8784926100106277`*^9, 3.878617218677796*^9, 3.878715011801186*^9, 
   3.878805385108643*^9, 3.879148945384584*^9, 3.879155930987974*^9, 
   3.879325256463355*^9, 3.879354559828231*^9, 3.879416660352777*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"4e9e6352-5099-401f-a797-ebf79bd266a8"]
}, Open  ]]
}, Open  ]],

Cell["\<\
We note that all the approximations are in the same order of magnitude. For \
the sake of simplicity and to avoid overfitting, we choose the linear \
approximation. We add the chosen Integral Score to the dataset.\
\>", "Text",
 CellChangeTimes->{{3.878107677086873*^9, 3.878107708192883*^9}, {
  3.87810802196667*^9, 3.878108027717223*^9}, {3.8781096481332808`*^9, 
  3.8781096662372627`*^9}, {3.8781106655916853`*^9, 
  3.878110686574559*^9}},ExpressionUUID->"1a6fc14d-0418-469d-b9d5-\
9f5a2764ee89"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"intColumn", " ", "=", 
   RowBox[{"ds", "[", 
    RowBox[{"All", ",", 
     RowBox[{
      RowBox[{"<|", 
       RowBox[{"\"\<integralScore\>\"", "->", 
        RowBox[{"Integrate", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Fit", "[", 
           RowBox[{
            RowBox[{"Transpose", "@", 
             RowBox[{"Normal", "@", 
              RowBox[{"{", 
               RowBox[{"x", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "#Risk2020", ",", "#Risk2030", ",", "#Risk2040", ",", 
                  "#Risk2050", ",", "#Risk2060", ",", "#Risk2070", ",", 
                  "#Risk2080", ",", "#Risk2090"}], "}"}]}], "}"}]}]}], ",", 
            " ", 
            RowBox[{"{", 
             RowBox[{"1", ",", "z"}], "}"}], ",", " ", "z"}], "]"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"z", ",", "2020", ",", "2100"}], "}"}]}], "]"}]}], "|>"}], 
      "&"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"newds", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"ds", ",", "intColumn", ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"newds", ",", " ", "5"}], "]"}]}], "Input",
 CellChangeTimes->{{3.878108591025799*^9, 3.878108736379463*^9}, {
   3.878109366113057*^9, 3.878109404653481*^9}, 3.878109680564666*^9, {
   3.878490953016451*^9, 3.8784909537716618`*^9}, {3.8784925335551987`*^9, 
   3.878492533615432*^9}, {3.878492578793417*^9, 3.8784925827181873`*^9}, {
   3.878492846193266*^9, 3.878492848609735*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"2e930372-2ce5-4b8c-89e1-74e90910d3f2"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Company" -> "Bunzl plc", "Country" -> "United Kingdom", "ISIN" -> 
        "GB00B0744B38", "Latitude" -> 51.435111, "Longitude" -> -1.070105, 
        "Risk2020" -> 82, "Risk2030" -> 83, "Risk2040" -> 79, "Risk2050" -> 
        83, "Risk2060" -> 85, "Risk2070" -> 85, "Risk2080" -> 89, "Risk2090" -> 
        89, "integralScore" -> 6797.1428571428605`|>, <|
       "Company" -> "STMicroelectronics N.V.", "Country" -> "Switzerland", 
        "ISIN" -> "NL0000226223", "Latitude" -> 46.164517, "Longitude" -> 
        6.101723, "Risk2020" -> 71, "Risk2030" -> 72, "Risk2040" -> 68, 
        "Risk2050" -> 72, "Risk2060" -> 77, "Risk2070" -> 79, "Risk2080" -> 
        84, "Risk2090" -> 83, "integralScore" -> 6146.666666666679|>, <|
       "Company" -> "Veolia Environnement SA", "Country" -> "United Kingdom", 
        "ISIN" -> "FR0000124141", "Latitude" -> 52.8496, 
        "Longitude" -> -1.3407, "Risk2020" -> 74, "Risk2030" -> 76, 
        "Risk2040" -> 75, "Risk2050" -> 79, "Risk2060" -> 84, "Risk2070" -> 
        85, "Risk2080" -> 90, "Risk2090" -> 91, "integralScore" -> 
        6646.666666666664|>, <|
       "Company" -> "CrelanCo", "Country" -> "Belgium", "ISIN" -> "", 
        "Latitude" -> 50.43865, "Longitude" -> 6.300535, "Risk2020" -> 79, 
        "Risk2030" -> 80, "Risk2040" -> 82, "Risk2050" -> 85, "Risk2060" -> 
        87, "Risk2070" -> 88, "Risk2080" -> 90, "Risk2090" -> 90, 
        "integralScore" -> 6880.000000000007|>, <|
       "Company" -> "J Sainsbury plc", "Country" -> "United Kingdom", "ISIN" -> 
        "GB00B019KW72", "Latitude" -> 53.9637344, "Longitude" -> -1.0860545, 
        "Risk2020" -> 72, "Risk2030" -> 72, "Risk2040" -> 71, "Risk2050" -> 
        73, "Risk2060" -> 75, "Risk2070" -> 77, "Risk2080" -> 81, "Risk2090" -> 
        83, "integralScore" -> 6107.619047619053|>}, "AllowEmbedding" -> True,
      "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "Country"} -> 1, {All, "ISIN"} -> 1, {All, "Latitude"} -> 
        1, {All, "Longitude"} -> 1, {All, "Risk2020"} -> 1, {All, "Risk2030"} -> 
        1, {All, "Risk2040"} -> 1, {All, "Risk2050"} -> 1, {All, "Risk2060"} -> 
        1, {All, "Risk2070"} -> 1, {All, "Risk2080"} -> 1, {All, "Risk2090"} -> 
        1, {All, "integralScore"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> TypeSystem`PackageScope`AtomShape[257.6], "Country" -> 
            TypeSystem`PackageScope`AtomShape[147.], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "Latitude" -> 
            TypeSystem`PackageScope`AtomShape[60], "Longitude" -> 
            TypeSystem`PackageScope`AtomShape[60], "Risk2020" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2030" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2040" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2050" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2060" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2070" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2080" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2090" -> 
            TypeSystem`PackageScope`AtomShape[34], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "Country", "ISIN", "Latitude", "Longitude", "Risk2020", 
         "Risk2030", "Risk2040", "Risk2050", "Risk2060", "Risk2070", 
         "Risk2080", "Risk2090", "integralScore"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Belgium", "Switzerland", "United Kingdom"]], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Real]}], 5], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "Country"} -> 1, {All, "ISIN"} -> 1, {All, "Latitude"} -> 
        1, {All, "Longitude"} -> 1, {All, "Risk2020"} -> 1, {All, "Risk2030"} -> 
        1, {All, "Risk2040"} -> 1, {All, "Risk2050"} -> 1, {All, "Risk2060"} -> 
        1, {All, "Risk2070"} -> 1, {All, "Risk2080"} -> 1, {All, "Risk2090"} -> 
        1, {All, "integralScore"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> TypeSystem`PackageScope`AtomShape[257.6], "Country" -> 
            TypeSystem`PackageScope`AtomShape[147.], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "Latitude" -> 
            TypeSystem`PackageScope`AtomShape[60], "Longitude" -> 
            TypeSystem`PackageScope`AtomShape[60], "Risk2020" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2030" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2040" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2050" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2060" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2070" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2080" -> 
            TypeSystem`PackageScope`AtomShape[34], "Risk2090" -> 
            TypeSystem`PackageScope`AtomShape[34], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "Country", "ISIN", "Latitude", "Longitude", "Risk2020", 
         "Risk2030", "Risk2040", "Risk2050", "Risk2060", "Risk2070", 
         "Risk2080", "Risk2090", "integralScore"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Belgium", "Switzerland", "United Kingdom"]], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Real]}], 5], "Path" -> {}, "DisplayedRowCount" -> 5, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 5, "DataColumnCount" -> 
     14, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Company", 
                  Style[
                  "Company", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Company"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Company"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Country", 
                  Style[
                  "Country", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Country"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Country"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ISIN", 
                  Style[
                  "ISIN", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ISIN"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ISIN"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Latitude", 
                  Style[
                  "Latitude", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Latitude"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Latitude"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Longitude", 
                  Style[
                  "Longitude", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Longitude"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Longitude"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2020", 
                  Style[
                  "Risk2020", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2020"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2020"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2030", 
                  Style[
                  "Risk2030", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2030"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2030"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2040", 
                  Style[
                  "Risk2040", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2040"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2040"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2050", 
                  Style[
                  "Risk2050", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2050"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2050"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Risk2060", 
                  Style[
                  "Risk2060", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Risk2060"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Risk2060"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["Bunzl plc", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{257.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["United Kingdom", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{147., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["GB00B0744B38", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["51.4351"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-1.07011"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["82"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["83"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["79"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["83"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["85"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["STMicroelectronics N.V.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{257.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Switzerland", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{147., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["NL0000226223", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["46.1645"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6.10172"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["71"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["72"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["68"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["72"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["77"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Veolia Environnement SA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{257.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["United Kingdom", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{147., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FR0000124141", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["52.8496"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-1.3407"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["74"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["76"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["75"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["79"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["84"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["CrelanCo", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{257.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Belgium", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{147., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["50.4387"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6.30054"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["79"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["80"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["82"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["85"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["87"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["J Sainsbury plc", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{257.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["United Kingdom", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{147., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["GB00B019KW72", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["53.9637"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Latitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-1.08605"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Longitude"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["72"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2020"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["72"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2030"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["71"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2040"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["73"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2050"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["75"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Risk2060"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[True, 14, 1], {1, 14 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[False, 14, 1], {1, 14 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[14, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[14, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 2 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 2, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 5 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 5, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 100000000, {}]], MenuEvaluator -> Automatic]}],
                     " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[False, 14, 1], {1, 14 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[True, 14, 1], {1, 14 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{1002., {108.134033203125, 113.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{1002., {108.134033203125, 113.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8784928496142683`*^9, 3.878617221117325*^9, 
  3.87871501453109*^9, 3.878805387280489*^9, 3.879148951112846*^9, 
  3.8791559344153643`*^9, 3.879325271104972*^9, 3.879354565721301*^9, 
  3.879416668340049*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"18d9c474-8324-4183-af81-7cc5516441d8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computing Average of Integral Score", "Subsection",
 CellChangeTimes->{
  3.878095202888431*^9, {3.878490751754402*^9, 3.878490760860165*^9}, {
   3.8784908151806507`*^9, 3.878490819061284*^9}, {3.878715022061735*^9, 
   3.878715028092407*^9}},ExpressionUUID->"056fde69-d6a3-4d9e-a2ac-\
b269c1f5fc2c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{"avgds", "=", " ", 
     RowBox[{"newds", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"GroupBy", "[", 
         RowBox[{
          RowBox[{"{", "#Company", "}"}], "&"}], "]"}], "/*", "Values"}], ",", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<Company\>\"", "->", 
          RowBox[{"Query", "[", 
           RowBox[{"First", ",", "\"\<Company\>\""}], "]"}]}], ",", 
         RowBox[{"\"\<ISIN\>\"", "->", 
          RowBox[{"Query", "[", 
           RowBox[{"First", ",", "\"\<ISIN\>\""}], "]"}]}], ",", 
         RowBox[{"\"\<integralScore\>\"", "->", 
          RowBox[{"Query", "[", 
           RowBox[{"Mean", ",", "\"\<integralScore\>\""}], "]"}]}]}], 
        "|>"}]}], "]"}]}], " ", ";"}], 
   RowBox[{"(*", 
    RowBox[{
    "Grouped", " ", "and", " ", "computed", " ", "operations", " ", "on", " ",
      "some", " ", "columns"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"avgds", ",", " ", "5"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8784908252724667`*^9, 3.878490859549131*^9}, {
  3.878490919998516*^9, 3.878490962787115*^9}, {3.8784925322187567`*^9, 
  3.8784926038952293`*^9}, {3.878492921017454*^9, 3.878492940468293*^9}, {
  3.878492972636957*^9, 3.878492985774609*^9}, {3.87849308816151*^9, 
  3.878493092286625*^9}, {3.878493399368621*^9, 3.878493401413369*^9}, {
  3.878619908928514*^9, 3.878619996059414*^9}, {3.8786200326366796`*^9, 
  3.878620054537904*^9}, {3.879154728021397*^9, 3.879154753671281*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"750190a8-3600-4615-bbeb-0c8e1dcd2654"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Company" -> "LFB S.A.", "ISIN" -> "", "integralScore" -> 
        7037.14285714287|>, <|
       "Company" -> "Alsea S.A.B. de C.V.", "ISIN" -> "MXP001391012", 
        "integralScore" -> 6740.000000000002|>, <|
       "Company" -> "OBOS BBL", "ISIN" -> "", "integralScore" -> 
        6014.047619047624|>, <|
       "Company" -> "Qt Group Oyj", "ISIN" -> "FI4000198031", "integralScore" -> 
        6444.7619047619155`|>, <|
       "Company" -> "Tata Motors Ltd.", "ISIN" -> "INE155A01022", 
        "integralScore" -> 6451.16402116403|>}, "AllowEmbedding" -> True, 
     "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "integralScore"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> 
            TypeSystem`PackageScope`AtomShape[224.00000000000003`], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 3, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Company", "ISIN", "integralScore"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real]}], 5], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "integralScore"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> 
            TypeSystem`PackageScope`AtomShape[224.00000000000003`], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 3, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Company", "ISIN", "integralScore"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real]}], 5], "Path" -> {}, "DisplayedRowCount" -> 5, 
     "DisplayedColumnCount" -> 3, "DataRowCount" -> 5, "DataColumnCount" -> 3,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Company", 
                  Style[
                  "Company", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Company"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Company"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ISIN", 
                  Style[
                  "ISIN", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ISIN"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ISIN"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["integralScore", 
                  Style[
                  "integralScore", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "integralScore"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "integralScore"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["LFB S.A.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["7037.14"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Alsea S.A.B. de C.V.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MXP001391012", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6740.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["OBOS BBL", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6014.05"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Qt Group Oyj", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FI4000198031", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6444.76"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Tata Motors Ltd.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["INE155A01022", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6451.16"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{465., {87.634033203125, 93.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{465., {87.634033203125, 93.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.878492604113213*^9, 3.878492615513929*^9}, 
   3.878492925618964*^9, 3.8784929782031727`*^9, {3.878493099243601*^9, 
   3.8784931045623503`*^9}, 3.8784934031612453`*^9, 3.8786172233522177`*^9, {
   3.878620048849023*^9, 3.878620055252098*^9}, 3.878715029289898*^9, 
   3.878805388889771*^9, 3.8791489526821136`*^9, 3.879155113490831*^9, 
   3.879155938432053*^9, 3.8793252733030367`*^9, 3.879354566763836*^9, 
   3.8794166747758493`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"057ac5cc-02a0-452f-a8d0-f3991a034d6f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Merge the two datasets", "Subsection",
 CellChangeTimes->{
  3.878095202888431*^9, {3.878490751754402*^9, 3.878490760860165*^9}, {
   3.8784908151806507`*^9, 3.878490819061284*^9}, {3.8784927152585287`*^9, 
   3.878492724398346*^9}},ExpressionUUID->"c2596125-a273-4404-a475-\
df67a84893ae"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"merged", " ", "=", " ", 
    RowBox[{"JoinAcross", "[", 
     RowBox[{"avgds", ",", "comp", ",", 
      RowBox[{"Key", "[", "\"\<ISIN\>\"", "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "Merged", " ", "two", " ", "datasets", " ", "and", " ", "dropped", " ", 
    "rows", " ", "without", " ", "ISIN", " ", "value"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"merged", ",", "5"}], "]"}]}], "Input",
 CellChangeTimes->{{3.8784908252724667`*^9, 3.878490859549131*^9}, {
  3.878490919998516*^9, 3.878490962787115*^9}, {3.8784925322187567`*^9, 
  3.8784926038952293`*^9}, {3.8784927320593*^9, 3.878492824701557*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"71b43137-8fd0-4fca-a3e2-e31cd7015633"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Company" -> "Ediston Ppty Invt Co plc", "ISIN" -> "GB00BNGMZB68", 
        "integralScore" -> 6495.238095238098, "TCUID" -> 227214, "Country" -> 
        "UNITED KINGDOM", "GICS Sector Name" -> "Real Estate", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 282.1, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 382.413, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 770.395, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 11.149, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 15.114, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 30.448, 
        "Carbon Disclosure" -> "Derived from previous year", 
        "Revenue (USD mn)" -> 25.302299056172|>, <|
       "Company" -> "Lagfin S.C.A.", "ISIN" -> "", "integralScore" -> 
        6154.285714285723, "TCUID" -> 203464, "Country" -> "NETHERLANDS", 
        "GICS Sector Name" -> "Financials", "Carbon-Scope 1  (tonnes CO2e)" -> 
        1685.318, "Carbon-Scope 2  (tonnes CO2e)" -> 34.001, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 12335.502, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 3.354, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 0.068, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 24.548, 
        "Carbon Disclosure" -> "Exact Value from Environmental/CSR", 
        "Revenue (USD mn)" -> 502.507862851605|>, <|
       "Company" -> "PCC SE", "ISIN" -> "", "integralScore" -> 
        6274.436090225576, "TCUID" -> 203464, "Country" -> "NETHERLANDS", 
        "GICS Sector Name" -> "Financials", "Carbon-Scope 1  (tonnes CO2e)" -> 
        1685.318, "Carbon-Scope 2  (tonnes CO2e)" -> 34.001, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 12335.502, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 3.354, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 0.068, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 24.548, 
        "Carbon Disclosure" -> "Exact Value from Environmental/CSR", 
        "Revenue (USD mn)" -> 502.507862851605|>, <|
       "Company" -> "Societatea Energetica Electric", "ISIN" -> 
        "ROELECACNOR5", "integralScore" -> 5893.015873015886, "TCUID" -> 
        185982, "Country" -> "ROMANIA", "GICS Sector Name" -> "Utilities", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 244911.822, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 698.606, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 68996.094, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 159.869, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 0.456, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 45.038, 
        "Carbon Disclosure" -> "Estimated data", "Revenue (USD mn)" -> 
        1531.95161210013|>, <|
       "Company" -> "Pharos Energy plc", "ISIN" -> "GB00B572ZV91", 
        "integralScore" -> 6495.238095238098, "TCUID" -> 42862, "Country" -> 
        "UNITED KINGDOM", "GICS Sector Name" -> "Energy", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 114709., 
        "Carbon-Scope 2  (tonnes CO2e)" -> 67., 
        "Carbon-Scope 3 (tonnes CO2e)" -> 13790.128, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 849.696, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 0.496, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 102.149, 
        "Carbon Disclosure" -> "Exact Value from CDP", "Revenue (USD mn)" -> 
        135.|>}, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "integralScore"} -> 1, {All, "TCUID"} -> 
        1, {All, "Country"} -> 1, {All, "GICS Sector Name"} -> 
        1, {All, "Carbon-Scope 1  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 2  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 3 (tonnes CO2e)"} -> 
        1, {All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Disclosure"} -> 1, {All, "Revenue (USD mn)"} -> 1|>, 
       
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> 
            TypeSystem`PackageScope`AtomShape[336.00000000000006`], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60], "TCUID" -> 
            TypeSystem`PackageScope`AtomShape[34], "Country" -> 
            TypeSystem`PackageScope`AtomShape[147.], "GICS Sector Name" -> 
            TypeSystem`PackageScope`AtomShape[123.20000000000002`], 
            "Carbon-Scope 1  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 2  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 3 (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "Carbon Disclosure" -> 
            TypeSystem`PackageScope`AtomShape[380.8], "Revenue (USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "ISIN", "integralScore", "TCUID", "Country", 
         "GICS Sector Name", "Carbon-Scope 1  (tonnes CO2e)", 
         "Carbon-Scope 2  (tonnes CO2e)", "Carbon-Scope 3 (tonnes CO2e)", 
         "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", "Carbon Disclosure",
          "Revenue (USD mn)"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["NETHERLANDS", "ROMANIA", "UNITED KINGDOM"]], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real]}], 5], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "integralScore"} -> 1, {All, "TCUID"} -> 
        1, {All, "Country"} -> 1, {All, "GICS Sector Name"} -> 
        1, {All, "Carbon-Scope 1  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 2  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 3 (tonnes CO2e)"} -> 
        1, {All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Disclosure"} -> 1, {All, "Revenue (USD mn)"} -> 1|>, 
       
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> 
            TypeSystem`PackageScope`AtomShape[336.00000000000006`], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60], "TCUID" -> 
            TypeSystem`PackageScope`AtomShape[34], "Country" -> 
            TypeSystem`PackageScope`AtomShape[147.], "GICS Sector Name" -> 
            TypeSystem`PackageScope`AtomShape[123.20000000000002`], 
            "Carbon-Scope 1  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 2  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 3 (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "Carbon Disclosure" -> 
            TypeSystem`PackageScope`AtomShape[380.8], "Revenue (USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "ISIN", "integralScore", "TCUID", "Country", 
         "GICS Sector Name", "Carbon-Scope 1  (tonnes CO2e)", 
         "Carbon-Scope 2  (tonnes CO2e)", "Carbon-Scope 3 (tonnes CO2e)", 
         "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", "Carbon Disclosure",
          "Revenue (USD mn)"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["NETHERLANDS", "ROMANIA", "UNITED KINGDOM"]], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real]}], 5], "Path" -> {}, "DisplayedRowCount" -> 5, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 5, "DataColumnCount" -> 
     14, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Company", 
                  Style[
                  "Company", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Company"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Company"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ISIN", 
                  Style[
                  "ISIN", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ISIN"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ISIN"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["integralScore", 
                  Style[
                  "integralScore", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "integralScore"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "integralScore"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["TCUID", 
                  Style[
                  "TCUID", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "TCUID"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "TCUID"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Country", 
                  Style[
                  "Country", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Country"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Country"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["GICS Sector Name", 
                  Style[
                  "GICS Sector Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "GICS Sector Name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "GICS Sector Name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 1  (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 1  (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 1  (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 1  (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 2  (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 2  (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 2  (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 2  (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 3 (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 3 (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 3 (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 3 (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                  Style[
                  "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["Ediston Ppty Invt Co plc", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["GB00BNGMZB68", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6495.24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["227214"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["UNITED KINGDOM", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{147., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Real Estate", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["282.1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["382.413"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["770.395"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["11.149"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Lagfin S.C.A.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6154.29"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["203464"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["NETHERLANDS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{147., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Financials", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1685.32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["34.001"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["12335.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3.354"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["PCC SE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6274.44"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["203464"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["NETHERLANDS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{147., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Financials", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1685.32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["34.001"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["12335.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3.354"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Societatea Energetica Electric", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ROELECACNOR5", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5893.02"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["185982"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ROMANIA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{147., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Utilities", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["244912."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["698.606"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["68996.1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["159.869"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Pharos Energy plc", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["GB00B572ZV91", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6495.24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["42862"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["UNITED KINGDOM", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{147., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Energy", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["114709."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["67.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["13790.1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["849.696"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[True, 14, 1], {1, 14 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[False, 14, 1], {1, 14 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[14, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[14, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 2 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 2, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 5 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 5, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 100000000, {}]], MenuEvaluator -> Automatic]}],
                     " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[False, 14, 1], {1, 14 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[True, 14, 1], {1, 14 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{1307., {108.134033203125, 113.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{1307., {108.134033203125, 113.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.878492604113213*^9, 3.878492615513929*^9}, 
   3.8784927477738037`*^9, {3.878492795346176*^9, 3.878492824983602*^9}, {
   3.878492900694974*^9, 3.878492935514345*^9}, 3.878493415460045*^9, 
   3.878495273252953*^9, 3.8786200576404467`*^9, 3.878715031327244*^9, 
   3.878805390742227*^9, 3.879148953914688*^9, 3.879155941226163*^9, 
   3.879325275424492*^9, 3.879354569024786*^9, 3.8794166810631857`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"0e9ec8cc-4a49-4a94-b76f-166aa8abf20f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create Ratings", "Subsection",
 CellChangeTimes->{
  3.878095202888431*^9, {3.878490751754402*^9, 3.878490760860165*^9}, {
   3.8784908151806507`*^9, 3.878490819061284*^9}, {3.8784927152585287`*^9, 
   3.878492724398346*^9}, {3.878493542826058*^9, 
   3.878493549686611*^9}},ExpressionUUID->"13e1a9e6-dd50-4c06-9ec7-\
817728819780"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MinMaxScaler", "[", "value_", "]"}], ":=", 
   RowBox[{"Rescale", "[", 
    RowBox[{"value", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Min", "[", 
        RowBox[{"merged", "[", 
         RowBox[{"All", ",", " ", "\"\<integralScore\>\""}], "]"}], "]"}], 
       ",", 
       RowBox[{"Max", "[", 
        RowBox[{"merged", "[", 
         RowBox[{"All", ",", " ", "\"\<integralScore\>\""}], "]"}], "]"}]}], 
      "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MinMaxScaledList", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"MinMaxScaler", ",", " ", 
     RowBox[{"merged", "[", 
      RowBox[{"All", ",", " ", "\"\<integralScore\>\""}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"RatingCreator", "[", "value_", "]"}], ":=", " ", 
    "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"Between", "[", 
       RowBox[{"value", ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0.2"}], "}"}]}], "]"}], ",", " ", "\"\<A\>\"", 
      ",", " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Between", "[", 
         RowBox[{"value", ",", 
          RowBox[{"{", 
           RowBox[{"0.2", ",", "0.4"}], "}"}]}], "]"}], ",", " ", "\"\<B\>\"",
         ",", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Between", "[", 
           RowBox[{"value", ",", 
            RowBox[{"{", 
             RowBox[{"0.4", ",", "0.6"}], "}"}]}], "]"}], ",", " ", 
          "\"\<C\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Between", "[", 
             RowBox[{"value", ",", 
              RowBox[{"{", 
               RowBox[{"0.6", ",", "0.8"}], "}"}]}], "]"}], ",", " ", 
            "\"\<D\>\"", ",", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Between", "[", 
               RowBox[{"value", ",", 
                RowBox[{"{", 
                 RowBox[{"0.8", ",", "1"}], "}"}]}], "]"}], ",", " ", 
              "\"\<E\>\"", ","}], "   ", "\[IndentingNewLine]", "]"}]}], 
           "]"}]}], "]"}]}], "]"}]}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Convert", " ", "a", " ", "numerical", " ", "variable", " ", "into", " ", 
    "a", " ", "category"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RatingsList", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"RatingCreator", ",", " ", "MinMaxScaledList"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"IntScaledDat", "=", 
    RowBox[{"Dataset", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"<|", 
        RowBox[{"\"\<IntScaled\>\"", "->", "#"}], "|>"}], "&"}], "/@", 
      RowBox[{"Normal", "[", "MinMaxScaledList", "]"}]}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Convert", " ", "the", " ", "list", " ", "into", " ", "a", " ", 
    "dataset"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RatingsDat", "=", 
    RowBox[{"Dataset", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"<|", 
        RowBox[{"\"\<Ratings\>\"", "->", "#"}], "|>"}], "&"}], "/@", 
      RowBox[{"Normal", "[", "RatingsList", "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "Convert", " ", "the", " ", "list", " ", "into", " ", "a", " ", 
    "dataset"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"finalds", " ", "=", " ", 
    RowBox[{"Join", "[", 
     RowBox[{"merged", ",", "IntScaledDat", ",", "2"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Add", " ", "Scaled", " ", "Integral", " ", "column", " ", "to", " ", 
    "the", " ", "dataset"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"finalds", " ", "=", " ", 
    RowBox[{"Join", "[", 
     RowBox[{"finalds", ",", "RatingsDat", ",", "2"}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "Add", " ", "Rating", " ", "column", " ", "to", " ", "the", " ", 
    "dataset"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"finalds", ",", " ", "5"}], "]"}]}], "Input",
 CellChangeTimes->{{3.8784908252724667`*^9, 3.878490859549131*^9}, {
   3.878490919998516*^9, 3.878490962787115*^9}, {3.8784925322187567`*^9, 
   3.8784926038952293`*^9}, {3.8784927320593*^9, 3.878492824701557*^9}, {
   3.878493559212455*^9, 3.8784935891839933`*^9}, {3.8784936472366467`*^9, 
   3.8784936492084208`*^9}, {3.878493698086041*^9, 3.878493699127733*^9}, {
   3.8784938213563004`*^9, 3.878493898608631*^9}, {3.8784939465591927`*^9, 
   3.878493963332162*^9}, {3.878494335528428*^9, 3.878494372239007*^9}, {
   3.878494649208815*^9, 3.878494840715115*^9}, 3.878494880956595*^9, {
   3.878494921764689*^9, 3.878494941321616*^9}, {3.878495002471055*^9, 
   3.878495005993518*^9}, {3.878495546235155*^9, 3.878495626059207*^9}, {
   3.878495676259441*^9, 3.87849578178084*^9}, {3.878495849965911*^9, 
   3.8784960294861317`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"aca8cf41-acc7-4aa4-b9d0-698571a4bee2"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Company" -> "SThree plc", "ISIN" -> "GB00B0KM9T71", "integralScore" -> 
        6415.510204081636, "TCUID" -> 51139, "Country" -> "UNITED KINGDOM", 
        "GICS Sector Name" -> "Industrials", "Carbon-Scope 1  (tonnes CO2e)" -> 
        806., "Carbon-Scope 2  (tonnes CO2e)" -> 531., 
        "Carbon-Scope 3 (tonnes CO2e)" -> 30516.933, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 0.524, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 0.345, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 19.827, 
        "Carbon Disclosure" -> "Value derived from data provided in CDP", 
        "Revenue (USD mn)" -> 1539.1929, "IntScaled" -> 0.8476666279298293, 
        "Ratings" -> "E"|>, <|
       "Company" -> "Midwood LP", "ISIN" -> "", "integralScore" -> 
        6283.956043956051, "TCUID" -> 203464, "Country" -> "NETHERLANDS", 
        "GICS Sector Name" -> "Financials", "Carbon-Scope 1  (tonnes CO2e)" -> 
        1685.318, "Carbon-Scope 2  (tonnes CO2e)" -> 34.001, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 12335.502, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 3.354, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 0.068, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 24.548, 
        "Carbon Disclosure" -> "Exact Value from Environmental/CSR", 
        "Revenue (USD mn)" -> 502.507862851605, "IntScaled" -> 
        0.8212831333768569, "Ratings" -> "E"|>, <|
       "Company" -> "Azrieli Holdings Inc.", "ISIN" -> "", "integralScore" -> 
        6265.476190476197, "TCUID" -> 203464, "Country" -> "NETHERLANDS", 
        "GICS Sector Name" -> "Financials", "Carbon-Scope 1  (tonnes CO2e)" -> 
        1685.318, "Carbon-Scope 2  (tonnes CO2e)" -> 34.001, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 12335.502, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 3.354, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 0.068, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 24.548, 
        "Carbon Disclosure" -> "Exact Value from Environmental/CSR", 
        "Revenue (USD mn)" -> 502.507862851605, "IntScaled" -> 
        0.8175769555322336, "Ratings" -> "E"|>, <|
       "Company" -> "A.P. M\[OSlash]ller - M\[AE]rsk A/S", "ISIN" -> 
        "DK0010244508", "integralScore" -> 6042.96296296297, "TCUID" -> 42792,
         "Country" -> "DENMARK", "GICS Sector Name" -> "Industrials", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 3.390134451*^7, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 305000., 
        "Carbon-Scope 3 (tonnes CO2e)" -> 4.618724491*^6, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 853.079, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 7.675, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 116.224, 
        "Carbon Disclosure" -> "Value derived from data provided in CDP", 
        "Revenue (USD mn)" -> 39740., "IntScaled" -> 0.7729514072374837, 
        "Ratings" -> "D"|>, <|
       "Company" -> "Reservoir Capital Group LLC", "ISIN" -> "", 
        "integralScore" -> 6648.571428571433, "TCUID" -> 203464, "Country" -> 
        "NETHERLANDS", "GICS Sector Name" -> "Financials", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 1685.318, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 34.001, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 12335.502, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 3.354, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 0.068, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 24.548, 
        "Carbon Disclosure" -> "Exact Value from Environmental/CSR", 
        "Revenue (USD mn)" -> 502.507862851605, "IntScaled" -> 
        0.89440760169277, "Ratings" -> "E"|>}, "AllowEmbedding" -> True, 
     "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "integralScore"} -> 1, {All, "TCUID"} -> 
        1, {All, "Country"} -> 1, {All, "GICS Sector Name"} -> 
        1, {All, "Carbon-Scope 1  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 2  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 3 (tonnes CO2e)"} -> 
        1, {All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Disclosure"} -> 1, {All, "Revenue (USD mn)"} -> 
        1, {All, "IntScaled"} -> 1, {All, "Ratings"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> 
            TypeSystem`PackageScope`AtomShape[302.40000000000003`], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[126.], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60], "TCUID" -> 
            TypeSystem`PackageScope`AtomShape[34], "Country" -> 
            TypeSystem`PackageScope`AtomShape[147.], "GICS Sector Name" -> 
            TypeSystem`PackageScope`AtomShape[115.5], 
            "Carbon-Scope 1  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 2  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 3 (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "Carbon Disclosure" -> 
            TypeSystem`PackageScope`AtomShape[409.5], "Revenue (USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "IntScaled" -> 
            TypeSystem`PackageScope`AtomShape[60], "Ratings" -> 
            TypeSystem`PackageScope`AtomShape[31.5]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "ISIN", "integralScore", "TCUID", "Country", 
         "GICS Sector Name", "Carbon-Scope 1  (tonnes CO2e)", 
         "Carbon-Scope 2  (tonnes CO2e)", "Carbon-Scope 3 (tonnes CO2e)", 
         "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", "Carbon Disclosure",
          "Revenue (USD mn)", "IntScaled", "Ratings"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["", "DK0010244508", "GB00B0KM9T71"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["DENMARK", "NETHERLANDS", "UNITED KINGDOM"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Financials", "Industrials"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Exact Value from Environmental/CSR", 
           "Value derived from data provided in CDP"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["D", "E"]]}], 5], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "integralScore"} -> 1, {All, "TCUID"} -> 
        1, {All, "Country"} -> 1, {All, "GICS Sector Name"} -> 
        1, {All, "Carbon-Scope 1  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 2  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 3 (tonnes CO2e)"} -> 
        1, {All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Disclosure"} -> 1, {All, "Revenue (USD mn)"} -> 
        1, {All, "IntScaled"} -> 1, {All, "Ratings"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> 
            TypeSystem`PackageScope`AtomShape[302.40000000000003`], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[126.], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60], "TCUID" -> 
            TypeSystem`PackageScope`AtomShape[34], "Country" -> 
            TypeSystem`PackageScope`AtomShape[147.], "GICS Sector Name" -> 
            TypeSystem`PackageScope`AtomShape[115.5], 
            "Carbon-Scope 1  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 2  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 3 (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "Carbon Disclosure" -> 
            TypeSystem`PackageScope`AtomShape[409.5], "Revenue (USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "IntScaled" -> 
            TypeSystem`PackageScope`AtomShape[60], "Ratings" -> 
            TypeSystem`PackageScope`AtomShape[31.5]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "ISIN", "integralScore", "TCUID", "Country", 
         "GICS Sector Name", "Carbon-Scope 1  (tonnes CO2e)", 
         "Carbon-Scope 2  (tonnes CO2e)", "Carbon-Scope 3 (tonnes CO2e)", 
         "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", "Carbon Disclosure",
          "Revenue (USD mn)", "IntScaled", "Ratings"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["", "DK0010244508", "GB00B0KM9T71"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["DENMARK", "NETHERLANDS", "UNITED KINGDOM"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Financials", "Industrials"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Exact Value from Environmental/CSR", 
           "Value derived from data provided in CDP"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["D", "E"]]}], 5], "Path" -> {}, 
     "DisplayedRowCount" -> 5, "DisplayedColumnCount" -> 10, "DataRowCount" -> 
     5, "DataColumnCount" -> 16, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Company", 
                  Style[
                  "Company", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Company"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Company"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ISIN", 
                  Style[
                  "ISIN", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ISIN"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ISIN"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["integralScore", 
                  Style[
                  "integralScore", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "integralScore"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "integralScore"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["TCUID", 
                  Style[
                  "TCUID", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "TCUID"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "TCUID"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Country", 
                  Style[
                  "Country", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Country"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Country"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["GICS Sector Name", 
                  Style[
                  "GICS Sector Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "GICS Sector Name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "GICS Sector Name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 1  (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 1  (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 1  (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 1  (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 2  (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 2  (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 2  (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 2  (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 3 (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 3 (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 3 (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 3 (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                  Style[
                  "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["SThree plc", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["GB00B0KM9T71", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6415.51"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["51139"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["UNITED KINGDOM", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{147., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Industrials", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{115.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["806.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["531.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["30516.9"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.524"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Midwood LP", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6283.96"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["203464"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["NETHERLANDS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{147., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Financials", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{115.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1685.32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["34.001"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["12335.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3.354"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Azrieli Holdings Inc.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6265.48"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["203464"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["NETHERLANDS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{147., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Financials", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{115.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1685.32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["34.001"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["12335.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3.354"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["A.P. M\[OSlash]ller - M\[AE]rsk A/S", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DK0010244508", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6042.96"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["42792"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DENMARK", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{147., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Industrials", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{115.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["33901345."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["305000."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4618724."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["853.079"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Reservoir Capital Group LLC", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6648.57"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["203464"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["NETHERLANDS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{147., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Financials", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{115.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1685.32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["34.001"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["12335.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3.354"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[True, 16, 1], {1, 16 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[False, 16, 1], {1, 16 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[16, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[16, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 2 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 2, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 5 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 5, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 100000000, {}]], MenuEvaluator -> Automatic]}],
                     " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[False, 16, 1], {1, 16 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[True, 16, 1], {1, 16 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{1304., {108.134033203125, 113.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{1304., {108.134033203125, 113.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.878496029715033*^9, 3.87861722563971*^9, 3.878620059554048*^9, 
   3.878715034646832*^9, 3.87871584130048*^9, 3.878715883845355*^9, 
   3.87871626622314*^9, 3.878805392352337*^9, 3.879148955639336*^9, 
   3.879155943742526*^9, {3.8793252781727467`*^9, 3.879325306093731*^9}, 
   3.879354572293003*^9, 3.879416688007812*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"3f3115e9-9451-4527-89a2-cd0af1610749"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Add to the dataset the Total Carbon Intensity", "Subsection",
 CellChangeTimes->{
  3.878095202888431*^9, {3.878490751754402*^9, 3.878490760860165*^9}, {
   3.8784908151806507`*^9, 3.878490819061284*^9}, {3.8784927152585287`*^9, 
   3.878492724398346*^9}, {3.8787162065270653`*^9, 
   3.87871624908082*^9}},ExpressionUUID->"2841fd97-a03b-47f0-825e-\
747d3de9d265"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"CI1L", " ", "=", " ", 
   RowBox[{"Normal", "[", 
    RowBox[{"finalds", "[", 
     RowBox[{
     "All", ",", " ", 
      "\"\<Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\>\""}], "]"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"CI2L", " ", "=", " ", 
   RowBox[{"Normal", "[", 
    RowBox[{"finalds", "[", 
     RowBox[{
     "All", ",", "  ", 
      "\"\<Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\>\""}], "]"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"CI3L", " ", "=", " ", 
   RowBox[{"Normal", "[", 
    RowBox[{"finalds", "[", 
     RowBox[{
     "All", ",", "  ", 
      "\"\<Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\>\""}], "]"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"CItotDat", "=", 
    RowBox[{"Dataset", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"<|", 
        RowBox[{
        "\"\<Carbon Intensity Total (tonnes CO2e/USD mn)\>\"", "->", "#"}], 
        "|>"}], "&"}], "/@", 
      RowBox[{"Normal", "[", 
       RowBox[{"Total", "[", 
        RowBox[{"{", 
         RowBox[{"CI1L", ",", " ", "CI2L", ",", " ", "CI3L"}], "}"}], "]"}], 
       "]"}]}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Convert", " ", "the", " ", "list", " ", "into", " ", "a", " ", 
    "dataset"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"finalds", " ", "=", " ", 
    RowBox[{"Join", "[", 
     RowBox[{"finalds", ",", "CItotDat", ",", "2"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Add", " ", "Carbon", " ", "Intensity"}], "-", 
    RowBox[{
    "Scope", " ", "Total", " ", "column", " ", "to", " ", "the", " ", 
     "dataset"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"finalds", ",", "5"}], "]"}]}], "Input",
 CellChangeTimes->{{3.8784908252724667`*^9, 3.878490859549131*^9}, {
  3.878490919998516*^9, 3.878490962787115*^9}, {3.8784925322187567`*^9, 
  3.8784926038952293`*^9}, {3.8784927320593*^9, 3.878492824701557*^9}, {
  3.8787162247281437`*^9, 3.878716252711678*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"89c65a73-b4ee-4482-9bc9-332b9a5ea9b8"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Company" -> "Tornos Holding AG", "ISIN" -> "CH0011607683", 
        "integralScore" -> 6000.952380952393, "TCUID" -> 207247, "Country" -> 
        "SWITZERLAND", "GICS Sector Name" -> "Industrials", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 1762.814, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 2786.651, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 20804.928, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 16.009, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 25.307, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 188.937, 
        "Carbon Disclosure" -> "Estimated data", "Revenue (USD mn)" -> 
        110.115695556394, "IntScaled" -> 0.76452608674146, "Ratings" -> "D", 
        "Carbon Intensity Total (tonnes CO2e/USD mn)" -> 
        230.25300000000001`|>, <|
       "Company" -> "Instalco AB (publ)", "ISIN" -> "SE0017483506", 
        "integralScore" -> 5997.777777777782, "TCUID" -> 233455, "Country" -> 
        "SWEDEN", "GICS Sector Name" -> "Industrials", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 16753.226, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 8932.032, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 141246.541, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 21.66, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 11.548, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 182.616, 
        "Carbon Disclosure" -> "Estimated data", "Revenue (USD mn)" -> 
        773.460571001032, "IntScaled" -> 0.7638894126485598, "Ratings" -> "D",
         "Carbon Intensity Total (tonnes CO2e/USD mn)" -> 215.824|>, <|
       "Company" -> "Robert Bosch Stiftung GmbH", "ISIN" -> "", 
        "integralScore" -> 6097.714285714286, "TCUID" -> 203464, "Country" -> 
        "NETHERLANDS", "GICS Sector Name" -> "Financials", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 1685.318, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 34.001, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 12335.502, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 3.354, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 0.068, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 24.548, 
        "Carbon Disclosure" -> "Exact Value from Environmental/CSR", 
        "Revenue (USD mn)" -> 502.507862851605, "IntScaled" -> 
        0.7839319130930067, "Ratings" -> "D", 
        "Carbon Intensity Total (tonnes CO2e/USD mn)" -> 27.97|>, <|
       "Company" -> "Coats Group plc", "ISIN" -> "GB00B4YZN328", 
        "integralScore" -> 6880.000000000007, "TCUID" -> 54757, "Country" -> 
        "UNITED KINGDOM", "GICS Sector Name" -> "Consumer Discretionary", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 49200., 
        "Carbon-Scope 2  (tonnes CO2e)" -> 183300., 
        "Carbon-Scope 3 (tonnes CO2e)" -> 486315.413, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 42.293, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 157.569, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 418.048, 
        "Carbon Disclosure" -> 
        "Value derived from data provided in Environmental/CSR", 
        "Revenue (USD mn)" -> 1163.3, "IntScaled" -> 0.9408211430650772, 
        "Ratings" -> "E", "Carbon Intensity Total (tonnes CO2e/USD mn)" -> 
        617.91|>, <|
       "Company" -> "Juroszek Investments Sp. z o.o", "ISIN" -> "", 
        "integralScore" -> 6788.571428571438, "TCUID" -> 203464, "Country" -> 
        "NETHERLANDS", "GICS Sector Name" -> "Financials", 
        "Carbon-Scope 1  (tonnes CO2e)" -> 1685.318, 
        "Carbon-Scope 2  (tonnes CO2e)" -> 34.001, 
        "Carbon-Scope 3 (tonnes CO2e)" -> 12335.502, 
        "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 3.354, 
        "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 0.068, 
        "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 24.548, 
        "Carbon Disclosure" -> "Exact Value from Environmental/CSR", 
        "Revenue (USD mn)" -> 502.507862851605, "IntScaled" -> 
        0.9224849291895987, "Ratings" -> "E", 
        "Carbon Intensity Total (tonnes CO2e/USD mn)" -> 27.97|>}, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "integralScore"} -> 1, {All, "TCUID"} -> 
        1, {All, "Country"} -> 1, {All, "GICS Sector Name"} -> 
        1, {All, "Carbon-Scope 1  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 2  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 3 (tonnes CO2e)"} -> 
        1, {All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Disclosure"} -> 1, {All, "Revenue (USD mn)"} -> 
        1, {All, "IntScaled"} -> 1, {All, "Ratings"} -> 
        1, {All, "Carbon Intensity Total (tonnes CO2e/USD mn)"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> 
            TypeSystem`PackageScope`AtomShape[336.00000000000006`], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60], "TCUID" -> 
            TypeSystem`PackageScope`AtomShape[34], "Country" -> 
            TypeSystem`PackageScope`AtomShape[156.8], "GICS Sector Name" -> 
            TypeSystem`PackageScope`AtomShape[231.], 
            "Carbon-Scope 1  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 2  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 3 (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "Carbon Disclosure" -> 
            TypeSystem`PackageScope`AtomShape[556.5], "Revenue (USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "IntScaled" -> 
            TypeSystem`PackageScope`AtomShape[60], "Ratings" -> 
            TypeSystem`PackageScope`AtomShape[31.5], 
            "Carbon Intensity Total (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "ISIN", "integralScore", "TCUID", "Country", 
         "GICS Sector Name", "Carbon-Scope 1  (tonnes CO2e)", 
         "Carbon-Scope 2  (tonnes CO2e)", "Carbon-Scope 3 (tonnes CO2e)", 
         "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", "Carbon Disclosure",
          "Revenue (USD mn)", "IntScaled", "Ratings", 
         "Carbon Intensity Total (tonnes CO2e/USD mn)"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Consumer Discretionary", "Financials", "Industrials"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Estimated data", "Exact Value from Environmental/CSR", 
           "Value derived from data provided in Environmental/CSR"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["D", "E"]], 
         TypeSystem`Atom[Real]}], 5], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Company"} -> 
        1, {All, "ISIN"} -> 1, {All, "integralScore"} -> 1, {All, "TCUID"} -> 
        1, {All, "Country"} -> 1, {All, "GICS Sector Name"} -> 
        1, {All, "Carbon-Scope 1  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 2  (tonnes CO2e)"} -> 
        1, {All, "Carbon-Scope 3 (tonnes CO2e)"} -> 
        1, {All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"} -> 
        1, {All, "Carbon Disclosure"} -> 1, {All, "Revenue (USD mn)"} -> 
        1, {All, "IntScaled"} -> 1, {All, "Ratings"} -> 
        1, {All, "Carbon Intensity Total (tonnes CO2e/USD mn)"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Company" -> 
            TypeSystem`PackageScope`AtomShape[336.00000000000006`], "ISIN" -> 
            TypeSystem`PackageScope`AtomShape[134.4], "integralScore" -> 
            TypeSystem`PackageScope`AtomShape[60], "TCUID" -> 
            TypeSystem`PackageScope`AtomShape[34], "Country" -> 
            TypeSystem`PackageScope`AtomShape[156.8], "GICS Sector Name" -> 
            TypeSystem`PackageScope`AtomShape[231.], 
            "Carbon-Scope 1  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 2  (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon-Scope 3 (tonnes CO2e)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "Carbon Disclosure" -> 
            TypeSystem`PackageScope`AtomShape[556.5], "Revenue (USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60], "IntScaled" -> 
            TypeSystem`PackageScope`AtomShape[60], "Ratings" -> 
            TypeSystem`PackageScope`AtomShape[31.5], 
            "Carbon Intensity Total (tonnes CO2e/USD mn)" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 10, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Company", "ISIN", "integralScore", "TCUID", "Country", 
         "GICS Sector Name", "Carbon-Scope 1  (tonnes CO2e)", 
         "Carbon-Scope 2  (tonnes CO2e)", "Carbon-Scope 3 (tonnes CO2e)", 
         "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
         "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", "Carbon Disclosure",
          "Revenue (USD mn)", "IntScaled", "Ratings", 
         "Carbon Intensity Total (tonnes CO2e/USD mn)"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Consumer Discretionary", "Financials", "Industrials"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Estimated data", "Exact Value from Environmental/CSR", 
           "Value derived from data provided in Environmental/CSR"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["D", "E"]], 
         TypeSystem`Atom[Real]}], 5], "Path" -> {}, "DisplayedRowCount" -> 5, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 5, "DataColumnCount" -> 
     17, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Company", 
                  Style[
                  "Company", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Company"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Company"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ISIN", 
                  Style[
                  "ISIN", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ISIN"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ISIN"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["integralScore", 
                  Style[
                  "integralScore", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "integralScore"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "integralScore"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["TCUID", 
                  Style[
                  "TCUID", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "TCUID"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "TCUID"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Country", 
                  Style[
                  "Country", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Country"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Country"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["GICS Sector Name", 
                  Style[
                  "GICS Sector Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "GICS Sector Name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "GICS Sector Name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 1  (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 1  (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 1  (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 1  (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 2  (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 2  (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 2  (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 2  (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon-Scope 3 (tonnes CO2e)", 
                  Style[
                  "Carbon-Scope 3 (tonnes CO2e)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon-Scope 3 (tonnes CO2e)"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon-Scope 3 (tonnes CO2e)"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                  Style[
                  "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["Tornos Holding AG", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["CH0011607683", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6000.95"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["207247"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["SWITZERLAND", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Industrials", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{231., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1762.81"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2786.65"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["20804.9"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["16.009"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Instalco AB (publ)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["SE0017483506", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5997.78"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["233455"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["SWEDEN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Industrials", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{231., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["16753.2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["8932.03"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["141247."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["21.66"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Robert Bosch Stiftung GmbH", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6097.71"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["203464"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["NETHERLANDS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Financials", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{231., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1685.32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["34.001"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["12335.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3.354"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Coats Group plc", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["GB00B4YZN328", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6880.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["54757"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["UNITED KINGDOM", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Consumer Discretionary", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{231., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["49200.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["183300."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["486315."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["42.293"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Juroszek Investments Sp. z o.o", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Company"]}, "Item", False], "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ISIN"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6788.57"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["integralScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["203464"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["TCUID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["NETHERLANDS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Country"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Financials", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["GICS Sector Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{231., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1685.32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 1  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["34.001"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 2  (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["12335.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon-Scope 3 (tonnes CO2e)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3.354"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[True, 17, 1], {1, 17 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[False, 17, 1], {1, 17 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[17, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[17, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 2 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 2, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 5 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 5, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 100000000, {}]], MenuEvaluator -> Automatic]}],
                     " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[False, 17, 1], {1, 17 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[True, 17, 1], {1, 17 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{1305., {108.134033203125, 113.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{1305., {108.134033203125, 113.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.878492604113213*^9, 3.878492615513929*^9}, 
   3.8784927477738037`*^9, {3.878492795346176*^9, 3.878492824983602*^9}, {
   3.878492900694974*^9, 3.878492935514345*^9}, 3.878493415460045*^9, 
   3.878495273252953*^9, 3.8786200576404467`*^9, 3.878715031327244*^9, {
   3.878716255009305*^9, 3.878716270015567*^9}, 3.878805394207941*^9, 
   3.879148976154166*^9, 3.8791559465093727`*^9, {3.879325281525175*^9, 
   3.879325308877884*^9}, 3.879354574453087*^9, 3.879416688305077*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"f708e769-6646-41aa-a906-63c71df0f7a7"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exploratory Data Analysis", "Section",
 CellChangeTimes->{{3.8790836664971437`*^9, 
  3.879083674820643*^9}},ExpressionUUID->"c4ba50b6-f780-49eb-946b-\
2f462f16f559"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "@", "finalds"}]], "Input",
 CellChangeTimes->{{3.879084612771394*^9, 3.879084620790764*^9}},
 CellLabel->
  "In[463]:=",ExpressionUUID->"21eccc16-790e-4e60-a70d-b036ebf73aad"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1768", ",", "16"}], "}"}]], "Output",
 CellChangeTimes->{3.879084621058104*^9, 3.8790848414065228`*^9, 
  3.879155954143017*^9, 3.879354578714726*^9},
 CellLabel->
  "Out[463]=",ExpressionUUID->"43ad3a8c-4b41-4d7d-b170-f9d779e24f46"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"x1", " ", "=", " ", 
   RowBox[{"ReverseSort", "@", 
    RowBox[{"Counts", "[", 
     RowBox[{"finalds", "[", 
      RowBox[{"All", ",", " ", "\"\<GICS Sector Name\>\""}], "]"}], "]"}]}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{"BarChart", "[", 
  RowBox[{"x1", ",", 
   RowBox[{"ChartLabels", " ", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{
      RowBox[{"Normal", "@", 
       RowBox[{"Keys", "@", "x1"}]}], ",", "Below", ",", " ", 
      RowBox[{
       RowBox[{"Rotate", "[", 
        RowBox[{"#", ",", " ", 
         RowBox[{"Pi", "/", "2"}]}], "]"}], " ", "&"}]}], "]"}]}], ",", 
   RowBox[{
   "PlotLabel", "->", "\"\<Number of companies in each sector\>\""}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.878832299999441*^9, 3.8788323432592993`*^9}, {
  3.878832703687394*^9, 3.8788327125817327`*^9}, {3.879088980326983*^9, 
  3.8790890078534184`*^9}},
 CellLabel->
  "In[464]:=",ExpressionUUID->"5756d48e-5a10-4881-afc8-5ab15276c347"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{0.332737030411449, 0.}, {11.44929131691207, 0.}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
     Thickness[Small]}], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.5507086830879317, 0.}, {1.4492913169120683`, 
             342.}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{26.13372996257327, 
            52.95049552797947}, {-147.06053458233603`, 52.26352218621432}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 342]& ,
         TagBoxNote->"342"],
        StyleBox["342", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[342, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{1.5507086830879317`, 0.}, {2.4492913169120683`, 
             318.}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{55.420703218898964`, 
            82.23746878430516}, {-133.10796919506933`, 52.26352218621432}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 318]& ,
         TagBoxNote->"318"],
        StyleBox["318", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[318, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{2.5507086830879317`, 0.}, {3.4492913169120683`, 
             248.}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{84.70767647522467, 
            111.52444204063086`}, {-92.41298681554147, 52.26352218621432}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 248]& ,
         TagBoxNote->"248"],
        StyleBox["248", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[248, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{3.5507086830879317`, 0.}, {4.449291316912069, 227.},
              "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{113.99464973155037`, 
            140.8114152969566}, {-80.20449210168314, 52.26352218621432}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 227]& ,
         TagBoxNote->"227"],
        StyleBox["227", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[227, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{4.550708683087932, 0.}, {5.449291316912069, 188.}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{143.2816229878761, 
            170.0983885532823}, {-57.53157334737476, 52.26352218621432}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 188]& ,
         TagBoxNote->"188"],
        StyleBox["188", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[188, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{5.550708683087932, 0.}, {6.449291316912069, 103.}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{172.5685962442018, 
            199.38536180960799`}, {-8.116237600805228, 52.26352218621432}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 103]& ,
         TagBoxNote->"103"],
        StyleBox["103", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[103, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{6.550708683087932, 0.}, {7.449291316912069, 100.}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{201.8555695005275, 
            228.6723350659337}, {-6.372166927396897, 52.26352218621432}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 100]& ,
         TagBoxNote->"100"],
        StyleBox["100", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[100, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{7.550708683087932, 0.}, {8.449291316912069, 100.}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{231.1425427568532, 
            257.9593083222594}, {-6.372166927396897, 52.26352218621432}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 100]& ,
         TagBoxNote->"100"],
        StyleBox["100", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[100, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{8.550708683087933, 0.}, {9.44929131691207, 90.}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{260.4295160131789, 
            287.2462815785851}, {-0.5585980160357735, 52.26352218621432}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 90]& ,
         TagBoxNote->"90"],
        StyleBox["90", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[90, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{9.550708683087933, 0.}, {10.44929131691207, 28.}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{289.7164892695046, 316.53325483491085`}, {
            35.485529234403174`, 52.26352218621432}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 28]& ,
         TagBoxNote->"28"],
        StyleBox["28", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[28, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{10.550708683087933`, 0.}, {11.44929131691207, 24.}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{319.0034625258303, 345.8202280912365}, {
            37.81095679894763, 52.26352218621432}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 24]& ,
         TagBoxNote->"24"],
        StyleBox["24", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[24, {}], "Tooltip"]& ]}}, {}, {}}, {}, {InsetBox[
     RotationBox["\<\"Industrials\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {1., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"Information Technology\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {2., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"Consumer Discretionary\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {3., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"Materials\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {4., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"Health Care\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {5., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"Consumer Staples\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {6., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"Real Estate\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {7., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"Communication Services\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {8., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"Financials\"\>",
      BoxRotation->1.5707963267948966`], 
     Offset[{0, -4}, {9.000000000000002, 0.}], ImageScaled[{0.5, 1}]], 
    InsetBox[
     RotationBox["\<\"Utilities\"\>",
      BoxRotation->1.5707963267948966`], 
     Offset[{0, -4}, {10.000000000000002, 0.}], ImageScaled[{0.5, 1}]], 
    InsetBox[
     RotationBox["\<\"Energy\"\>",
      BoxRotation->1.5707963267948966`], 
     Offset[{0, -4}, {11.000000000000002, 0.}], 
     ImageScaled[{0.5, 1}]]}, {}, {}, 
   StyleBox[{
     {Thickness[Tiny], 
      LineBox[{{0.332737030411449, 0.}, {11.67162240264208, 0.}}], 
      StyleBox[{}, "GraphicsLabel",
       StripOnInput->False]}, 
     StyleBox[{
       {Thickness[Tiny], 
        LineBox[{{0.5507086830879317, 0.}, 
          Offset[{-1.102182119232618*^-15, -6.}, {0.5507086830879317, 0.}]}], 
        LineBox[{{11.449291316912069`, 0.}, 
          Offset[{-1.102182119232618*^-15, -6.}, {11.449291316912069`, 
           0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
       StyleBox[{}, "GraphicsLabel",
        StripOnInput->False]}, "GraphicsTicks",
      StripOnInput->False]}, "GraphicsAxes",
    StripOnInput->False,
    Antialiasing->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.332737030411449, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotLabel->FormBox[
   "\"Number of companies in each sector\"", TraditionalForm],
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{
  3.87883234423953*^9, 3.8788327132203197`*^9, 3.8790836769852333`*^9, 
   3.879084843530794*^9, {3.879089002892417*^9, 3.879089008575879*^9}, 
   3.8791559563961773`*^9, {3.8793252833813477`*^9, 3.879325312347659*^9}, 
   3.879354584935548*^9},
 CellLabel->
  "Out[465]=",ExpressionUUID->"b534697b-d39c-4fed-9c9f-c71865026db1"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.879088295626131*^9},ExpressionUUID->"e1529622-9291-44a8-be5c-\
b09e04bfff93"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"finalds", "[", 
    RowBox[{"All", ",", " ", "\"\<integralScore\>\""}], "]"}], ",", 
   RowBox[{
   "PlotLabel", "->", 
    "\"\<Number of companies for integralScore values\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.879084447728084*^9, 3.879084502593306*^9}, {
  3.879084540544734*^9, 3.879084592330991*^9}, {3.8790890154624033`*^9, 
  3.879089034389842*^9}},
 CellLabel->
  "In[466]:=",ExpressionUUID->"b48cf2f3-be79-417e-9329-af8519c3734c"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.5389999999999999], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.5389999999999999], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{3200., 0}, {3400., 1.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{26.254403522818194`, 42.24107857714739}, {
           98.96423432611952, 99.93456273819316}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{4200., 0}, {4400., 1.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{103.68777879446407`, 119.67445384879323`}, {
           98.96423432611952, 99.93456273819316}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{4600., 0}, {4800., 1.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{134.6611289031224, 150.64780395745157`}, {
           98.96423432611952, 99.93456273819316}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{4800., 0}, {5000., 7.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{150.14780395745157`, 166.13447901178074`}, {
           96.14226385367765, 99.93456273819316}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 7]& ,
        TagBoxNote->"7"],
       StyleBox["7", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[7, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{5000., 0}, {5200., 4.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{165.63447901178074`, 181.62115406610997`}, {
           97.55324908989859, 99.93456273819316}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 4]& ,
        TagBoxNote->"4"],
       StyleBox["4", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[4, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{5200., 0}, {5400., 81.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{181.12115406610997`, 197.10782912043913`}, {
           61.337961360227844`, 99.93456273819316}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 81]& ,
        TagBoxNote->"81"],
       StyleBox["81", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[81, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{5400., 0}, {5600., 73.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{196.60782912043913`, 212.5945041747683}, {
           65.10058865681701, 99.93456273819316}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 73]& ,
        TagBoxNote->"73"],
       StyleBox["73", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[73, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{5600., 0}, {5800., 207.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{212.0945041747683, 228.08117922909747`}, {
           2.076581438948452, 99.93456273819316}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 207]& ,
        TagBoxNote->"207"],
       StyleBox["207", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[207, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{5800., 0}, {6000., 304.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{227.58117922909747`, 
           243.56785428342664`}, {-43.54527453219521, 99.93456273819316}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 304]& ,
        TagBoxNote->"304"],
       StyleBox["304", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[304, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{6000., 0}, {6200., 414.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{243.06785428342664`, 
           259.0545293377558}, {-95.28139986029626, 99.93456273819316}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 414]& ,
        TagBoxNote->"414"],
       StyleBox["414", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[414, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{6200., 0}, {6400., 201.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{258.5545293377558, 274.541204392085}, {
           4.898551911390328, 99.93456273819316}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 201]& ,
        TagBoxNote->"201"],
       StyleBox["201", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[201, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{6400., 0}, {6600., 155.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{274.041204392085, 290.02787944641415`}, {
           26.53365886677804, 99.93456273819316}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 155]& ,
        TagBoxNote->"155"],
       StyleBox["155", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[155, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{6600., 0}, {6800., 253.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{289.52787944641415`, 
           305.5145545007434}, {-19.55852551643926, 99.93456273819316}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 253]& ,
        TagBoxNote->"253"],
       StyleBox["253", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[253, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{6800., 0}, {7000., 41.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{305.0145545007434, 321.0012295550725}, {
           80.15109784317369, 99.93456273819316}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 41]& ,
        TagBoxNote->"41"],
       StyleBox["41", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[41, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{7000., 0}, {7200., 22.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{320.5012295550725, 336.4879046094017}, {
           89.08733767257296, 99.93456273819316}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 22]& ,
        TagBoxNote->"22"],
       StyleBox["22", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[22, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{7200., 0}, {7400., 3.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{335.9879046094017, 351.9745796637308}, {
           98.02357750197223, 99.93456273819316}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 3]& ,
        TagBoxNote->"3"],
       StyleBox["3", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[3, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{3116., 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotLabel->FormBox[
   "\"Number of companies for integralScore values\"", TraditionalForm],
  PlotRange->{{3200., 7400.}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8790844771428556`*^9, 3.87908449159438*^9}, {
   3.879084555531775*^9, 3.87908459279572*^9}, 3.879084847287459*^9, 
   3.879089034973052*^9, 3.879155960967038*^9, {3.8793252939542522`*^9, 
   3.879325314615931*^9}, 3.879354587282126*^9},
 CellLabel->
  "Out[466]=",ExpressionUUID->"49138c77-69fc-459f-986a-320bb1012b28"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"x2", " ", "=", " ", 
   RowBox[{"Counts", "[", 
    RowBox[{"finalds", "[", 
     RowBox[{"All", ",", " ", "\"\<Ratings\>\""}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x3", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x2", "[", "\"\<A\>\"", "]"}], ",", " ", 
     RowBox[{"x2", "[", "\"\<B\>\"", "]"}], ",", " ", 
     RowBox[{"x2", "[", "\"\<C\>\"", "]"}], ",", " ", 
     RowBox[{"x2", "[", "\"\<D\>\"", "]"}], ",", " ", 
     RowBox[{"x2", "[", "\"\<E\>\"", "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"BarChart", "[", 
  RowBox[{"x3", ",", 
   RowBox[{"ChartLabels", " ", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<A\>\"", ",", "\"\<B\>\"", ",", "\"\<C\>\"", ",", "\"\<D\>\"", 
        ",", "\"\<E\>\""}], "}"}], ",", "Below", ",", " ", 
      RowBox[{
       RowBox[{"Rotate", "[", 
        RowBox[{"#", ",", " ", 
         RowBox[{"Pi", "/", "2"}]}], "]"}], " ", "&"}]}], "]"}]}], ",", 
   RowBox[{
   "PlotLabel", "->", 
    "\"\<Number of companies for each Rating (A, B, C, D, E) \>\""}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{
  3.879084647765478*^9, {3.879089043466652*^9, 3.8790890684781313`*^9}},
 CellLabel->
  "In[467]:=",ExpressionUUID->"adaaf859-359c-4c64-922f-f922f86c28aa"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{0.45075018208302986`, 0.}, {5.451201747997087, 0.}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
     0.6649999999999999], Thickness[Small]}], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6649999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 1.}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{31.03957465339077, 89.4268350571284}, {
            99.49061758896056, 100.17335224246487`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1]& ,
         TagBoxNote->"1"],
        StyleBox["1", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6649999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 6.},
              "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{95.18744271984096, 153.5747031235786}, {
            98.57694432143899, 100.17335224246487`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 6]& ,
         TagBoxNote->"6"],
        StyleBox["6", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[6, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6649999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
             283.}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{159.33531078629113`, 217.7225711900288}, {
            47.959445300743965`, 100.17335224246487`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 283]& ,
         TagBoxNote->"283"],
        StyleBox["283", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[283, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6649999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
             1072.}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{223.48317885274133`, 
            281.87043925647896`}, {-96.21819631415993, 100.17335224246487`}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1072]& ,
         TagBoxNote->"1072"],
        StyleBox["1072", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1072, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6649999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 406.}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{287.63104691919153`, 346.01830732292916`}, {
            25.483082919713326`, 100.17335224246487`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 406]& ,
         TagBoxNote->"406"],
        StyleBox["406", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[406, {}], "Tooltip"]& ]}}, {}, {}}, {}, {InsetBox[
     RotationBox["\<\"A\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {1., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"B\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {2., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"C\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {3., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"D\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {4., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"E\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {5., 0.}], 
     ImageScaled[{0.5, 1}]]}, {}, {}, 
   StyleBox[{
     {Thickness[Tiny], 
      LineBox[{{0.45075018208302986`, 0.}, {5.551210779315368, 0.}}], 
      StyleBox[{}, "GraphicsLabel",
       StripOnInput->False]}, 
     StyleBox[{
       {Thickness[Tiny], 
        LineBox[{{0.5487982520029133, 0.}, 
          Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 0.}]}], 
        LineBox[{{5.451201747997087, 0.}, 
          Offset[{-1.102182119232618*^-15, -6.}, {5.451201747997087, 
           0.}]}], {{}, {}, {}, {}, {}, {}, {}}}, 
       StyleBox[{}, "GraphicsLabel",
        StripOnInput->False]}, "GraphicsTicks",
      StripOnInput->False]}, "GraphicsAxes",
    StripOnInput->False,
    Antialiasing->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.45075018208302986`, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotLabel->FormBox[
   "\"Number of companies for each Rating (A, B, C, D, E) \"", 
    TraditionalForm],
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{
  3.879084648684904*^9, 3.879084851333737*^9, 3.8790890692270393`*^9, 
   3.879155966890028*^9, {3.879325295797743*^9, 3.87932531644877*^9}, 
   3.879354589386361*^9},
 CellLabel->
  "Out[469]=",ExpressionUUID->"dae7ee08-3fae-445d-96f2-c2329a20f431"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8790892553746843`*^9, 
  3.87908928086124*^9}},ExpressionUUID->"61586cba-14da-4c50-98ff-\
8bab0c59ecc3"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"x4", " ", "=", " ", 
   RowBox[{"ReverseSort", "@", 
    RowBox[{"finalds", "[", 
     RowBox[{
      RowBox[{"GroupBy", "[", "\"\<GICS Sector Name\>\"", "]"}], ",", "Mean", 
      ",", 
      RowBox[{"{", "\"\<integralScore\>\"", "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x5", " ", "=", " ", 
   RowBox[{"Flatten", "@", 
    RowBox[{"Values", "@", 
     RowBox[{"Values", "@", 
      RowBox[{"Normal", "@", "x4"}]}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"BarChart", "[", 
  RowBox[{"x5", ",", 
   RowBox[{"ChartLabels", " ", "\[Rule]", " ", 
    RowBox[{"Placed", "[", 
     RowBox[{
      RowBox[{"Normal", "@", 
       RowBox[{"Keys", "@", "x4"}]}], ",", "Below", ",", " ", 
      RowBox[{
       RowBox[{"Rotate", "[", 
        RowBox[{"#", ",", " ", 
         RowBox[{"Pi", "/", "2"}]}], "]"}], " ", "&"}]}], "]"}]}], ",", 
   RowBox[{
   "PlotLabel", "->", "\"\<Aggregated Integral Score in each sector\>\""}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.879088582393643*^9, 3.879088606859907*^9}, {
   3.879088817958867*^9, 3.8790888475937138`*^9}, {3.879088890538597*^9, 
   3.8790888912859383`*^9}, {3.8790890777019043`*^9, 
   3.8790891313046007`*^9}, {3.8790891667778807`*^9, 3.879089168292939*^9}, {
   3.879089224120842*^9, 3.879089284209132*^9}, {3.8790895490288343`*^9, 
   3.8790895860854683`*^9}, {3.8791559781725197`*^9, 3.879155993220313*^9}, 
   3.879325325705998*^9},
 CellLabel->
  "In[470]:=",ExpressionUUID->"9864a534-e22e-4b02-8543-31db9531ec9f"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{0.332737030411449, 0.}, {11.44929131691207, 0.}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
     Thickness[Small]}], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.5507086830879317, 0.}, {1.4492913169120683`, 
             6191.397593204468}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{31.039574653390765`, 
            57.46818733435144}, {-145.21819631416002`, 51.17335224246483}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 6191.397593204468]& ,
         TagBoxNote->"6191.397593204468"],
        StyleBox["6191.397593204468`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[6191.397593204468, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{1.5507086830879317`, 0.}, {2.4492913169120683`, 
             6162.282298944849}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{59.894586652248535`, 
            86.32319933320922}, {-144.29700848970845`, 51.17335224246483}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 6162.282298944849]& ,
         TagBoxNote->"6162.282298944849"],
        StyleBox["6162.282298944849`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[6162.282298944849, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{2.5507086830879317`, 0.}, {3.4492913169120683`, 
             6157.180675220964}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{88.74959865110631, 
            115.178211332067}, {-144.13559663456903`, 51.17335224246483}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 6157.180675220964]& ,
         TagBoxNote->"6157.180675220964"],
        StyleBox["6157.180675220964`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[6157.180675220964, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{3.5507086830879317`, 0.}, {4.449291316912069, 
             6151.357649442758}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{117.60461064996409`, 
            144.03322333092478`}, {-143.95136011610833`, 51.17335224246483}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, 6151.357649442758]& ,
         TagBoxNote->"6151.357649442758"],
        StyleBox["6151.357649442758`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[6151.357649442758, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{4.550708683087932, 0.}, {5.449291316912069, 
             6136.541147776315}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{146.4596226488219, 
            172.88823532978256`}, {-143.48257622492082`, 51.17335224246483}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, 6136.541147776315]& ,
         TagBoxNote->"6136.541147776315"],
        StyleBox["6136.541147776315`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[6136.541147776315, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{5.550708683087932, 0.}, {6.449291316912069, 
             6124.685399083265}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{175.31463464767967`, 
            201.74324732864034`}, {-143.10746851526108`, 51.17335224246483}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, 6124.685399083265]& ,
         TagBoxNote->"6124.685399083265"],
        StyleBox["6124.685399083265`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[6124.685399083265, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{6.550708683087932, 0.}, {7.449291316912069, 
             6124.467377434817}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{204.16964664653742`, 
            230.5982593274981}, {-143.10057046071194`, 51.17335224246483}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 6124.467377434817]& ,
         TagBoxNote->"6124.467377434817"],
        StyleBox["6124.467377434817`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[6124.467377434817, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{7.550708683087932, 0.}, {8.449291316912069, 
             6099.87132824311}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{233.0246586453952, 
            259.4532713263559}, {-142.32236843249348`, 51.17335224246483}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 6099.87132824311]& ,
         TagBoxNote->"6099.87132824311"],
        StyleBox["6099.87132824311`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[6099.87132824311, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{8.550708683087933, 0.}, {9.44929131691207, 
             6094.146181093126}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{261.879670644253, 
            288.3082833252137}, {-142.1412287263057, 51.17335224246483}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 6094.146181093126]& ,
         TagBoxNote->"6094.146181093126"],
        StyleBox["6094.146181093126`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[6094.146181093126, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{9.550708683087933, 0.}, {10.44929131691207, 
             6091.253120665744}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{290.7346826431108, 
            317.1632953240715}, {-142.0496942902343, 51.17335224246483}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 6091.253120665744]& ,
         TagBoxNote->"6091.253120665744"],
        StyleBox["6091.253120665744`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[6091.253120665744, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{10.550708683087933`, 0.}, {11.44929131691207, 
             6056.678452973231}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{319.58969464196855`, 
            346.0183073229293}, {-140.95577565665297`, 51.17335224246483}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 6056.678452973231]& ,
         TagBoxNote->"6056.678452973231"],
        StyleBox["6056.678452973231`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[6056.678452973231, {}], "Tooltip"]& ]}}, {}, {}}, {}, {
    InsetBox[
     RotationBox["\<\"Financials\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {1., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"Industrials\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {2., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"Real Estate\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {3., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"Health Care\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {4., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"Consumer Discretionary\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {5., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"Information Technology\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {6., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"Materials\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {7., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"Utilities\"\>",
      BoxRotation->1.5707963267948966`], Offset[{0, -4}, {8., 0.}], 
     ImageScaled[{0.5, 1}]], InsetBox[
     RotationBox["\<\"Communication Services\"\>",
      BoxRotation->1.5707963267948966`], 
     Offset[{0, -4}, {9.000000000000002, 0.}], ImageScaled[{0.5, 1}]], 
    InsetBox[
     RotationBox["\<\"Consumer Staples\"\>",
      BoxRotation->1.5707963267948966`], 
     Offset[{0, -4}, {10.000000000000002, 0.}], ImageScaled[{0.5, 1}]], 
    InsetBox[
     RotationBox["\<\"Energy\"\>",
      BoxRotation->1.5707963267948966`], 
     Offset[{0, -4}, {11.000000000000002, 0.}], 
     ImageScaled[{0.5, 1}]]}, {}, {}, 
   StyleBox[{
     {Thickness[Tiny], 
      LineBox[{{0.332737030411449, 0.}, {11.67162240264208, 0.}}], 
      StyleBox[{}, "GraphicsLabel",
       StripOnInput->False]}, 
     StyleBox[{
       {Thickness[Tiny], 
        LineBox[{{0.5507086830879317, 0.}, 
          Offset[{-1.102182119232618*^-15, -6.}, {0.5507086830879317, 0.}]}], 
        LineBox[{{11.449291316912069`, 0.}, 
          Offset[{-1.102182119232618*^-15, -6.}, {11.449291316912069`, 
           0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
       StyleBox[{}, "GraphicsLabel",
        StripOnInput->False]}, "GraphicsTicks",
      StripOnInput->False]}, "GraphicsAxes",
    StripOnInput->False,
    Antialiasing->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.332737030411449, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotLabel->FormBox[
   "\"Aggregated Integral Score in each sector\"", TraditionalForm],
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{
  3.8790885978513203`*^9, {3.879088818982444*^9, 3.8790888481246357`*^9}, 
   3.879088891933947*^9, 3.879088924848865*^9, {3.8790890953920116`*^9, 
   3.879089131777567*^9}, 3.879089169791932*^9, {3.879089226786725*^9, 
   3.879089233705319*^9}, 3.879089268782674*^9, {3.879089379822844*^9, 
   3.8790893897917624`*^9}, {3.8790895498507433`*^9, 3.879089586629397*^9}, 
   3.879090183796979*^9, {3.879155969086055*^9, 3.87915599382867*^9}, {
   3.879325298192086*^9, 3.879325326285351*^9}, 3.879354593061714*^9},
 CellLabel->
  "Out[472]=",ExpressionUUID->"6aad2172-2fe1-4da5-ae0a-2ce5aade8f3b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"g1", "=", 
   RowBox[{"Histogram", "[", 
    RowBox[{
     RowBox[{"finalds", "[", 
      RowBox[{"All", ",", " ", "\"\<Carbon-Scope 1  (tonnes CO2e)\>\""}], 
      "]"}], ",", 
     RowBox[{"ChartStyle", "->", 
      RowBox[{"{", 
       RowBox[{"Directive", "[", 
        RowBox[{"Green", ",", 
         RowBox[{"Opacity", "[", ".5", "]"}]}], "]"}], "}"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"g2", "=", 
   RowBox[{"Histogram", "[", 
    RowBox[{
     RowBox[{"finalds", "[", 
      RowBox[{"All", ",", " ", "\"\<Carbon-Scope 2  (tonnes CO2e)\>\""}], 
      "]"}], ",", 
     RowBox[{"ChartStyle", "->", 
      RowBox[{"{", 
       RowBox[{"Directive", "[", 
        RowBox[{"Orange", ",", 
         RowBox[{"Opacity", "[", ".5", "]"}]}], "]"}], "}"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"g3", "=", 
   RowBox[{"Histogram", "[", 
    RowBox[{
     RowBox[{"finalds", "[", 
      RowBox[{"All", ",", " ", "\"\<Carbon-Scope 3 (tonnes CO2e)\>\""}], 
      "]"}], ",", 
     RowBox[{"ChartStyle", "->", 
      RowBox[{"{", 
       RowBox[{"Directive", "[", 
        RowBox[{"Blue", ",", 
         RowBox[{"Opacity", "[", ".5", "]"}]}], "]"}], "}"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"GraphicsRow", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"g1", ",", "g2", ",", " ", "g3"}], "}"}], ",", 
   RowBox[{"PlotLabel", "->", "\"\<Carbon-Scope 1,2,3 (tonnes CO2e)\>\""}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.8788323527722597`*^9, 3.8788323815942993`*^9}, {
  3.878832422144025*^9, 3.8788325115157127`*^9}, {3.879083807000125*^9, 
  3.879083832969097*^9}},
 CellLabel->
  "In[473]:=",ExpressionUUID->"883ef2e7-3172-40b9-8c55-4ffc16691005"],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     GraphicsBox[{
       {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
        EdgeForm[{Opacity[0.609], Thickness[Small]}], {}, 
        {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
         EdgeForm[{Opacity[0.609], Thickness[Small]}], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{0., 0}, {74246.855332, 1393.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{27.539141759407705`, 
                42.27697927009206}, {-105.05236760645901`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1393]& ,
            TagBoxNote->"1393"],
           StyleBox["1393", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1393, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{74246.855332, 0}, {148493.710664, 111.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{41.77697927009206, 
                56.514816780776414`}, {-24.638883076334842`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 111]& ,
            TagBoxNote->"111"],
           StyleBox["111", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[111, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{148493.710664, 0}, {222740.56599600002`, 48.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{56.014816780776414`, 
                70.75265429146077}, {-20.68720637945666, -17.1764050865971}}],
              
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 48]& ,
            TagBoxNote->"48"],
           StyleBox["48", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[48, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{222740.56599600002`, 0}, {296987.421328, 31.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{70.25265429146077, 
                84.99049180214513}, {-19.620880921568904`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 31]& ,
            TagBoxNote->"31"],
           StyleBox["31", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[31, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{296987.421328, 0}, {371234.27666000003`, 20.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{84.49049180214513, 
                99.22832931282947}, {-18.930905625288588`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 20]& ,
            TagBoxNote->"20"],
           StyleBox["20", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[20, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{371234.27666000003`, 0}, {445481.13199200004`, 
                 17.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{98.72832931282947, 
                113.46616682351383`}, {-18.742730544484864`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 17]& ,
            TagBoxNote->"17"],
           StyleBox["17", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[17, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{445481.13199200004`, 0}, {519727.98732400005`, 
                 5.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{112.96616682351383`, 
                127.70400433419819`}, {-17.99003022126997, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 5]& ,
            TagBoxNote->"5"],
           StyleBox["5", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[5, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{519727.98732400005`, 0}, {593974.842656, 9.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{127.20400433419819`, 
                141.94184184488253`}, {-18.240930329008272`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 9]& ,
            TagBoxNote->"9"],
           StyleBox["9", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[9, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{593974.842656, 0}, {668221.697988, 8.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{141.44184184488253`, 
                156.1796793555669}, {-18.178205302073692`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 8]& ,
            TagBoxNote->"8"],
           StyleBox["8", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[8, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{668221.697988, 0}, {742468.5533200002, 7.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{155.6796793555669, 
                170.41751686625128`}, {-18.11548027513912, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 7]& ,
            TagBoxNote->"7"],
           StyleBox["7", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[7, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{742468.5533200002, 0}, {816715.4086520001, 10.},
                  "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{169.91751686625128`, 
                184.6553543769356}, {-18.303655355942844`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 10]& ,
            TagBoxNote->"10"],
           StyleBox["10", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[10, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{816715.4086520001, 0}, {890962.2639840001, 5.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{184.1553543769356, 
                198.89319188761996`}, {-17.99003022126997, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 5]& ,
            TagBoxNote->"5"],
           StyleBox["5", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[5, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{890962.2639840001, 0}, {965209.119316, 4.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{198.39319188761996`, 
                213.1310293983043}, {-17.927305194335396`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{965209.119316, 0}, {1.0394559746480002`*^6, 8.},
                  "RoundingRadius" -> 0]},
               ImageSizeCache->{{212.6310293983043, 
                227.36886690898868`}, {-18.178205302073692`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 8]& ,
            TagBoxNote->"8"],
           StyleBox["8", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[8, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.0394559746480002`*^6, 0}, {
                 1.1137028299800002`*^6, 4.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{226.86886690898868`, 
                241.60670441967304`}, {-17.927305194335396`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.1137028299800002`*^6, 0}, {1.187949685312*^6, 
                 2.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{241.10670441967304`, 
                255.84454193035737`}, {-17.80185514046625, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.187949685312*^6, 0}, {1.262196540644*^6, 4.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{255.34454193035737`, 
                270.0823794410417}, {-17.927305194335396`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.262196540644*^6, 0}, {1.3364433959760002`*^6, 
                 5.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{269.5823794410417, 
                284.32021695172614`}, {-17.99003022126997, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 5]& ,
            TagBoxNote->"5"],
           StyleBox["5", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[5, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.3364433959760002`*^6, 0}, {
                 1.4106902513080002`*^6, 2.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{283.82021695172614`, 
                298.55805446241044`}, {-17.80185514046625, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.4106902513080002`*^6, 0}, {
                 1.4849371066400001`*^6, 2.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{298.05805446241044`, 
                312.7958919730948}, {-17.80185514046625, -17.1764050865971}}],
              
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.6334308173040003`*^6, 0}, {
                 1.7076776726360002`*^6, 4.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{340.7715669944635, 
                355.50940450514787`}, {-17.927305194335396`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.7076776726360002`*^6, 0}, {
                 1.7819245279680002`*^6, 2.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{355.00940450514787`, 
                369.7472420158322}, {-17.80185514046625, -17.1764050865971}}],
              
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.7819245279680002`*^6, 0}, {1.8561713833*^6, 
                 3.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{369.2472420158322, 
                383.9850795265166}, {-17.864580167400824`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.8561713833*^6, 0}, {1.9304182386320003`*^6, 
                 3.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{383.4850795265166, 
                398.22291703720094`}, {-17.864580167400824`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.9304182386320003`*^6, 0}, {
                 2.0046650939640002`*^6, 6.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{397.72291703720094`, 
                412.4607545478853}, {-18.052755248204548`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 6]& ,
            TagBoxNote->"6"],
           StyleBox["6", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[6, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.0046650939640002`*^6, 0}, {
                 2.0789119492960002`*^6, 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{411.9607545478853, 
                426.69859205856966`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.0789119492960002`*^6, 0}, {2.153158804628*^6, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{426.19859205856966`, 
                440.93642956925396`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.153158804628*^6, 0}, {2.22740565996*^6, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{440.43642956925396`, 
                455.17426707993826`}, {-17.80185514046625, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.301652515292*^6, 0}, {2.375899370624*^6, 3.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{468.9121045906227, 
                483.6499421013071}, {-17.864580167400824`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.375899370624*^6, 0}, {2.450146225956*^6, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{483.1499421013071, 
                497.88777961199133`}, {-17.80185514046625, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.59863993662*^6, 0}, {2.672886791952*^6, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{525.86345463336, 
                540.6012921440445}, {-17.80185514046625, -17.1764050865971}}],
              
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.672886791952*^6, 0}, {2.747133647284*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{540.1012921440445, 
                554.8391296547288}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.895627357948*^6, 0}, {2.9698742132800003`*^6, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{582.8148046760975, 
                597.5526421867819}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3.118367923944*^6, 0}, {3.1926147792760003`*^6, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{625.5283172081506, 
                640.266154718835}, {-17.739130113531672`, -17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3.638095911268*^6, 0}, {3.7123427666*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{725.193179782941, 
                739.9310172936255}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4.529058175252*^6, 0}, {4.603305030584*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{896.0472299111533, 
                910.7850674218377}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4.974539307244*^6, 0}, {5.048786162576*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{981.4742549752594, 
                996.2120924859438}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{5.197279873240001*^6, 0}, {5.271526728572*^6, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1024.1877675073126`, 
                1038.9256050179968`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{5.345773583904*^6, 0}, {5.420020439236*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1052.6634425286811`, 
                1067.4012800393655`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{5.420020439236*^6, 0}, {5.494267294568*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1066.9012800393655`, 
                1081.6391175500498`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{5.494267294568*^6, 0}, {5.568514149900001*^6, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1081.1391175500498`, 
                1095.8769550607342`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{5.717007860564*^6, 0}, {5.791254715896*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1123.852630082103, 
                1138.5904675927873`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{6.013995281892001*^6, 0}, {6.088242137224*^6, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1180.8039801248403`, 
                1195.5418176355247`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{6.162488992556*^6, 0}, {6.236735847888*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1209.279655146209, 
                1224.0174926568934`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{6.385229558552001*^6, 0}, {6.459476413884001*^6,
                  1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1251.9931676782621`, 
                1266.7310051889465`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{6.607970124548*^6, 0}, {6.68221697988*^6, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1294.7066802103152`, 
                1309.4445177209996`}, {-17.80185514046625, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{6.979204401208*^6, 0}, {7.05345125654*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1365.895867763737, 
                1380.6337052744213`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{7.05345125654*^6, 0}, {7.127698111872001*^6, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1380.1337052744213`, 
                1394.8715427851057`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{7.350438677868*^6, 0}, {7.4246855332*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1437.0850553171588`, 
                1451.8228928278431`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{7.498932388532001*^6, 0}, {7.573179243864001*^6,
                  2.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1465.5607303385275`, 
                1480.2985678492118`}, {-17.80185514046625, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{7.573179243864001*^6, 0}, {7.647426099196*^6, 
                 2.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1479.7985678492118`, 
                1494.536405359896}, {-17.80185514046625, -17.1764050865971}}],
              
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{8.018660375856001*^6, 0}, {8.092907231188*^6, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1565.225592913318, 
                1579.9634304240021`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{8.241400941852001*^6, 0}, {8.315647797184*^6, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1607.939105445371, 
                1622.6769429560552`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{8.835375784508001*^6, 0}, {8.909622639840001*^6,
                  2.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1721.841805530846, 
                1736.5796430415303`}, {-17.80185514046625, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{9.206610061168*^6, 0}, {9.2808569165*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1793.0309930842675`, 
                1807.7688305949519`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.0543053457144001`*^7, 0}, {1.0617300312476*^7,
                  1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{2049.312068276586, 
                2064.0499057872703`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.1211275155132001`*^7, 0}, {
                 1.1285522010464001`*^7, 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{2177.4526058727456`, 
                2192.1904433834297`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.225073112978*^7, 0}, {1.2324977985112*^7, 1.},
                  "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{2376.782331022326, 
                2391.5201685330107`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.2918952827768002`*^7, 0}, {
                 1.2993199683100002`*^7, 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{2504.9228686184856`, 
                2519.66070612917}, {-17.739130113531672`, -17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.3809915091752*^7, 0}, {1.3884161947084*^7, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{2675.7769187466974`, 
                2690.514756257382}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.5963073896380002`*^7, 0}, {
                 1.6037320751712002`*^7, 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{3088.674206556544, 
                3103.4120440672286`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.8041985845676005`*^7, 0}, {
                 1.8116232701008003`*^7, 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{3487.3336568557065`, 
                3502.0714943663907`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.1086106914288003`*^7, 0}, {
                 2.1160353769620005`*^7, 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{4071.084994793765, 
                4085.8228323044495`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.6877361630184002`*^7, 0}, {
                 2.6951608485516004`*^7, 2.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{5181.6363206271435`, 
                5196.374158137829}, {-17.80185514046625, -17.1764050865971}}],
              
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3.1629160371432003`*^7, 0}, {
                 3.1703407226764005`*^7, 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{6092.857921310942, 
                6107.595758821627}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3.3039850622740004`*^7, 0}, {
                 3.3114097478072006`*^7, 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{6363.376834013946, 
                6378.1146715246305`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3.8014389929984*^7, 0}, {3.8088636785316*^7, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{7317.311947229798, 
                7332.04978474048}, {-17.739130113531672`, -17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4.1058510998596005`*^7, 0}, {4.1132757853928*^7,
                  1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{7901.063285167856, 
                7915.801122678539}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4.937415879578*^7, 0}, {4.9448405651112005`*^7, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{9495.701086364505, 
                9510.43892387519}, {-17.739130113531672`, -17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{7.4246855332*^7, 0}, {7.4321102187332*^7, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{14265.376652443763`, 
                14280.114489954449`}, {-17.739130113531672`, \
-17.1764050865971}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], 
           "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{-15220.60534306, 0},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->{{24.732986389111286`, 1.5000000000000568`}, {
       15.916380813713431`, 0.5}},
      PlotRange->{{0., 761030.267153}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], {106.17073125236243, -64.08783536738538},
      ImageScaled[{0.5, 0.5}], {197.18747833614165, 122.07206736644834}], 
    InsetBox[
     GraphicsBox[{
       {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
        EdgeForm[{Opacity[0.588], Thickness[Small]}], {}, 
        {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
         EdgeForm[{Opacity[0.588], Thickness[Small]}], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{0., 0}, {14029.999757, 944.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{22.51147258885257, 
                33.36412931898221}, {-104.76247868793095`, \
-17.485619933027095`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 944]& ,
            TagBoxNote->"944"],
           StyleBox["944", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[944, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{14029.999757, 0}, {28059.999514, 246.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{32.86412931898221, 
                43.716786049111874`}, {-40.59908100686856, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 246]& ,
            TagBoxNote->"246"],
           StyleBox["246", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[246, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{28059.999514, 0}, {42089.999271, 123.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{43.216786049111874`, 
                54.06944277924151}, {-29.292350469947824`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 123]& ,
            TagBoxNote->"123"],
           StyleBox["123", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[123, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{42089.999271, 0}, {56119.999028, 77.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{53.56944277924151, 
                64.42209950937115}, {-25.063817098416493`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 77]& ,
            TagBoxNote->"77"],
           StyleBox["77", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[77, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{56119.999028, 0}, {70149.998785, 54.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{63.92209950937115, 
                74.77475623950079}, {-22.94955041265083, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 54]& ,
            TagBoxNote->"54"],
           StyleBox["54", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[54, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{70149.998785, 0}, {84179.998542, 39.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{74.27475623950079, 
                85.12741296963043}, {-21.570680834977566`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 39]& ,
            TagBoxNote->"39"],
           StyleBox["39", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[39, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{84179.998542, 0}, {98209.998299, 28.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{84.62741296963043, 
                95.48006969976007}, {-20.55950981135051, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 28]& ,
            TagBoxNote->"28"],
           StyleBox["28", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[28, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{98209.998299, 0}, {112239.998056, 31.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{94.98006969976007, 
                105.8327264298897}, {-20.83528372688516, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 31]& ,
            TagBoxNote->"31"],
           StyleBox["31", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[31, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{112239.998056, 0}, {126269.997813, 13.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{105.3327264298897, 
                116.1853831600194}, {-19.180640233677245`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 13]& ,
            TagBoxNote->"13"],
           StyleBox["13", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[13, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{126269.997813, 0}, {140299.99757, 11.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{115.6853831600194, 
                126.53803989014904`}, {-18.996790956654145`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 11]& ,
            TagBoxNote->"11"],
           StyleBox["11", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[11, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{140299.99757, 0}, {154329.997327, 11.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{126.03803989014904`, 
                136.89069662027867`}, {-18.996790956654145`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 11]& ,
            TagBoxNote->"11"],
           StyleBox["11", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[11, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{154329.997327, 0}, {168359.997084, 8.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{136.39069662027867`, 
                147.2433533504083}, {-18.721017041119495`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 8]& ,
            TagBoxNote->"8"],
           StyleBox["8", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[8, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{168359.997084, 0}, {182389.996841, 5.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{146.7433533504083, 
                157.59601008053795`}, {-18.445243125584845`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 5]& ,
            TagBoxNote->"5"],
           StyleBox["5", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[5, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{182389.996841, 0}, {196419.996598, 7.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{157.09601008053795`, 
                167.94866681066765`}, {-18.629092402607945`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 7]& ,
            TagBoxNote->"7"],
           StyleBox["7", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[7, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{196419.996598, 0}, {210449.99635499998`, 9.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{167.44866681066765`, 
                178.30132354079728`}, {-18.812941679631045`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 9]& ,
            TagBoxNote->"9"],
           StyleBox["9", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[9, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{210449.99635499998`, 0}, {224479.996112, 10.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{177.80132354079728`, 
                188.65398027092692`}, {-18.904866318142595`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 10]& ,
            TagBoxNote->"10"],
           StyleBox["10", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[10, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{224479.996112, 0}, {238509.995869, 5.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{188.15398027092692`, 
                199.00663700105656`}, {-18.445243125584845`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 5]& ,
            TagBoxNote->"5"],
           StyleBox["5", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[5, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{238509.995869, 0}, {252539.995626, 4.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{198.50663700105656`, 
                209.3592937311862}, {-18.353318487073288`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{252539.995626, 0}, {266569.995383, 6.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{208.8592937311862, 
                219.71195046131584`}, {-18.537167764096395`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 6]& ,
            TagBoxNote->"6"],
           StyleBox["6", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[6, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{266569.995383, 0}, {280599.99514, 8.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{219.21195046131584`, 
                230.06460719144548`}, {-18.721017041119495`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 8]& ,
            TagBoxNote->"8"],
           StyleBox["8", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[8, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{280599.99514, 0}, {294629.99489699997`, 3.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{229.56460719144548`, 
                240.4172639215751}, {-18.261393848561738`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{294629.99489699997`, 0}, {308659.994654, 3.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{239.9172639215751, 
                250.76992065170475`}, {-18.261393848561738`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{308659.994654, 0}, {322689.994411, 4.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{250.26992065170475`, 
                261.1225773818344}, {-18.353318487073288`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{322689.994411, 0}, {336719.994168, 3.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{260.6225773818344, 
                271.4752341119641}, {-18.261393848561738`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{336719.994168, 0}, {350749.993925, 6.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{270.9752341119641, 
                281.8278908420938}, {-18.537167764096395`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 6]& ,
            TagBoxNote->"6"],
           StyleBox["6", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[6, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{350749.993925, 0}, {364779.993682, 6.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{281.3278908420938, 
                292.1805475722233}, {-18.537167764096395`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 6]& ,
            TagBoxNote->"6"],
           StyleBox["6", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[6, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{364779.993682, 0}, {378809.993439, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{291.6805475722233, 
                302.53320430235306`}, {-18.16946921005019, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{378809.993439, 0}, {392839.993196, 4.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{302.03320430235306`, 
                312.8858610324827}, {-18.353318487073288`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{392839.993196, 0}, {406869.992953, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{312.3858610324827, 
                323.23851776261233`}, {-18.16946921005019, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{406869.992953, 0}, {420899.99270999996`, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{322.73851776261233`, 
                333.59117449274197`}, {-18.16946921005019, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{420899.99270999996`, 0}, {434929.992467, 4.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{333.09117449274197`, 
                343.9438312228716}, {-18.353318487073288`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{434929.992467, 0}, {448959.992224, 3.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{343.4438312228716, 
                354.29648795300125`}, {-18.261393848561738`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{448959.992224, 0}, {462989.991981, 3.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{353.79648795300125`, 
                364.6491446831309}, {-18.261393848561738`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{462989.991981, 0}, {477019.991738, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{364.1491446831309, 
                375.0018014132605}, {-18.16946921005019, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{477019.991738, 0}, {491049.99149499997`, 3.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{374.5018014132605, 
                385.35445814339016`}, {-18.261393848561738`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{491049.99149499997`, 0}, {505079.991252, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{384.85445814339016`, 
                395.7071148735198}, {-18.16946921005019, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{505079.991252, 0}, {519109.991009, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{395.2071148735198, 
                406.05977160364944`}, {-18.07754457153864, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{519109.991009, 0}, {533139.990766, 3.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{405.55977160364944`, 
                416.4124283337792}, {-18.261393848561738`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{533139.990766, 0}, {547169.990523, 8.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{415.9124283337792, 
                426.7650850639088}, {-18.721017041119495`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 8]& ,
            TagBoxNote->"8"],
           StyleBox["8", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[8, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{561199.99028, 0}, {575229.990037, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{436.61774179403847`, 
                447.4703985241681}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{575229.990037, 0}, {589259.9897939999, 3.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{446.9703985241681, 
                457.8230552542976}, {-18.261393848561738`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{589259.9897939999, 0}, {603289.989551, 6.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{457.3230552542976, 
                468.1757119844274}, {-18.537167764096395`, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 6]& ,
            TagBoxNote->"6"],
           StyleBox["6", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[6, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{603289.989551, 0}, {617319.989308, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{467.6757119844274, 
                478.528368714557}, {-18.16946921005019, -17.48561993302709}}],
              
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{617319.989308, 0}, {631349.989065, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{478.028368714557, 
                488.88102544468666`}, {-18.07754457153864, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{631349.989065, 0}, {645379.988822, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{488.38102544468666`, 
                499.2336821748163}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{645379.988822, 0}, {659409.988579, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{498.7336821748163, 
                509.58633890494593`}, {-18.07754457153864, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{659409.988579, 0}, {673439.988336, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{509.08633890494593`, 
                519.9389956350756}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{687469.988093, 0}, {701499.98785, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{529.7916523652052, 
                540.644309095335}, {-18.07754457153864, -17.48561993302709}}],
              
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{701499.98785, 0}, {715529.9876069999, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{540.144309095335, 
                550.9969658254645}, {-18.16946921005019, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{715529.9876069999, 0}, {729559.987364, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{550.4969658254645, 
                561.3496225555941}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{729559.987364, 0}, {743589.987121, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{560.8496225555941, 
                571.7022792857239}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{743589.987121, 0}, {757619.986878, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{571.2022792857239, 
                582.0549360158535}, {-18.16946921005019, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{785679.986392, 0}, {799709.986149, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{602.2602494761128, 
                613.1129062062424}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{799709.986149, 0}, {813739.985906, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{612.6129062062424, 
                623.4655629363721}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{813739.985906, 0}, {827769.985663, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{622.9655629363721, 
                633.8182196665017}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{841799.9854199999, 0}, {855829.9851769999, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{643.6708763966313, 
                654.523533126761}, {-18.07754457153864, -17.48561993302709}}],
              
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{869859.984934, 0}, {883889.984691, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{664.3761898568906, 
                675.2288465870203}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{883889.984691, 0}, {897919.984448, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{674.7288465870203, 
                685.5815033171499}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{897919.984448, 0}, {911949.984205, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{685.0815033171499, 
                695.9341600472796}, {-18.16946921005019, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{925979.983962, 0}, {940009.983719, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{705.7868167774093, 
                716.6394735075389}, {-18.16946921005019, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{940009.983719, 0}, {954039.983476, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{716.1394735075389, 
                726.9921302376686}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.024189982261*^6, 0}, {1.038219982018*^6, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{778.2554138883168, 
                789.1080706184464}, {-18.16946921005019, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.038219982018*^6, 0}, {1.052249981775*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{788.6080706184464, 
                799.460727348576}, {-18.07754457153864, -17.48561993302709}}],
              
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.080309981289*^6, 0}, {1.094339981046*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{819.6660408088354, 
                830.518697538965}, {-18.07754457153864, -17.48561993302709}}],
              
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.1644899798309999`*^6, 0}, {
                 1.1785199795879999`*^6, 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{881.7819811896131, 
                892.6346379197428}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.220609978859*^6, 0}, {1.234639978616*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{923.1926081101317, 
                934.0452648402613}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.26269997813*^6, 0}, {1.276729977887*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{954.2505783005206, 
                965.1032350306502}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{1.360909976429*^6, 0}, {1.374939976186*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1026.7191754114283`, 
                1037.571832141558}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.374939976186*^6, 0}, {1.388969975943*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1037.071832141558, 
                1047.9244888716876`}, {-18.07754457153864, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.388969975943*^6, 0}, {1.4029999757*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1047.4244888716876`, 
                1058.2771456018172`}, {-18.07754457153864, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.4170299754569998`*^6, 0}, {
                 1.4310599752139999`*^6, 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1068.1298023319466`, 
                1078.9824590620763`}, {-18.07754457153864, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.4450899749709999`*^6, 0}, {1.459119974728*^6, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1088.835115792206, 
                1099.6877725223355`}, {-18.07754457153864, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.571359972784*^6, 0}, {1.585389972541*^6, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1182.0090263633729`, 
                1192.8616830935025`}, {-18.16946921005019, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.865989967681*^6, 0}, {1.880019967438*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1399.4148176960955`, 
                1410.2674744262251`}, {-18.07754457153864, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.9782299657369999`*^6, 0}, {1.992259965494*^6, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1482.2360715371326`, 
                1493.0887282672622`}, {-18.07754457153864, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.006289965251*^6, 0}, {2.020319965008*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1502.9413849973919`, 
                1513.7940417275215`}, {-18.07754457153864, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.10449996355*^6, 0}, {2.1185299633069998`*^6, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1575.4099821082993`, 
                1586.262638838429}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.202709961849*^6, 0}, {2.216739961606*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1647.8785792192068`, 
                1658.7312359493367`}, {-18.07754457153864, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.300919960148*^6, 0}, {2.314949959905*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1720.3471763301145`, 
                1731.1998330602441`}, {-18.07754457153864, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.413159958204*^6, 0}, {2.427189957961*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1803.1684301711516`, 
                1814.0210869012813`}, {-18.07754457153864, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.469279957232*^6, 0}, {2.483309956989*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1844.5790570916702`, 
                1855.4317138218003`}, {-18.07754457153864, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.539429956017*^6, 0}, {2.553459955774*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1896.3423407423188`, 
                1907.194997472448}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3.591679937792*^6, 0}, {3.6057099375489997`*^6, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{2672.7915955020417`, 
                2683.6442522321713`}, {-18.07754457153864, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3.675859936334*^6, 0}, {3.6898899360909997`*^6, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{2734.90753588282, 
                2745.760192612949}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3.703919935848*^6, 0}, {3.717949935605*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{2755.6128493430792`, 
                2766.4655060732084`}, {-18.07754457153864, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3.942429931717*^6, 0}, {3.9564599314739997`*^6, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{2931.608013755283, 
                2942.4606704854127`}, {-18.07754457153864, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{5.836479898912*^6, 0}, {5.850509898669*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{4329.216672322786, 
                4340.069329052916}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{6.285439891136*^6, 0}, {6.299469890893*^6, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{4660.501687686934, 
                4671.354344417065}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.0508469817993*^7, 0}, {1.052249981775*^7, 1.},
                  "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{7776.651363455958, 
                7787.504020186087}, {-18.07754457153864, -17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.4029999757*^7, 0}, {1.4044029756757*^7, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{10375.168202718498`, 
                10386.020859448628`}, {-18.07754457153864, \
-17.48561993302709}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], 
           "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{-3928.3999319600002`, 0},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->{{19.741947709231415`, 17.692688830039003`}, {
       15.916380813713431`, 0.5}},
      PlotRange->{{0., 196419.996598}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], {324.11301883216686, -64.08783536738538},
      ImageScaled[{0.5, 0.5}], {208.3891284863007, 122.07206736644834}], 
    InsetBox[
     GraphicsBox[{
       {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
        EdgeForm[{Opacity[0.5459999999999999], Thickness[Small]}], {}, 
        {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
         EdgeForm[{Opacity[0.5459999999999999], Thickness[Small]}], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{0., 0}, {50000., 722.}, "RoundingRadius" -> 0]},
               
               
               ImageSizeCache->{{22.520195411765087`, 
                30.302978125491506`}, {-104.97061903111947`, \
-17.263603566959233`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 722]& ,
            TagBoxNote->"722"],
           StyleBox["722", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[722, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{50000., 0}, {100000., 285.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{29.802978125491506`, 
                37.58576083921787}, {-52.18742546070669, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 285]& ,
            TagBoxNote->"285"],
           StyleBox["285", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[285, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{100000., 0}, {150000., 172.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{37.08576083921787, 
                44.86854355294429}, {-38.538682043185766`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 172]& ,
            TagBoxNote->"172"],
           StyleBox["172", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[172, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{150000., 0}, {200000., 106.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{44.36854355294429, 
                52.15132626667071}, {-30.566849604633724`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 106]& ,
            TagBoxNote->"106"],
           StyleBox["106", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[106, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{200000., 0}, {250000., 52.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{51.65132626667071, 
                59.43410898039707}, {-24.044441245818412`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 52]& ,
            TagBoxNote->"52"],
           StyleBox["52", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[52, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{250000., 0}, {300000., 49.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{58.93410898039707, 
                66.71689169412349}, {-23.68208522588423, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 49]& ,
            TagBoxNote->"49"],
           StyleBox["49", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[49, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{300000., 0}, {350000., 44.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{66.21689169412349, 
                73.99967440784991}, {-23.07815852599392, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 44]& ,
            TagBoxNote->"44"],
           StyleBox["44", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[44, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{350000., 0}, {400000., 39.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{73.49967440784991, 
                81.28245712157627}, {-22.47423182610362, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 39]& ,
            TagBoxNote->"39"],
           StyleBox["39", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[39, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{400000., 0}, {450000., 24.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{80.78245712157627, 
                88.56523983530269}, {-20.6624517264327, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 24]& ,
            TagBoxNote->"24"],
           StyleBox["24", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[24, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{450000., 0}, {500000., 18.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{88.06523983530269, 
                95.84802254902911}, {-19.937739686564328`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 18]& ,
            TagBoxNote->"18"],
           StyleBox["18", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[18, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{500000., 0}, {550000., 17.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{95.34802254902911, 
                103.13080526275547`}, {-19.816954346586265`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 17]& ,
            TagBoxNote->"17"],
           StyleBox["17", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[17, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{550000., 0}, {600000., 20.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{102.63080526275547`, 
                110.41358797648189`}, {-20.179310366520454`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 20]& ,
            TagBoxNote->"20"],
           StyleBox["20", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[20, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{600000., 0}, {650000., 16.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{109.91358797648189`, 
                117.69637069020831`}, {-19.69616900660821, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 16]& ,
            TagBoxNote->"16"],
           StyleBox["16", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[16, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{650000., 0}, {700000., 15.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{117.19637069020831`, 
                124.97915340393473`}, {-19.575383666630145`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 15]& ,
            TagBoxNote->"15"],
           StyleBox["15", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[15, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{700000., 0}, {750000., 8.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{124.47915340393473`, 
                132.26193611766104`}, {-18.729886286783717`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 8]& ,
            TagBoxNote->"8"],
           StyleBox["8", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[8, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{750000., 0}, {800000., 12.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{131.76193611766104`, 
                139.54471883138746`}, {-19.213027646695963`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 12]& ,
            TagBoxNote->"12"],
           StyleBox["12", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[12, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{800000., 0}, {850000., 12.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{139.04471883138746`, 
                146.82750154511388`}, {-19.213027646695963`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 12]& ,
            TagBoxNote->"12"],
           StyleBox["12", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[12, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{850000., 0}, {900000., 7.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{146.32750154511388`, 
                154.1102842588403}, {-18.609100946805654`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 7]& ,
            TagBoxNote->"7"],
           StyleBox["7", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[7, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{900000., 0}, {950000., 8.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{153.6102842588403, 
                161.39306697256671`}, {-18.729886286783717`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 8]& ,
            TagBoxNote->"8"],
           StyleBox["8", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[8, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{950000., 0}, {1.*^6, 6.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{160.89306697256671`, 
                168.67584968629313`}, {-18.48831560682759, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 6]& ,
            TagBoxNote->"6"],
           StyleBox["6", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[6, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.*^6, 0}, {1.05*^6, 8.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{168.17584968629313`, 
                175.95863240001955`}, {-18.729886286783717`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 8]& ,
            TagBoxNote->"8"],
           StyleBox["8", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[8, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.05*^6, 0}, {1.1*^6, 7.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{175.45863240001955`, 
                183.24141511374597`}, {-18.609100946805654`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 7]& ,
            TagBoxNote->"7"],
           StyleBox["7", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[7, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{1.1*^6, 0}, {1.15*^6, 7.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{182.74141511374597`, 
                190.52419782747228`}, {-18.609100946805654`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 7]& ,
            TagBoxNote->"7"],
           StyleBox["7", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[7, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.15*^6, 0}, {1.2*^6, 3.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{190.02419782747228`, 
                197.8069805411987}, {-18.12595958689341, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.2*^6, 0}, {1.25*^6, 2.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{197.3069805411987, 
                205.08976325492512`}, {-18.005174246915345`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.25*^6, 0}, {1.3*^6, 2.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{204.58976325492512`, 
                212.37254596865154`}, {-18.005174246915345`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.3*^6, 0}, {1.35*^6, 5.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{211.87254596865154`, 
                219.65532868237784`}, {-18.367530266849535`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 5]& ,
            TagBoxNote->"5"],
           StyleBox["5", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[5, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.35*^6, 0}, {1.4*^6, 6.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{219.15532868237784`, 
                226.93811139610426`}, {-18.48831560682759, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 6]& ,
            TagBoxNote->"6"],
           StyleBox["6", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[6, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.4*^6, 0}, {1.45*^6, 4.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{226.43811139610426`, 
                234.22089410983068`}, {-18.24674492687147, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.45*^6, 0}, {1.5*^6, 4.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{233.72089410983068`, 
                241.5036768235571}, {-18.24674492687147, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.5*^6, 0}, {1.55*^6, 3.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{241.0036768235571, 
                248.78645953728352`}, {-18.12595958689341, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.55*^6, 0}, {1.6*^6, 2.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{248.28645953728352`, 
                256.06924225100994`}, {-18.005174246915345`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.6*^6, 0}, {1.65*^6, 2.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{255.56924225100994`, 
                263.35202496473636`}, {-18.005174246915345`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.65*^6, 0}, {1.7*^6, 3.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{262.85202496473636`, 
                270.6348076784628}, {-18.12595958689341, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.7*^6, 0}, {1.75*^6, 3.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{270.1348076784628, 
                277.9175903921891}, {-18.12595958689341, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.75*^6, 0}, {1.8*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{277.4175903921891, 
                285.2003731059155}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.8*^6, 0}, {1.85*^6, 4.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{284.7003731059155, 
                292.4831558196419}, {-18.24674492687147, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.9*^6, 0}, {1.95*^6, 3.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{299.26593853336834`, 
                307.04872124709465`}, {-18.12595958689341, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.95*^6, 0}, {2.*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{306.54872124709465`, 
                314.33150396082107`}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.*^6, 0}, {2.05*^6, 2.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{313.83150396082107`, 
                321.6142866745475}, {-18.005174246915345`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.05*^6, 0}, {2.1*^6, 2.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{321.1142866745475, 
                328.8970693882739}, {-18.005174246915345`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.1*^6, 0}, {2.15*^6, 3.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{328.3970693882739, 
                336.1798521020003}, {-18.12595958689341, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.15*^6, 0}, {2.2*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{335.6798521020003, 
                343.46263481572674`}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.2*^6, 0}, {2.25*^6, 3.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{342.96263481572674`, 
                350.74541752945316`}, {-18.12595958689341, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.25*^6, 0}, {2.3*^6, 2.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{350.24541752945316`, 
                358.0282002431796}, {-18.005174246915345`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.35*^6, 0}, {2.4*^6, 2.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{364.810982956906, 
                372.5937656706323}, {-18.005174246915345`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.4*^6, 0}, {2.45*^6, 2.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{372.0937656706323, 
                379.8765483843587}, {-18.005174246915345`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.55*^6, 0}, {2.6*^6, 2.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{393.94211381181145`, 
                401.7248965255379}, {-18.005174246915345`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.65*^6, 0}, {2.7*^6, 2.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{408.5076792392643, 
                416.2904619529907}, {-18.005174246915345`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.7*^6, 0}, {2.75*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{415.7904619529907, 
                423.57324466671713`}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.75*^6, 0}, {2.8*^6, 2.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{423.07324466671713`, 
                430.85602738044355`}, {-18.005174246915345`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2.8*^6, 0}, {2.85*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{430.35602738044355`, 
                438.13881009416997`}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3.05*^6, 0}, {3.1*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{466.76994094907553`, 
                474.55272366280195`}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3.1*^6, 0}, {3.15*^6, 2.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{474.05272366280195`, 
                481.83550637652826`}, {-18.005174246915345`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3.15*^6, 0}, {3.2*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{481.33550637652826`, 
                489.1182890902547}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3.25*^6, 0}, {3.3*^6, 2.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{495.9010718039811, 
                503.6838545177075}, {-18.005174246915345`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3.35*^6, 0}, {3.4*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{510.46663723143394`, 
                518.2494199451603}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3.55*^6, 0}, {3.6*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{539.5977680863396, 
                547.380550800066}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3.6*^6, 0}, {3.65*^6, 3.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{546.880550800066, 
                554.6633335137924}, {-18.12595958689341, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3.65*^6, 0}, {3.7*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{554.1633335137924, 
                561.9461162275188}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3.8*^6, 0}, {3.85*^6, 1.}, "RoundingRadius" -> 
                 0]},
               ImageSizeCache->{{576.0116816549717, 
                583.7944643686978}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4.1*^6, 0}, {4.15*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{619.7083779373299, 
                627.4911606510564}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4.15*^6, 0}, {4.2*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{626.9911606510564, 
                634.7739433647828}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4.25*^6, 0}, {4.3*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{641.556726078509, 
                649.3395087922356}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4.3*^6, 0}, {4.35*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{648.8395087922356, 
                656.6222915059618}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4.35*^6, 0}, {4.4*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{656.1222915059618, 
                663.9050742196885}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4.65*^6, 0}, {4.7*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{699.8189877883203, 
                707.6017705020467}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4.75*^6, 0}, {4.8*^6, 2.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{714.3845532157732, 
                722.1673359294994}, {-18.005174246915345`, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4.85*^6, 0}, {4.9*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{728.950118643226, 
                736.7329013569522}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{5.1*^6, 0}, {5.15*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{765.3640322118579, 
                773.1468149255843}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{5.4*^6, 0}, {5.45*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{809.0607284942164, 
                816.8435112079426}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{5.7*^6, 0}, {5.75*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{852.7574247765747, 
                860.5402074903011}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{5.75*^6, 0}, {5.8*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{860.0402074903011, 
                867.8229902040275}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{6.1*^6, 0}, {6.15*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{911.0196864863858, 
                918.8024692001125}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{6.4*^6, 0}, {6.45*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{954.7163827687443, 
                962.4991654824707}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{6.8*^6, 0}, {6.85*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{1012.9786444785557`, 
                1020.7614271922819`}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{7.1*^6, 0}, {7.15*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{1056.6753407609137`, 
                1064.4581234746404`}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{7.15*^6, 0}, {7.2*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{1063.9581234746404`, 
                1071.7409061883666`}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{7.2*^6, 0}, {7.25*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{1071.2409061883666`, 
                1079.0236889020932`}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{7.55*^6, 0}, {7.6*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{1122.2203851844517`, 
                1130.003167898178}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{8.*^6, 0}, {8.05*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{1187.7654296079893`, 
                1195.5482123217155`}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{8.8*^6, 0}, {8.85*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{1304.2899530276115`, 
                1312.0727357413382`}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{9.85*^6, 0}, {9.9*^6, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{1457.2283900158661`, 
                1465.0111727295923`}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.03*^7, 0}, {1.035*^7, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{1522.7734344394037`, 
                1530.5562171531299`}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{1.06*^7, 0}, {1.065*^7, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{1566.4701307217622`, 
                1574.2529134354884`}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.18*^7, 0}, {1.185*^7, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{1741.2569158511958`, 
                1749.039698564922}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.2*^7, 0}, {1.205*^7, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{1770.388046706101, 
                1778.1708294198277`}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1.82*^7, 0}, {1.825*^7, 1.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{2673.453103208175, 
                2681.2358859219016`}, {-17.88438890693729, \
-17.263603566959226`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], 
           "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{-20000., 0},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->{{19.73570261437908, 9.89256535947709}, {
       15.916380813713431`, 0.5}},
      PlotRange->{{0, 1000000}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], {543.7529472043436, -64.08783536738538},
      ImageScaled[{0.5, 0.5}], {200.58275992088647, 122.07206736644834}]}, {}},
  ImageSize->{
    UpTo[600], 
    UpTo[223]},
  PlotRange->{{0, 651.6213192490785}, {-128.17567073477076`, 0}},
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{
  3.87883251447371*^9, {3.879083813011243*^9, 3.8790838410200663`*^9}, 
   3.879084878678048*^9, 3.879156008829116*^9, 3.8793253332747517`*^9, 
   3.87935459669552*^9},
 CellLabel->
  "Out[476]=",ExpressionUUID->"caff3f7d-4478-451a-8b4e-36f72823b55c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"j1", "=", 
   RowBox[{"Histogram", "[", 
    RowBox[{
     RowBox[{"finalds", "[", 
      RowBox[{
      "All", ",", " ", 
       "\"\<Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\>\""}], "]"}], ",", 
     
     RowBox[{"ChartStyle", "->", 
      RowBox[{"{", 
       RowBox[{"Directive", "[", 
        RowBox[{"Green", ",", 
         RowBox[{"Opacity", "[", ".5", "]"}]}], "]"}], "}"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"j2", "=", 
   RowBox[{"Histogram", "[", 
    RowBox[{
     RowBox[{"finalds", "[", 
      RowBox[{
      "All", ",", " ", 
       "\"\<Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\>\""}], "]"}], ",", 
     
     RowBox[{"ChartStyle", "->", 
      RowBox[{"{", 
       RowBox[{"Directive", "[", 
        RowBox[{"Orange", ",", 
         RowBox[{"Opacity", "[", ".5", "]"}]}], "]"}], "}"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"j3", "=", 
   RowBox[{"Histogram", "[", 
    RowBox[{
     RowBox[{"finalds", "[", 
      RowBox[{
      "All", ",", " ", 
       "\"\<Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\>\""}], "]"}], ",", 
     
     RowBox[{"ChartStyle", "->", 
      RowBox[{"{", 
       RowBox[{"Directive", "[", 
        RowBox[{"Blue", ",", 
         RowBox[{"Opacity", "[", ".5", "]"}]}], "]"}], "}"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"GraphicsRow", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"j1", ",", "j2", ",", " ", "j3"}], "}"}], ",", 
   RowBox[{
   "PlotLabel", "->", 
    "\"\<Carbon Intensity-Scope 1,2,3 (tonnes CO2e/USD mn)\>\""}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.878832524550375*^9, 3.878832569077739*^9}, 
   3.8790838421459103`*^9},
 CellLabel->
  "In[477]:=",ExpressionUUID->"f630a3a6-8885-4262-9891-ecf78bdcd971"],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     GraphicsBox[{
       {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
        EdgeForm[{Opacity[0.609], Thickness[Small]}], {}, 
        {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
         EdgeForm[{Opacity[0.609], Thickness[Small]}], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{0., 0}, {25.49634, 1053.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{27.672245604647358`, 
                43.10731315057234}, {-106.69562458522356`, \
-14.540841957940728`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1053]& ,
            TagBoxNote->"1053"],
           StyleBox["1053", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1053, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{25.49634, 0}, {50.99267999999999, 319.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{42.60731315057234, 
                58.04238069649732}, {-42.80710564084977, -14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 319]& ,
            TagBoxNote->"319"],
           StyleBox["319", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[319, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{50.99267999999999, 0}, {76.48902, 78.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{57.54238069649732, 
                72.9774482424223}, {-21.830085115517228`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 78]& ,
            TagBoxNote->"78"],
           StyleBox["78", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[78, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{76.48902, 0}, {101.98536, 33.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{72.4774482424223, 
                87.91251578834728}, {-17.91321406306924, -14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 33]& ,
            TagBoxNote->"33"],
           StyleBox["33", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[33, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{101.98536, 0}, {127.48169999999999`, 33.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{87.41251578834728, 
                102.84758333427226`}, {-17.91321406306924, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 33]& ,
            TagBoxNote->"33"],
           StyleBox["33", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[33, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{127.48169999999999`, 0}, {152.97804, 11.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{102.34758333427226`, 
                117.78265088019724`}, {-15.998299326316896`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 11]& ,
            TagBoxNote->"11"],
           StyleBox["11", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[11, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{152.97804, 0}, {178.47438, 20.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{117.28265088019724`, 
                132.71771842612225`}, {-16.781673536806494`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 20]& ,
            TagBoxNote->"20"],
           StyleBox["20", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[20, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{178.47438, 0}, {203.97072, 10.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{132.21771842612225`, 
                147.6527859720472}, {-15.911257747373604`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 10]& ,
            TagBoxNote->"10"],
           StyleBox["10", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[10, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{203.97072, 0}, {229.46706, 13.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{147.1527859720472, 
                162.5878535179722}, {-16.172382484203474`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 13]& ,
            TagBoxNote->"13"],
           StyleBox["13", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[13, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{229.46706, 0}, {254.9634, 11.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{162.0878535179722, 
                177.52292106389717`}, {-15.998299326316896`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 11]& ,
            TagBoxNote->"11"],
           StyleBox["11", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[11, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{254.9634, 0}, {280.45974, 16.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{177.02292106389717`, 
                192.45798860982217`}, {-16.433507221033338`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 16]& ,
            TagBoxNote->"16"],
           StyleBox["16", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[16, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{280.45974, 0}, {305.95608000000004`, 6.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{191.95798860982217`, 
                207.39305615574716`}, {-15.563091431600455`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 6]& ,
            TagBoxNote->"6"],
           StyleBox["6", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[6, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{305.95608000000004`, 0}, {331.45242, 4.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{206.89305615574716`, 
                222.32812370167213`}, {-15.389008273713877`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{331.45242, 0}, {356.94876000000005`, 6.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{221.82812370167213`, 
                237.26319124759712`}, {-15.563091431600455`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 6]& ,
            TagBoxNote->"6"],
           StyleBox["6", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[6, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{356.94876000000005`, 0}, {382.4451, 4.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{236.76319124759712`, 
                252.1982587935221}, {-15.389008273713877`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{382.4451, 0}, {407.94144, 6.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{251.6982587935221, 
                267.1333263394471}, {-15.563091431600455`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 6]& ,
            TagBoxNote->"6"],
           StyleBox["6", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[6, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{407.94144, 0}, {433.43778000000003`, 13.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{266.6333263394471, 
                282.0683938853721}, {-16.172382484203474`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 13]& ,
            TagBoxNote->"13"],
           StyleBox["13", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[13, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{433.43778000000003`, 0}, {458.93412, 3.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{281.5683938853721, 
                297.00346143129707`}, {-15.301966694770584`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{458.93412, 0}, {484.43046000000004`, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{296.50346143129707`, 
                311.93852897722206`}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{484.43046000000004`, 0}, {509.9268, 3.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{311.43852897722206`, 
                326.87359652314694`}, {-15.301966694770584`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{509.9268, 0}, {535.42314, 4.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{326.37359652314694`, 
                341.80866406907194`}, {-15.389008273713877`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{535.42314, 0}, {560.91948, 5.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{341.30866406907194`, 
                356.74373161499693`}, {-15.476049852657162`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 5]& ,
            TagBoxNote->"5"],
           StyleBox["5", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[5, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{560.91948, 0}, {586.4158199999999, 5.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{356.24373161499693`, 
                371.6787991609219}, {-15.476049852657162`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 5]& ,
            TagBoxNote->"5"],
           StyleBox["5", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[5, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{586.4158199999999, 0}, {611.91216, 5.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{371.1787991609219, 
                386.6138667068469}, {-15.476049852657162`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 5]& ,
            TagBoxNote->"5"],
           StyleBox["5", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[5, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{611.91216, 0}, {637.4085, 2.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{386.1138667068469, 
                401.5489342527719}, {-15.214925115827299`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{637.4085, 0}, {662.9048399999999, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{401.0489342527719, 
                416.4840017986968}, {-15.214925115827299`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{688.40118, 0}, {713.89752, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{430.9190693446218, 
                446.3541368905468}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{713.89752, 0}, {739.39386, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{445.8541368905468, 
                461.2892044364718}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{764.8901999999999, 0}, {790.38654, 3.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{475.7242719823968, 
                491.15933952832177`}, {-15.301966694770584`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{790.38654, 0}, {815.88288, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{490.65933952832177`, 
                506.09440707424676`}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{841.3792199999999, 0}, {866.87556, 5.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{520.5294746201716, 
                535.9645421660967}, {-15.476049852657162`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 5]& ,
            TagBoxNote->"5"],
           StyleBox["5", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[5, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{866.87556, 0}, {892.3719, 2.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{535.4645421660967, 
                550.8996097120217}, {-15.214925115827299`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{892.3719, 0}, {917.86824, 2.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{550.3996097120217, 
                565.8346772579467}, {-15.214925115827299`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{943.3645799999999, 0}, {968.86092, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{580.2697448038716, 
                595.7048123497966}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{968.86092, 0}, {994.35726, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{595.2048123497966, 
                610.6398798957216}, {-15.214925115827299`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1019.8536, 0}, {1045.34994, 4.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{625.0749474416466, 
                640.5100149875717}, {-15.389008273713877`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1045.34994, 0}, {1070.84628, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{640.0100149875717, 
                655.4450825334966}, {-15.214925115827299`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1070.84628, 0}, {1096.3426200000001`, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{654.9450825334966, 
                670.3801500794217}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1096.3426200000001`, 0}, {1121.83896, 3.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{669.8801500794217, 
                685.3152176253466}, {-15.301966694770584`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1121.83896, 0}, {1147.3353000000002`, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{684.8152176253466, 
                700.2502851712717}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1198.32798, 0}, {1223.8243200000002`, 3.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{729.6204202631216, 
                745.0554878090466}, {-15.301966694770584`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1223.8243200000002`, 0}, {1249.32066, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{744.5554878090466, 
                759.9905553549715}, {-15.214925115827299`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1274.817, 0}, {1300.3133400000002`, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{774.4256229008964, 
                789.8606904468215}, {-15.214925115827299`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1300.3133400000002`, 0}, {1325.80968, 7.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{789.3606904468215, 
                804.7957579927464}, {-15.65013301054374, -14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 7]& ,
            TagBoxNote->"7"],
           StyleBox["7", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[7, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1325.80968, 0}, {1351.30602, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{804.2957579927464, 
                819.7308255386714}, {-15.214925115827299`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1402.2987, 0}, {1427.79504, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{849.1009606305214, 
                864.5360281764463}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1427.79504, 0}, {1453.2913800000001`, 3.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{864.0360281764463, 
                879.4710957223714}, {-15.301966694770584`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1453.2913800000001`, 0}, {1478.78772, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{878.9710957223714, 
                894.4061632682963}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1682.75844, 0}, {1708.25478, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1013.3867036356962`, 
                1028.821771181621}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1708.25478, 0}, {1733.7511200000001`, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1028.321771181621, 
                1043.756838727546}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1733.7511200000001`, 0}, {1759.24746, 3.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1043.256838727546, 
                1058.691906273471}, {-15.301966694770584`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1861.2328200000002`, 0}, {1886.72916, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1117.932176457171, 
                1133.367244003096}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{1912.2255, 0}, {1937.7218400000002`, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1147.802311549021, 
                1163.237379094946}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2116.19622, 0}, {2141.69256, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1267.2828519164207`, 
                1282.7179194623457`}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2192.68524, 0}, {2218.18158, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1312.0880545541954`, 
                1327.5231221001206`}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2218.18158, 0}, {2243.6779199999996`, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1327.0231221001206`, 
                1342.4581896460454`}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2269.17426, 0}, {2294.6706, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1356.8932571919704`, 
                1372.3283247378956`}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2294.6706, 0}, {2320.16694, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1371.8283247378956`, 
                1387.2633922838206`}, {-15.214925115827299`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2396.65596, 0}, {2422.1522999999997`, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1431.5685949215956`, 
                1447.0036624675204`}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2473.14498, 0}, {2498.6413199999997`, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1476.3737975593704`, 
                1491.8088651052954`}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2549.634, 0}, {2575.1303399999997`, 8.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1521.1790001971453`, 
                1536.61406774307}, {-15.737174589487026`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 8]& ,
            TagBoxNote->"8"],
           StyleBox["8", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[8, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2600.62668, 0}, {2626.12302, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1551.0491352889953`, 
                1566.4842028349203`}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2626.12302, 0}, {2651.6193599999997`, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1565.9842028349203`, 
                1581.419270380845}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2906.58276, 0}, {2932.0791, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1730.269945840095, 
                1745.70501338602}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3289.0278599999997`, 0}, {3314.5242, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1954.2959590289697`, 
                1969.7310265748947`}, {-15.214925115827299`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3416.50956, 0}, {3442.0058999999997`, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{2028.9712967585947`, 
                2044.4063643045195`}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3620.4802799999998`, 0}, {3645.97662, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{2148.4518371259946`, 
                2163.8869046719196`}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3773.4583199999997`, 0}, {3798.95466, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{2238.062242401544, 
                2253.497309947469}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3798.95466, 0}, {3824.451, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{2252.997309947469, 
                2268.4323774933946`}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4181.39976, 0}, {4206.8961, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{2477.0233231363445`, 
                2492.458390682269}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4257.88878, 0}, {4283.38512, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{2521.828525774119, 
                2537.263593320044}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4334.3778, 0}, {4359.87414, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{2566.633728411894, 
                2582.068795957819}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4410.86682, 0}, {4436.36316, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{2611.438931049669, 
                2626.873998595594}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4487.35584, 0}, {4512.85218, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{2656.244133687444, 
                2671.679201233369}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4793.31192, 0}, {4818.808260000001, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{2835.464944238544, 
                2850.900011784469}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{5226.7497, 0}, {5252.24604, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{3089.3610925192684`, 
                3104.7961600651934`}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{5277.742380000001, 0}, {5303.23872, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{3119.231227611119, 
                3134.6662951570434`}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{5430.720420000001, 0}, {5456.21676, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{3208.8416328866683`, 
                3224.2767004325933`}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{6297.59598, 0}, {6323.092320000001, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{3716.6339294481177`, 
                3732.068996994043}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{6425.07768, 0}, {6450.57402, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{3791.3092671777426`, 
                
                3806.7443347236676`}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{6476.070360000001, 0}, {6501.5667, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{3821.1794022695926`, 
                3836.6144698155176`}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{6501.5667, 0}, {6527.06304, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{3836.1144698155176`, 
                3851.549537361442}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{6731.03376, 0}, {6756.5301, 4.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{3970.5300777288426`, 
                3985.965145274767}, {-15.389008273713877`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{12569.69562, 0}, {12595.19196, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{7390.6605457456635`, 
                7406.095613291588}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{18688.817219999997`, 0}, {18714.31356, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{10975.076756767658`, 
                10990.511824313584`}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 1, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{25496.34, 0}, {25521.836339999998`, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{14962.73979152963, 
                14978.174859075552`}, {-15.127883536884006`, \
-14.54084195794072}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], 
           "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{-5.2267497, 0},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->{{24.732986389111296`, 1.4999999999999432`}, {
       12.874412825298407`, 0.4999999999999858}},
      PlotRange->{{0., 261.337485}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], {109.47037388335622, -64.6683311430724},
      ImageScaled[{0.5, 0.5}], {203.89855621101444, 123.17777360585217}], 
    InsetBox[
     GraphicsBox[{
       {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
        EdgeForm[{Opacity[0.574], Thickness[Small]}], {}, 
        {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
         EdgeForm[{Opacity[0.574], Thickness[Small]}], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{0., 0}, {8.26048, 296.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{22.6948002154229, 
                32.7871782429315}, {-78.76796924921825, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 296]& ,
            TagBoxNote->"296"],
           StyleBox["296", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[296, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{8.26048, 0}, {16.52096, 426.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{32.2871782429315, 
                42.379556270440105`}, {-106.80965362171835`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 426]& ,
            TagBoxNote->"426"],
           StyleBox["426", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[426, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{16.52096, 0}, {24.781439999999996`, 240.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{41.879556270440105`, 
                51.97193429794871}, {-66.68847444260282, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 240]& ,
            TagBoxNote->"240"],
           StyleBox["240", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[240, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{24.781439999999996`, 0}, {33.04192, 171.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{51.47193429794871, 
                61.56431232545731}, {-51.804811198737376`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 171]& ,
            TagBoxNote->"171"],
           StyleBox["171", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[171, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{33.04192, 0}, {41.3024, 153.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{61.06431232545731, 
                71.15669035296588}, {-47.922116439468134`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 153]& ,
            TagBoxNote->"153"],
           StyleBox["153", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[153, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{41.3024, 0}, {49.56287999999999, 67.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{70.65669035296588, 
                80.74906838047451}, {-29.371463700737287`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 67]& ,
            TagBoxNote->"67"],
           StyleBox["67", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[67, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{49.56287999999999, 0}, {57.823359999999994`, 
                 106.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{80.24906838047451, 
                90.34144640798314}, {-37.78396901248732, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 106]& ,
            TagBoxNote->"106"],
           StyleBox["106", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[106, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{57.823359999999994`, 0}, {66.08384, 32.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{89.84144640798314, 
                99.93382443549172}, {-21.821779446602648`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 32]& ,
            TagBoxNote->"32"],
           StyleBox["32", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[32, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{66.08384, 0}, {74.34432, 49.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{99.43382443549172, 
                109.52620246300029`}, {-25.488768941468045`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 49]& ,
            TagBoxNote->"49"],
           StyleBox["49", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[49, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{74.34432, 0}, {82.6048, 16.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{109.02620246300029`, 
                119.11858049050892`}, {-18.370495216141094`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 16]& ,
            TagBoxNote->"16"],
           StyleBox["16", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[16, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{82.6048, 0}, {90.86528, 11.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{118.61858049050892`, 
                128.71095851801755`}, {-17.291968894121858`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 11]& ,
            TagBoxNote->"11"],
           StyleBox["11", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[11, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{90.86528, 0}, {99.12575999999999, 15.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{128.21095851801755`, 
                138.30333654552612`}, {-18.154789951737243`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 15]& ,
            TagBoxNote->"15"],
           StyleBox["15", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[15, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{99.12575999999999, 0}, {107.38623999999999`, 
                 14.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{137.80333654552612`, 
                147.8957145730347}, {-17.9390846873334, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 14]& ,
            TagBoxNote->"14"],
           StyleBox["14", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[14, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{107.38623999999999`, 0}, {115.64671999999999`, 
                 16.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{147.3957145730347, 
                157.48809260054333`}, {-18.370495216141094`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 16]& ,
            TagBoxNote->"16"],
           StyleBox["16", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[16, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{115.64671999999999`, 0}, {123.90719999999999`, 
                 7.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{156.98809260054333`, 
                167.08047062805196`}, {-16.429147836506473`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 7]& ,
            TagBoxNote->"7"],
           StyleBox["7", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[7, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{123.90719999999999`, 0}, {132.16768, 13.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{166.58047062805196`, 
                176.67284865556053`}, {-17.723379422929554`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 13]& ,
            TagBoxNote->"13"],
           StyleBox["13", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[13, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{132.16768, 0}, {140.42816, 17.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{176.17284865556053`, 
                186.2652266830691}, {-18.58620048054494, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 17]& ,
            TagBoxNote->"17"],
           StyleBox["17", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[17, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{140.42816, 0}, {148.68864, 9.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{185.7652266830691, 
                195.85760471057773`}, {-16.860558365314162`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 9]& ,
            TagBoxNote->"9"],
           StyleBox["9", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[9, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{148.68864, 0}, {156.94912, 4.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{195.35760471057773`, 
                205.44998273808636`}, {-15.782032043294926`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{156.94912, 0}, {165.2096, 4.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{204.94998273808636`, 
                215.04236076559494`}, {-15.782032043294926`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{165.2096, 0}, {173.47008, 3.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{214.54236076559494`, 
                224.6347387931035}, {-15.566326778891082`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{173.47008, 0}, {181.73056, 8.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{224.1347387931035, 
                234.22711682061214`}, {-16.644853100910318`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 8]& ,
            TagBoxNote->"8"],
           StyleBox["8", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[8, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{181.73056, 0}, {189.99104, 5.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{233.72711682061214`, 
                243.81949484812077`}, {-15.997737307698777`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 5]& ,
            TagBoxNote->"5"],
           StyleBox["5", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[5, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{189.99104, 0}, {198.25151999999997`, 3.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{243.31949484812077`, 
                253.41187287562934`}, {-15.566326778891082`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{198.25151999999997`, 0}, {206.51199999999997`, 
                 3.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{252.91187287562934`, 
                263.0042509031379}, {-15.566326778891082`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{206.51199999999997`, 0}, {214.77247999999997`, 
                 5.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{262.5042509031379, 
                272.59662893064655`}, {-15.997737307698777`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 5]& ,
            TagBoxNote->"5"],
           StyleBox["5", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[5, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{214.77247999999997`, 0}, {223.03295999999997`, 
                 3.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{272.09662893064655`, 
                282.1890069581551}, {-15.566326778891082`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{223.03295999999997`, 0}, {231.29343999999998`, 
                 11.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{281.6890069581551, 
                291.78138498566375`}, {-17.291968894121858`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 11]& ,
            TagBoxNote->"11"],
           StyleBox["11", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[11, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{231.29343999999998`, 0}, {239.55391999999998`, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{291.28138498566375`, 
                301.3737630131723}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{239.55391999999998`, 0}, {247.81439999999998`, 
                 2.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{300.8737630131723, 
                310.96614104068095`}, {-15.350621514487237`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{247.81439999999998`, 0}, {256.07488, 5.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{310.46614104068095`, 
                320.5585190681896}, {-15.997737307698777`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 5]& ,
            TagBoxNote->"5"],
           StyleBox["5", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[5, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{256.07488, 0}, {264.33536, 5.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{320.0585190681896, 
                330.1508970956981}, {-15.997737307698777`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 5]& ,
            TagBoxNote->"5"],
           StyleBox["5", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[5, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{264.33536, 0}, {272.59583999999995`, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{329.6508970956981, 
                339.74327512320673`}, {-15.350621514487237`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{280.85632, 0}, {289.11679999999996`, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{348.83565315071536`, 
                358.928031178224}, {-15.350621514487237`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{297.37728, 0}, {305.63775999999996`, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{368.0204092057326, 
                378.11278723324114`}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{305.63775999999996`, 0}, {313.89824, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{377.61278723324114`, 
                387.70516526074977`}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{313.89824, 0}, {322.15871999999996`, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{387.20516526074977`, 
                397.2975432882583}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{330.4192, 0}, {338.67967999999996`, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{406.3899213157669, 
                416.48229934327554`}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{338.67967999999996`, 0}, {346.94016, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{415.98229934327554`, 
                426.0746773707842}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{346.94016, 0}, {355.20063999999996`, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{425.5746773707842, 
                435.6670553982928}, {-15.350621514487237`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{355.20063999999996`, 0}, {363.46112, 3.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{435.1670553982928, 
                445.25943342580143`}, {-15.566326778891082`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{379.98208, 0}, {388.24255999999997`, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{463.9441894808187, 
                474.0365675083272}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{396.50303999999994`, 0}, {404.76351999999997`, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{483.1289455358357, 
                493.22132356334436`}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{421.28448, 0}, {429.54495999999995`, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{511.9060796183617, 
                521.9984576458703}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{437.80544, 0}, {446.06591999999995`, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{531.0908356733789, 
                541.1832137008873}, {-15.350621514487237`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{446.06591999999995`, 0}, {454.3264, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{540.6832137008873, 
                550.775591728396}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{462.58687999999995`, 0}, {470.84736, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{559.8679697559046, 
                569.9603477834132}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{512.14976, 0}, {520.4102399999999, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{617.4222379209564, 
                627.5146159484648}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{520.4102399999999, 0}, {528.67072, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{627.0146159484648, 
                637.1069939759734}, {-15.350621514487237`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{528.67072, 0}, {536.9312, 5.}, "RoundingRadius" -> 
                 0]},
               
               ImageSizeCache->{{636.6069939759734, 
                646.699372003482}, {-15.997737307698777`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 5]& ,
            TagBoxNote->"5"],
           StyleBox["5", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[5, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{536.9312, 0}, {545.1916799999999, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{646.199372003482, 
                656.2917500309907}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{553.4521599999999, 0}, {561.71264, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{665.3841280584993, 
                675.4765060860079}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{586.4940799999999, 0}, {594.75456, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{703.7536401685336, 
                713.8460181960422}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{611.2755199999999, 0}, {619.536, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{732.5307742510595, 
                742.6231522785681}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{693.88032, 0}, {702.1407999999999, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{828.4545545261456, 
                838.546932553654}, {-15.350621514487237`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{718.66176, 0}, {726.92224, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{857.2316886086714, 
                867.3240666361801}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{743.4431999999999, 0}, {751.70368, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{886.0088226911971, 
                896.1012007187057}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{793.0060799999999, 0}, {801.2665599999999, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{943.5630908562487, 
                953.6554688837573}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{801.2665599999999, 0}, {809.5270399999999, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{953.1554688837573, 
                963.2478469112659}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{817.78752, 0}, {826.0479999999999, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{972.3402249387746, 
                982.4326029662832}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{933.4342399999999, 0}, {941.69472, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1106.633517323895, 
                1116.7258953514036`}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{966.4761599999999, 0}, {974.73664, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{1145.0030294339294`, 
                1155.095407461438}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{2783.78176, 0}, {2792.0422399999998`, 2.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{3255.326195485822, 
                3265.4185735133306`}, {-15.350621514487237`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{3205.0662399999997`, 0}, {3213.3267199999996`, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{3744.5374748887607`, 
                3754.629852916269}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4229.36576, 0}, {4237.62624, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{4933.992350299827, 
                4944.084728327336}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{4245.8867199999995`, 0}, {4254.147199999999, 
                 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{4953.177106354844, 
                4963.269484382353}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[1, 0.5, 0], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{8260.48, 0}, {8268.740479999999, 1.}, 
                 "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{9615.072827724025, 
                9625.165205751531}, {-15.134916250083386`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], 
           "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{-2.6433535999999997`, 0},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->{{19.72898318654924, 1.5}, {12.874412825298407`, 
       0.4999999999999858}},
      PlotRange->{{0., 132.16768}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], {325.90912004878766, -64.6683311430724},
      ImageScaled[{0.5, 0.5}], {198.89455300845245, 123.17777360585217}], 
    InsetBox[
     GraphicsBox[{
       {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
        EdgeForm[{Opacity[0.581], Thickness[Small]}], {}, 
        {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
         EdgeForm[{Opacity[0.581], Thickness[Small]}], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{0., 0}, {50., 371.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{22.6948002154229, 
                33.42667011143209}, {-106.80965362171834`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 371]& ,
            TagBoxNote->"371"],
           StyleBox["371", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[371, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{50., 0}, {100., 363.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{32.92667011143209, 
                43.65854000744122}, {-104.82818855139945`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 363]& ,
            TagBoxNote->"363"],
           StyleBox["363", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[363, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{100., 0}, {150., 185.}, "RoundingRadius" -> 0]},
               
               
               ImageSizeCache->{{43.15854000744122, 
                53.890409903450404`}, {-60.740590736804016`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 185]& ,
            TagBoxNote->"185"],
           StyleBox["185", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[185, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{150., 0}, {200., 238.}, "RoundingRadius" -> 0]},
               
               
               ImageSizeCache->{{53.390409903450404`, 
                64.12227979945959}, {-73.8677968276667, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 238]& ,
            TagBoxNote->"238"],
           StyleBox["238", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[238, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{200., 0}, {250., 122.}, "RoundingRadius" -> 0]},
               
               
               ImageSizeCache->{{63.62227979945959, 
                74.35414969546878}, {-45.13655330804271, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 122]& ,
            TagBoxNote->"122"],
           StyleBox["122", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[122, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{250., 0}, {300., 172.}, "RoundingRadius" -> 0]},
               
               
               ImageSizeCache->{{73.85414969546878, 
                84.58601959147796}, {-57.5207099975358, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 172]& ,
            TagBoxNote->"172"],
           StyleBox["172", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[172, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{300., 0}, {350., 65.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{84.08601959147796, 
                94.8178894874871}, {-31.018614682020573`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 65]& ,
            TagBoxNote->"65"],
           StyleBox["65", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[65, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{350., 0}, {400., 85.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{94.3178894874871, 
                105.04975938349628`}, {-35.972277357817816`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 85]& ,
            TagBoxNote->"85"],
           StyleBox["85", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[85, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{400., 0}, {450., 32.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{104.54975938349628`, 
                115.28162927950547`}, {-22.845071266955124`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 32]& ,
            TagBoxNote->"32"],
           StyleBox["32", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[32, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{450., 0}, {500., 29.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{114.78162927950547`, 
                125.5134991755146}, {-22.10202186558554, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 29]& ,
            TagBoxNote->"29"],
           StyleBox["29", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[29, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{500., 0}, {550., 20.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{125.0134991755146, 
                135.74536907152384`}, {-19.87287366147678, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 20]& ,
            TagBoxNote->"20"],
           StyleBox["20", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[20, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{550., 0}, {600., 21.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{135.24536907152384`, 
                145.97723896753297`}, {-20.120556795266644`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 21]& ,
            TagBoxNote->"21"],
           StyleBox["21", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[21, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{600., 0}, {650., 7.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{145.47723896753297`, 
                156.2091088635422}, {-16.652992922208576`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 7]& ,
            TagBoxNote->"7"],
           StyleBox["7", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[7, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{650., 0}, {700., 12.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{155.7091088635422, 
                166.44097875955134`}, {-17.891408591157884`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 12]& ,
            TagBoxNote->"12"],
           StyleBox["12", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[12, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{700., 0}, {750., 4.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{165.94097875955134`, 
                176.67284865556047`}, {-15.909943520838986`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{750., 0}, {800., 4.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{176.17284865556047`, 
                186.9047185515696}, {-15.909943520838986`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{800., 0}, {850., 7.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{186.4047185515696, 
                197.13658844757884`}, {-16.652992922208576`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 7]& ,
            TagBoxNote->"7"],
           StyleBox["7", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[7, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{850., 0}, {900., 3.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{196.63658844757884`, 
                207.36845834358797`}, {-15.66226038704913, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{900., 0}, {950., 4.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{206.86845834358797`, 
                217.60032823959722`}, {-15.909943520838986`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{950., 0}, {1000., 1.}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{217.10032823959722`, 
                227.83219813560635`}, {-15.166894119469404`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{1000., 0}, {1050., 5.}, "RoundingRadius" -> 0]},
               
               
               ImageSizeCache->{{227.33219813560635`, 
                238.06406803161548`}, {-16.15762665462885, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 5]& ,
            TagBoxNote->"5"],
           StyleBox["5", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[5, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{1050., 0}, {1100., 2.}, "RoundingRadius" -> 0]},
               
               
               ImageSizeCache->{{237.56406803161548`, 
                248.29593792762472`}, {-15.414577253259267`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{1100., 0}, {1150., 4.}, "RoundingRadius" -> 0]},
               
               
               ImageSizeCache->{{247.79593792762472`, 
                258.52780782363385`}, {-15.909943520838986`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{1150., 0}, {1200., 4.}, "RoundingRadius" -> 0]},
               
               
               ImageSizeCache->{{258.02780782363385`, 
                268.7596777196431}, {-15.909943520838986`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox["4", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[4, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{1250., 0}, {1300., 3.}, "RoundingRadius" -> 0]},
               
               
               ImageSizeCache->{{278.4915476156522, 
                289.22341751166135`}, {-15.66226038704913, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{1400., 0}, {1450., 1.}, "RoundingRadius" -> 0]},
               
               
               ImageSizeCache->{{309.1871573036797, 
                319.91902719968897`}, {-15.166894119469404`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{1450., 0}, {1500., 1.}, "RoundingRadius" -> 0]},
               
               
               ImageSizeCache->{{319.41902719968897`, 
                330.1508970956981}, {-15.166894119469404`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{1550., 0}, {1600., 1.}, "RoundingRadius" -> 0]},
               
               
               ImageSizeCache->{{339.88276699170723`, 
                350.61463688771636`}, {-15.166894119469404`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{1850., 0}, {1900., 1.}, "RoundingRadius" -> 0]},
               
               
               ImageSizeCache->{{401.27398636776223`, 
                412.0058562637715}, {-15.166894119469404`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            {RGBColor[0, 0, 1], Opacity[0.5], 
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{2000., 0}, {2050., 1.}, "RoundingRadius" -> 0]},
               
               
               ImageSizeCache->{{431.96959605578985`, 
                442.701465951799}, {-15.166894119469404`, \
-14.419210985679541`}}],
              "DelayedMouseEffectStyle"]},
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], 
           "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{-15., 0},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->{{19.72898318654924, 1.5000000000000568`}, {
       12.874412825298407`, 0.4999999999999858}},
      PlotRange->{{0, 750}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], {539.8458646129382, -64.6683311430724}, 
     ImageScaled[{0.5, 0.5}], {198.8945530084525, 123.17777360585217}]}, {}},
  ImageSize->{
    UpTo[600], 
    UpTo[223]},
  PlotRange->{{0, 646.8142368950134}, {-129.3366622861448, 0}},
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{3.878832570844365*^9, 3.879083844899994*^9, 
  3.8790848815869637`*^9, 3.879156013010385*^9, 3.879325334803912*^9, 
  3.879354599033166*^9},
 CellLabel->
  "Out[480]=",ExpressionUUID->"465c6d42-5dd1-4d1d-ab29-dfc81ae84333"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Normal", "@", 
  RowBox[{"Keys", "@", 
   RowBox[{"First", "@", "finalds"}]}]}]], "Input",
 CellChangeTimes->{3.8790844311935472`*^9},
 CellLabel->"In[84]:=",ExpressionUUID->"5901ca7d-0a0a-47e0-9d28-98cbe6ae5bce"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "\"\<Company\>\"", ",", "\"\<ISIN\>\"", ",", "\"\<integralScore\>\"", ",", 
   "\"\<TCUID\>\"", ",", "\"\<GICS Sector Name\>\"", ",", 
   "\"\<Carbon-Scope 1  (tonnes CO2e)\>\"", ",", 
   "\"\<Carbon-Scope 2  (tonnes CO2e)\>\"", ",", 
   "\"\<Carbon-Scope 3 (tonnes CO2e)\>\"", ",", 
   "\"\<Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\>\"", ",", 
   "\"\<Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\>\"", ",", 
   "\"\<Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\>\"", ",", 
   "\"\<Carbon Disclosure\>\"", ",", "\"\<Revenue (USD mn)\>\"", ",", 
   "\"\<IntScaled\>\"", ",", "\"\<Ratings\>\"", ",", 
   "\"\<Carbon Intensity Total (tonnes CO2e/USD mn)\>\""}], "}"}]], "Input",
 CellChangeTimes->{3.8793546001095533`*^9},
 CellLabel->
  "In[481]:=",ExpressionUUID->"ac81ec20-61b3-42ff-9d30-8d8c49991057"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Company\"\>", ",", "\<\"ISIN\"\>", 
   ",", "\<\"integralScore\"\>", ",", "\<\"TCUID\"\>", 
   ",", "\<\"GICS Sector Name\"\>", 
   ",", "\<\"Carbon-Scope 1  (tonnes CO2e)\"\>", 
   ",", "\<\"Carbon-Scope 2  (tonnes CO2e)\"\>", 
   ",", "\<\"Carbon-Scope 3 (tonnes CO2e)\"\>", 
   ",", "\<\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"\>", 
   ",", "\<\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"\>", 
   ",", "\<\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"\>", 
   ",", "\<\"Carbon Disclosure\"\>", ",", "\<\"Revenue (USD mn)\"\>", 
   ",", "\<\"IntScaled\"\>", ",", "\<\"Ratings\"\>", 
   ",", "\<\"Carbon Intensity Total (tonnes CO2e/USD mn)\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.879354600193618*^9},
 CellLabel->
  "Out[481]=",ExpressionUUID->"2916c6af-5be9-47c2-91ae-9a2fc48358eb"]
}, Open  ]],

Cell[BoxData[""], "Input",ExpressionUUID->"6fe5b5e1-9fef-45da-9020-be49d30f6e34"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"revLog", " ", "=", " ", 
   RowBox[{"Normal", "@", 
    RowBox[{
     RowBox[{"finalds", "[", 
      RowBox[{"All", ",", "\"\<Revenue (USD mn)\>\""}], " ", "]"}], "[", 
     "Log", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"scope1Log", " ", "=", "  ", 
   RowBox[{"Normal", "@", 
    RowBox[{
     RowBox[{"finalds", "[", 
      RowBox[{"All", ",", "\"\<Carbon-Scope 1  (tonnes CO2e)\>\""}], " ", 
      "]"}], "[", "Log", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"scope2Log", " ", "=", "  ", 
   RowBox[{"Normal", "@", 
    RowBox[{
     RowBox[{"finalds", "[", 
      RowBox[{"All", ",", "\"\<Carbon-Scope 2  (tonnes CO2e)\>\""}], " ", 
      "]"}], "[", "Log", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"scope3Log", " ", "=", "  ", 
   RowBox[{"Normal", "@", 
    RowBox[{
     RowBox[{"finalds", "[", 
      RowBox[{"All", ",", "\"\<Carbon-Scope 3 (tonnes CO2e)\>\""}], " ", 
      "]"}], "[", "Log", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"scopeTotLog", " ", "=", "  ", 
   RowBox[{"Normal", "@", 
    RowBox[{
     RowBox[{"finalds", "[", 
      RowBox[{
      "All", ",", "\"\<Carbon Intensity Total (tonnes CO2e/USD mn)\>\""}], 
      "]"}], "[", "Log", "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.878832940631596*^9, 3.8788329661671133`*^9}, {
  3.879084661985804*^9, 3.8790846867595243`*^9}, {3.8790851603181553`*^9, 
  3.879085203306385*^9}, {3.8790852353950872`*^9, 3.879085251927593*^9}, {
  3.879086653227219*^9, 3.879086667630204*^9}, {3.8790873114616327`*^9, 
  3.8790873208823442`*^9}, {3.879156038412794*^9, 3.8791560504922037`*^9}},
 CellLabel->
  "In[482]:=",ExpressionUUID->"f3c47b9b-a284-4e6d-8579-72e54a1fcde3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dataRev", "  ", "=", 
   RowBox[{
    RowBox[{"Dataset", "[", 
     RowBox[{"<|", 
      RowBox[{"\"\<Log of Revenues (USD mn)\>\"", "->", 
       RowBox[{"Normal", "@", "revLog"}]}], " ", "|>"}], "]"}], "//", 
    "Transpose"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dataScope1Log", "  ", "=", 
   RowBox[{
    RowBox[{"Dataset", "[", 
     RowBox[{"<|", 
      RowBox[{"\"\<Log of Scope 1 emissons (tonnes CO2e)\>\"", "->", 
       RowBox[{"Normal", "@", "scope1Log"}]}], " ", "|>"}], "]"}], "//", 
    "Transpose"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dataScope2Log", "  ", "=", 
   RowBox[{
    RowBox[{"Dataset", "[", 
     RowBox[{"<|", 
      RowBox[{"\"\<Log of Scope 2 emissons (tonnes CO2e)\>\"", "->", 
       RowBox[{"Normal", "@", "scope2Log"}]}], " ", "|>"}], "]"}], "//", 
    "Transpose"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dataScope3Log", "  ", "=", 
   RowBox[{
    RowBox[{"Dataset", "[", 
     RowBox[{"<|", 
      RowBox[{"\"\<Log of Scope 3 emissons (tonnes CO2e)\>\"", "->", 
       RowBox[{"Normal", "@", "scope3Log"}]}], " ", "|>"}], "]"}], "//", 
    "Transpose"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dataScopeTotLog", "  ", "=", 
   RowBox[{
    RowBox[{"Dataset", "[", 
     RowBox[{"<|", 
      RowBox[{"\"\<Log of Carbon Intensity Total (tonnes CO2e/USD mn)\>\"", "->", 
       RowBox[{"Normal", "@", "scopeTotLog"}]}], " ", "|>"}], "]"}], "//", 
    "Transpose"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"finalds2", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{"finalds", ",", "dataRev", " ", ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"finalds3", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{"finalds2", ",", "dataScope1Log", " ", ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"finalds4", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{"finalds3", ",", "dataScope2Log", " ", ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"finalds5", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{"finalds4", ",", "dataScope3Log", " ", ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"finalds6", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{"finalds5", ",", "dataScopeTotLog", " ", ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.879086674886086*^9, 3.8790867757777843`*^9}, {
  3.8790868104961033`*^9, 3.879086843282325*^9}, {3.8790872617954082`*^9, 
  3.879087278550708*^9}, {3.8790873277104273`*^9, 3.87908737146085*^9}, {
  3.8791560642796917`*^9, 3.879156136173725*^9}},
 CellLabel->
  "In[487]:=",ExpressionUUID->"9547b407-c261-4cd3-9c61-3a2a8845f68e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"finalds3", "[", 
    RowBox[{
     RowBox[{"GroupBy", "[", 
      RowBox[{"Key", "[", "\"\<Ratings\>\"", "]"}], "]"}], ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Revenue (USD mn)\>\"", ",", 
       "\"\<Carbon-Scope 1  (tonnes CO2e)\>\""}], "}"}]}], "]"}], ",", " ", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Revenues(log)\>\"", ",", "\"\<Scope 1 Emissions(log)\>\""}],
      "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8790872056130342`*^9, 3.879087214367696*^9}},
 CellLabel->
  "In[497]:=",ExpressionUUID->"4097cc73-a6ff-48d9-8186-ee3b23ad5f46"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{
       RGBColor[0.368417, 0.506779, 0.709798], 
       PointSize[0.0055000000000000005`], 
       AbsoluteThickness[1.6], 
       PointBox[CompressedData["
1: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
cwryxoR8JuryupeNS08FEv1nV0XqWLMx8ppVB1JhcdlwsrSWEuZDynAZGPfw
cxVEf6LxWm3Jei3qr/Hs+GbubIzXvs4xqP/Ec8CAwU9o/bNC6RucetWzdoy7
lK4r6ol+ntS/Ytfp3fz/41MbmCipkILdrcfTyHrHGqChJZ9Xbksi4vm+MhYq
9I2wsEFWNn3vUgI6ayj5Zay8t4S9sF5McefBXouNlq7RwRhHia8HIXS/EmsZ
WxKkMMrqVdlhqMqwtnDYHY68YVN7M3T6X7qSxByC9c6koxeqRPj2d1xyBtuL
EZ+li/LBe2VY2OOz3lg/hSZ6wNd41YvnetehS+DFXOjNDnByydwpP+JB+N+Y
LVz/8Zoy4sqi8WdZgq8GNRbMfDHteBRsYAD8gw3tkPpqt0riYBww0lNcOUuS
qr0cc3RdWCry9dqiWVhc3HNcQu3s//JBEz5UFC54V6mDfO0FawaUfLQt49G6
gnUwbMcIzC7SjT+5zRLrWxijXku/Tc5dYOSBcT/mlwIJN9aYze21Rv1nlBwB
7f5v+zqzLBAv/eOLQGbgQ9sD2UJa/yzzMU+Hu2cmzWxCQhCfPt9xBz35w417
GPiM/OScE5jn/tTK+xiG7z9tMgJKtDA0TcR8iN/A0NedByW7PO8j/lRt/fn/
/t1Zcv67ZKgX6u3Ip92wiyVyZOZgPMlH9yDg5z+T2qftg/elOvic1CUewh/X
+FZAfq22NO/L23g+KTvfQEJisGeaajHezyv2PBh1SM6S6y6m8+fO8qWs1MWF
ob1sTl6oLx6p3wOugnrZ+GcxqG/kF3FTUZklf16m3gUatkS7MmGlSmZpw+4U
1Kf/KffBkGuZ0Eq5INRLG5gY9awteerTeC2+P/zWDzg7q8Q9c8Qe6+PFU0Ww
7E9Rq5WOC9Yv9tgmEEkdyt+bHInx8aazHf5e+7b63kJn3Ne9znsQF77Cpc83
leYLNRlFMpRwshJDv3kj72qyK4NVhjoG/zh8UG8trueglp8ujDZ+b0P4pnIF
7D6glDrT957+/dGu7eJUTC/bRYH1DoiHjWs6YZ4hcv5yOOL+A3Mb4Zb0zt7E
ehuSv7J34LTHCrnA6DtAyznXS/OwZkxjjaNABur/MWqC8OkMI8wXZcVCGLc5
k1L1vJzmIyom7//Ar88Tdfc8fJCvrJntBLZnM/9t1dREP4abSoTS+M49S7+a
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
        "]]}, {
       RGBColor[0.880722, 0.611041, 0.142051], 
       PointSize[0.0055000000000000005`], 
       AbsoluteThickness[1.6], 
       PointBox[CompressedData["
1:eJwtWHc8Vu8bRkqRb+qLhpI9EoUULfehUkYiGSWZmWXvvSNb2VtmkoxXJCvz
S2Sn7JGMFEpK8jvnOb/3n/dz3vec5zz3fV/3dV33w6lvqWpEQ0VFFUNNRUV8
+53bPaIYVwsxsg+12+4aYZ6/DqpJhGTA9oKDN/muXMZUm/xZh4u8Ab+VqriV
A+NYCjtGOfOeuH63S8gOq58QUn3L9QakSltWj2xwYbWDYt6x044wqhwaWzhd
C53qZyPtXfMhqYGjqEl2GlzfqTmEP4+HNz8EtMO1M4GpRcz746snIC2hU8nZ
2Q1hCt9oNAST0bVU83vQt/pb/stTD04FYbpZ42+g4fS5S1fOBoArc6FceN0W
jBoe/tB59gXO0Q9kfkspgkrzHb/SpJIgf6lbqUNwGhQLeMfiOp6B/7zKyxTB
PNCr9qV2YokFsyq76PcmwyD8pE2w2F4OovfRqv9T4wmlnxqra/k/gru0xMhf
M3as8spOmra6EjA8M6o8LrUJU4XvXJhVr6Pn9y0GQnXdXr5ooMDMet7SfOAW
TKGF7lxily98y2lSOLXLCtzOudDr87+AhxYz6z/kdmLZ9Jd4f0hGge70Oy7X
zna4kuzFVz8Qjta3Z+iG2oWUs0cveqFrpYoKEPtUyDtVEQq/PcyqGjybgb+o
Xzl0yhfa0i9SZO/Vwr6XcwJDpfEQ+cVN2r3gI+g6KLM3nShC9fokxI85jCXt
zgo1QPGzz6WAq+8xxey2NMCjFZ4L/QAWXh5+aZzp8La9PSRC9Dy26CYtkfIq
BvC/i/3XuoA5pHzNV9AIBjt+Xp/kVYFDh4009rc0EPu7E1ZogrHx6ZvtXY+H
8PofAoZH5+Eth1gu77NhWLs+aSRlJILx0+30OGL0BsSJD7ce+LB3qoZzW6P9
Uf0tBIU52hO7KYzApIkjiMIBd6JcPmh/qIFA1kHVIkMzjK5evu6zViwcuml4
JrX/N2z+XhPZ/UUPcvH0bn34BfxOvaIUfi4ET7wgs6Xr8M2fr6qepYjI158b
MtyYb7Ug24/KCPJ9V3Pg9Csz45qVdPj4y8NM25MCDCF60hJjluT6JzKIPLS3
H/SHa6Gx99lbpkAkIm1N1CYCtPEAP7tSYQWMbTNFAkYkfv9tgT9LGjUH6xzJ
9YtfQw01w3rbnAnCn35sGYEjnd88MYDDd1qy6xMY982Y3VIrBmscsH/y6LD0
mVEVSYaHIIo3XHdBN9zcqFc1YQlC6xVxtoIcdwPtqV0VcBgvIFCWoX51bucZ
4yjAy5P8E0bhXPd48VYqH9DHE8h85SWIbHJurBb7wR7f2v8iReoRzj5e9CP3
x5EFItvmG0ua/dDz0lvewvVvj5ebpnTR+msaleD1qzLEfXc8vGT3n3f+rxu6
Xrv4HDWIhCdW54J3KnJgY3WrE5cuvYYeJX0m9m/fIHhfbG9Q+R3Y5v1Y9uE2
CnCxdglncMWi9w/eXgH+tKCi8X0u6P1pbiXg+uBcQnJzFAzzbPNmkf8Agl9n
yuifvwDKykbvu73jkEldtVX1QTHY4w2pw9UD18MvzHBIxaF+r9OhwtiO4U+K
uqP9h7O8xuvdqob1+pN1uz8Kg+ecNXMHDVD9VEfzgY1xTDhi0BoK5cZdmC+4
Qm8i52psvwPiI7HMVii8lpbtzGlC8sPNDKigE35EqYyGVby8nz1YsYRSWjf3
26FAIxTIquXxFozv8Uws6rKQ/X3bGiLS6x19X1wB/HV7fLt9gXKsQ/qfb+6w
oEJk0AQif9q1cJV6gfMsn2jLWgFsGguHLpm4girxt8RdwGnW8Ax9GMpPbVkX
WBMbPqED+G4L5Tb9YZNeakGcPQrwq/Hf+5Pg5NnXqqy93qCIEyLV8So4YSm+
ZeCPMfztdZr9dDIdxBiTLSQs4lA9Xwo1gp5Qp7paZDXCL73iFmx7vnLAPvNs
IPKobrAOPz4OeL9ZKUb1tk8fh4GHG2/3j8egfC/tb4QfdEExd311EX4jmnLh
v0xJg46aIMDD2W5xMgemtu68/DLYAPFJU+4kcJStKEj9CoSMi5SVQ9Ut4HuI
kcenrRD6nGb5nk0uQUSxxuLNhJsovzRbc8Dr6uW996NiEb9p7x5FefDirkXf
a6FU2Ls+9YWvwQXomsaTH+uM4Ys/8kQDxR9xvAmopx6m9MRHQatDdWqK5DSc
oVbyYwznJfM6yoN4STtTC+HLicUOIkQdhfWqI1H8MYFjcBfT7HG56wrZiQ0c
L1snwExpJSw6NhJ0cOLXVl0Ge48fm5v2TnAPJ/gXx0vA8bw9k6yiK9q/THEh
HBNa7GRl9EN9rj86BCb+nNrhqhjio2g/A1go6KmncnIHbpxwfpf/B7ZsidwV
TpFwAReEttFuWNPafWw4xh7xwZZTzTC6xdL32CM3aOQosonL6YbXUTlbZlbJ
+t9ceAu7WMtXejnUIA6H241drNhlPQWOun+iEb/6l6/CwavNodtxPBP1d1Jt
AAHRX7qzM6JIHyRUPcGpo6ysyOM1kS/pEXlF7EB9+Alz2qcgv5NGiHd6A4JL
38fV/baCuv/SG5liebCnTbfqZtW8oIvr4y+H0G7QNeXmTDUJRPvhqh4CCyrF
loU5b0j5mtPErd0F7rnfG8fBDPH5+7Ye+LntTpziijmZf8Mw2PcmYXEPvy3g
cm3FaNwACZ+bfb+sBQOhO9Uhcygv64kPgB8nRLfGUXCRe6LfudkKd4mPZQUE
bXd+pXHOi+AjerrQHigTuCgkZxmA+IZ6RyPYyetPKRcEAkETEY4M2M0fFR+C
L2oiPhBb7gPtFflcCbdwVF9d91Vgzs5f2djlCgR9HazuIHyQhbGeLzhWpx6w
ZKqBhiO8YZxc11C+eeI+gc/2KLFN/H2ovLXjYKq+tVoBrz/il+XXIEs9Itt2
4DHC3zHpeRBveCGyKO+N+EkxuQRuM7TxBtM4w1WcsH+VV5N+Rfwu4jt1Q2/E
Z3UK/rCTIByBHIC/Uykl9B6wFxfgkohK4E652/FAzwEu4QlNUpiGLO25YRre
m6A2mZXYcCsU/DQVxLO2nEL7rWW1AYXJTwJrkz5IB9iicmAv/fU4xVlX9P4K
hXLINd84VBiP9L+9Kqwbso1ZntruCQBenJ6Tz+/HrJxPpk7kpyE/kjdxBBsd
Y4g2fRGJ+H/fZB+YajqcpX0RgfjURqEN8YjKDl+0P9rOFpi3LWNZt30A+OOh
GuEtwM6Kd9hpM+SXVHmegABrWd3eL7bIb/pJlIKas8COpnZ75G9WxvXA7Ij/
1XpZkn9/MX6E8xaURCG2e+j5buPn0FOwV951ygU4i2xMIg8XgGauxFuG10Vo
v0I5O7AFKX5mxZ2+iI+SD1XDA8MvFkJYM4qfuoQGU9qjeWmdLZTcf4wjNNrs
/W4x4Y3wtWnTC16LmmLnn3sifU742AzMfN97nXruggneUDUqeRD7iG5zR5s3
4r9izioYXuuMOZ52n9SjoZuk/rgYoP7zj5vE9TVGZ2RpK1lfLQwGDpUb5sfd
Qvh5FJACCdvZUkY8fJC+ff1JhRFxnemeIfx1fydFFKt+khNlxAQk3roToViD
ObGN1gXxu8CJEMQzZhNO6DufvRDaOy3e5cT5IP5m8m4GpvdKR4D+Ebr24mpC
dYntOIr0g69LDYRd4+L510zReqWuS+AoI14VTRMNeDscM2f6C3/wtCt5aJJ+
stkX6P/U9B2eyUB45xNhw2ZCBL4wbjck42nMAyGL/EwZS2vA2zP94m9fEGxj
aq40DQJbPIEFh5qgtAUnbpfLSB+37w6DX2tY1/m2J8jfBfEnw5WM5LdahwIh
7cCx4VK+OfJ3qxBU3+nKMYh90um95cwfaYJPzsnLw68045I53K8T8exk48D6
6vMDZQ0SUf3mXrfCmboMXebWSMTP87N9UGjzhKJ/hx/xgY9PBoCcy+W2zEiE
l42Mp7D7yXWrwlpngg8vnjwVCx4hFeZBLMmw3K00IZy+FwuoTTgw5JuP+HOD
Zj8W4N62tnX6BvJDCg+z4YNK3ZOEjBDEK80zLXB6h5tkP40Twb+jCYk8WCnr
HtuBfyIQ7zHMfYCx6n+SSlyC0Hohe7dhpak0RWY5SUjv4rx6YA+zdNOQlifS
0yW3GqCle95F1SSD5q37uYHAJd8sXWvoCwnx8fHp8j/BiYFHwGO7LeHHs25V
58HmpIDKGyNPtL9W/mVw0xO7MbZYSuBV0VfqCMbFx5X151Ioys/rC0swKMOX
/uJeJJFPwQAdYWz4wMbX/s3HKF/FMs2g5faz2HU1Dc1nyS4fYNtjSoTKiikQ
c5MQ3Q24fO3PPnHBeBR/Tms3DJz4KnlR0AMIuqJaXgY9B4FPhdwBiN/5dOsg
NmKXy0lzIVIHGPyhde3v2URfQ6SPDE5D8GKjTUn/uC6pr5AJS9/ltQKs9NC8
uMMvHVyVis13jOqSfIDj5+SlhXd295KQPsmGDkFP1XiNwuFM1H/ZYUNQo+LW
PbInGfmH39EzoGqnESMd+IrIz/CMjDVG8MBAyQUUL02bH5zI261yYLWYwL+k
whQ7Nkv9k31T0gP5Cb6YElhOXcu2YdJH+WUwLIWnmzTNTcv3EH4oQrdgxDo4
bOq+HYnjE5mQdi1VTXI2EPnF4cP9EG63fjaxxIL0R2bPYLPYdbnI3hHxR1/R
DJz/PFjgQkfqrcJEPzhoDcryR3iQ/uJgHRCuR/m8Laq/VnsRnHx75iqnaxXi
y9rAHdi6sriBhYgNdOLjnOXX7yDErENh7a9F8SfFLYPOFbFHo6zh5LyAfw65
7Bqc9b+N9C6uIAk81Z7stI7Thcs4/Yj8kwg0VVv3MAfaIJ911mgEuncftbCO
ikL6f5mxBWampufs8TkZ+aU3MSRvxbmSevUxD1RTz/sHfktC9YgZ64fuGrrQ
G4cVkZ+qbD2J/Nj1R1cIPXosqxYAXzlTpTqdrZA/prPIg7AYyMwx9kb8c8uy
BnqcqcNiUp3QPDe6YgCEHVSet0LxXJN8A+cKG567l6UgfOx+lQwxxTutC5Jd
gBiTnDVrEc4yJR1RPudiGkjfbRwCMriAiqhPgFffhVOtghHIL1xo6gPltQ5v
22I75C+6lSlg47ieMtUeAc14eS8Kj4HjcPPDQwfjED5Fe4Zhr0dl8KxmCNqP
yQA/NmXSk/QywA4I+qLPKYR7jX+LX01GkPPIuUKgN+GycGJzQHqwt3gebgo1
vYkU80HnFYuX6kElaH3Y/Ifz/+uFwbIEs/oZcEP1krxBAdZvJtqMkxZIz2Jj
KWCB242ZoWDUbwE6L8FQrCPMqNca+W+7j6nwa9ds+fN2J/T+Ee2n0CDzzHRk
0hPxkVzeK8hni372PigE9Z/4l14wU2YTaWtyQfnJsC8Dj9LMqE0+d1QPucFN
+Bkv0ZXw2A75u8Lvs+C4Leyqj4Atqv+UfgUow796b/ZlI/8z5zkGVIrpjccD
jcj3pWZBA/O3x/3RDijeq+25ICx7cH6C2QThrzAsFfI0U1RbOIxI/JjnQlek
9l9Zq3RCLx2+sm3DLt+RM08otkfr0X15Du8dg65vLbdEejDPw4S1L7a+kVG0
QfwU+KkI4t6n3TxFHYH6/aZLD/Dc0KGy9I5D82r8ygQ4KOMOZtAMBAmBFA0F
p6QM7go9K3S/vmYxMMhG6whKa5E+iMoAPueIsX+0ykZ4/jQ8Ds6EQVGxAlz9
BzsYW2Hx7e1GE293VP8j9NXQsl16y5AjD6mv/spw5+AMphwQRPjhowmUf7EP
rVdf1Ei5I77Rd/0Mkmv1hvkv1ZAf01z1Rnx+vMod9d/2ExQ4rfeV7bhMBDof
SFPchY3Q7Aj2vPwU/V/d8QdolnYsBXJooPqMXIgES2/axvB9nijfHQUV4LZc
dM288j4R70SV8QmMsG9h+BxNxDuRXQ5T9/L33uVOJPictrjkGHbQSvy16j07
xENf+2rBySXrqGycKeKXD48yYaFWilu+7D7yH/cHqDHiuOxGpy58x8eD2dcP
gIZqmaUf10ti3jI1HIA69z8elhv2CJ+9+q/ANYpivCvDGvFJPcs9yKL5Lnsl
rx7117/eG1BU5/791dYDpJ9evQOG9Pp/KUN/pFF/aXBDEEPqh9NvSPxdcH8M
IzLmN1JanVE+t6UmwNA9Th2hK86kXyksgMdGDwxuXzUFwo4ZT2fAJV57moQI
edJ/HkhDvtVQ4TaJ574qYAs/HHFg3gPN9wzWL+G1agxnWL8Xyj/tVAeAUlOf
eoc94jNxxTeQ89bycc/FINKHudih88Tr/EbIv1N9T4PP3WflrtxQI/yGPpNt
IpTrew6eU9YHQt7ebq2H2M0Ij/WTGgjPv8OLQP2A0sLX3Bi0/i3eAcgbyAGf
0+T9XxKDQepxvmeFkinKn49SKcwvLztc+hxMxpPoAzh6juRlPUR67l0xCTfS
hvT38ASia6PBJtjBNnyKld0H9f+/6xQwrLm0NXPUDe3fZpYN41p95p9GsSP5
RfQFpOjgjo9NHfD05dytL4NQ3B5W195C+hS/Jw7w7Nhbq7giv/WFtx2EOQ9/
txi3Qn6nlosCtfkmvflcWmj+1KEtAmER0cO64o4ovjNVCyR/D9mjeN4lbsdq
Qw7JHLMKIu6XqrzPgV0wtfzmf0Mfnff9YagHWsKgbvggPc6O7AH3dyVaP8p0
kV4cM2sD0dJQzrDdfgQeJXmX+TFng1y76Gsa5HnRqWzEowOZdxA+GqMo5Lkx
vz7C3/7wNljkePXDRCmS1I1XibByaYOxh+cuwvu7+XgwKZmzLbuoTp4LRmXA
1enOma4X1oi/PlEa4KSga7XCUDjqR8k7SyDfkzVc7hdAzFO3E6JPY0g3603Q
/OI8kov0wvW+I5qXSh6UQ1a+D3Yh4SHp5yva4M79K3qic3rofvX4f7BboSz7
L8fYIT9RJtsLCve+rbTGXyX9zc/H8GTC1bSqzhPVj8LXDeomfs+ZnI2RnlFn
5IJ2fISZoK02qsffqCRYdehNOu+nj+Z15s53cLXre32KxHFyXj8aAFf9C0ua
OxzQ/4q2/SA8d7Qzgl2E1FmrPcAfEyQ85WuF8piNvYOX4DPRbGhKzhnRqRBq
8nznVzkL8lyovw2OWbc9ELM3J/WfOQ3s6rb99H+mRp7HP44Cy5cckw3Rdgif
PTFFwOKtvhAcaErifzoZfsv5tl+h00X9WEqbBUphqr7xzDYoH/3eDNh79Qb+
y1y2aD5ZWFyE2xudgn0PDdH9J8bKQPx6lIySpB2apxlK/gOKuUUZO+5zif5o
dKoAR2kHO89Nf1TvIhcK/A+dH8w2
        "]]}, {
       RGBColor[0.560181, 0.691569, 0.194885], 
       PointSize[0.0055000000000000005`], 
       AbsoluteThickness[1.6], 
       PointBox[{{964.643818927712, 168485.88}, {1967.134740762231, 
        31611.724}, {191.103488191875, 3350.377}, {400.445767896802, 
        130860.578}, {359.7478, 8263.137}, {496.57118015983, 136508.237}}]}, {
      
       RGBColor[0.922526, 0.385626, 0.209179], 
       PointSize[0.0055000000000000005`], 
       AbsoluteThickness[1.6], 
       PointBox[CompressedData["
1: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
        "]]}, {
       RGBColor[0.528488, 0.470624, 0.701351], 
       PointSize[0.0055000000000000005`], 
       AbsoluteThickness[1.6], 
       PointBox[{{61.605999993839, 986.321}, {61.605999993839, 
        986.321}}]}}, {{}, {{{
         Opacity[0], {
          RGBColor[0.528488, 0.470624, 0.701351], 
          PointSize[0.0055000000000000005`], 
          AbsoluteThickness[1.6]}, {
          RGBColor[0.880722, 0.611041, 0.142051], 
          PointSize[0.0055000000000000005`], 
          AbsoluteThickness[1.6], 
          TagBox[
           TooltipBox[
            PointBox[{2374.104157357651, 3.183180704*^6}], 
            StyleBox[
             PaneBox[
              FrameBox[
              "\"Carbon-Scope 1  (tonnes CO2e)\"", LabelStyle -> {}, 
               Background -> None, ContentPadding -> False, LabelStyle -> {}, 
               Frame -> True, RoundingRadius -> 4, Background -> 
               GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
               BaselinePosition -> Automatic, LabelingSize -> 
               DirectedInfinity[1], StripOnInput -> False], FrameMargins -> 
              0], {}, StripOnInput -> False]], Annotation[#, 
            Style[
             Pane[
              Framed[
              "Carbon-Scope 1  (tonnes CO2e)", LabelStyle -> {}, Background -> 
               None, ContentPadding -> False, {
               LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
                Background -> GrayLevel[1, 0.65], FrameStyle -> None, 
                FrameMargins -> 2, BaselinePosition -> Automatic, 
                LabelingSize -> DirectedInfinity[1]}], FrameMargins -> 
              0], {}], "Tooltip"]& ]}}, {
         Opacity[0], {
          RGBColor[0.528488, 0.470624, 0.701351], 
          PointSize[0.0055000000000000005`], 
          AbsoluteThickness[1.6]}, {
          RGBColor[0.880722, 0.611041, 0.142051], 
          PointSize[0.0055000000000000005`], 
          AbsoluteThickness[1.6], 
          TagBox[
           TooltipBox[
            PointBox[{8496.600526957547, 1.1220570892*^7}], 
            StyleBox[
             PaneBox[
              FrameBox[
              "\"Revenue (USD mn)\"", LabelStyle -> {}, Background -> None, 
               ContentPadding -> False, LabelStyle -> {}, Frame -> True, 
               RoundingRadius -> 4, Background -> GrayLevel[1, 0.65], 
               FrameStyle -> None, FrameMargins -> 2, BaselinePosition -> 
               Automatic, LabelingSize -> DirectedInfinity[1], StripOnInput -> 
               False], FrameMargins -> 0], {}, StripOnInput -> False]], 
           Annotation[#, 
            Style[
             Pane[
              Framed[
              "Revenue (USD mn)", LabelStyle -> {}, Background -> None, 
               ContentPadding -> False, {
               LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
                Background -> GrayLevel[1, 0.65], FrameStyle -> None, 
                FrameMargins -> 2, BaselinePosition -> Automatic, 
                LabelingSize -> DirectedInfinity[1]}], FrameMargins -> 
              0], {}], "Tooltip"]& ]}}}, {}}}}, AspectRatio -> 
    NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
    AxesLabel -> {
      FormBox[
       TagBox["\"Revenues(log)\"", HoldForm], TraditionalForm], 
      FormBox[
       TagBox["\"Scope 1 Emissions(log)\"", HoldForm], TraditionalForm]}, 
    AxesOrigin -> {0, 0}, DisplayFunction -> Identity, 
    Frame -> {{False, False}, {False, False}}, 
    FrameLabel -> {{None, None}, {None, None}}, 
    FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
    GridLines -> {None, None}, GridLinesStyle -> Directive[
      GrayLevel[0.5, 0.4]], ImagePadding -> {{All, All}, {All, All}}, 
    ImageSize -> {694.21484375, Automatic}, 
    Method -> {
     "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
      "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )}}, 
    PlotRange -> {{0, 4868.653650401455}, {0, 275513.36}}, 
    PlotRangePadding -> {{
       Scaled[0.02], 
       Scaled[0.08]}, {
       Scaled[0.02], 
       Scaled[0.12944271909999158`]}}, Ticks -> {Automatic, Automatic}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"D\"", "\"E\"", "\"B\"", "\"C\"", "\"A\""}, "PointLegend",
       DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.0055000000000000005`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.0055000000000000005`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.0055000000000000005`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.560181, 0.691569, 0.194885]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.0055000000000000005`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.922526, 0.385626, 0.209179]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.0055000000000000005`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.528488, 0.470624, 0.701351]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm], ",", 
               TagBox[#3, HoldForm], ",", 
               TagBox[#4, HoldForm], ",", 
               TagBox[#5, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               
               RowBox[{
                "False", ",", "False", ",", "False", ",", "False", ",", 
                 "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.879087215231567*^9, 3.87932534713229*^9, 
  3.879325429568788*^9, 3.8793546082748003`*^9},
 CellLabel->
  "Out[497]=",ExpressionUUID->"a5c376e7-2ee8-49a5-805e-f6e6701af04a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ListPlot", "[", 
   RowBox[{
    RowBox[{"finalds3", "[", 
     RowBox[{
      RowBox[{"GroupBy", "[", 
       RowBox[{"Key", "[", "\"\<Ratings\>\"", "]"}], "]"}], ",", "All", ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Log of Revenues (USD mn)\>\"", ",", 
        "\"\<Log of Scope 1 emissons (tonnes CO2e)\>\""}], "}"}]}], "]"}], 
    ",", " ", 
    RowBox[{"AxesLabel", "->", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Revenues(log)\>\"", ",", "\"\<Scope 1 Emissions(log)\>\""}], 
      "}"}]}]}], "]"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.8790864776930027`*^9, 3.879086602122036*^9}, {
  3.879086786734255*^9, 3.879086805076805*^9}, {3.8790868864451942`*^9, 
  3.87908688671143*^9}, {3.8790869912407513`*^9, 3.879087038984003*^9}, {
  3.8790870844861183`*^9, 3.879087107213188*^9}},
 CellLabel->
  "In[498]:=",ExpressionUUID->"ab8da2c3-9be2-40c2-9160-36c02e5f30bd"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{
       RGBColor[0.368417, 0.506779, 0.709798], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[CompressedData["
1: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
lfsUhY5rYp+ziyuE2BY7/+7vbWwMP+RdcxljoGm25QKrg3QYNGwOOxQowi/R
xhELG4KHP5zSrvHi4/jL3/JeisTr7Kua99pJjOKNK97b9BD8dS2VfpLo11cG
n869GyH823n2Cu/pWnjlFumdqUpHRPZYlm4CHztNNJcYjLHw7d/g3m+e2oi2
uCA+SvDujLEP1Vr3uDA/s+B8+TEO3g+FtFaqieBglXbE5icDp/XfBW6rE6Ey
4obwxBAfP/u+G5xv10DhkaY/YlsqBm4scaqq5eGPc7Buiz4NVqRRz94MARql
N92XsGehjd9pepcnREXJrVq9MYIfruYFZZ3i4wib/Nn0Aweufhon/Ub18H5Y
XuWcKR1FarRrPxbwMfe+7cnKnXRslfTA+5daaOwytDMjfEmwKdVqvxsf/laO
ZqlXxdgUVPnpoYseLMubp3aHUWG1bf+PAF8hvDrXv7POpaLudWBneqwASgtM
UowbKXBMiTnw6TAP4ger2nYf48HR0Mjhm5km7LUCk//4cLHMKyaU/0GMsoex
x1fsIGFBwIdB81PEnPxIuQpHPm7+9TwV66+JHQmT23fG0kH+b/3q0CNCrJjl
oXMhWw3RXXreQyVs7HrT2i8kvDbGdJZdwiEm/LjxaYnTmMjv/q1PUhYiZjH9
t1IPse/H5lXv4RqCW713LOUeDQyrtRe9eQSHuh++OaA/Aw9exlF3K1HBy6/s
/fCWjxKvGR8XZWljvm4AaaejKhi3E6+efELCvHv15y6uZGFFn1rORa4Qd1Yw
/bz8uQgUylgdLRHj0XCm6tAqVZjWfQ2/8ouJXarnahIaaPB+cu3iqz98fGMk
WTJlObD7leK67Z0YKy2tLg0+4uCbZdvlEglN7NPYojFGcPIOls4K80u6iGcw
H7hQGVhDHU+wnybEIfIwJ504vz3nfq3+Xq2LnxkTLYWmTOj3tQwl2enj4NZ4
WrkVC+Ppz8qfHNLEf/tCn+zroeK5ll5EgI0A90pX2ecYsOEeo2H9r0AIR4Wu
+brDTNzc3Stj90ATnuOR6Y8usdAS2KFYT9cA3U30+D+yCIHp5wrOftGBt5e5
bM06VSiGXvD7RDxXu/32K0RZIunIrm/6h7Xx4OuShozHDJQdStdqadfCP4VH
WT/dGeg7rPHz2jMh5Coat4xnUFDlMcwwey5Czx+6TpQmB5dWb4677ayBicw1
x5y3U0BdbdDqRsz7LI671coCEirbH9/YlMWE86WbAkYFG6te1hiENGuj5VyW
IvZRkWf1o9+FmI+XZg5bxNEspFD6D96g6eLLy6alI70U+JPUKqKMKEhK9Zkz
TcDEyuv9nuwKESh6cb9f13BAniZNv+Kshe4ZZ+bvZhP7Y2i/5mcBH4cCsp6+
TqQi7bFOVUOCFuZn/lZ4PakORe9c98d0IQoOOkw7tpoP9RO9msc3aOBO+r4s
k0YuHtWf625YoYFa3yrzFyup+CnxvPkokVM8m8R0jhcD2b4WP62EQiRSbEIu
9DLQHHSEuvqYLkr/XpOdPyWAzX9DsaettEFONVRHOQdTaguCzzqK0F/xsVV9
KxvMP/edesq14eEaYMs4REGjk1Xus38ifJZaR7IpUIdtgULn12YRIusuqxgk
CtCyuMJNg+hfzUC3fltVNiIvbW0Km6sJ60j5ic+FZFhaeS9YTviA84eLhSMn
OMjWHzXbvVIEdSX5B+0KTDxMitR/dE+EZQn+nJ3LmDAulWyzjOFA5vkVDtmB
jrLg8KTvND5CCy2ppVVkbKmVGbQqZiP53fqTBvb/60e/FPd2MS6aCWflflRH
4qwjVp1neNi3vuX5lygyKgwz1ertCI74NstqMlMFzpeVToV8F2KljuqkxDUS
wgPfrmdmsfHdJOa+hzaRL9GXz9+dwcKzu316MTNouJzSTbdy4eFeVxz9xxIu
EkJC/8b9EeLKfstwty/q2P3ffLUbG/jwyO1Nrtgtg5tPLot3PqRCplEu448N
DfzkvuEIsQg5jDOudhUcPA8WxlWUCdD0qXjV330czFeevnZpti5sdcRSEilE
Xjbf5ybNJ/piXdHfha+oiPz3PWrLTiH072b0uBIc86L/dHLkWg2CY26qN1Sy
8PVw3Ocpa8J3Ot3TL6dwsKZV3+n8ERKSMtV08qPJWOnBPXnck4ed02foVZvw
cGd6bJg1QwPZxfpLW/LUQNubGnZ+MQNyu6z2zg1gwLh6yw3XLBEUeu8DT9Vx
yqvU3s+bgXy3g+NHc2jYqhx3544MGS71A3NfP6bisWHA0g13hdA9pLxiUSkF
cxamuaxkCdHqF4QTMxm4+V3bumWhPo4NtcjvvcdAW0jBxPotWvjeYruynaEC
s5vpdgsfsdFooZY3by8Lx810fl4j/LJo68eF9kR/7/87W/BfJw8im13lC9hM
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

        "]]}, {
       RGBColor[0.880722, 0.611041, 0.142051], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[CompressedData["
1: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
hO4+qhrVkosWpyfNNytJ+G3rnb7sLQcLGmJ7qzNJGBqzooHoH4nWVl8/JaJe
gUXpE6kifIzW/iSZzcX1zoyt1GMidE0r4QQR9VzNFI53HxNjeO2KdbGlfLi8
SDfhlhjDZe6WhrgnUyBbTfL0kmHgjIe78iXCl0p65Z6+X0TkYY8ztvFlNCLT
yQ1aE3z/l5NXfbeHhMWTjkfaOHwIu869CfpEhgq1ZdbPSl1cWpTYcktKRa4o
vj19LhdXytzbt6Uw8DX59K5NmiKUOMprv7tPxiWrht6kMB6++m6/ICqhomKf
r5ZrmhjbL/t2dpnSQXr4b+hNrggGnJLGySoavpHH9ylJBRgqEu5ZPEDBLsPt
yVkVPByIlmYMP+GDtvo3OWC/FO3nvDoERRT8/vV0Z/8dCbrzx+YXcAXYO+R5
zTpSghlDxxL+kEnIMNL6MV+Lg5EHtnd6k0gYrlyzuuIFkQsu+tNCqyiIm+uk
q1IkwtN+zVnhziykHDlzyZ7IQ9fWvjBxJHLxX6Xob80CNnRU9p7y9KJB5exu
+kkzHnSXujTk0zi4OrTT8ihx/pLooHnBHG1Yxl2Qj5dThbr/jO/3I7Rwepa2
gYcdA7d4DfzFDhS8ya+s65jKg+ydlfPn2tPxszxnT9g4HzXa2wLvfKCiJyK3
4Ki9Ht6NbNTeHUjBrHuXvoVtEOBYaGjKdjcOSqnO8+xncRCvfSTUfw4NJ9fs
jY3XFqAkY5H+9Xxi//hb9BfHCXCyoTO/xZqJmOe/cwx0xLCd/yvavIoJk8vt
YVASwWH11ub/zKjQ9i+y/u7AR+IGcVjjABOpublJk00iFNivaL25lo0Xh9SL
XC+L0GPmOVxiycTk9NRnQqERVicwlqyZRkVywJKV+Ud5uCF41j/vKxMeYwEH
7sfyYNZYYrUqnIorrZbrHXrEuHDmZ+7LMDpcZ7SXlNgJEOLl/reOTcPIlLID
42YaiJMp3b9jFw31pF3kbcuJOic1rg2tJkOuybZ7lQsfw61PnLOViPukuh5l
RfDxnGz5UHCOgpBPm2kqkRxwLO7OUhiiouNP/ZlEZx6KFPdkxQ7TcKHL7dF4
OeGJZefzTy1ionjJNu9PX4XIMvxRlmxJg0hUYi9nQeTAQ2z3s2nEqM0xmlae
rI/dYavLYUzFl3eWM/UeidHa/7mwnPC9XPO0l+opfMxyn/PVpI6LzxF+O9lv
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
+fgf5KyHSA==
        "]]}, {
       RGBColor[0.560181, 0.691569, 0.194885], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[{{6.871758933648203, 12.034607227043702`}, {7.584333316684701,
         10.361283343425054`}, {5.252815104307661, 8.116828155800697}, {
        5.992578346345265, 11.781887745348103`}, {5.8854032303908905`, 
        9.019559576498388}, {6.207726837076337, 11.82414023610885}}]}, {
       RGBColor[0.922526, 0.385626, 0.209179], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[CompressedData["
1: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
eHbHSekHyeBJVb07oUUGa/HqbfOXcfA/DUxzEw==
        "]]}, {
       RGBColor[0.528488, 0.470624, 0.701351], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[{{4.120759268293545, 6.8939818594295215`}, {4.120759268293545,
         6.8939818594295215`}}]}}, {{}, {{{
         Opacity[0], {
          RGBColor[0.528488, 0.470624, 0.701351], 
          PointSize[0.004583333333333334], 
          AbsoluteThickness[1.6]}, {
          RGBColor[0.880722, 0.611041, 0.142051], 
          PointSize[0.004583333333333334], 
          AbsoluteThickness[1.6], 
          TagBox[
           TooltipBox[
            PointBox[{7.772375448410054, 14.973391476251903`}], 
            StyleBox[
             PaneBox[
              FrameBox[
              "\"Log of Scope 1 emissons (tonnes CO2e)\"", LabelStyle -> {}, 
               Background -> None, ContentPadding -> False, LabelStyle -> {}, 
               Frame -> True, RoundingRadius -> 4, Background -> 
               GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
               BaselinePosition -> Automatic, LabelingSize -> 
               DirectedInfinity[1], StripOnInput -> False], FrameMargins -> 
              0], {}, StripOnInput -> False]], Annotation[#, 
            Style[
             Pane[
              Framed[
              "Log of Scope 1 emissons (tonnes CO2e)", LabelStyle -> {}, 
               Background -> None, ContentPadding -> False, {
               LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
                Background -> GrayLevel[1, 0.65], FrameStyle -> None, 
                FrameMargins -> 2, BaselinePosition -> Automatic, 
                LabelingSize -> DirectedInfinity[1]}], FrameMargins -> 
              0], {}], "Tooltip"]& ]}}, {
         Opacity[0], {
          RGBColor[0.528488, 0.470624, 0.701351], 
          PointSize[0.004583333333333334], 
          AbsoluteThickness[1.6]}, {
          RGBColor[0.880722, 0.611041, 0.142051], 
          PointSize[0.004583333333333334], 
          AbsoluteThickness[1.6], 
          TagBox[
           TooltipBox[
            PointBox[{9.04742142447688, 16.233259338404327`}], 
            StyleBox[
             PaneBox[
              FrameBox[
              "\"Log of Revenues (USD mn)\"", LabelStyle -> {}, Background -> 
               None, ContentPadding -> False, LabelStyle -> {}, Frame -> True,
                RoundingRadius -> 4, Background -> GrayLevel[1, 0.65], 
               FrameStyle -> None, FrameMargins -> 2, BaselinePosition -> 
               Automatic, LabelingSize -> DirectedInfinity[1], StripOnInput -> 
               False], FrameMargins -> 0], {}, StripOnInput -> False]], 
           Annotation[#, 
            Style[
             Pane[
              Framed[
              "Log of Revenues (USD mn)", LabelStyle -> {}, Background -> 
               None, ContentPadding -> False, {
               LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
                Background -> GrayLevel[1, 0.65], FrameStyle -> None, 
                FrameMargins -> 2, BaselinePosition -> Automatic, 
                LabelingSize -> DirectedInfinity[1]}], FrameMargins -> 
              0], {}], "Tooltip"]& ]}}}, {}}}}, AspectRatio -> 
    NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
    AxesLabel -> {
      FormBox[
       TagBox["\"Revenues(log)\"", HoldForm], TraditionalForm], 
      FormBox[
       TagBox["\"Scope 1 Emissions(log)\"", HoldForm], TraditionalForm]}, 
    AxesOrigin -> {0, 0}, DisplayFunction -> Identity, 
    Frame -> {{False, False}, {False, False}}, 
    FrameLabel -> {{None, None}, {None, None}}, 
    FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
    GridLines -> {None, None}, GridLinesStyle -> Directive[
      GrayLevel[0.5, 0.4]], ImagePadding -> {{All, All}, {All, All}}, 
    ImageSize -> {773.421875, Automatic}, 
    Method -> {
     "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
      "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )}}, 
    PlotRange -> {{0, 12.102410851054422`}, {0, 18.122905982319217`}}, 
    PlotRangePadding -> {{
       Scaled[0.02], 
       Scaled[0.08]}, {
       Scaled[0.02], 
       Scaled[0.12944271909999158`]}}, Ticks -> {Automatic, Automatic}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"D\"", "\"E\"", "\"B\"", "\"C\"", "\"A\""}, "PointLegend",
       DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.560181, 0.691569, 0.194885]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.922526, 0.385626, 0.209179]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.528488, 0.470624, 0.701351]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm], ",", 
               TagBox[#3, HoldForm], ",", 
               TagBox[#4, HoldForm], ",", 
               TagBox[#5, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               
               RowBox[{
                "False", ",", "False", ",", "False", ",", "False", ",", 
                 "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.879086506557887*^9, 3.8790865481112137`*^9, {3.8790865808356113`*^9, 
   3.879086603495572*^9}, 3.879086805954302*^9, 3.87908685078435*^9, {
   3.8790870243427973`*^9, 3.8790870397306223`*^9}, {3.8790870848904448`*^9, 
   3.879087107916469*^9}, 3.879325348781508*^9, 3.879325431149507*^9, 
   3.8793546136515303`*^9},
 CellLabel->
  "Out[498]=",ExpressionUUID->"1efbee8c-7372-4642-950b-e9b42a1a08fc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ListPlot", "[", 
   RowBox[{
    RowBox[{"finalds5", "[", 
     RowBox[{
      RowBox[{"GroupBy", "[", 
       RowBox[{"Key", "[", "\"\<Ratings\>\"", "]"}], "]"}], ",", "All", ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Log of Revenues (USD mn)\>\"", ",", 
        "\"\<Log of Scope 3 emissons (tonnes CO2e)\>\""}], "}"}]}], "]"}], 
    ",", " ", 
    RowBox[{"AxesLabel", "->", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Revenues(log)\>\"", ",", "\"\<Scope 3 Emissions(log)\>\""}], 
      "}"}]}]}], "]"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{
  3.87908698238165*^9, {3.8790873957890177`*^9, 3.879087402409729*^9}, {
   3.879087548263501*^9, 3.879087555863674*^9}},
 CellLabel->
  "In[499]:=",ExpressionUUID->"29d3a312-4370-4946-bf15-97af67597887"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{
       RGBColor[0.368417, 0.506779, 0.709798], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[CompressedData["
1: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
QPW4R9ScHi1ALxqbAsOBFUACqzovZ9YlQCaHQhA=
        "]]}, {
       RGBColor[0.880722, 0.611041, 0.142051], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[CompressedData["
1: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
        "]]}, {
       RGBColor[0.560181, 0.691569, 0.194885], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[{{6.871758933648203, 11.2284546708405}, {7.584333316684701, 
        12.077200882805965`}, {5.252815104307661, 9.627750915102546}, {
        5.992578346345265, 11.445322466447927`}, {5.8854032303908905`, 
        11.548907545178013`}, {6.207726837076337, 11.627315765136142`}}]}, {
       RGBColor[0.922526, 0.385626, 0.209179], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[CompressedData["
1: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
        "]]}, {
       RGBColor[0.528488, 0.470624, 0.701351], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[{{4.120759268293545, 9.403959124470726}, {4.120759268293545, 
        9.403959124470726}}]}}, {{}, {{{
         Opacity[0], {
          RGBColor[0.528488, 0.470624, 0.701351], 
          PointSize[0.004583333333333334], 
          AbsoluteThickness[1.6]}, {
          RGBColor[0.880722, 0.611041, 0.142051], 
          PointSize[0.004583333333333334], 
          AbsoluteThickness[1.6], 
          TagBox[
           TooltipBox[
            PointBox[{7.772375448410054, 12.480797080474183`}], 
            StyleBox[
             PaneBox[
              FrameBox[
              "\"Log of Scope 3 emissons (tonnes CO2e)\"", LabelStyle -> {}, 
               Background -> None, ContentPadding -> False, LabelStyle -> {}, 
               Frame -> True, RoundingRadius -> 4, Background -> 
               GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
               BaselinePosition -> Automatic, LabelingSize -> 
               DirectedInfinity[1], StripOnInput -> False], FrameMargins -> 
              0], {}, StripOnInput -> False]], Annotation[#, 
            Style[
             Pane[
              Framed[
              "Log of Scope 3 emissons (tonnes CO2e)", LabelStyle -> {}, 
               Background -> None, ContentPadding -> False, {
               LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
                Background -> GrayLevel[1, 0.65], FrameStyle -> None, 
                FrameMargins -> 2, BaselinePosition -> Automatic, 
                LabelingSize -> DirectedInfinity[1]}], FrameMargins -> 
              0], {}], "Tooltip"]& ]}}, {
         Opacity[0], {
          RGBColor[0.528488, 0.470624, 0.701351], 
          PointSize[0.004583333333333334], 
          AbsoluteThickness[1.6]}, {
          RGBColor[0.880722, 0.611041, 0.142051], 
          PointSize[0.004583333333333334], 
          AbsoluteThickness[1.6], 
          TagBox[
           TooltipBox[
            PointBox[{9.04742142447688, 13.92158261771455}], 
            StyleBox[
             PaneBox[
              FrameBox[
              "\"Log of Revenues (USD mn)\"", LabelStyle -> {}, Background -> 
               None, ContentPadding -> False, LabelStyle -> {}, Frame -> True,
                RoundingRadius -> 4, Background -> GrayLevel[1, 0.65], 
               FrameStyle -> None, FrameMargins -> 2, BaselinePosition -> 
               Automatic, LabelingSize -> DirectedInfinity[1], StripOnInput -> 
               False], FrameMargins -> 0], {}, StripOnInput -> False]], 
           Annotation[#, 
            Style[
             Pane[
              Framed[
              "Log of Revenues (USD mn)", LabelStyle -> {}, Background -> 
               None, ContentPadding -> False, {
               LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
                Background -> GrayLevel[1, 0.65], FrameStyle -> None, 
                FrameMargins -> 2, BaselinePosition -> Automatic, 
                LabelingSize -> DirectedInfinity[1]}], FrameMargins -> 
              0], {}], "Tooltip"]& ]}}}, {}}}}, AspectRatio -> 
    NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
    AxesLabel -> {
      FormBox[
       TagBox["\"Revenues(log)\"", HoldForm], TraditionalForm], 
      FormBox[
       TagBox["\"Scope 3 Emissions(log)\"", HoldForm], TraditionalForm]}, 
    AxesOrigin -> {0, 0}, DisplayFunction -> Identity, 
    Frame -> {{False, False}, {False, False}}, 
    FrameLabel -> {{None, None}, {None, None}}, 
    FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
    GridLines -> {None, None}, GridLinesStyle -> Directive[
      GrayLevel[0.5, 0.4]], ImagePadding -> {{All, All}, {All, All}}, 
    ImageSize -> {772.37890625, Automatic}, 
    Method -> {
     "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
      "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )}}, 
    PlotRange -> {{0, 12.102410851054422`}, {0, 16.71722001302866}}, 
    PlotRangePadding -> {{
       Scaled[0.02], 
       Scaled[0.08]}, {
       Scaled[0.02], 
       Scaled[0.12944271909999158`]}}, Ticks -> {Automatic, Automatic}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"D\"", "\"E\"", "\"B\"", "\"C\"", "\"A\""}, "PointLegend",
       DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.560181, 0.691569, 0.194885]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.922526, 0.385626, 0.209179]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.528488, 0.470624, 0.701351]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm], ",", 
               TagBox[#3, HoldForm], ",", 
               TagBox[#4, HoldForm], ",", 
               TagBox[#5, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               
               RowBox[{
                "False", ",", "False", ",", "False", ",", "False", ",", 
                 "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.879087396627099*^9, 3.879087403486207*^9}, 
   3.8790875567112722`*^9, 3.879325351049676*^9, 3.879325433553246*^9, 
   3.879354620093693*^9},
 CellLabel->
  "Out[499]=",ExpressionUUID->"d0aa6e40-ba1d-45bf-814b-53c1ea41dd9c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"finalds6", "[", 
    RowBox[{
     RowBox[{"GroupBy", "[", 
      RowBox[{"Key", "[", "\"\<Ratings\>\"", "]"}], "]"}], ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Log of Revenues (USD mn)\>\"", ",", 
       "\"\<Log of Carbon Intensity Total (tonnes CO2e/USD mn)\>\""}], 
      "}"}]}], "]"}], ",", " ", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Revenues(log)\>\"", ",", 
      "\"\<Log of Carbon Intensity Total (tonnes CO2e/USD mn)\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.879156155587347*^9, 3.8791561790918627`*^9}},
 CellLabel->
  "In[500]:=",ExpressionUUID->"cf066b86-a878-4df9-906c-01dfabdcbea6"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{
       RGBColor[0.368417, 0.506779, 0.709798], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[CompressedData["
1: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
/TA4dus8VVuA6+nRNamGRN57o2aX+4lIvXjDssDrcJwQztR/0m94XEx9YxL3
e58qyTdiinUnwjyEEA+L3K+cpIQF1UFRn9naSBGVoZVKB+NTn/EhBz4Zr8se
89NlJsjjxObS1HlDDHjM3f6qV5uDa397nFcQ31+1dtgvw0wF2ZoDZ6ZeUoGU
9a3Y6UaqCNy+4aWFtgLOrbkd0EYj6iXiEp2xVRGx6mxNx1sifHm8NeueHwcr
ZRblLnnMw5LuVYZaFgzMc3FK0cxikM9XmO3m37SDAkrftAqjGDaGpRed9ejX
wksf3XO2t5lgqlwbolNVkUz911v3gIbnh+K5fYQ+cdJQTl2yngZzFjNLmsBT
K7G8N5JlasjtL6ge2SjCnrkKiw30BBjWubo6REaF9DeL/dMkiwuEpN/wyf8e
zCT8j7Yc1TGxmIMHx4MH2v5xYD97Ua3kBSVIzfjoeU6Nj8+2NVuyZ7Ox9M7V
MeoLIv6xsp/Mm1iwKlqm9bGKj9GgWd7xZyhY/WIixWE6H4dT5xZ37KHidN3b
MQUZDoxje0/FxyvCanSO14VFXBTHPdn3hcAnsZ1L1G03Enps0fnqrmI6UOWs
51XHgXQy+0pnNw3fLlyMkH+sgrHoql387Sr47Vg80YDwm3zO1/b4BAqmvyiK
P+MgRN4lW/UW4vc1dp+z6j+IoGlwdMmVnXxMvhb35qI7lcDnr4PpDUq4vkap
9v58OnJMeca/8unwWJln8SiChWnPzshk0rho0++v1KhjkvG6KvWt0pDwu/9d
5yxX2aE3l0VeJ/3rc2TeYZL6ILjxYtzhk6p4eycl+9QUedS9VxgcWEjoYfdP
g+1jcnCxadBaQeDzoGCyd6qfLDoNd1lOKuFj4cfCUNd1TIQvlndqKCXWs3L4
QewpGlz75V8vrFHDp4jIs8Vb/v/1jozF7mMsLsnXG6ONygY3CrHKz2t4s488
GgxsjG0juPhB3e7SNJeJX5qrBqztGdiS/f7gkhUEHz8blPVQUIXJanfnCyp0
FK5a9Ma+fVyfvdD/dPb1gCrJTy827duaRuUivyiSHeXLgvd8HVP9IQFUgiZN
Fm7jIso6Q+sIoXeXm55iLXGTg2Wy8bnSoyIM+BscdCD4wtk26aB9Dw8Nl3sP
fdRn4kHwNY0TfWpoVBLYjF0gdP7Bhr9aDmxknHup7OpCx183/ynNUznYy7pa
+fEV4R+kVt8VcxKQfH27+HqN3hAbMmnvOh/NYeCgkPnZ7J0I+2N2LkkWCvCm
X5Zy1owL1+4Thy4bUTDrrsPJB95c7JpgLYzfwkV92wxHc8IvqaYMdgzpUuFl
62KemK8F+r475p/U6LApbRzbHUjooebwqMexBD60rnhtl8Um8VLReH6CSf24
Xta6t/jD7qOq5OdOk3zj/xJ16x0pa7srnImb96OPLdrJwB+ztUtuZ7DQ2pWQ
Dxc1lL1jhR1+T8XO46PbvKO5JL4tmrZZN+M8DYd7bUp2HaTD7+Xbbo1mBn4y
DVietyjYoRKTFCvBJ/Hz0DzuoGK7ChZGXzIZXa0JlcqQoYQ7436Y5X6gqHeq
HOacOiLqi6RCNedBx7tXatB0Oyr1PYUJoyk+DG8XgleUygYCtytj9p26sxes
BHBdccBtWwodtxbxd3h4qcDSzfVi4X3CD/enUfsWU2FX+2dyXgMLftSz1cef
c8CwPGOfNYmO77w4G7404Z/lSvtntxO8bmN78Wc54WusFtHyk9gI1V6rPTRD
hO6/C6YWygoQw+PfW8/mIWiFdsUafxYimf2ilO3j84We1OHmq2Z80p9FrIvh
lNoKsPKSuJ7+ZQ5mhgY8DCWes7GuNyQ0mfBJJYudMvWF+LLR+G3DZjZc5NuM
pvTzsYIrO6bmwcKWP/tSyi8K4Kf4uVXqLA/cTZpVM5ma0GP0cfbvpWOrh6V0
9XIqfMxfXqgdpeCj07ZL0BChauUniuQJDu59NX2eWsWD76zmJbkSPPyTL0/v
cefB7c60nLERGmRu16/9k8rCQgOPzfsmcdH+l6u7X0eE3Vr3DE2sORhOW3rU
bRvh9+MNnj9m0jFN5G5rRej6445Rwp/LKXC7WKTOuy3E78yHkkPmXDSfTVdA
KBtzk9r0Q3L5eGbuvFYrSgDbvHvvOlL5+PKsYcEA4XvFT72pcYAi4hK3T5dQ
52PwzANjmysssPQODzZVi0CzTaiPNGLim1yy0W4hkZdXM0/NbKch0if9UVPs
uP4yShuUbxql4z3LZq3yOzZyI5wlji5Rg9Y+7T20xxTcSglNn1+vQsa7xrPC
8imhA/6rd1X72BSRBw9hh8/5FfcyEMuy35vRwYPjOrv3e5MFKBm5LG00po7I
aJU7s32pYCbOoKNUBH+/oLh8TSa6b79/S18nxETazxepBL5s3uDjwItkodwy
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
fN7+7qCnmg8bO/230O/nM+GWnttpGcYl6+Vh5gqXPH8GyR8eld/eWJpKk/MY
9urJvyUD+eTnsWlJgevTqWDnlX1VXcSC/tSjli9W8xHcpWdyqpao++TjzhNq
6OTzO09Hifv18cn7VWi5mn2bwIGx/ytsjqWAsrBvyU8dASxu+m+8Q/iu5mfS
QYpMBvn33+pmhmkYEO8fmbvROZYLu3D9tsZzhI/a+FTazo4Dv8I/WRfpDLLf
blpGpu+8Ob6+b2V33zTeUYHhXkfW8UlM7Fy7fM7nlxxyPZ947mJ/To+vjzJ1
1o/bf3jk9bHEwNL6WUzyfRwe/lm32nz8/r57OBd9Fo3jYcseu7VPSvjYREs4
U6XAxK7KwJ/v/neuc6fjCgQwUVO+Y/pNcw40a7nr7mjJ4VrIhaSouVQw/Uv8
rxB+5vTuTclnt8pDythSvd+fArGPskpf2DTEUB+ywqUo2Jd3pOCENhPeS7SX
p3YoweO5pFXoXBYkkp4ETDhBwykbqtTGBA6aIjh/aV5KSBXWRa605kFv4EDH
PgJvPr0qmLhUcvy8kxTNx/jbLibpFzQfRh8uzmCT12keqUv+x2Nr/v1+vbqL
ghmKH5btvsjFq88Nrg3zCL8eq8wDWx2F4oGsVgU6rFKnLpOyZaDaglp7RZ+N
jzkxX/e8FeDHnl1KDAk2ofcPetquECJxleu252VsfL0/6FrL5cK+Z+vw7gtc
6PE2GmxooWF0tcKtegL/WbzGGg9VAXlelmPc+yrpGofUX1OtGt00CX9SrOV5
fChahNId4k6t/RxMFNhE7E7/H2+HnNSdICL//u0nwTPHowKib86UeOqqoPJU
7j+WPQ/tf4dTQrex8XDhvmNBV1TJ/dytfUFrNxxhkvn+UHVD5vB7Ju5/jzdq
U6egZsEtH9sKOpl/12fdi03ax89vUL2aIjaLjeP/dnbjgWNE/zsV/Mv5S/Rr
0MA9CRjSyPvLUs6k7S4RkP629PCm6B4GFwtLEr1ciP7o+8jn7FZi4GndcWYe
gZ/H5Z9uW2fCIfXF3ZRRFVOzcX7Tl3lbfluWQ+rjQ/K9rs9Clcl61l1lUd/k
xyTrXUv5VuCNRBbJT9v2t7fsvUjgasZMe3t1JqYcmO11qJgF7ZrBoa3HuGA3
dfSKlrNIv7U5Yd/YXxtViFiNcZcWCzFjl8vis0Qe3111qPJOEiHTbcxcq4mG
S2qdLKU/TLx8PcGmto0PfsmoUdtRGm7s/bfd/dp4P8Wc4ixIc6FjuQZidjbQ
cebfGY3Eg3QST4bFTHT+Ee8T4SEqFbvEQGbiOTFxEy4Z746NIvXnleN+/xIj
aUoRgVN6N/hzAwndltK4Rlu7V5b8/raV4o5ziP79b96nmXDRKu77uF+1ctlQ
OrZhXG/P3+Jb1/qdh/KrOfrUTAFqzrvu+97PJu/nSjFO4x/k4Ybt59eG80XI
Nnl6KdSBiXzR9oRaHT6uPHOmnjFgkfk6GrNfptiMSj5vbXlweRbhIzvz6jQL
rzCgL5GW8OMGG/tDRvzLilgIsqspcnjKIetXK03mjfhaLv5Oi2U372NhcfSf
11HGqmgPzFVnEb5ivx5f/xSTD2P1heIHkpWwq9CF8foYj/Tfd/Xp/KoYFpY8
7o4yX86A/QxLGns+oddUBiZx87kY3bajLzybiqEZD2a1LGLjpoS0ndhrFYRP
95jpU0r0+ebgVfNVVLEtJSTvfz71ClbtFhNwyfXomZY8lz2ujJtbjqkUuNMx
61TZ+2NTGWQ+i/ssqnouCzGyfmI5S0qIyis5ryLWMsj6rQ3+XGNnw0aaXXn0
Aw06/PSn/jxD+O7/9NqO1Gns8A6CL1YV7T0QKED4xJW95cNC0k85GLe7Pl7B
xurg1u/7n/DQP7t84ZoZDNzjsz5LudGh+iS8LqB9XJ/QXBZ+PRRM+Oi4DUu9
nVh4zK06/MyNSe7nvtjKNb22VQj//Hy/uCYRDls/eh4fLyT9vfpLUd89ifF+
6Ws5dorvQPT325CftoFsHEmvcZko5MGrJnLjwc+Ejx39na/dyyD1+Kr0i1Na
LjPJ/R6zJau9JyUKMDLskEaromDtZoXA0iQVzOj1yGufKcQN1sTgh4GE73tm
WFL2goqR+OLJfo/Z5Lyg3zeoY1aMCNrFigfvL1JGp+A6ra6O8PPtk5TCCP+7
4MfHabEFAvCuaGWvthDiDe/vmG4roQ8/9T4KXUDw7vq6+lt3eaQe2fdtxZij
NReJv6YFXCVwctj+wpFT5ziovtEz16dIFcceLFi7f5iB3zoT697/oqD74hrd
N88Z5Pmy3yVmJloP+GS8aJ7KeyI/0ODjPWVq030FzPPhG7cR/bLn+UqhCZsO
jfePp00UcGAi4OufZdKRuPR85Ll7NFRHrPv8vYbQ/ayLBV6zBNhiUXOvJUsB
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
5Pr0eWclKiKY5P+D/R8kAuce
        "]]}, {
       RGBColor[0.880722, 0.611041, 0.142051], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[CompressedData["
1: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
m5NQojKFB2O3Yy75NUz8H9GjZxs=
        "]]}, {
       RGBColor[0.560181, 0.691569, 0.194885], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[{{6.871758933648203, 6.143240982073776}, {7.584333316684701, 
        4.765365417790323}, {5.252815104307661, 4.777550828551208}, {
        5.992578346345265, 6.6950644075702055`}, {5.8854032303908905`, 
        5.8315833123035326`}, {6.207726837076337, 6.467770152124883}}]}, {
       RGBColor[0.922526, 0.385626, 0.209179], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[CompressedData["
1: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
        "]]}, {
       RGBColor[0.528488, 0.470624, 0.701351], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[{{4.120759268293545, 5.433918490799575}, {4.120759268293545, 
        5.433918490799575}}]}}, {{}, {{{
         Opacity[0], {
          RGBColor[0.528488, 0.470624, 0.701351], 
          PointSize[0.004583333333333334], 
          AbsoluteThickness[1.6]}, {
          RGBColor[0.880722, 0.611041, 0.142051], 
          PointSize[0.004583333333333334], 
          AbsoluteThickness[1.6], 
          TagBox[
           TooltipBox[
            PointBox[{7.772375448410054, 7.281198447147552}], 
            StyleBox[
             PaneBox[
              FrameBox[
              "\"Log of Carbon Intensity Total (tonnes CO2e/USD mn)\"", 
               LabelStyle -> {}, Background -> None, ContentPadding -> False, 
               LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
               Background -> GrayLevel[1, 0.65], FrameStyle -> None, 
               FrameMargins -> 2, BaselinePosition -> Automatic, LabelingSize -> 
               DirectedInfinity[1], StripOnInput -> False], FrameMargins -> 
              0], {}, StripOnInput -> False]], Annotation[#, 
            Style[
             Pane[
              Framed[
              "Log of Carbon Intensity Total (tonnes CO2e/USD mn)", 
               LabelStyle -> {}, Background -> None, ContentPadding -> 
               False, {
               LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
                Background -> GrayLevel[1, 0.65], FrameStyle -> None, 
                FrameMargins -> 2, BaselinePosition -> Automatic, 
                LabelingSize -> DirectedInfinity[1]}], FrameMargins -> 
              0], {}], "Tooltip"]& ]}}, {
         Opacity[0], {
          RGBColor[0.528488, 0.470624, 0.701351], 
          PointSize[0.004583333333333334], 
          AbsoluteThickness[1.6]}, {
          RGBColor[0.880722, 0.611041, 0.142051], 
          PointSize[0.004583333333333334], 
          AbsoluteThickness[1.6], 
          TagBox[
           TooltipBox[
            PointBox[{9.04742142447688, 7.282149996307552}], 
            StyleBox[
             PaneBox[
              FrameBox[
              "\"Log of Revenues (USD mn)\"", LabelStyle -> {}, Background -> 
               None, ContentPadding -> False, LabelStyle -> {}, Frame -> True,
                RoundingRadius -> 4, Background -> GrayLevel[1, 0.65], 
               FrameStyle -> None, FrameMargins -> 2, BaselinePosition -> 
               Automatic, LabelingSize -> DirectedInfinity[1], StripOnInput -> 
               False], FrameMargins -> 0], {}, StripOnInput -> False]], 
           Annotation[#, 
            Style[
             Pane[
              Framed[
              "Log of Revenues (USD mn)", LabelStyle -> {}, Background -> 
               None, ContentPadding -> False, {
               LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
                Background -> GrayLevel[1, 0.65], FrameStyle -> None, 
                FrameMargins -> 2, BaselinePosition -> Automatic, 
                LabelingSize -> DirectedInfinity[1]}], FrameMargins -> 
              0], {}], "Tooltip"]& ]}}}, {}}}}, AspectRatio -> 
    NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
    AxesLabel -> {
      FormBox[
       TagBox["\"Revenues(log)\"", HoldForm], TraditionalForm], 
      FormBox[
       TagBox[
       "\"Log of Carbon Intensity Total (tonnes CO2e/USD mn)\"", HoldForm], 
       TraditionalForm]}, AxesOrigin -> {0, 0}, DisplayFunction -> Identity, 
    Frame -> {{False, False}, {False, False}}, 
    FrameLabel -> {{None, None}, {None, None}}, 
    FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
    GridLines -> {None, None}, GridLinesStyle -> Directive[
      GrayLevel[0.5, 0.4]], ImagePadding -> {{All, All}, {All, All}}, 
    ImageSize -> {793.74609375, Automatic}, 
    Method -> {
     "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
      "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )}}, 
    PlotRange -> {{0, 12.102410851054422`}, {0, 10.181627114714622`}}, 
    PlotRangePadding -> {{
       Scaled[0.02], 
       Scaled[0.08]}, {
       Scaled[0.02], 
       Scaled[0.12944271909999158`]}}, Ticks -> {Automatic, Automatic}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"D\"", "\"E\"", "\"B\"", "\"C\"", "\"A\""}, "PointLegend",
       DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.560181, 0.691569, 0.194885]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.922526, 0.385626, 0.209179]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.528488, 0.470624, 0.701351]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm], ",", 
               TagBox[#3, HoldForm], ",", 
               TagBox[#4, HoldForm], ",", 
               TagBox[#5, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               
               RowBox[{
                "False", ",", "False", ",", "False", ",", "False", ",", 
                 "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.879156183332527*^9, 3.879325353198717*^9, 
  3.8793254366921997`*^9, 3.879354626723333*^9},
 CellLabel->
  "Out[500]=",ExpressionUUID->"736fac9c-1b6e-459a-994a-3105c10f3039"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"finalds5", "[", 
    RowBox[{
     RowBox[{"GroupBy", "[", 
      RowBox[{"Key", "[", "\"\<Ratings\>\"", "]"}], "]"}], ",", "All", ",", 
     RowBox[{"{", " ", 
      RowBox[{
      "\"\<integralScore\>\"", ",", " ", 
       "\"\<Carbon-Scope 3 (tonnes CO2e)\>\""}], "}"}]}], "]"}], ",", " ", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{
     "\"\<integral score\>\"", ",", "\"\<Scope 3 Emissions(log)\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.879087986658277*^9, 3.879088006396925*^9}, {
  3.8790880395208807`*^9, 3.879088129596187*^9}},
 CellLabel->
  "In[501]:=",ExpressionUUID->"1d49fc1e-14cb-400d-a30b-da2a8c02da52"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{
       RGBColor[0.368417, 0.506779, 0.709798], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[CompressedData["
1:eJxVXGdYFckSBQRkVQRJIiKSFAyLomAO1WIOa86u8szZ3TUr5izmnEUxB0xw
Z8AEiqAERZCggAEEBQHJiCC8qS5uI/553zxmpnuqq06dOlV3baYuGjFDS0ND
o622hgb+b6f/kvY1fyXBo7MWbe5/NWNvRtydG7dGgv3ZHpUGng5s/vgjM8ZP
lSBmyNQrO8OGs00fStZ8GOQPZ75f1k2458Dg3IWAhQskaKa7Ibn9xWGs96uC
bq/uydBkwvT75zbbsaYDDtgP2C1B6sWTwYVdPsK/jxqvHTVPBq1W28ya7CiE
QGvJ7d1ICU4FW//zYLsti1QeLwiUYKrhuM6+xu+gG77PQQbl9uNtT9uyJlv/
Z65rKUPTLd/ejjw1kl0/6rOlzR4Jhu0++nK2dS/WV1nuQLAKku112U2z1uwv
+eBA+YUEH4bubhh41oJZ434OSJDj0dM1vIUJ872m/HsnwQ7mnjYy1YAdVf5q
/00FW74NXzHmjAObaq4suFYF4ef6mA3a5saa4/PK/YuMNrk/29qVGT5tW++p
F9+f/3g3F9ZxSIzLkFYyFDtO+r50Vz+WID+71OSnBD79Po2Rt81kM+KX/h3P
ZLBLLDXb7DeN3b20Zq9dugTHFhrZrV7PWPyLfg5N70kQFHauz8rDzZj7aOXf
HAkWfClr8cHBjtXB9WIkGFP/z/xb5fYs6LPzEfO7EgyspzVv3poOzKD+J8P6
u2W48E/3OmXDsoDbw1bm5xsa0Y/d7PN8yj1vCdq3bx/jkd+fKW9rW6+pBCbK
BgMrjJja3jOVfwHbs+E22idOBcpxuBQfa8KadW8+rtEKGV6VjEz1vGJM3z9M
hkl7nxTNzkyGXf9TDCZL4OCs1zqvsykbjvtvIkMj7TH12+n9wSajPVNUcNBc
e0yYlAJt0Z69JHy/b/8B+VAX979XBZsCw5xblgxiNw7Wt3I6LUFX5QAdlxox
wO/xkkC5/flU7U+QF7m9o52ZjPb4LyTBkS37ldfOvLMMrpMD5ox97Mr4fiLI
ngtdYiAc/eszP195bUwazMD9ePDn7+692YdNn+v+/dgsGXIvh3iedXFl3u3t
Vue9UMHd098vv5lQCHsG5GkdV+xvc/u/TtlRwFrVfbzV/6gEDd++XJ5s1YhZ
K6/b+kmGtCjbiTI4sVbhd1uHqyTcz4AXkiYzR3u9UYFijt2bXrRnp9DfNkjw
YMnBcXXjrFnyodkjzy+Q4XwfVcE3r7rso2pBokrHn6/v3FWTycrlgssynl/7
Jl3KYDt+33QVrOnpOllXJxX+UuxjFCVBvPc/v04P68xWXrB/tH6zBMqfA/x6
aYjzVeKz6zeLbBFfyvkd3liHsYJzd3q4tPNHf9xkmJsNX/GGyxKMSr3Y9c+5
vVkwru8mw4tlj5r+dLIT71P2bz4/Jg6GGb6+9WmtBBsOu3mWvdZhhXiDYgnd
DYe9l17oQP6ySYK+qoJfO59VwGT0j+0qjF+n0zrN2Mo3tp9vHZfRniWRxblw
A/0vRILGbZIv2GaZsgBcf6gK9G5YTlAxDTYFzy9BBX9NNUy4vqs7i8HzPSDD
bAXAFmsbMbX/vrZNLG2ZkwOH0F69ZZje9cPeXfNt2WD0p+cSZDR37u97pDmb
je/r4g+xKzKarztWCApMKiApw2LlhVsHtxbfi+83qAiD6Xi/El/PrG//t7KV
LvP7ZRfdN1qClcoLXco+gTPGV4AEyucuyffuxdad+bLSarAM/T+tMllrlQA6
+P75hEcLjV/As02DJ348JyOejr6b1Im1xvh4r+J4+GKhLluB6wWoYLkS0FMM
AsG8yt92H11olOqaJeLVy6JN8me/bOD48ZD+7ubtB8eq/A3jXdf9O/zmj38+
6azFniMgjJOgt+f8L+F93sEUfL6bhPHuPfV0F+HfeD5LUyqE/6B/+06PEtdo
78k5icD995cKlNtHepXXZhH4fnt/6F4nflr5lBYsBx+oTfkh6mEEjMH1VqpA
Ce9lc+v9EO9T4m22ZrMIyF2pGDBAhoo3KzImxTZg/t8CfL4dkTE/GU7O0BLx
rvjDuKApOoTXVjL/3msLK2H82I/Dn4zj8fgieqc5i0J/CZbR/xYeXanL1OeJ
7wu20WS4ndhAwtfzXVqQv52g+Cs5ngety9t3mFdXRny3WPa5K5uvuGfiVgkU
95zeyLMQvuN+e/D82XZZShf2AP23Fcf7Wm2j7MX3o78UO5WA+rqekiCd2GdY
tQiOy/skWDf3wZKexxqzSbghPxXmy9ujTlTCPFyvgt9f4hw4SOAtmity1iCe
v44p/qb4wxrvSf/S+p4qnn/jPtUl/BlA9q1oXIttraNv1WU4x4PYHyNA+Lvi
7j0fOv6CfXi/ku8DBtTT8vfRYJ3Qv+Nl+DEytZlGkAO97yGPV3uXLfngzh1U
hqUK4MdNTwJ0hwWhKtjvNXLI0Oxc4HhgInN8qnSqgIAXzU/OryD7FbR+Dzvx
PIeRf6bYh4t8UfjrzYoBiaHCf9H/5Pg84f9K/Bz27JIp/EfJn1fvbS4Q/qPk
c9WMAhP2tepaweuypIwOAo8Rf9+m/oIdMG6g6XsZRshWW06eKAXuTxslOOLm
OX+d3RvIwOcfqLg9Xq36BdweqSrM/3ufrAgA7g9aMuar9Q02TWRm2sxQW1NG
PD35hDkIfFLsd3HioEdgt/O8484KjrcnD6meiO9X0qvjJPdn8Bzt18+f328z
Ix8i0H+PSfzvZ7rWJv8sViE+n+3hkwlRPMFTPK7Nv094qqyH/ufmaMRSb9Zx
aq/kD8Sv+QtyKZ8o+ftaXvSQ6N0vebq115d5vu4Rki/sievld9BkWfj971Ro
v1qayyYyvt90FfqrS+LW9iwM13eh8z04oTYbjP6ZrOL5QmNCPqSgQywl/vn0
vg67g9+XqILBHXew+mUVME2hn0cOqzj+Lm6gKeIb17fM9QIev6cID3b1LhL7
U+jC0fdro4Q/KPhr8vrflsLeSv5YZdy+s+B/6A9bHTqxf3B5M38wUgiI9zkN
VnG1Vcbgozy+V51p1FLsH/HUbkAyqPnupZPB1l/n/4AOaO7HEtrL7HzdNpRP
BhKeR/VrwR76KIA1R+b4fXGwHpuPf3+pQj7YI9aqGeuP7wsl//AtiICP+H2O
/vg9UuQAZ4FPyAeTerUW1/nRQ6ba7/tE+aCFBMppz71sacoGDDfpM1zxT+Xv
54OjnSheyyRwVgzwwUFXxDfm41GDjwI/r/8k7g+JoXpMRvv8x/e3tkI/DUbh
91+UQAlv3XMNM4V9e7mnRTl+/Qlq+2C8DHX/Bu/xNB/LgGlun+dHcT7IVwI+
jQaeDz5LoNCv08elEuiBf2/lz98fFHhH3I/xdMG4hOz9WMXxxMxcgjl4Xoq/
Kecz9YTFBMbXeybx/L3jaAzMRINckzjfOxxkynrvCimrU8TjYUPrnZPZjd/8
o8jIjrWril/F/dxnQVuBB5EREfXWdWvBVijufuaDDMrnDTrdohubgN/LiO9E
FRaL/WI+77skVlwr8Lq/e1aIwC/Mz/ddtdkKy9B/Lf+WeHw+Si8EF1z/usT5
+wpowPTQcO4yxkOQapot5V9nf3iqwMHiYYXC3givK+Kt2Vrc300Z6sR7B/a8
7MYsxu83HX+O8y+3bOdfgO5gsojnt+1rHo8WfBz5pXZuPmB5svQwrw8W18rt
ydT4o9Rbw+fX/gwP0F7LJH6+Kidzlo7xbyshX7f5fMtE5J/llf9sNw3QEf6l
3P5tg0uksAfad8ClFJjyp9fpXUkSx/cxrtX+ofAD739S9nB+BD1kPJ9ut7uN
YBqrlPV0ZZ7fO3sEC3zE+s1w51PC22jiwwHNfH7nt0WOdjtgUhUfwvXOa70Q
f+f1aXQJqPev0OMPodqVoK5vMF8ufZkhzg/zw824z8SnMij+ejsYM15P+PL8
deFhO1t2F+21h/vbyglKfuTnM4DXfxUOms0Y5zsXZR6PFvvS4BHi315eL55I
XTeMXcHnlfyD9c/lrYmQgP69TgIlneVFu/sAz19nVLBaIThvjVLgL3zfdR4f
vduudGbtsf6w8geFTj1a87OY89VjMZz/Dl18UZP1r6qXlXzgZrvQganxH/lS
sMJvOD72oPWXy74QjPGqR/nhQG4EcPpg64/fN2DEtkEintDerZ002Gzcz2jC
C+uk2szQtO4JtwReL4295wGsFvq3wk8U/wu1P9lT+A/i0dyWhcDxM5rXv1eH
21sKf1LcY5idVVvhn0r6r9crKVL4A/KZfw30xd/Rv7s8txDP/1w794HJ5xRQ
5xPM56vHfxL+oPjzudgbwbAC/ekJxePIzaXQD+2VRPxk5ZcflB/3U33xMiEN
3nqWvvHMk6H8at6ItWus2e/8dWnnr6CP/tSJ6tHrs/VEvlP4353QBj3ovJtL
vF6+ueGi2I9CD/V2ZQVTvdHcn3+ve3oB+aszj483CcaB4v5/lQCaGFTNxzHf
vEoOEueF9VNhZBS0wOsswvvghBLIPTLPKvci1Q++/eNg4rTyjpY9OP9tVbtO
qHgfxn9ekpb4PgUfI/Lu1BL8VPl+I63jNiJfq6+vKN76pQXn/977Nv4Cn+ih
A3tekXm+Ld2SCrxevMP1mqOT8vOA84tlKs6H03dlCf6C/v7jSx2W3VxvSN++
/jwe0veUwnl8/yB/5AdXLk+zZ9cdFUI1l/jAKTsN0qdOSmiPE2sWNmBDL60p
GNaI1uv74Afw/Zly++4K22jLHqG/F1at7/ITBiGA+smgpLuNCRbtRD7gZaJW
AuGBUr8q7r6hxYs8YS/Ep8L8AnGN/jM07wugeczry5w/XstpyuxLpCPP98tY
v3ffKMeJ+zH+jF9X13cK30pssfwF8d8VMvKtC/9rNYTZY37wk2Cb2duX6z6+
By/8ng0q/ny8fSkkIJ+4ooLQQR13tJ9Z9Hs+rii70Zbx/JNC5x3jb8l6VPER
rFejO3wW9zsogDVG14i1xvsv8/hyaD62gaj3sZ666xEo9ovfm9jlqbjG58N8
8uGwQu/SSnk8FR79uzfLxvPOJ/6S9TEMBp8zGXhuPvGzgqZHwRH9tVjC+vvB
viZtmCYa/gbl+zyni6IewPjxvlkC6/F8hvL6+02r7rXZP1V8AOuZ5OLXwOvr
dJnXE9nb00Bd/6O+duGjLXuD9lrP9a/CKVvsyB88VBw//p7amnWs4lPo/3qN
tNm+qnoK9YqoWfbsHNp/Kc931j9drJk6fyC/y6pTh/Qgc39+nkOMMmAUAoo2
54umoa0t6f0KH8gaLlstPl0JMzG+ylQ8n37b0JL0i97+yPenTG/oKuIR7bW4
6W1xXlivp/zPhHH8nipxPm3Ut5bwFzSjo2VmjXrNwrn093w4Zd0ee+LP58kf
+obECz0N+XfzM4+hH8ZHINfr9P+bYCzqa4W/GZjqmzDO12bR86YbGrEhuP9H
Vfm0wxOYVrU+5qecBXpCL8N8kNtPn/H4UvhJCyXB7B4eRecryfw6dlUJnecj
4ot7FqX+rh+/bXLZgP3OP8y8zQR/Rv3vV70cbgeNLNI348f8hOdV9QvqER12
VfM7jM+HYC3qB8Xfc0I3mbF4a/1o67fEr4d0byDWy70cMqjhpSSqD9tLPD+6
v38HPP/tVKE/fn+Y35+tRn09nNcXB77+sCY9pq3E7ZG8JYby8Qg6T7P7poIP
or+HrKvWb/HvixtW8ynMX983lIlrtGfwvGo8vxIyqGOI1Z9MnR+QL9v2SqF6
ZhPXKzb9454Fx9CfP0iIf7Ynk1+J53F9V5fX4hrzifneIJGfkH+0mRgDajxB
f4GL2kxdr2B91ft+hHge89OFQi+BV8ivl+zLArVep+ST6D9cdNivSuVfXbrW
aVedb1FPXv8qVuAN5quj5U0I34b6c327b4SFiEes5/o9sqP8NYe+d0xpHuxD
gH7A83l0k6UpwPOzrj+vh7bEaQv/wXwe9+8dUZ+g3qXZvaQG3p/0uA9uGB/2
xD8KR4YBr/8mc/wudJnVkA2s4heoPy0/Xpup9V3EpzMndVgo+kO5jP2Xvh6n
DJnaPshnp74PF/ldOY89pv1MBL/HeI9o+BY4nm2Xef70Djcme6SSnuQ410rE
N9Lv7i+tGNdLUiheVVtTKb/ZEL43XF6d/5GOR+THCLxA+8ZVxID6fNCfjg+s
xdR4gfgeEZUs+Bri54OMXPE8nvf6TV/gOd4fpeJ8QdtHU6yHdH6YXXX9qWzP
p3JyLOXvZqRHWqZXxyue58f5vuCBeNG1Si9pVkL+tIvX62OcyuQa8bCj53WK
t0zejzg3J6kW88LvZyquV5yfrsd64f21/Lke+PmwpuCbeL6+momkT0ySOB/o
WKjNRuN63Xi9t7LXDCOm9hfU48/qvABe7/0j8fVH6WoLf0S9ZFjRN9iL73+u
4vXkw+Ik4Ph9kfBpvEMtNgjbO1tl0n+N0ki/Hkz659niOqQnq1T8/be71CW9
XFNGPr/70LSOIh7Q/9qu/ARqfEN8PO1wRZyXcvW9zSlN8v+BxP/O5xfCONyv
wqcwn5WufQYcn1K5Pte5Z/lowZewPu51sJ7wB8TLXpk5EIdsuIjwb+CBxgKP
sN5bOfqi4M9Yj25/lgLzsD/5jvibb/9GZK9IWj9rubbQYxGvZhiUgx2+rwPX
F/pOOu3INuN+lks8nlftiYBXwYdz9K9IGF8z13i3I726Ja83ExYONWRL8H1T
qX/yQf+q8FeM/7tPcgR/UPB1Te111qwC/d+A9CGTiXkCHzCeChfkCn0c88H2
TRVC38P83vVOIaj1eFw/0aW70K+wvk0qMWK38Hoy1ztNN85yYZ+V9FFyVeL7
Mz6XAly/ecLjZ1rMvhaCn+H6Vp8DCV/rSZx/3xyaJupb1P/nTYwAfl4NKd4P
TS0T/Q487xujqvML8td5sQHA9auOEufPVg1NxPlh/to9+gDvTx34ye0b0qZD
rngfulfi8BLx/YjH468VAe/3zON615zjHZxE/wnxMKPPEYF3yGffS0Y16kcT
YzNWght8I3E8u+hbBup+p2LfunVaVus7WE+tHqrD1PkK683OG9PF/vA8Hm/8
Sf7tR/1Dq30ytMT153I+snFvVDPqN8wlPtpgZ3U9hvhy28qAjcTnfXm+OrDw
q4PAM6yP61eYimusF+B7NBTj/6HU+8pxrH46ryHrWzytZ3EF1aNH7yaATpji
sC94fyZ1zZS2Ar/R//+YnkbP20i8Hqx16H0NPeSr5Tng9X+Wivun47hYOI31
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
        "]]}, {
       RGBColor[0.880722, 0.611041, 0.142051], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[CompressedData["
1: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
n9ZHOdA/+S/8H7OHu5k=
        "]]}, {
       RGBColor[0.560181, 0.691569, 0.194885], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[{{4846.666666666666, 75241.233}, {4682.857142857141, 
        175817.338}, {4901.904761904756, 15180.256}, {4264.126984126983, 
        93463.145}, {4901.904761904756, 103663.727}, {4815.238095238092, 
        112118.964}}]}, {
       RGBColor[0.922526, 0.385626, 0.209179], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[CompressedData["
1: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
SwZp
        "]]}, {
       RGBColor[0.528488, 0.470624, 0.701351], 
       PointSize[0.004583333333333334], 
       AbsoluteThickness[1.6], 
       PointBox[{{3343.8095238095193`, 12136.335}, {3343.8095238095193`, 
        12136.335}}]}}, {{}, {{{
         Opacity[0], {
          RGBColor[0.528488, 0.470624, 0.701351], 
          PointSize[0.004583333333333334], 
          AbsoluteThickness[1.6]}, {
          RGBColor[0.880722, 0.611041, 0.142051], 
          PointSize[0.004583333333333334], 
          AbsoluteThickness[1.6], 
          TagBox[
           TooltipBox[
            PointBox[{6567.142857142862, 263233.587}], 
            StyleBox[
             PaneBox[
              FrameBox[
              "\"Carbon-Scope 3 (tonnes CO2e)\"", LabelStyle -> {}, 
               Background -> None, ContentPadding -> False, LabelStyle -> {}, 
               Frame -> True, RoundingRadius -> 4, Background -> 
               GrayLevel[1, 0.65], FrameStyle -> None, FrameMargins -> 2, 
               BaselinePosition -> Automatic, LabelingSize -> 
               DirectedInfinity[1], StripOnInput -> False], FrameMargins -> 
              0], {}, StripOnInput -> False]], Annotation[#, 
            Style[
             Pane[
              Framed[
              "Carbon-Scope 3 (tonnes CO2e)", LabelStyle -> {}, Background -> 
               None, ContentPadding -> False, {
               LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
                Background -> GrayLevel[1, 0.65], FrameStyle -> None, 
                FrameMargins -> 2, BaselinePosition -> Automatic, 
                LabelingSize -> DirectedInfinity[1]}], FrameMargins -> 
              0], {}], "Tooltip"]& ]}}, {
         Opacity[0], {
          RGBColor[0.528488, 0.470624, 0.701351], 
          PointSize[0.004583333333333334], 
          AbsoluteThickness[1.6]}, {
          RGBColor[0.880722, 0.611041, 0.142051], 
          PointSize[0.004583333333333334], 
          AbsoluteThickness[1.6], 
          TagBox[
           TooltipBox[
            PointBox[{6482.2222222222235`, 1.111901997*^6}], 
            StyleBox[
             PaneBox[
              FrameBox[
              "\"integralScore\"", LabelStyle -> {}, Background -> None, 
               ContentPadding -> False, LabelStyle -> {}, Frame -> True, 
               RoundingRadius -> 4, Background -> GrayLevel[1, 0.65], 
               FrameStyle -> None, FrameMargins -> 2, BaselinePosition -> 
               Automatic, LabelingSize -> DirectedInfinity[1], StripOnInput -> 
               False], FrameMargins -> 0], {}, StripOnInput -> False]], 
           Annotation[#, 
            Style[
             Pane[
              Framed[
              "integralScore", LabelStyle -> {}, Background -> None, 
               ContentPadding -> False, {
               LabelStyle -> {}, Frame -> True, RoundingRadius -> 4, 
                Background -> GrayLevel[1, 0.65], FrameStyle -> None, 
                FrameMargins -> 2, BaselinePosition -> Automatic, 
                LabelingSize -> DirectedInfinity[1]}], FrameMargins -> 
              0], {}], "Tooltip"]& ]}}}, {}}}}, AspectRatio -> 
    NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
    AxesLabel -> {
      FormBox[
       TagBox["\"integral score\"", HoldForm], TraditionalForm], 
      FormBox[
       TagBox["\"Scope 3 Emissions(log)\"", HoldForm], TraditionalForm]}, 
    AxesOrigin -> {4290.228174603188, 0}, DisplayFunction -> Identity, 
    Frame -> {{False, False}, {False, False}}, 
    FrameLabel -> {{None, None}, {None, None}}, 
    FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
    GridLines -> {None, None}, GridLinesStyle -> Directive[
      GrayLevel[0.5, 0.4]], ImagePadding -> {{All, All}, {All, All}}, 
    ImageSize -> {845.66796875, Automatic}, 
    Method -> {
     "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
      "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )}}, 
    PlotRange -> {{4290.228174603188, 7265.7142857142935`}, {
      0, 952071.1554999999}}, PlotRangePadding -> {{
       Scaled[0.02], 
       Scaled[0.08]}, {
       Scaled[0.02], 
       Scaled[0.12944271909999158`]}}, Ticks -> {Automatic, Automatic}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"D\"", "\"E\"", "\"B\"", "\"C\"", "\"A\""}, "PointLegend",
       DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.560181, 0.691569, 0.194885]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   TemplateBox[<|
                    "color" -> RGBColor[0.922526, 0.385626, 0.209179]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.528488, 0.470624, 0.701351]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm], ",", 
               TagBox[#3, HoldForm], ",", 
               TagBox[#4, HoldForm], ",", 
               TagBox[#5, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               
               RowBox[{
                "False", ",", "False", ",", "False", ",", "False", ",", 
                 "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.879087992267581*^9, 3.8790880069095497`*^9}, 
   3.8790880406159678`*^9, {3.879088071162101*^9, 3.879088130119233*^9}, 
   3.8793253556577663`*^9, 3.879325438693985*^9, 3.879354631815715*^9},
 CellLabel->
  "Out[501]=",ExpressionUUID->"00d8679d-91bc-44b9-b7db-31fa858ed7d4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Clustering", "Subsection",
 CellChangeTimes->{{3.879087470052207*^9, 
  3.879087471625847*^9}},ExpressionUUID->"073a44ab-4398-4bdf-8e51-\
2576503cd162"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"FindClusters", "[", 
    RowBox[{"Transpose", "@", 
     RowBox[{"Normal", "@", 
      RowBox[{"{", 
       RowBox[{"rev", ",", "disclosure"}], "}"}]}]}], "]"}], ",", " ", 
   RowBox[{"PlotLabel", "->", "\"\<Clusters\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8790874828560753`*^9, 3.8790874872090693`*^9}, 
   3.879087915870224*^9},
 CellLabel->
  "In[130]:=",ExpressionUUID->"92c7b856-4e8f-4ef4-8e4b-91b35e430943"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"Clusters\"", TraditionalForm],
  PlotRange->{{-1, 1}, {-1, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.8790874895287533`*^9, {3.8793253588492517`*^9, 3.8793253626482267`*^9}, 
   3.879325440651579*^9},
 CellLabel->
  "Out[130]=",ExpressionUUID->"ead02403-354b-488c-be4f-56ae4cb83a68"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"FindClusters", "[", 
    RowBox[{
     RowBox[{"Transpose", "@", 
      RowBox[{"Normal", "@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"finalds5", "[", 
          RowBox[{
          "All", ",", " ", "\"\<Log of Scope 3 emissons (tonnes CO2e)\>\""}], 
          "]"}], ",", " ", 
         RowBox[{"finalds5", "[", 
          RowBox[{"All", ",", " ", "\"\<elevation\>\""}], "]"}]}], "}"}]}]}], 
     ",", " ", "nClusters"}], "]"}], ",", " ", 
   RowBox[{"PlotLabel", "->", "\"\<Clusters\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8790878827683563`*^9, 3.879087971433508*^9}, {
  3.879325404739996*^9, 3.879325408451941*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"409e672c-d644-4b81-b7c9-9919b8ed86e0"],

Cell[BoxData[
 TemplateBox[{
  "Transpose", "nmtx", 
   "\"The first two levels of \\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"12.835595010063535`\\\", \\\",\\\", \\\
\"13.556045286054315`\\\", \\\",\\\", \\\"15.288778505172228`\\\", \\\",\\\", \
\\\"11.339926136864074`\\\", \\\",\\\", \\\"13.316821354014827`\\\", \
\\\",\\\", \\\"14.680882499631222`\\\", \\\",\\\", \
\\\"12.985874525519536`\\\", \\\",\\\", \\\"16.284651133378507`\\\", \
\\\",\\\", \\\"14.64581031162848`\\\", \\\",\\\", \
\\\"13.469154527580251`\\\", \\\",\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \
\\\"84\\\", \\\"\[RightSkeleton]\\\"}]}], \\\"}\\\"}], \\\",\\\", \
RowBox[{\\\"Failure\\\", \\\"[\\\", RowBox[{\\\"Dataset\\\", \\\",\\\", \
RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"\\\\\\\"MessageTemplate\\\\\\\"\\\", \
\\\"\[RuleDelayed]\\\", StyleBox[RowBox[{\\\"Dataset\\\", \\\"::\\\", \
\\\"partmismatch\\\"}], \\\"MessageName\\\"]}], \\\",\\\", RowBox[{\\\"\\\\\\\
\"MessageParameters\\\\\\\"\\\", \\\"\[Rule]\\\", RowBox[{\\\"\[LeftSkeleton]\
\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}]}]}], \\\"}\\\"}]}], \
\\\"]\\\"}]}], \\\"}\\\"}]\\) cannot be transposed.\"", 2, 107, 7, 
   18867051726829653980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.879325369820166*^9},
 CellLabel->
  "During evaluation of \
In[107]:=",ExpressionUUID->"9f22c6ac-c3a6-4c6b-b820-c3c60e13d93f"],

Cell[BoxData[
 TemplateBox[{
  "FindClusters", "numclus", 
   "\"The number of clusters \\!\\(\\*RowBox[{\\\"nClusters\\\"}]\\) can only \
be either a positive integer or Automatic.\"", 2, 107, 8, 
   18867051726829653980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.879325369877727*^9},
 CellLabel->
  "During evaluation of \
In[107]:=",ExpressionUUID->"92781513-7e97-44c7-b834-a91c1486b462"],

Cell[BoxData[
 TemplateBox[{
  "Transpose", "nmtx", 
   "\"The first two levels of \\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"12.835595010063535`\\\", \\\",\\\", \\\
\"13.556045286054315`\\\", \\\",\\\", \\\"15.288778505172228`\\\", \\\",\\\", \
\\\"11.339926136864074`\\\", \\\",\\\", \\\"13.316821354014827`\\\", \
\\\",\\\", \\\"14.680882499631222`\\\", \\\",\\\", \
\\\"12.985874525519536`\\\", \\\",\\\", \\\"16.284651133378507`\\\", \
\\\",\\\", \\\"14.64581031162848`\\\", \\\",\\\", \
\\\"13.469154527580251`\\\", \\\",\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \
\\\"84\\\", \\\"\[RightSkeleton]\\\"}]}], \\\"}\\\"}], \\\",\\\", \
RowBox[{\\\"Failure\\\", \\\"[\\\", RowBox[{\\\"Dataset\\\", \\\",\\\", \
RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"\\\\\\\"MessageTemplate\\\\\\\"\\\", \
\\\"\[RuleDelayed]\\\", StyleBox[RowBox[{\\\"Dataset\\\", \\\"::\\\", \
\\\"partmismatch\\\"}], \\\"MessageName\\\"]}], \\\",\\\", RowBox[{\\\"\\\\\\\
\"MessageParameters\\\\\\\"\\\", \\\"\[Rule]\\\", RowBox[{\\\"\[LeftSkeleton]\
\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}]}]}], \\\"}\\\"}]}], \
\\\"]\\\"}]}], \\\"}\\\"}]\\) cannot be transposed.\"", 2, 107, 9, 
   18867051726829653980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.879325369888753*^9},
 CellLabel->
  "During evaluation of \
In[107]:=",ExpressionUUID->"3784c041-bcb9-491b-ae2b-1c35bbbd0f50"],

Cell[BoxData[
 TemplateBox[{
  "FindClusters", "numclus", 
   "\"The number of clusters \\!\\(\\*RowBox[{\\\"nClusters\\\"}]\\) can only \
be either a positive integer or Automatic.\"", 2, 107, 10, 
   18867051726829653980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.879325369895146*^9},
 CellLabel->
  "During evaluation of \
In[107]:=",ExpressionUUID->"269a9ce8-ce05-4064-80b2-29c14f271c9c"],

Cell[BoxData[
 TemplateBox[{
  "Transpose", "nmtx", 
   "\"The first two levels of \\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"12.835595010063535`\\\", \\\",\\\", \\\
\"13.556045286054315`\\\", \\\",\\\", \\\"15.288778505172228`\\\", \\\",\\\", \
\\\"11.339926136864074`\\\", \\\",\\\", \\\"13.316821354014827`\\\", \
\\\",\\\", \\\"14.680882499631222`\\\", \\\",\\\", \
\\\"12.985874525519536`\\\", \\\",\\\", \\\"16.284651133378507`\\\", \
\\\",\\\", \\\"14.64581031162848`\\\", \\\",\\\", \
\\\"13.469154527580251`\\\", \\\",\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \
\\\"84\\\", \\\"\[RightSkeleton]\\\"}]}], \\\"}\\\"}], \\\",\\\", \
RowBox[{\\\"Failure\\\", \\\"[\\\", RowBox[{\\\"Dataset\\\", \\\",\\\", \
RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"\\\\\\\"MessageTemplate\\\\\\\"\\\", \
\\\"\[RuleDelayed]\\\", StyleBox[RowBox[{\\\"Dataset\\\", \\\"::\\\", \
\\\"partmismatch\\\"}], \\\"MessageName\\\"]}], \\\",\\\", RowBox[{\\\"\\\\\\\
\"MessageParameters\\\\\\\"\\\", \\\"\[Rule]\\\", RowBox[{\\\"\[LeftSkeleton]\
\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}]}]}], \\\"}\\\"}]}], \
\\\"]\\\"}]}], \\\"}\\\"}]\\) cannot be transposed.\"", 2, 107, 11, 
   18867051726829653980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.879325369900004*^9},
 CellLabel->
  "During evaluation of \
In[107]:=",ExpressionUUID->"0507a85b-4d29-4dcd-a854-409b42b24e47"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Transpose\\\", \\\"::\\\
\", \\\"nmtx\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"", 2, 107, 12, 18867051726829653980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.87932536990492*^9},
 CellLabel->
  "During evaluation of \
In[107]:=",ExpressionUUID->"bee4aeba-b8da-48c1-8b65-09802811c65d"],

Cell[BoxData[
 TemplateBox[{
  "FindClusters", "numclus", 
   "\"The number of clusters \\!\\(\\*RowBox[{\\\"nClusters\\\"}]\\) can only \
be either a positive integer or Automatic.\"", 2, 107, 13, 
   18867051726829653980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.879325369909367*^9},
 CellLabel->
  "During evaluation of \
In[107]:=",ExpressionUUID->"bb981fc4-abc5-4f53-a0c2-202dac243b21"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"FindClusters\\\", \
\\\"::\\\", \\\"numclus\\\"}], \\\"MessageName\\\"]\\) will be suppressed \
during this calculation.\"", 2, 107, 14, 18867051726829653980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.879325369913752*^9},
 CellLabel->
  "During evaluation of \
In[107]:=",ExpressionUUID->"3a214e07-ea2d-4a0b-a3b7-c7004ab64240"],

Cell[BoxData[
 TemplateBox[{
  "ListPlot", "lpn", 
   "\"\\!\\(\\*RowBox[{\\\"FindClusters\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"Transpose\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"12.835595010063535`\\\", \\\",\\\", \\\
\"13.556045286054315`\\\", \\\",\\\", \\\"15.288778505172228`\\\", \\\",\\\", \
\\\"11.339926136864074`\\\", \\\",\\\", \\\"13.316821354014827`\\\", \
\\\",\\\", \\\"14.680882499631222`\\\", \\\",\\\", \
\\\"12.985874525519536`\\\", \\\",\\\", \\\"16.284651133378507`\\\", \
\\\",\\\", \\\"14.64581031162848`\\\", \\\",\\\", \
\\\"13.469154527580251`\\\", \\\",\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \
\\\"84\\\", \\\"\[RightSkeleton]\\\"}]}], \\\"}\\\"}], \\\",\\\", \
RowBox[{\\\"Failure\\\", \\\"[\\\", RowBox[{\\\"Dataset\\\", \\\",\\\", \
RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"\\\\\\\"MessageTemplate\\\\\\\"\\\", \
\\\"\[RuleDelayed]\\\", StyleBox[RowBox[{\\\"Dataset\\\", \\\"::\\\", \
\\\"partmismatch\\\"}], \\\"MessageName\\\"]}], \\\",\\\", RowBox[{\\\"\\\\\\\
\"MessageParameters\\\\\\\"\\\", \\\"\[Rule]\\\", RowBox[{\\\"\[LeftSkeleton]\
\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}]}]}], \\\"}\\\"}]}], \
\\\"]\\\"}]}], \\\"}\\\"}], \\\"]\\\"}], \\\",\\\", \\\"nClusters\\\"}], \
\\\"]\\\"}]\\) is not a list of numbers or pairs of numbers.\"", 2, 107, 15, 
   18867051726829653980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.879325369943431*^9},
 CellLabel->
  "During evaluation of \
In[107]:=",ExpressionUUID->"21d3a782-0d94-4a29-ba0a-8ce588af2b74"],

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"FindClusters", "[", 
    RowBox[{
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "12.835595010063535`", ",", "13.556045286054315`", ",", 
          "15.288778505172228`", ",", "11.339926136864074`", ",", 
          "13.316821354014827`", ",", "14.680882499631222`", ",", 
          "12.985874525519536`", ",", "16.284651133378507`", ",", 
          "14.64581031162848`", ",", "13.469154527580251`", ",", 
          "14.203422111954021`", ",", "10.96805767619469`", ",", 
          "12.682564468352158`", ",", "15.114473233255682`", ",", 
          "12.619539447857836`", ",", "13.609935796425246`", ",", 
          "14.169850366695742`", ",", "14.144618275822447`", ",", 
          "11.33108328525672`", ",", "14.605840001704617`", ",", 
          "12.927747434212357`", ",", "14.075388311315958`", ",", 
          "11.79965745623778`", ",", "12.093751533250943`", ",", 
          "14.418710112243447`", ",", "15.10676538367734`", ",", 
          "16.71722001302866`", ",", "11.690534501931214`", ",", 
          "10.338505087460984`", ",", "11.560512238689066`", ",", 
          "13.543808527139669`", ",", "11.11671903273548`", ",", 
          "13.659145875708072`", ",", "13.832659710063766`", ",", 
          "9.603963034310201`", ",", "15.895678089674563`", ",", 
          "10.410145292729712`", ",", "6.6900904420661504`", ",", 
          "14.586081027437011`", ",", "11.489414004045505`", ",", 
          "10.035341175992759`", ",", "10.367021391501432`", ",", 
          "9.37552051729589`", ",", "10.596229801122186`", ",", 
          "11.558724818263112`", ",", "11.526003690934289`", ",", 
          "10.985574225635121`", ",", "15.156624295515494`", ",", 
          "9.194791512567399`", ",", "13.674635650473148`", ",", 
          "11.96965618508279`", ",", "10.704034111360237`", ",", 
          "12.006368818611064`", ",", "10.970187963985307`", ",", 
          "11.883333733625049`", ",", "12.633558944245745`", ",", 
          "10.738520548889277`", ",", "13.479791294787391`", ",", 
          "13.571418213681891`", ",", "10.138178574438141`", ",", 
          "13.885989420286421`", ",", "10.250464315779169`", ",", 
          "9.813899167001358`", ",", "9.317096792904756`", ",", 
          "10.925655112755772`", ",", "11.046331217172888`", ",", 
          "10.001467075562607`", ",", "8.167181143859343`", ",", 
          "10.582150694001466`", ",", "9.560059409594297`", ",", 
          "10.86588286467294`", ",", "11.256724010319324`", ",", 
          "9.009707664681361`", ",", "9.743826007412823`", ",", 
          "13.0978888814248`", ",", "11.979045337185642`", ",", 
          "10.824662318077008`", ",", "8.783722462496906`", ",", 
          "13.306765952377148`", ",", "9.830836265055781`", ",", 
          "10.589880273003379`", ",", "9.872925865573773`", ",", 
          "9.215160735334628`", ",", "11.889702140488602`", ",", 
          "13.585273492058606`", ",", "9.561813881880502`", ",", 
          "12.822091202512837`", ",", "10.914192717698912`", ",", 
          "8.86130658844262`", ",", "10.056706069463088`", ",", 
          "9.683551040669046`", ",", "10.15638860479659`", ",", 
          "9.509632041501606`", ",", "9.343219639513354`"}], "}"}], ",", 
        RowBox[{"Failure", "[", 
         RowBox[{"Dataset", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\<\"MessageTemplate\"\>", "\[RuleDelayed]", 
             StyleBox[
              RowBox[{"Dataset", "::", "partmismatch"}], "MessageName"]}], 
            ",", 
            RowBox[{"\<\"MessageParameters\"\>", "\[Rule]", 
             RowBox[{"\[LeftAssociation]", 
              RowBox[{
               RowBox[{"\<\"Type\"\>", "\[Rule]", 
                RowBox[{"TypeSystem`Struct", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   
                   RowBox[{"\<\"Company\"\>", ",", "\<\"ISIN\"\>", 
                    ",", "\<\"integralScore\"\>", ",", "\<\"TCUID\"\>", 
                    ",", "\<\"GICS Sector Name\"\>", 
                    ",", "\<\"Carbon-Scope 1  (tonnes CO2e)\"\>", 
                    ",", "\<\"Carbon-Scope 2  (tonnes CO2e)\"\>", 
                    ",", "\<\"Carbon-Scope 3 (tonnes CO2e)\"\>", 
                    ",", "\<\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"\
\>", ",", "\<\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"\>", 
                    ",", "\<\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"\
\>", ",", "\<\"Carbon Disclosure\"\>", ",", "\<\"Revenue (USD mn)\"\>", 
                    ",", "\<\"IntScaled\"\>", ",", "\<\"Ratings\"\>", 
                    ",", "\<\"Carbon Intensity Total (tonnes CO2e/USD \
mn)\"\>", ",", "\<\"Log of Revenues (USD mn)\"\>", 
                    ",", "\<\"Log of Scope 1 emissons (tonnes CO2e)\"\>", 
                    ",", "\<\"Log of Scope 2 emissons (tonnes CO2e)\"\>", 
                    ",", "\<\"Log of Scope 3 emissons (tonnes CO2e)\"\>"}], 
                   "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"TypeSystem`Atom", "[", "String", "]"}], ",", 
                    RowBox[{"TypeSystem`Atom", "[", "String", "]"}], ",", 
                    RowBox[{"TypeSystem`Atom", "[", "Real", "]"}], ",", 
                    RowBox[{"TypeSystem`Atom", "[", "Integer", "]"}], ",", 
                    RowBox[{"TypeSystem`Atom", "[", "String", "]"}], ",", 
                    RowBox[{"TypeSystem`Atom", "[", "Real", "]"}], ",", 
                    RowBox[{"TypeSystem`Atom", "[", "Real", "]"}], ",", 
                    RowBox[{"TypeSystem`Atom", "[", "Real", "]"}], ",", 
                    RowBox[{"TypeSystem`Atom", "[", "Real", "]"}], ",", 
                    RowBox[{"TypeSystem`Atom", "[", "Real", "]"}], ",", 
                    RowBox[{"TypeSystem`Atom", "[", "Real", "]"}], ",", 
                    RowBox[{"TypeSystem`Atom", "[", "String", "]"}], ",", 
                    RowBox[{"TypeSystem`Atom", "[", "Real", "]"}], ",", 
                    RowBox[{"TypeSystem`Atom", "[", "Real", "]"}], ",", 
                    RowBox[{"TypeSystem`Atom", "[", 
                    RowBox[{"TypeSystem`Enumeration", "[", 
                    
                    RowBox[{"\<\"A\"\>", ",", "\<\"B\"\>", ",", "\<\"C\"\>", 
                    ",", "\<\"D\"\>", ",", "\<\"E\"\>"}], "]"}], "]"}], ",", 
                    RowBox[{"TypeSystem`Atom", "[", "Real", "]"}], ",", 
                    RowBox[{"TypeSystem`Atom", "[", "Real", "]"}], ",", 
                    RowBox[{"TypeSystem`Atom", "[", "Real", "]"}], ",", 
                    RowBox[{"TypeSystem`Atom", "[", "Real", "]"}], ",", 
                    RowBox[{"TypeSystem`Atom", "[", "Real", "]"}]}], "}"}]}], 
                 "]"}]}], ",", 
               RowBox[{"\<\"Part\"\>", "\[Rule]", "\<\"elevation\"\>"}], ",", 
               
               RowBox[{"\<\"Symbol\"\>", "\[Rule]", "Part"}]}], 
              "\[RightAssociation]"}]}]}], "}"}]}], "]"}]}], "}"}], "]"}], 
     ",", "nClusters"}], "]"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\<\"Clusters\"\>"}]}], "]"}]], "Output",
 CellChangeTimes->{{3.8790879359950457`*^9, 3.879087972433138*^9}, 
   3.8793253699482117`*^9},
 CellLabel->
  "Out[107]=",ExpressionUUID->"85d2d5f1-9af0-4e41-89dd-2066e14a0695"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"nClusters", " ", "=", " ", "5"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"FindClusters", "[", 
    RowBox[{
     RowBox[{"Transpose", "@", 
      RowBox[{"Normal", "@", 
       RowBox[{"{", 
        RowBox[{"rev", ",", "disclosure"}], "}"}]}]}], ",", " ", 
     "nClusters"}], "]"}], ",", " ", 
   RowBox[{"PlotLabel", "->", "\"\<Clusters\>\""}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.879084923250383*^9, 3.879084945124851*^9}, 
   3.879087933148757*^9},ExpressionUUID->"71b48ad0-4374-4d00-ab83-\
2a7d7996ebd5"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.011000000000000001`],
      AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwBoQFe/iFib1JlAgAAABkAAAACAAAAOsssyBN2I0Bxj+UEWNoiQEl5bjz1
dh9ALyi8FPHMJUDYJ///trwgQB9XytcX8yZA0UL1tVkFIkAWfCHrQgYjQLLE
uOciUyJAbWgV6X8HIUC0FaM4rP4iQMB57TfoYiJASZGe/x4DIkCqxWHbekYj
QCnep2vEcyBAIHxLWxGwH0Bq6XRiQqUjQFeYYWzUVSNAiPz9kn/zI0BVPaV0
LgMjQNMEZEolTSFA0+bLzIiJIEA7P7HfQPohQEoP4R6FXiFAJsudOPF/IkC5
yifSt54cQA0t5SE86SBAOlv0XIBNIEBIbfuS8xEhQNrxZdqWNCZAjb4zgkEX
IUBHmz2WQhIjQHvUqZCJliBA5QvLpPhFH0CxV0XaUeggQGStkxmWTCBAhEmi
JYq2IEAK+NzEKL0fQGb5gJzBqRxA2XHkDM8ZJkAcgpd4uBsbQLbJCtasqyVA
Ey+2o2z8IEAhR4dyH74mQMgDAija/R1Aw8zH+P8SJECJyHtYRiAhQFpexK58
MyZAU+x96vMOH0CiQLT8c6YkQDxXrqc=
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], PointSize[0.011000000000000001`],
      AbsoluteThickness[1.6], 
     PointBox[{{10.39483364992049, 11.360394559266952`}, {12.102410851054422`,
       7.656578386151774}, {10.194564670928541`, 9.840969708454862}, {
      9.429109551036328, 12.443812727277455`}, {11.014158772546326`, 
      14.08339369233807}, {11.113437393225954`, 13.66876107458726}, {
      10.19392715181682, 9.285045165996298}, {10.692516269514174`, 
      12.206072645530174`}, {9.674911612104156, 16.038733637393307`}, {
      10.41665106567745, 10.52835107434402}, {11.152503504578783`, 
      14.003798092866912`}, {10.837060968542769`, 14.188971542107247`}}]}, 
    {RGBColor[0.560181, 0.691569, 0.194885], PointSize[0.011000000000000001`],
      AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwBcQGO/iFib1JlAgAAABYAAAACAAAA8jKOoXUBGkD/U3kG0VsjQNUftyHt
ChdA3t/w2IYqIEDSeCGBPk8YQOyHMltOiiBAB+KIpYErB0BKFkM3SCwQQHLW
2+4j2RRAhz8uU46CG0BOGiWRSYYYQAs6rQi8EiFAfVTZzOKDFUC7Mp8Sz1Mg
QItZc3SM+xhAhgy4oJILIkAcPkqoEroZQA3AHDvYBiJA2iK3k9/QEkDeFfac
T08eQMFEHB9XZxdABLbgb0LXIUAQUudiMwETQIycVmCsBhNATmfRuL2aGUBe
HpsRpKsjQA6qIqWDExdAYucnak7AFEC0Y2zQUPMTQL7beMIKpBtAEQh9mFpc
GEAIm3YZlzUgQNEVPcIinRZAc+prGAh7HkB69b8CQDQSQNLGxkNjYyFAqu1p
ZpaZD0CnRglsSjYXQBvTo7HlMRZArBo+FAAlH0AVxYwtFFgWQDvcC1MbFx5A
hbOPo1gZFEC5aAsjgQEgQL/3hf0=
      "]]}, 
    {RGBColor[0.922526, 0.385626, 0.209179], PointSize[0.011000000000000001`],
      AbsoluteThickness[1.6], 
     PointBox[{{9.658197823621611, 17.5311223622327}, {8.015361548347041, 
      17.455045084180835`}, {8.736312287462933, 16.58733330504497}, {
      6.1339451816921695`, 12.11507870684081}, {8.544980170797432, 
      17.313625720093544`}, {6.359140728759987, 12.404008877115016`}, {
      6.692988637711948, 12.437203663926411`}, {6.391642955770761, 
      12.038049749903001`}, {7.284590295929568, 15.84667221301095}, {
      8.00337594870101, 15.708072997449786`}, {5.6941664906295415`, 
      14.069826931783416`}, {7.434543735507264, 17.271188217934796`}, {
      6.928575473097698, 15.706493113854584`}, {6.275189801570579, 
      11.63242670366998}, {7.504068709694129, 16.32224265288664}, {
      7.1724212001964265`, 13.833351939745757`}}]}, 
    {RGBColor[0.528488, 0.470624, 0.701351], PointSize[0.011000000000000001`],
      AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwBQQG+/iFib1JlAgAAABMAAAACAAAAo6bxCm1xHEAEUhbtwT4aQJmwYgJO
0h9Ag7jT2dUyHkDS5ulu4TMaQPP6xsXc2hZAz90M9/VEG0BzcmwEF6cYQFgx
SJaErRxAcMT+a5u8GkBZStIlVBQZQOD+1sOt2xdAYog3vPdiHUD0wCCtYPga
QOrqBcqj4BlAg8Ok9nlDFkBCNNhN/FQbQMmijJgfpxlA6ERdJKnkGkCcY3fy
7w0gQLf7W0e0pBlAILswehfKGkBG5t5s/7EeQJ/viQdC0hxAjNkinfVpGkAn
51/+KfMYQJHPPdrPoB5A4yM+o7D0HEDC0R7rivAdQAkhP3kTuRxAzJoJnmES
G0DTnqJB6toZQGtgz9G5vhpAyq6rV/C6IUBSPW2IGVkbQAwVDg/8ORlAxV1v
JHZQGkAJxRVj/hgZQK/MjHw=
      "]]}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{2.704448219303231, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"Clusters of previous graph\"", TraditionalForm],
  PlotRange->{{2.704448219303231, 12.102410851054422`}, {0, 17.5311223622327}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8790849537402782`*^9, 3.8790855855984173`*^9},
 CellLabel->"Out[75]=",ExpressionUUID->"29aa516f-0264-4e98-86ef-0c7a77c6e208"]
}, Open  ]],

Cell[BoxData[""], "Input",ExpressionUUID->"1b6d7cc6-7822-4ee8-b5e6-586263c327a0"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Machine Learning ", "Section",
 CellChangeTimes->{{3.878617887960531*^9, 3.8786178922249804`*^9}, {
  3.8786180177480707`*^9, 
  3.8786180230148277`*^9}},ExpressionUUID->"9cfeceee-578b-479e-9e2b-\
6bb082aed526"],

Cell[CellGroupData[{

Cell["Dataset Preparation", "Subsection",
 CellChangeTimes->{{3.878618033222563*^9, 
  3.87861805478168*^9}},ExpressionUUID->"23ccf5ee-bcae-4dce-ad62-\
cf12062b8105"],

Cell[TextData[{
 "Prepare the dataset to use as an input for the machine learning models that \
we are going to create. In particular, we are going to divide the dataset in \
two new dataset: ",
 StyleBox["Training set",
  FontWeight->"Bold"],
 ", which includes 80% of all the rows of the dataset, while the ",
 StyleBox["Test",
  FontWeight->"Bold"],
 " ",
 StyleBox["set",
  FontWeight->"Bold"],
 ", which includes the remaining 20%.\nThe training set will be used to train \
our models, while the test set in order to understand the accuracy of our \
models."
}], "Text",
 CellChangeTimes->{{3.8788059084200363`*^9, 3.87880591594809*^9}, {
  3.878805982484206*^9, 
  3.878806133455037*^9}},ExpressionUUID->"6b2ba3af-bd0c-404b-9a30-\
d5bc7bfff9d7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"datasetML", " ", "=", " ", 
    RowBox[{
     RowBox[{"KeyDrop", "[", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Company\>\"", ",", " ", "\"\<ISIN\>\"", ",", " ", "\"\<TCUID\>\"",
         ",", " ", "\"\<integralScore\>\"", ",", " ", "\"\<IntScaled\>\"", 
        ",", "\"\<Carbon-Scope 1  (tonnes CO2e)\>\"", ",", " ", 
        "\"\<Carbon-Scope 2  (tonnes CO2e)\>\"", ",", " ", 
        "\"\<Carbon-Scope 3 (tonnes CO2e)\>\"", ",", " ", 
        "\"\<Carbon Intensity Total (tonnes CO2e/USD mn)\>\""}], "}"}], "]"}],
      "@", "finalds"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Drop", " ", "columns", " ", "that", " ", "are", " ", "not", " ", "needed",
     " ", "for", " ", "machine", " ", "learning", " ", "techniques"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"nobs", ",", "ncol"}], "}"}], "=", 
    RowBox[{"Dimensions", "[", "datasetML", "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "Retrieve", " ", "the", " ", "number", " ", "of", " ", "rows", " ", "and", 
    " ", "columns", " ", "of", " ", "the", " ", "dataset"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"trainingset", ",", "testset"}], "}"}], "=", 
    RowBox[{"TakeDrop", "[", 
     RowBox[{
      RowBox[{"RandomSample", "[", "datasetML", "]"}], ",", 
      RowBox[{"Round", "[", 
       RowBox[{
        RowBox[{"nobs", "*", "0.8"}], ",", "1"}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "Divide", " ", "the", " ", "dataset", " ", "in", " ", "training", " ", 
    "set", " ", "and", " ", "test", " ", "set"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"AccuracyAss", " ", "=", " ", 
    RowBox[{"Association", "[", "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Create", " ", "an", " ", "empty", " ", "association"}], ",", " ", 
    RowBox[{
    "to", " ", "fill", " ", "in", " ", "with", " ", "accuracy", " ", "of", 
     " ", "our", " ", "models"}]}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.878715124656487*^9, 3.878715136895567*^9}, {
   3.878715194002536*^9, 3.8787152977820997`*^9}, {3.878715337211686*^9, 
   3.878715485597872*^9}, {3.8787155917356863`*^9, 3.878715703697961*^9}, {
   3.8787158328798227`*^9, 3.878715837466886*^9}, {3.878715876319783*^9, 
   3.878715876667737*^9}, {3.878715910812853*^9, 3.878715927813305*^9}, {
   3.878716260609582*^9, 3.8787162755669003`*^9}, {3.8788059306470003`*^9, 
   3.878805973430365*^9}, 3.878806341120471*^9, {3.8788063865547953`*^9, 
   3.878806441769845*^9}, {3.878806493253716*^9, 3.878806503942992*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"7d247cef-d508-4632-b82d-0c996ff173ab"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classification", "Subsection",
 CellChangeTimes->{{3.878618143305781*^9, 3.878618144962409*^9}, {
  3.8786189939708767`*^9, 
  3.8786190030333223`*^9}},ExpressionUUID->"cd9d058a-068e-49c5-a54a-\
179c014ccdab"],

Cell[CellGroupData[{

Cell["Logistic Regression", "Subsubsection",
 CellChangeTimes->{{3.878805416699134*^9, 3.878805417721744*^9}, {
  3.878806962177305*^9, 
  3.8788069673045464`*^9}},ExpressionUUID->"919c1118-c19d-49c2-b1cb-\
cdc52c16953a"],

Cell["\<\
Train a classifier using probabilities from linear combinations of features\
\>", "Text",
 CellChangeTimes->{{3.878805704170437*^9, 3.8788057223306637`*^9}, {
   3.878805766632689*^9, 3.87880578974465*^9}, {3.878806943975576*^9, 
   3.878806946422574*^9}, 
   3.8793546422569942`*^9},ExpressionUUID->"358fc56b-581c-400b-a2cb-\
e1fe47c98ca6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cRisk", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainingset", "->", "\"\<Ratings\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<LogisticRegression\>\""}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Information", "[", "cRisk", "]"}]}], "Input",
 CellChangeTimes->{{3.8786185865414057`*^9, 3.878618597824006*^9}, {
  3.878618646892776*^9, 3.878618648994371*^9}, {3.878618877270843*^9, 
  3.878618880432907*^9}, {3.878618998083866*^9, 3.878619004451974*^9}, {
  3.8786191510115213`*^9, 3.878619159945651*^9}, {3.8786192237272882`*^9, 
  3.878619223941098*^9}, {3.878806954912199*^9, 3.878806959223152*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"e494084e-deed-4ffe-a42a-57f607634d26"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Numerical\"", 
                    ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"A\"", "\"C\"", "\"D\"", "\"E\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Numerical\"", 
                    ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"A\"", "\"C\"", "\"D\"", "\"E\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["2292", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 2292, "ClassNumber" -> 4, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "Country" -> <|"Type" -> "Nominal"|>, 
           "GICS Sector Name" -> <|"Type" -> "Nominal"|>, 
           "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Disclosure" -> <|"Type" -> "Text"|>, 
           "Revenue (USD mn)" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
           "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|
               "FeatureNames" -> {
                 "Country", "GICS Sector Name", 
                  "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                  "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                  "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                  "Carbon Disclosure", "Revenue (USD mn)"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 7|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Nominal", "Nominal", "Numerical", "Numerical", "Numerical", 
                  "Text", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6", "f7"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
           "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|"(f6(f1f2)(f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGBwBeIM/YV7W75Nsh+lhwbtJh5bctH1ONVpBjD4gJMGANGj
EGk=
              "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 2292, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>, 
                    "f6" -> <|"Type" -> "Text"|>, 
                    "f7" -> <|"Type" -> "Numerical"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 8728850163752787708|>], 
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4012203223801137025|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7247984987659546603|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>, 
                    "Index" -> {<|
                    "AUSTRIA" -> 1, "BELGIUM" -> 2, "BULGARIA" -> 3, 
                    "CROATIA" -> 4, "CYPRUS" -> 5, "CZECH REPUBLIC" -> 6, 
                    "DENMARK" -> 7, "ESTONIA" -> 8, "FINLAND" -> 9, "FRANCE" -> 
                    10, "GERMANY" -> 11, "GREECE" -> 12, "HUNGARY" -> 13, 
                    "ICELAND" -> 14, "IRELAND" -> 15, "ITALY" -> 16, 
                    "LUXEMBOURG" -> 17, "MALTA" -> 18, "NETHERLANDS" -> 19, 
                    "NORWAY" -> 20, "POLAND" -> 21, "PORTUGAL" -> 22, 
                    "ROMANIA" -> 23, "SLOVENIA" -> 24, "SPAIN" -> 25, 
                    "SWEDEN" -> 26, "SWITZERLAND" -> 27, "UKRAINE" -> 28, 
                    "UNITED KINGDOM" -> 29|>, <|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>, <|"" -> 1|>}, 
                    "MissingCode" -> Indeterminate, "Version" -> {13.1, 0}, 
                    "ID" -> 4113760982813578529, 
                    "Output" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {79.46666212202445, 22.194053219786632`, 
                    107.61244353226444`, 3257.480947285103}, 
                    "StandardDeviation" -> {393.01607179380045`, 
                    67.03477704200654, 159.36202682130502`, 
                    11368.305968784858`}, 
                    "Output" -> <|
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 3752698420053720059|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3, 
                    "SetSize" -> {29, 11, 1}|>|>, 
                    "Boundaries" -> {{-0.5, -0.46551724137931033`, \
-0.43103448275862066`, -0.39655172413793105`, -0.3620689655172414, \
-0.3275862068965517, -0.2931034482758621, -0.2586206896551724, \
-0.22413793103448276`, -0.1896551724137931, -0.15517241379310343`, \
-0.12068965517241381`, -0.08620689655172414, -0.051724137931034475`, \
-0.017241379310344807`, 0.017241379310344862`, 0.051724137931034475`, 
                    0.08620689655172409, 0.12068965517241381`, 
                    0.15517241379310343`, 0.18965517241379315`, 
                    0.22413793103448276`, 0.2586206896551724, 
                    0.2931034482758621, 0.3275862068965517, 
                    0.3620689655172413, 0.39655172413793105`, 
                    0.43103448275862066`, 0.4655172413793104, 
                    0.5}, {-0.5, -0.40909090909090906`, -0.3181818181818182, \
-0.2272727272727273, -0.13636363636363635`, -0.04545454545454547, 
                    0.045454545454545414`, 0.13636363636363635`, 
                    0.2272727272727273, 0.31818181818181823`, 
                    0.40909090909090906`, 0.5}, {-0.5, 0.5}}, 
                    "Version" -> {13.1, 0}, "ID" -> 2082886514676041914, 
                    "Output" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>, 
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Spans" -> {
                    Span[1, 3], 
                    Span[4, 7]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {13.1, 0}, "ID" -> 
                    3471102231048770802|>]}, "Invertibility" -> "Approximate",
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBmQFm/iFib1JlAgAAAAcAAAAHAAAAnnLlvqoafz+KYGYlv1SAv810wMpG
TDU/AUBONTBMhj+1cQuaUpuJv9YtYKAy/u8/JDt4C5UVe789VwE+XMaev6Re
LLDVXZW/XHEJgJ3inL+2nmsu51OOP9S7I3DQmH0/jzEBNLwOez84Ty8A9vXv
PwC4ljNYZnA/YvKlp+ZMWb8BfrsAaw7XvmXr3vEeUli/wN0fKg3/778UY4j9
LZCJv8n0OTY3a34/FuhJnnUT4r+CZtOVibnFv0oHbnB91MW/Yfks1GxA6b9P
BLqrDJNRv53AkMaNg4c/hST5mX0djL9QvbDVAMfhv0LLcpbgbs6/p6R84MDE
4b8RbOOt2zniPw87V6knfWi/+LzAM/eKcL+W8GVWKG6nv+1xeHQpGuK/ALPE
fAS+lT/s0sbflFbpP8BlRZdyV80/FLkGqS6tZb8AripyzMVbP7A3DnyjnGM/
kq6dzfP9zL+CSl7Il5buP9K+dmxj4se/PngTNwuaab/8oz2v+vZjvxlpOGEp
YIM/nkOrpVMmgD+WkMi9
                   "], 
                  "Precisions" -> {0.6080837241689073, 1.0249459814305149`, 
                   1.4338854587567862`, 1.4583742615351594`, 
                   12.050298831843332`, 17.732403162990845`, 
                   25.363460701880502`}, "NoisePrecision" -> None, 
                  "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {
                    0.14781839702703387`, -0.03761867444492348, \
-0.0018568141330923247`, 
                    0.00002093317943277569, -0.000032094047490506016`, \
-0.00028672757917445207`, 0.00010586837139914856`}, 
                    "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4722156746689135088|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7.|>,
                     "Key" -> "((f1f2f6)(f3f4f5f7))", "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 7, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {
                    0.14781839702703448`, -0.03761867444492345, \
-0.0018568141330923336`, 
                    0.000020933179432783272`, -0.00003209404749049296, \
-0.00028672757917443646`, 0.0001058683713990839}, 
                    "StandardDeviation" -> {0.23795387694998307`, 
                    0.2048229568696138, 0.2881101140977073, 
                    1.0000629888389347`, 1.0001224192028917`, 
                    0.9999940861686942, 1.0000688309807984`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    4503155047815583877|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                   "Mean" -> {
                    0.14781839702703448`, -0.03761867444492345, \
-0.0018568141330923336`, 
                    0.000020933179432783272`, -0.00003209404749049296, \
-0.00028672757917443646`, 0.0001058683713990839}, 
                   "StandardDeviation" -> {0.23795387694998307`, 
                    0.2048229568696138, 0.2881101140977073, 
                    1.0000629888389347`, 1.0001224192028917`, 
                    0.9999940861686942, 1.0000688309807984`}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 7, 
                   "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   4503155047815583877|>], "InputDimension" -> 0, 
                "OutputDimension" -> 7, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"UNITED KINGDOM"}, "ID" -> 
                    3679654460434315804|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"Financials"}, "ID" -> 4509295814520375433|>,
                     "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {0.4051568490028274}, "ID" -> 
                    4029740649927229730|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {7.173747390485207}, "ID" -> 
                    5883454897782969724|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {28.34708907560874}, "ID" -> 
                    151013525008169422|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 8313293367344529314|>, 
                    "f7" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {66.0991}, "ID" -> 2774697970610267399|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.103357, "MaxTrainingMemory" -> 5462528, 
                  "DataMemory" -> 541240, "FunctionMemory" -> 86128, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 12, 7, 17, 0, 55.862734`8.499697161020437}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, 
                  "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-5.612930781032486, -5.612930781032486, \
-5.3272745754000566`, -5.227760758272564, -5.1901459558849306`, \
-4.971419065536934, -4.898762215473115, -4.883258712808405, -4.8788972407619, \
-4.853815385428406, -4.8532432028568495`}, 
                   "LeftBoundary" -> -5.3272745754000566`, "LeftScale" -> 
                   0.14282810281621483`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[35.48825552541895, 0.5736581387301678], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 8833432794738512184|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f3f4f5f7)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
               "(f1f2)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                 "Version" -> {13.1, 0}, "ID" -> 7001699027996678713|>], 
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "(f1f2)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Version" -> {13.1, 0}, "ID" -> 4268131072254999855|>]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Mean" -> {79.46666212202445, 22.194053219786632`, 
              107.61244353226444`, 3257.480947285103}, 
             "StandardDeviation" -> {393.01607179380045`, 67.03477704200654, 
              159.36202682130502`, 11368.305968784858`}, 
             "Output" -> <|
              "(f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 1927666520227175614|>], 
           MachineLearning`MLProcessor[
           "ToLowerCase", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 8121204540162656102, 
             "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "RemoveDiacritics", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 1964114494773798714, 
             "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "(f1f2)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
             "Output" -> <|
              "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f2)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "Sequence", <|
                "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Processors" -> {
                   MachineLearning`MLProcessor[
                   "TextToNominalSequence", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {13.1, 0}, "ID" -> 3628505808038090290, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                   MachineLearning`MLProcessor[
                   "NominalSequenceToTFIDFVector", <|
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> CompressedData["
1:eJw1lEuO1FAMRXvACmg2wAKQ/P8soSVGLIEBEiMGsH9xkpdSqlIp28++vtfO
159/fvyqt7e3v5+4ff/999/HFx6+rVqq2U5t5uas6uMQ9dFe5zNhJb3HMWvS
Km1rvToSKY8jNX27tJV0aV79ODRLoq/wmC31quPoyeyWtMycu46+HDZewFKJ
ohAHj6PWCogmCuTOGPHjyBUAd5tW+tToPicytTykamdkPMuf4gEcA+a2rxM1
rxNBhfBc7fIBHSGPIwBIYaECtFDvSUWYhUY3/lQt63g5TJXO0mFWFlAPJQ6f
smRRDl38dz6OCNeUdlDNRa4/xR2MQrsxzRHOv2i3lAVShyw+8trLoQjqFTOT
BdXtdhxaEwVHCN9bgrIPXM0IhcGrBQu0nPh4PyR2V18t65jBcn18xm6BcnSu
l1i1sXabIy6IQxfS0WU0fZsTLt1UmCv4rTlmOoRwujoNi+Vt3pQg1rhPgDTk
hqJKZnJKTozTRu6xZ6FgFk2P9CXeyw5qWXrJgj8ThvK2V2vQJunFkVTMbjuM
QGMkE5jG12Vuu9t0OK0zNSJxrcWx0yu5BK4YeHQwP/bsCvijTZKUDTP/fpMA
FPQuS9IR0afuTVZlcF2z0ZQ4draQrIRv3U9Pv7TL0nQVBeqqEyc/e8BSiTvy
LfyUPvHwydaynMviFLofHpgjppClUKc0a2NHcmaYcP7ZoFkIbB87lZh/bVBO
uVyb+dgvqIau/AwjcfSqaywGdNEBTcawH3sjH3O2AdfLGuaJZ4Ad8HrJEmy5
Vx57+/WuAaBrVaHEE89SQQMnIAR+WN7bDgSWTp1LzJUZOnV5wQ2KFAqyKSMv
HpZlDgaRyiAIiJ7/oUHtSA==
                    "], "Values" -> None, "DefaultValue" -> -1, 
                    "HashFunction" -> 
                    Function[{
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {13.1, 0}|>], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+IA600prMte2//Yzh0uc0Lc4b/OvO2f3Hgdgjkun2YJ
fmyfeW918d4CDofDty3LvooKOtRuvD7VL13SYc2dWdfPNUk4HN4jtIKJicNB
lzn76IFqBofQHt6J5Rt/2/t9ZOApl7lqv6tA53swk6jDmoQr10tqLtnD9MPs
3e2fdnPWAR6HimUtfArzGRxgfJi9ySs5VzlpicPthfF9+ne8+NzyDW6ejsd+
B459HHBzlvTdKFkV9h1D3jWQ7fNc8T/2MD7MvwwQ0NA/weFNwcJn9umsKRvl
P7A7PM2JEnW6/9z+h37PXDn1b3D/wMyFhRuMD3M3TBydhtl7/8LZ5D8bf9rD
3Ksyf8un36kCDrt/bPsqpisDp2HqYf4GAF2Lu9w=
                    "], "Version" -> {13.1, 0}, "ID" -> 5006491608602871221, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                 "Invertibility" -> "Impossible", "StructurePreserving" -> 
                 True, "Missing" -> "Forbidden"|>], 
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "(f1f2)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Index" -> {<|
                   "AUSTRIA" -> 1, "BELGIUM" -> 2, "BULGARIA" -> 3, "CROATIA" -> 
                    4, "CYPRUS" -> 5, "CZECH REPUBLIC" -> 6, "DENMARK" -> 7, 
                    "ESTONIA" -> 8, "FINLAND" -> 9, "FRANCE" -> 10, "GERMANY" -> 
                    11, "GREECE" -> 12, "HUNGARY" -> 13, "ICELAND" -> 14, 
                    "IRELAND" -> 15, "ITALY" -> 16, "LUXEMBOURG" -> 17, 
                    "MALTA" -> 18, "NETHERLANDS" -> 19, "NORWAY" -> 20, 
                    "POLAND" -> 21, "PORTUGAL" -> 22, "ROMANIA" -> 23, 
                    "SLOVENIA" -> 24, "SPAIN" -> 25, "SWEDEN" -> 26, 
                    "SWITZERLAND" -> 27, "UKRAINE" -> 28, "UNITED KINGDOM" -> 
                    29|>, <|"Communication Services" -> 1, 
                    "Consumer Discretionary" -> 2, "Consumer Staples" -> 3, 
                    "Energy" -> 4, "Financials" -> 5, "Health Care" -> 6, 
                    "Industrials" -> 7, "Information Technology" -> 8, 
                    "Materials" -> 9, "Real Estate" -> 10, "Utilities" -> 
                    11|>}, "Output" -> <|
                  "(f1f2)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> {CompressedData["
1:eJxFSn0s1HEcvgh3JCcVSadrRJS2iOS+n++RNLOyY9e8bBVK5FZe2pmplfQ2
L+mFi9ZOeZlqesXd4ff7fMtFqdUKNVPUvJ1qtV60Eqv4p57teZ49L9LEfVHJ
ZgKBIEs4LVEJ2cGZmQk50ZYzYVeCyneNamaUTHOmmsZhwX//R+OvI7jBTwPl
T5OgWtjEfQuKpGUHdUTUZo+GdwiO7yMhN3wEhm4FU3G3glaWxuFVm+OYstYA
NS/r4MmgI7rKtehS+RaTWjqIXHhftmggDvY6JeKfaiPJ7CpmD00CNjVrgLQZ
02h70gTqGt7gjW/505/XXJnzUJA6NQtiJZ6yUX8Xmv17DDy66sDtwDXQFPuj
+PIU2geksRB9PzZo/QkJb5bJe0382OHPYNOugaUu8WzSS0ppdxtIhgPY3JJA
zsKiHVqrHKim9jkaQzzoyDIpt29nDAyWMLJriRXmX3HA5koxWx5zga8KDEKD
2BweD+0EzztFNP7aCNcU4Q2RdhPAhhaw2HSl7MMXa26Qq8HmZ7VQUWEiLU5h
fInXpfUD83LZsUkJU1bK2QqFkOr4xWzsazvmKO6S530iVodRspTePKJUZ2Dv
6gLcfdaHbgqzQm9nOWjJR5LabckdOnmR/9A5n9kFLKbK8XoynnUezUxrQJgj
Z9v601h0Wg8mlhph421rFnpJGeRbvZAPbnKFPNUf/OSgwprVHEwWOHEnvE6T
M+d0WEK2w/db+4FL+Q01Rc50rrYZaV88QtEq6HhlBo2yDS0/Xd35Kv1RsF43
gS/cnuLmnCiZd28xjm7XwIKDAvBorQe9Ph7z23ZA+XAfz034kC+6TnjWEUrS
73aQpCc/IbkwD6S0D7Z61sPnm0dQbcjgzXtq+U6RhIXOVqBhDjCVIpZmT2UB
na/GiLpG0CYuojqrIhQ/mk3lK8+g6BUHfq9lJOL6FvDqv4cVu81Z8mNfenPP
Qhq9WUTt9e5MbfsAw6XdEGfNwamEq2iyvccV/khhfwFDUVyt
                   "], 
                   RawArray["Real32",{{0., 0., 0., 0., 0.}, {
                    0.8618162870407104, -0.5170427560806274, 
                    0.13067105412483215`, 0.0519464910030365, 
                    0.2821357548236847}, {
                    0.05358464643359184, -0.4481622278690338, \
-0.2585599422454834, 
                    0.41537076234817505`, -0.8721502423286438}, \
{-0.47762107849121094`, 0.04566793516278267, 0.15804912149906158`, 
                    0.1324063390493393, -0.39964571595191956`}, {
                    0.41636601090431213`, -0.126698300242424, \
-1.0076189041137695`, 0.15269236266613007`, 
                    0.022659795358777046`}, {-0.5130622982978821, 
                    0.8752748370170593, -0.24996790289878845`, \
-0.6034899353981018, -0.10572776198387146`}, {-0.8138381838798523, 
                    0.7515830397605896, -0.6295681595802307, \
-1.1122981309890747`, 
                    0.13304246962070465`}, {-0.2974144518375397, \
-0.40220165252685547`, 
                    0.2797980308532715, -0.9168489575386047, \
-0.24606038630008698`}, {-0.4358099699020386, 
                    0.24717211723327637`, -0.1983363777399063, 
                    0.6381807923316956, -0.04446683079004288}, {
                    0.061473648995161057`, -0.23882365226745605`, 
                    0.6821203827857971, -0.5920867323875427, \
-0.44236046075820923`}, {-0.042206939309835434`, 0.2029142528772354, 
                    0.6734306812286377, -0.047500185668468475`, \
-0.1775016486644745}, {-0.24699686467647552`, -0.06097349524497986, 
                    0.15785102546215057`, 
                    0.13611683249473572`, -0.43699583411216736`}}]}, 
                 "Version" -> {13.1, 0}, "ID" -> 1419003377571028604|>]}, 
             "Invertibility" -> "Impossible", "StructurePreserving" -> True, 
             "Missing" -> "Forbidden"|>], 
           MachineLearning`MLProcessor[
           "MergeVectors", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f2)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>, 
               "(f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Spans" -> {
               Span[1, 54], 
               Span[55, 65], 
               Span[66, 69]}, "Wrappers" -> {SparseArray, Identity, Identity},
              "Output" -> <|
              "(f6(f1f2)(f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGBwBeIM/YV7W75Nsh+lhwbtJh5bctH1ONVpBjD4gJMGANGj
EGk=
                  "], "Type" -> "NumericalVector"|>|>, "Version" -> {13.1, 0},
              "ID" -> 4482410365441739632|>]}, "Invertibility" -> 
         "Impossible", "StructurePreserving" -> True, "Missing" -> 
         "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 6906009905629070033|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|"A" -> 1, "C" -> 2, "D" -> 3, "E" -> 4|>}, 
             "MissingCode" -> 0, "Version" -> {13.1, 0}, "ID" -> 
             5430399239532347052, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {4}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 3683782806807983502|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "A" -> 0.003484320557491289, "C" -> 0.0039198606271777, "D" -> 
        0.3623693379790941, "E" -> 0.6302264808362369|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Ratings", 
          "Order" -> {
           "Country", "GICS Sector Name", 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
            "Carbon Disclosure", "Revenue (USD mn)", "Ratings"}|>], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {4, 5}, 0., {
      1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "LogProbabilitiesFunction" -> 
      LinearLayer[<|
        "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1:eJw9UG9IU3EUXU5SsRlO0MZksNSlgZXT9MP23rORiuFMJkKmos5UJkvzT1iz
UmuLiVpaEy3BUkNRKTSEtN7vPq2F9SEyxDJnmPYPzagcuDK1vIP8cN655757
7rn8pNoiTZ4Lj8crdd/8aLLLD5WUZJ9N3o4iN1sfLtfjT/4mYjZx3hSlfLAg
gDLFVcid3UtGOzLJSRVND010k40eh/KvaJ08adoGvoZ1YhmTEcXbaHZaLSFD
E3sAvVXCOXZfrx8go7eLriHoRdYu6wBrzeMK54ykL2FL7w7zBGTM3TyDpyj4
DPmFg2RH5zclm2cAzMHZToPRybgb70SNQG+/JZJzZl8LpVTLOQSBfczmnbgJ
t1KlXG9EN/u1NImpdKsGl+Igmv+phbGbqojirmhEYDzN9AU2MOIkKWXUWClb
iwcnLrODaXxGOW8RgCq6FvRua+yjxo+E/RlLt8p6yHD7snJuOAq0c6vExtWD
+lg1OTovZB3vi0irLMTpdbiusvydPoCM3sRaM0Evssk9ErCedG0iOFMVI9nS
ojfBgIy5+CZfDlfC1EEfkInjSHlaHGAOzn6Qm52Mu/FO1Aj0DjQ1Au691O5B
lVtzCAL7mB1ZcRHizJOcUHeBmyq4waSIU7nqK7GM3739zAFrOAi92ziX5ybG
+0cb7T+1Aospu+jUjFGqJ0xA6/pHqFfMZXh2bhps6juU3dNKgrx+0fXpPrDU
W0eZx/PBfKabyrDzuQkqnRiPFCpXEsfZ+vTrgN5i3wba6hA6Gb2NL+0Evche
WWkU1glPbSzOJNfJ6f/6fqZZiYy5+Cazai3dtSEBXbMIYOC2EnNwNjSgg0XG
3XgnagR6SZ87g3vXpBF0f/AMQWAfsw3SeDiul9KB/jZ2UNrK2F+EQEV8AzOW
+JAK4X5TFs8sOFUTQL+zvab58mLSvNBMvnupYPHPEvkH+XGzOg==
            "], "Biases" -> 
           RawArray[
             "Real32",{-4.695827960968018, -4.5182905197143555`, \
-0.39370542764663696`}]|>, 
         "Parameters" -> <|
          "OutputDimensions" -> {3}, "$OutputSize" -> 3, "$InputSize" -> 69, 
           "$InputDimensions" -> {69}|>, 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{69}, NeuralNetworks`AtomT]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>|>, <|
        "Version" -> "13.1.4", "Unstable" -> False|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "FirstValues", <|"Info" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGBwA+JJKp5AdMh+yymvf8euTxilhwi93qtoz0/G41Snb/mw
CnG9f4+TBgCKtljI
            "], "Type" -> "NumericalVector"|>, "Key" -> 
         "(f6(f1f2)(f3f4f5f7))", "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
      "Calibrator" -> None, "Method" -> "LogisticRegression", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> 1., "Options" -> <||>|>, 
        "OptimizationMethod" -> <|"Value" -> "LBFGS", "Options" -> <||>|>, 
        MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 1.306397`6.567620167915228, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.644156724593555, 0.0304546507765487], "Accuracy" -> 
         Around[0.7007516113043899, 0.030163449582461102`], "EvaluationTime" -> 
         4.251495874447665*^-6, "TestSize" -> 458, "ModelMemory" -> 11840, 
         "ModelUtility" -> -0.26279030028273687`, "TrainingSize" -> 1834, 
         "TrainingTime" -> 0.12589254117941673`, "TrainingMemory" -> 4141256, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.644156724593555, 0.02153469008276574]}, "AccuracyHistory" -> {
           Around[0.7007516113043899, 0.02132877974373678]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           1., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 2292|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.01|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.224318443094046, 0.0895212355056767], "Accuracy" -> 
              Around[0.5585539358630469, 0.02635966993463374], 
              "EvaluationTime" -> 2.8521123994793435`*^-6, "TestSize" -> 700, 
              "ModelMemory" -> 11840, "ModelUtility" -> -0.9100945473477948, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 337552, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.224318443094046, 0.06330107268626192]}, 
              "AccuracyHistory" -> {
                Around[0.5585539358630469, 0.018639101360618675`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.4270878632403456`, 0.22535175778508684`], "Accuracy" -> 
              Around[0.6096010451825556, 0.0216624901593555], 
              "EvaluationTime" -> 2.2535743732392292`*^-6, "TestSize" -> 1000,
               "ModelMemory" -> 11840, "ModelUtility" -> -1.5982838199332743`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 247568, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.4270878632403456`, 0.15934775608214324`]}, 
              "AccuracyHistory" -> {
                Around[0.6096010451825556, 0.015317693689067128`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7111954957053166, 0.029298705999781027`], "Accuracy" -> 
              Around[0.6372460192368559, 0.015172637008585036`], 
              "EvaluationTime" -> 2.7529222201227042`*^-6, "TestSize" -> 1992,
               "ModelMemory" -> 11840, 
              "ModelUtility" -> -0.36058987770515016`, "TrainingSize" -> 300, 
              "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
              722096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7111954957053166, 0.020717313692436148`]}, 
              "AccuracyHistory" -> {
                Around[0.6372460192368559, 0.010728674517252451`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 2.7529222201227042`*^-6, "MeanCrossEntropy" -> 
             Around[0.7111954957053166, 0.029298705999781027`], "ModelMemory" -> 
             11840, "TrainingMemory" -> 722096, "TrainingTime" -> 
             0.6227157032539622|>, "Index" -> 1|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 1.*^6|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.365289231074334, 0.0031497725350361945`], "Accuracy" -> 
              Around[0.5504732809206725, 0.07038729003894888], 
              "EvaluationTime" -> 2.098587138277019*^-6, "TestSize" -> 1800, 
              "ModelMemory" -> 11840., "ModelUtility" -> -1.0050198775190273`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.003981071705534968, 
              "TrainingMemory" -> 101509.33333333333`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[1.3652901840504277`, 0.004724664651185827], 
                Around[1.3652882780982407`, 0.004225858768128892]}, 
              "AccuracyHistory" -> {
                Around[0.48103325146637727`, 0.017562867936323574`], 
                Around[0.6199133103749677, 0.015235899425577256`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.365271985670306, 0.009449120846181542], "Accuracy" -> 
              Around[0.5502167965523209, 0.03497931054187846], 
              "EvaluationTime" -> 2.124418344104054*^-6, "TestSize" -> 400, 
              "ModelMemory" -> 11840, "ModelUtility" -> -1.0059291988170096`, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 186848, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.365271985670306, 0.006681537426586136]}, 
              "AccuracyHistory" -> {
                Around[0.5502167965523209, 0.024734107685392345`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.3749390611179362`, 0.0031279340733494816`], "Accuracy" -> 
              Around[0.6271467909477425, 0.015274492228084118`], 
              "EvaluationTime" -> 1.3611509352442106`*^-6, "TestSize" -> 1992,
               "ModelMemory" -> 11840, "ModelUtility" -> -1.012056578609299, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 717240, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3749390611179362`, 0.002211783394369878]}, 
              "AccuracyHistory" -> {
                Around[0.6271467909477425, 0.010800697033659497`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1.3611509352442106`*^-6, "MeanCrossEntropy" -> 
             Around[1.3749390611179362`, 0.0031279340733494816`], 
             "ModelMemory" -> 11840, "TrainingMemory" -> 717240, 
             "TrainingTime" -> 0.05218621282382172|>, "Index" -> 2|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.00001|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[41.39519254577428, 4.96115381211094], "Accuracy" -> 
              Around[0.5108217224802495, 0.022242542331331574`], 
              "EvaluationTime" -> 2.318613496105109*^-6, "TestSize" -> 1000, 
              "ModelMemory" -> 11840, "ModelUtility" -> -4.4400439778489815`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 191608, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[41.39519254577428, 3.5080655030531362`]}, 
              "AccuracyHistory" -> {
                Around[0.5108217224802495, 0.015727852513313396`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[23.366482468174222`, 2.639675670932021], "Accuracy" -> 
              Around[0.5737810744072847, 0.021943240232852816`], 
              "EvaluationTime" -> 2.2019119615851593`*^-6, "TestSize" -> 1000,
               "ModelMemory" -> 11840, "ModelUtility" -> -3.866837138116542, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 247744, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[23.366482468174222`, 1.8665325670491815`]}, 
              "AccuracyHistory" -> {
                Around[0.5737810744072847, 0.0155162139698557]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 2.2019119615851593`*^-6, "MeanCrossEntropy" -> 
             Around[23.366482468174222`, 2.639675670932021], "ModelMemory" -> 
             11840, "TrainingMemory" -> 247744, "TrainingTime" -> 
             0.37584677383002885`|>, "Index" -> 3|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 1000.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.3626852969082046`, 0.005958572565493924], "Accuracy" -> 
              Around[0.4908578770981779, 0.022207742777204064`], 
              "EvaluationTime" -> 2.2535743732392292`*^-6, "TestSize" -> 1000,
               "ModelMemory" -> 11840, "ModelUtility" -> -1.0035236674124164`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 114568, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3626852969082046`, 0.004213347067252877]}, 
              "AccuracyHistory" -> {
                Around[0.4908578770981779, 0.015703245512607565`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.344841516656537, 0.01067499010844924], "Accuracy" -> 
              Around[0.5601687638675653, 0.04029203388979669], 
              "EvaluationTime" -> 5.007924287673053*^-6, "TestSize" -> 300, 
              "ModelMemory" -> 11840, "ModelUtility" -> -0.9910547443870442, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 186616, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.344841516656537, 0.007548357894783775]}, 
              "AccuracyHistory" -> {
                Around[0.5601687638675653, 0.028490770391273425`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.2700793796846241`, 0.0033493640654491904`], "Accuracy" -> 
              Around[0.6286542638938192, 0.01526174955689496], 
              "EvaluationTime" -> 1.745664588124239*^-6, "TestSize" -> 1992, 
              "ModelMemory" -> 11840, "ModelUtility" -> -0.9327989682358753, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 717176, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2700793796846241`, 0.002368358043341666]}, 
              "AccuracyHistory" -> {
                Around[0.6286542638938192, 0.010791686604451213`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1.745664588124239*^-6, "MeanCrossEntropy" -> 
             Around[1.2700793796846241`, 0.0033493640654491904`], 
             "ModelMemory" -> 11840, "TrainingMemory" -> 717176, 
             "TrainingTime" -> 0.1260977122403018|>, "Index" -> 4|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.001|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[2.269483841523777, 0.20169811296306597`], "Accuracy" -> 
              Around[0.499776885598674, 0.022213268927633523`], 
              "EvaluationTime" -> 2.1502495499310894`*^-6, "TestSize" -> 1000,
               "ModelMemory" -> 11840, "ModelUtility" -> -1.5303633786857715`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 187784, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.269483841523777, 0.14262210342871423`]}, 
              "AccuracyHistory" -> {
                Around[0.499776885598674, 0.015707153091050093`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[5.805936875023509, 0.5993437131640836], "Accuracy" -> 
              Around[0.6076413855675247, 0.020676873012031468`], 
              "EvaluationTime" -> 2.0891939725217333`*^-6, "TestSize" -> 1100,
               "ModelMemory" -> 11840, "ModelUtility" -> -2.47250892647471, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 247744, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[5.805936875023509, 0.42380000383984856`]}, 
              "AccuracyHistory" -> {
                Around[0.6076413855675247, 0.014620757120540563`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 2.0891939725217333`*^-6, "MeanCrossEntropy" -> 
             Around[5.805936875023509, 0.5993437131640836], "ModelMemory" -> 
             11840, "TrainingMemory" -> 247744, "TrainingTime" -> 
             0.37584677383002885`|>, "Index" -> 5|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.1|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.001088710423213, 0.07069837627461141], "Accuracy" -> 
              Around[0.5971603313229018, 0.04128775172543494], 
              "EvaluationTime" -> 2.098587138277019*^-6, "TestSize" -> 2000, 
              "ModelMemory" -> 11840., "ModelUtility" -> -0.7083058771841997, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.009999999999999998, 
              "TrainingMemory" -> 187725.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0667769823359388`, 0.033442329930232], 
                Around[0.935400438510487, 0.041910441398426146`]}, 
              "AccuracyHistory" -> {
                Around[0.5573144308071841, 0.015577529278784438`], 
                Around[0.6370062318386195, 0.015029059986861734`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.365492761842566, 0.10453801860208292`], "Accuracy" -> 
              Around[0.6073744952078513, 0.021685523786931737`], 
              "EvaluationTime" -> 2.318613496105109*^-6, "TestSize" -> 1000, 
              "ModelMemory" -> 11840, "ModelUtility" -> -1.0199030027982983`, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 247752, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.365492761842566, 0.07391954184533828]}, 
              "AccuracyHistory" -> {
                Around[0.6073744952078513, 0.015333980923321609`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6903497936940829, 0.022525662050833253`], "Accuracy" -> 
              Around[0.6473141682602217, 0.015079347021785686`], 
              "EvaluationTime" -> 2.0060974923614327`*^-6, "TestSize" -> 1992,
               "ModelMemory" -> 11840, "ModelUtility" -> -0.329140084763904, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 717176, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6903497936940829, 0.015928048386860665`]}, 
              "AccuracyHistory" -> {
                Around[0.6473141682602217, 0.010662708534969827`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.645352818590684, 0.03177104689339636], "Accuracy" -> 
              Around[0.6945974180708945, 0.030321220943814085`], 
              "EvaluationTime" -> 1.787347275805139*^-6, "TestSize" -> 458, 
              "ModelMemory" -> 11840, "ModelUtility" -> -0.2650321175241038, 
              "TrainingSize" -> 1834, "TrainingTime" -> 0.15848931924611134`, 
              "TrainingMemory" -> 4144384, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.645352818590684, 0.02246552270371636]}, 
              "AccuracyHistory" -> {
                Around[0.6945974180708945, 0.021440340943226506`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1.787347275805139*^-6, "MeanCrossEntropy" -> 
             Around[0.645352818590684, 0.03177104689339636], "ModelMemory" -> 
             11840, "TrainingMemory" -> 4144384, "TrainingTime" -> 
             0.20806844041008027`|>, "Index" -> 6|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 1.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.0475142910004591`, 0.025954068859717884`], "Accuracy" -> 
              Around[0.5494928808216657, 0.02205075867846894], 
              "EvaluationTime" -> 2.098587138277019*^-6, "TestSize" -> 1000, 
              "ModelMemory" -> 11840, "ModelUtility" -> -0.7445554209631571, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 187528, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0475142910004591`, 0.01835229809008912]}, 
              "AccuracyHistory" -> {
                Around[0.5494928808216657, 0.0155922409918535]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.9089921066399916, 0.046621756602424326`], "Accuracy" -> 
              Around[0.6134260679276194, 0.02424311597344609], 
              "EvaluationTime" -> 2.2702952622539914`*^-6, "TestSize" -> 800, 
              "ModelMemory" -> 11840, "ModelUtility" -> -0.6079790573342275, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 247872, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9089921066399916, 0.032966560244402934`]}, 
              "AccuracyHistory" -> {
                Around[0.6134260679276194, 0.01714247170191564]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6855579457392336, 0.0184090340247621], "Accuracy" -> 
              Around[0.6666879695549327, 0.014882737467616598`], 
              "EvaluationTime" -> 1.4264512594067405`*^-6, "TestSize" -> 1992,
               "ModelMemory" -> 11840, "ModelUtility" -> -0.3210261820746858, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 717064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6855579457392336, 0.013017152794003162`]}, 
              "AccuracyHistory" -> {
                Around[0.6666879695549327, 0.010523684585970802`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.644156724593555, 0.0304546507765487], "Accuracy" -> 
              Around[0.7007516113043899, 0.030163449582461102`], 
              "EvaluationTime" -> 4.251495874447665*^-6, "TestSize" -> 458, 
              "ModelMemory" -> 11840, "ModelUtility" -> -0.26279030028273687`,
               "TrainingSize" -> 1834, "TrainingTime" -> 0.12589254117941673`,
               "TrainingMemory" -> 4141256, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.644156724593555, 0.02153469008276574]}, 
              "AccuracyHistory" -> {
                Around[0.7007516113043899, 0.02132877974373678]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 4.251495874447665*^-6, "MeanCrossEntropy" -> 
             Around[0.644156724593555, 0.0304546507765487], "ModelMemory" -> 
             11840, "TrainingMemory" -> 4141256, "TrainingTime" -> 
             0.1699206087434723|>, "Index" -> 7|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 10.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1649602570693207`, 0.04991123544647151], "Accuracy" -> 
              Around[0.5660928245746206, 0.06001469954508674], 
              "EvaluationTime" -> 2.11934977529614*^-6, "TestSize" -> 2000, 
              "ModelMemory" -> 11840., "ModelUtility" -> -0.8544114932698678, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 163386.66666666666`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[1.2146056700841021`, 0.0066326829580048985`], 
                Around[1.115314844054539, 0.008149910759889594]}, 
              "AccuracyHistory" -> {
                Around[0.5070792429216444, 0.01569524892530099], 
                Around[0.6251064062275968, 0.015192433690207808`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.9146495227235311, 0.01242204052607982], "Accuracy" -> 
              Around[0.5956732970815706, 0.02178158937126056], 
              "EvaluationTime" -> 2.1502495499310894`*^-6, "TestSize" -> 1000,
               "ModelMemory" -> 11840, "ModelUtility" -> -0.606690515390803, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 247504, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9146495227235311, 0.00878370909216515]}, 
              "AccuracyHistory" -> {
                Around[0.5956732970815706, 0.01540190954943917]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7285880857690815, 0.01290239622398342], "Accuracy" -> 
              Around[0.6650268650039332, 0.014904860651874486`], 
              "EvaluationTime" -> 1.4197360429349484`*^-6, "TestSize" -> 1992,
               "ModelMemory" -> 11840, 
              "ModelUtility" -> -0.38008102808124167`, "TrainingSize" -> 300, 
              "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
              717600, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7285880857690815, 0.009123371863534381]}, 
              "AccuracyHistory" -> {
                Around[0.6650268650039332, 0.010539328039580994`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6561858249239222, 0.028548009896583466`], "Accuracy" -> 
              Around[0.6922756335334114, 0.03039121349446763], 
              "EvaluationTime" -> 2.0713609127740474`*^-6, "TestSize" -> 458, 
              "ModelMemory" -> 11840, "ModelUtility" -> -0.28054457852802317`,
               "TrainingSize" -> 1834, "TrainingTime" -> 0.12589254117941673`,
               "TrainingMemory" -> 4141192, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6561858249239222, 0.020186491387254837`]}, 
              "AccuracyHistory" -> {
                Around[0.6922756335334114, 0.02148983315042617]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 2.0713609127740474`*^-6, "MeanCrossEntropy" -> 
             Around[0.6561858249239222, 0.028548009896583466`], "ModelMemory" -> 
             11840, "TrainingMemory" -> 4141192, "TrainingTime" -> 
             0.16364092807033256`|>, "Index" -> 8|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.0001|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[10.554600903597816`, 1.246097155379523], "Accuracy" -> 
              Around[0.5048978101548179, 0.022250738313649668`], 
              "EvaluationTime" -> 2.1502495499310894`*^-6, "TestSize" -> 1000,
               "ModelMemory" -> 11840, "ModelUtility" -> -3.073092085805671, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 188016, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[10.554600903597816`, 0.8811237485861276]}, 
              "AccuracyHistory" -> {
                Around[0.5048978101548179, 0.015733647947989003`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[13.94040924919408, 1.562926831894392], "Accuracy" -> 
              Around[0.5951363911228396, 0.02175999267454652], 
              "EvaluationTime" -> 2.0469247266229486`*^-6, "TestSize" -> 1000,
               "ModelMemory" -> 11840, "ModelUtility" -> -3.3501593125273517`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 247872, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[13.94040924919408, 1.1051561613309318`]}, 
              "AccuracyHistory" -> {
                Around[0.5951363911228396, 0.015386638378741444`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 2.0469247266229486`*^-6, "MeanCrossEntropy" -> 
             Around[13.94040924919408, 1.562926831894392], "ModelMemory" -> 
             11840, "TrainingMemory" -> 247872, "TrainingTime" -> 
             0.37584677383002885`|>, "Index" -> 9|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 100000.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.3652664519152873`, 0.005976108751894043], "Accuracy" -> 
              Around[0.4898670678207096, 0.02220990917109008], 
              "EvaluationTime" -> 2.098587138277019*^-6, "TestSize" -> 1000, 
              "ModelMemory" -> 11840, "ModelUtility" -> -1.0054169583942036`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.003981071705534969, 
              "TrainingMemory" -> 104744, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3652664519152873`, 0.004225747023572552]}, 
              "AccuracyHistory" -> {
                Around[0.4898670678207096, 0.015704777384415086`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.36507957708813, 0.0066799808563869426`], "Accuracy" -> 
              Around[0.5808397317912745, 0.02441265598000845], 
              "EvaluationTime" -> 2.188996358671642*^-6, "TestSize" -> 800, 
              "ModelMemory" -> 11840, "ModelUtility" -> -1.0053832208505389`, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 186544, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.36507957708813, 0.004723459761747528]}, 
              "AccuracyHistory" -> {
                Around[0.5808397317912745, 0.017262354590238296`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.3738112880488897`, 0.00312379101814627], "Accuracy" -> 
              Around[0.6271467909477425, 0.015274492228084118`], 
              "EvaluationTime" -> 1.4591014214880056`*^-6, "TestSize" -> 1992,
               "ModelMemory" -> 11840, "ModelUtility" -> -1.0112357776464813`,
               "TrainingSize" -> 300, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 716936, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3738112880488897`, 0.0022088538119408568`]}, 
              "AccuracyHistory" -> {
                Around[0.6271467909477425, 0.010800697033659497`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1.4591014214880056`*^-6, "MeanCrossEntropy" -> 
             Around[1.3738112880488897`, 0.00312379101814627], "ModelMemory" -> 
             11840, "TrainingMemory" -> 716936, "TrainingTime" -> 
             0.06466774883847007|>, "Index" -> 10|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 1.*^-6|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[30.06677519049737, 2.4352878168900984`], "Accuracy" -> 
              Around[0.5767329918226435, 0.015197018150471808`], 
              "EvaluationTime" -> 1.315750035552637*^-6, "TestSize" -> 2100, 
              "ModelMemory" -> 11840, "ModelUtility" -> -4.112682414838703, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 247504, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[30.06677519049737, 1.7220085294639718`]}, 
              "AccuracyHistory" -> {
                Around[0.5767329918226435, 0.010745914588013659`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1.315750035552637*^-6, "MeanCrossEntropy" -> 
             Around[30.06677519049737, 2.4352878168900984`], "ModelMemory" -> 
             11840, "TrainingMemory" -> 247504, "TrainingTime" -> 
             0.3791064516366983|>, "Index" -> 11|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 10000.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.3631607001123622`, 0.006283483299049569], "Accuracy" -> 
              Around[0.5828501641120694, 0.023019747529552353`], 
              "EvaluationTime" -> 3.388488087603437*^-6, "TestSize" -> 900, 
              "ModelMemory" -> 11840, "ModelUtility" -> -1.003919802744807, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 186784, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3631607001123622`, 0.004443093650230369]}, 
              "AccuracyHistory" -> {
                Around[0.5828501641120694, 0.016277419579348744`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.3628256547789104`, 0.003803481977908933], "Accuracy" -> 
              Around[0.6270031184236444, 0.018913452653762968`], 
              "EvaluationTime" -> 1.694951123946661*^-6, "TestSize" -> 1300, 
              "ModelMemory" -> 11840, "ModelUtility" -> -1.0033105309034465`, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              717000, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.3628256547789104`, 0.002689467898700229]}, 
              "AccuracyHistory" -> {
                Around[0.6270031184236444, 0.013373830627126496`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1.694951123946661*^-6, "MeanCrossEntropy" -> 
             Around[1.3628256547789104`, 0.003803481977908933], "ModelMemory" -> 
             11840, "TrainingMemory" -> 717000, "TrainingTime" -> 
             0.0963526231496888|>, "Index" -> 12|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["LogisticRegression"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 12], <||>], "MaxTrainingSize" -> 2292, 
      "PreprocessorEvaluationTime" -> 2.18359375*^-6, "PreprocessorMemory" -> 
      181840, "InputDimension" -> 69, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.70024056722671, "VariableBudget" -> True,
       "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.879421257517976`16.341341930369218*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.13720000000000007`, 
          "ElapsedTimes" -> 0.19349, "ExperimentCounts" -> 13|>, <|
         "TrainingSizes" -> 60, "TimeBudgets" -> 0.19600000000000017`, 
          "ElapsedTimes" -> 0.302863, "ExperimentCounts" -> 12|>, <|
         "TrainingSizes" -> 300, "TimeBudgets" -> 0.2800000000000002, 
          "ElapsedTimes" -> 0.287134, "ExperimentCounts" -> 8|>, <|
         "TrainingSizes" -> 1834, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.424485, "ExperimentCounts" -> 3|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"UNITED KINGDOM"}, 
           "ID" -> 6873582013879478265|>, 
         "f2" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"Financials"}, 
           "ID" -> 7971373608825966019|>, 
         "f3" -> <|
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.4051568490028274}, "ID" -> 3393134348820751293|>, 
         "f4" -> <|
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {7.173747390485207}, "ID" -> 3828733207173156760|>, 
         "f5" -> <|
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {28.34708907560874}, "ID" -> 4487409260182963336|>, 
         "f6" -> <|
          "Type" -> "Text", "Weight" -> 1, "Values" -> {"Estimated data"}, 
           "ID" -> 386652190722912716|>, 
         "f7" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {66.0991}, "ID" -> 
           6944730188686709292|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 3.120037, 
      "MaxTrainingMemory" -> 20566624, "DataMemory" -> 3595256, 
      "FunctionMemory" -> 383840, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 12, 7, 17, 0, 58.829869`8.522172854659216}, "Instant",
         "Gregorian", 1.], "ProcessorCount" -> 8, "ProcessorType" -> "ARM64", 
      "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, 3.878806970579384*^9, 
   3.878811612125744*^9, 3.8791490032180023`*^9, 3.879160963309402*^9, 
   3.879325459923882*^9, {3.8793329903141823`*^9, 3.8793329994660587`*^9}, 
   3.879354647755681*^9, 3.879417658845533*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"8760048f-3fe5-4e14-a39e-6f70a260874a"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Data type"], 
                   TextCell["Data type"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{
                   InterpretationBox[
                    Cell["Mixed"], 
                    TextCell["Mixed"]], 
                   StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]},
                  "RowDefault"],
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Numerical\"", 
                    ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                  Short[#, 10]& ]],
                Annotation[#, 
                 
                 Short[{"Nominal", "Nominal", "Numerical", "Numerical", 
                   "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classes"], 
                   TextCell["Classes"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 InterpretationBox[
                  Cell["A"], 
                  TextCell["A"]], 
                 InterpretationBox[
                  Cell["C"], 
                  TextCell["C"]], 
                 InterpretationBox[
                  Cell["D"], 
                  TextCell["D"]], 
                 InterpretationBox[
                  Cell["E"], 
                  TextCell["E"]]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"70.1", "3.0"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    70.075161130438985424`3., 3.0163449582461101528`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Method"], 
                   TextCell["Method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 
                 InterpretationBox[Cell[
                  "LogisticRegression",ExpressionUUID->
                   "a6ab5230-d5aa-425a-8718-01ad3a84fcb6"],
                  TextCell["LogisticRegression"]],
                 StyleBox[
                  TagBox[
                   
                   GridBox[{{"\"L1Regularization\"", "0"}, {
                    "\"L2Regularization\"", "1.`"}, {
                    "\"OptimizationMethod\"", "\"LBFGS\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                  "Verdana", StripOnInput -> False]],
                Annotation[#, 
                 Style[
                  
                  Grid[{{"L1Regularization", 0}, {"L2Regularization", 1.}, {
                    "OptimizationMethod", "LBFGS"}}, Alignment -> Left, Frame -> 
                   All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                   Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                 "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.8`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"52.9`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                   Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.6441567245935549968`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0304546507765487001`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.5832474230404576243`3.", "\", \"", 
                   "0.7050660261466523693`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.5832474230404576243`3., 
                   ", ", 0.7050660261466523693`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Model memory"], 
                   TextCell["Model memory"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"386.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training examples used"], 
                   TextCell["Training examples used"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               TemplateBox[{
                "2292", "\"examples\"", "examples", "\"Examples\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training time"], 
                   TextCell["Training time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"3.12`", "\"s\"", "seconds", "\"Seconds\""},
                "Quantity"]},
              {
               ItemBox[
                
                DynamicModuleBox[{
                 MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                 DynamicBox[ToBoxes[
                   Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.001088118207815172}, {
                    4.0943445622221, -0.08921432235819392}, {
                    5.703782474656201, -0.3775222529334121}, {
                    7.51425465281641, -0.43981322131519307`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.001088118207815172}}, {{
                    4.0943445622221, -0.08921432235819392}}, {{
                    5.703782474656201, -0.3775222529334121}}, {{
                    7.51425465281641, -0.43981322131519307`}}}]}}}, {{}, \
{}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.07215106675189532}, {
                    2.302585092994046, 0.06932742976739097}, {
                    2.302585092994046, 0.06932742976739097}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, -0.1028885931578218}, {
                    4.0943445622221, -0.0757245176369334}, {
                    4.0943445622221, -0.0757245176369334}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.703782474656201, -0.4047420020406776}, {
                    5.703782474656201, -0.351023827668434}, {
                    5.703782474656201, -0.351023827668434}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{7.51425465281641, -0.4882456903895913}, {
                    7.51425465281641, -0.39361849410407307`}, {
                    7.51425465281641, -0.39361849410407307`}}]}}}, {{}, \
{}}}}, {DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {1.2416317385598423`, -0.4743162532611384}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{1.2416317385598423`, 
                    7.73718007783463}, {-0.4743162532611384, 
                    0.001088118207815172}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.5971603313229018}, {
                    4.0943445622221, 0.5956732970815706}, {5.703782474656201, 
                    0.6666879695549327}, {7.51425465281641, 
                    0.7007516113043899}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.5971603313229018}}, {{4.0943445622221, 
                    0.5956732970815706}}, {{5.703782474656201, 
                    0.6666879695549327}}, {{7.51425465281641, 
                    0.7007516113043899}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {1.2416317385598423`, 0.5743929442963913}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{1.2416317385598423`, 7.73718007783463}, {
                    0.5743929442963913, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.20238431617935654`}, {
                    4.0943445622221, 0.8866921284955783}, {
                    5.703782474656201, -0.3408079281752251}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.01}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.31136629708816566`}, {
                    4.0943445622221, 0.3113536656892264}, {5.703782474656201, 
                    0.3184094109494549}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 1.*^6}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.7231647520058306`}, {
                    4.0943445622221, 3.1513026223816305`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.00001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.30945723603920144`}, {
                    4.0943445622221, 0.29627617462899936`}, {
                    5.703782474656201, 0.23907940220590618`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 1000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8195524230493265}, {
                    4.0943445622221, 1.7588809931739757`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.001088118207815172}, {
                    4.0943445622221, 0.3115153611797971}, {
                    5.703782474656201, -0.37055686246251635`}, {
                    7.51425465281641, -0.4379581061724226}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.1}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.04642001568095692}, {
                    4.0943445622221, -0.09541886840672621}, {
                    5.703782474656201, -0.3775222529334121}, {
                    7.51425465281641, -0.43981322131519307`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {"L2Regularization", 1.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.15268697233217726`}, {
                    4.0943445622221, -0.08921432235819392}, {
                    5.703782474656201, -0.31664674676607557`}, {
                    7.51425465281641, -0.4213112604502338}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 2.356561869462528}, {
                    4.0943445622221, 2.634791762806327}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.0001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.31134961245566445`}, {
                    4.0943445622221, 0.31121272517070947`}, {
                    5.703782474656201, 0.3175888394248934}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 100000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.0943445622221, 3.4034207478339997`}, {
                    4.0943445622221, 3.4034207478339997`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 1.*^-6}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.266747752497686, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.0943445622221, 0.30980604753441976`}, {
                    5.703782474656201, 0.3095602316780507}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.20238431617935654`}}, {{
                    4.0943445622221, 0.8866921284955783}}, {{
                    5.703782474656201, -0.3408079281752251}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.01}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.31136629708816566`}}, {{
                    4.0943445622221, 0.3113536656892264}}, {{
                    5.703782474656201, 0.3184094109494549}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 1.*^6}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.7231647520058306`}}, {{
                    4.0943445622221, 3.1513026223816305`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.00001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.30945723603920144`}}, {{
                    4.0943445622221, 0.29627617462899936`}}, {{
                    5.703782474656201, 0.23907940220590618`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 1000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8195524230493265}}, {{
                    4.0943445622221, 1.7588809931739757`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.001088118207815172}}, {{
                    4.0943445622221, 0.3115153611797971}}, {{
                    5.703782474656201, -0.37055686246251635`}}, {{
                    7.51425465281641, -0.4379581061724226}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.1}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.04642001568095692}}, {{
                    4.0943445622221, -0.09541886840672621}}, {{
                    5.703782474656201, -0.3775222529334121}}, {{
                    7.51425465281641, -0.43981322131519307`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {"L2Regularization", 1.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.15268697233217726`}}, {{
                    4.0943445622221, -0.08921432235819392}}, {{
                    5.703782474656201, -0.31664674676607557`}}, {{
                    7.51425465281641, -0.4213112604502338}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 2.356561869462528}}, {{4.0943445622221,
                     2.634791762806327}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.0001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.31134961245566445`}}, {{
                    4.0943445622221, 0.31121272517070947`}}, {{
                    5.703782474656201, 0.3175888394248934}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 100000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.0943445622221, 3.4034207478339997`}}, {{4.0943445622221,
                     3.4034207478339997`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 1.*^-6}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.0943445622221, 0.30980604753441976`}}, {{
                    5.703782474656201, 0.3095602316780507}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {1.2416317385598423`, -0.7655898727519025}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{1.2416317385598423`, 
                    7.73718007783463}, {-0.7655898727519025, 
                    3.7231647520058306`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, -1], 
                    Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, 
                    Plus[1]], Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                  ImageSizeCache->{330., {122., 127.}}],
                 DynamicModuleValues:>{}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> 
           ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  MachineLearning`MLInformationObject[
   ClassifierFunction[<|
    "ExampleNumber" -> 2292, "ClassNumber" -> 4, 
     "Input" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|
           "Country" -> <|"Type" -> "Nominal"|>, 
            "GICS Sector Name" -> <|"Type" -> "Nominal"|>, 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Disclosure" -> <|"Type" -> "Text"|>, 
            "Revenue (USD mn)" -> <|"Type" -> "Numerical"|>|>, 
          "Output" -> <|
           "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
            "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["FromDataset"], 
               MachineLearning`MLProcessor[
               "FromNamedFeatures", <|
                "FeatureNames" -> {
                  "Country", "GICS Sector Name", 
                   "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                   "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                   "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                   "Carbon Disclosure", "Revenue (USD mn)"}|>], 
               MachineLearning`MLProcessor[
               "Transpose", <|"FeatureNumber" -> 7|>], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {
                  "Nominal", "Nominal", "Numerical", "Numerical", "Numerical",
                    "Text", "Numerical"}, 
                 "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6", "f7"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          False, "Invertibility" -> "Perfect", "StructurePreserving" -> False,
           "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|
           "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
            "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Output" -> <|
           "(f6(f1f2)(f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGBwBeIM/YV7W75Nsh+lhwbtJh5bctH1ONVpBjD4gJMGANGj
EGk=
               "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
            MachineLearning`MLProcessor[
            "SynthesizeMissingValues", <|
             "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Distribution" -> 
              LearnedDistribution[<|
                "ExampleNumber" -> 2292, "Preprocessor" -> 
                 MachineLearning`MLProcessor[
                  "ToMLDataset", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>, 
                    "f6" -> <|"Type" -> "Text"|>, 
                    "f7" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                  "Processor" -> 
                 MachineLearning`MLProcessor[
                  "Sequence", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 8728850163752787708|>], 
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4012203223801137025|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7247984987659546603|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>, 
                    "Index" -> {<|
                    "AUSTRIA" -> 1, "BELGIUM" -> 2, "BULGARIA" -> 3, 
                    "CROATIA" -> 4, "CYPRUS" -> 5, "CZECH REPUBLIC" -> 6, 
                    "DENMARK" -> 7, "ESTONIA" -> 8, "FINLAND" -> 9, "FRANCE" -> 
                    10, "GERMANY" -> 11, "GREECE" -> 12, "HUNGARY" -> 13, 
                    "ICELAND" -> 14, "IRELAND" -> 15, "ITALY" -> 16, 
                    "LUXEMBOURG" -> 17, "MALTA" -> 18, "NETHERLANDS" -> 19, 
                    "NORWAY" -> 20, "POLAND" -> 21, "PORTUGAL" -> 22, 
                    "ROMANIA" -> 23, "SLOVENIA" -> 24, "SPAIN" -> 25, 
                    "SWEDEN" -> 26, "SWITZERLAND" -> 27, "UKRAINE" -> 28, 
                    "UNITED KINGDOM" -> 29|>, <|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>, <|"" -> 1|>}, 
                    "MissingCode" -> Indeterminate, "Version" -> {13.1, 0}, 
                    "ID" -> 4113760982813578529, 
                    "Output" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {79.46666212202445, 22.194053219786632`, 
                    107.61244353226444`, 3257.480947285103}, 
                    "StandardDeviation" -> {393.01607179380045`, 
                    67.03477704200654, 159.36202682130502`, 
                    11368.305968784858`}, 
                    "Output" -> <|
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 3752698420053720059|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3, 
                    "SetSize" -> {29, 11, 1}|>|>, 
                    "Boundaries" -> {{-0.5, -0.46551724137931033`, \
-0.43103448275862066`, -0.39655172413793105`, -0.3620689655172414, \
-0.3275862068965517, -0.2931034482758621, -0.2586206896551724, \
-0.22413793103448276`, -0.1896551724137931, -0.15517241379310343`, \
-0.12068965517241381`, -0.08620689655172414, -0.051724137931034475`, \
-0.017241379310344807`, 0.017241379310344862`, 0.051724137931034475`, 
                    0.08620689655172409, 0.12068965517241381`, 
                    0.15517241379310343`, 0.18965517241379315`, 
                    0.22413793103448276`, 0.2586206896551724, 
                    0.2931034482758621, 0.3275862068965517, 
                    0.3620689655172413, 0.39655172413793105`, 
                    0.43103448275862066`, 0.4655172413793104, 
                    0.5}, {-0.5, -0.40909090909090906`, -0.3181818181818182, \
-0.2272727272727273, -0.13636363636363635`, -0.04545454545454547, 
                    0.045454545454545414`, 0.13636363636363635`, 
                    0.2272727272727273, 0.31818181818181823`, 
                    0.40909090909090906`, 0.5}, {-0.5, 0.5}}, 
                    "Version" -> {13.1, 0}, "ID" -> 2082886514676041914, 
                    "Output" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>, 
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Spans" -> {
                    Span[1, 3], 
                    Span[4, 7]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {13.1, 0}, "ID" -> 
                    3471102231048770802|>]}, "Invertibility" -> "Approximate",
                     "StructurePreserving" -> True, "Missing" -> "Allowed"|>],
                  "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                 Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBmQFm/iFib1JlAgAAAAcAAAAHAAAAnnLlvqoafz+KYGYlv1SAv810wMpG
TDU/AUBONTBMhj+1cQuaUpuJv9YtYKAy/u8/JDt4C5UVe789VwE+XMaev6Re
LLDVXZW/XHEJgJ3inL+2nmsu51OOP9S7I3DQmH0/jzEBNLwOez84Ty8A9vXv
PwC4ljNYZnA/YvKlp+ZMWb8BfrsAaw7XvmXr3vEeUli/wN0fKg3/778UY4j9
LZCJv8n0OTY3a34/FuhJnnUT4r+CZtOVibnFv0oHbnB91MW/Yfks1GxA6b9P
BLqrDJNRv53AkMaNg4c/hST5mX0djL9QvbDVAMfhv0LLcpbgbs6/p6R84MDE
4b8RbOOt2zniPw87V6knfWi/+LzAM/eKcL+W8GVWKG6nv+1xeHQpGuK/ALPE
fAS+lT/s0sbflFbpP8BlRZdyV80/FLkGqS6tZb8AripyzMVbP7A3DnyjnGM/
kq6dzfP9zL+CSl7Il5buP9K+dmxj4se/PngTNwuaab/8oz2v+vZjvxlpOGEp
YIM/nkOrpVMmgD+WkMi9
                    "], 
                   "Precisions" -> {0.6080837241689073, 1.0249459814305149`, 
                    1.4338854587567862`, 1.4583742615351594`, 
                    12.050298831843332`, 17.732403162990845`, 
                    25.363460701880502`}, "NoisePrecision" -> None, 
                   "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {
                    0.14781839702703387`, -0.03761867444492348, \
-0.0018568141330923247`, 
                    0.00002093317943277569, -0.000032094047490506016`, \
-0.00028672757917445207`, 0.00010586837139914856`}, 
                    "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4722156746689135088|>], 
                   "PostProcessor" -> 
                   MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7.|>,
                     "Key" -> "((f1f2f6)(f3f4f5f7))", "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                   "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 7, "Options" -> <||>|>|>|>, 
                 "TrainingInformation" -> <|
                  "Configurations" -> 
                   Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {
                    0.14781839702703448`, -0.03761867444492345, \
-0.0018568141330923336`, 
                    0.000020933179432783272`, -0.00003209404749049296, \
-0.00028672757917443646`, 0.0001058683713990839}, 
                    "StandardDeviation" -> {0.23795387694998307`, 
                    0.2048229568696138, 0.2881101140977073, 
                    1.0000629888389347`, 1.0001224192028917`, 
                    0.9999940861686942, 1.0000688309807984`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    4503155047815583877|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                   Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                 "NaiveImputer" -> 
                 MachineLearning`MLProcessor[
                  "ImputeMissing", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {
                    0.14781839702703448`, -0.03761867444492345, \
-0.0018568141330923336`, 
                    0.000020933179432783272`, -0.00003209404749049296, \
-0.00028672757917443646`, 0.0001058683713990839}, 
                    "StandardDeviation" -> {0.23795387694998307`, 
                    0.2048229568696138, 0.2881101140977073, 
                    1.0000629888389347`, 1.0001224192028917`, 
                    0.9999940861686942, 1.0000688309807984`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    4503155047815583877|>], "InputDimension" -> 0, 
                 "OutputDimension" -> 7, 
                 "Log" -> <|
                  "Example" -> 
                   MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"UNITED KINGDOM"}, "ID" -> 
                    3679654460434315804|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"Financials"}, "ID" -> 4509295814520375433|>,
                     "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {0.4051568490028274}, "ID" -> 
                    4029740649927229730|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {7.173747390485207}, "ID" -> 
                    5883454897782969724|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {28.34708907560874}, "ID" -> 
                    151013525008169422|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 8313293367344529314|>, 
                    "f7" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {66.0991}, "ID" -> 2774697970610267399|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                   "TrainingTime" -> 0.103357, "MaxTrainingMemory" -> 5462528,
                    "DataMemory" -> 541240, "FunctionMemory" -> 86128, 
                   "LanguageVersion" -> {13.1, 0}, "Date" -> 
                   DateObject[{
                    2022, 12, 7, 17, 0, 55.862734`8.499697161020437}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, 
                   "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                 "LogPDFDistribution" -> 
                 MachineLearning`TailedQuantileDistribution[<|
                   "Quantiles" -> {-5.612930781032486, -5.612930781032486, \
-5.3272745754000566`, -5.227760758272564, -5.1901459558849306`, \
-4.971419065536934, -4.898762215473115, -4.883258712808405, -4.8788972407619, \
-4.853815385428406, -4.8532432028568495`}, 
                    "LeftBoundary" -> -5.3272745754000566`, "LeftScale" -> 
                    0.14282810281621483`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                 Around[35.48825552541895, 0.5736581387301678], 
                 "EntropySampleSize" -> 10|>], 
              "Output" -> <|
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
              "ID" -> 8833432794738512184|>], 
            MachineLearning`MLProcessor[
            "Threads", <|
             "Input" -> <|
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f3f4f5f7)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>,
                 "(f1f2)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 7001699027996678713|>], 
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "(f1f2)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>,
                   "Version" -> {13.1, 0}, "ID" -> 4268131072254999855|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
              "Missing" -> "Allowed"|>], 
            MachineLearning`MLProcessor[
            "Standardize", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Mean" -> {79.46666212202445, 22.194053219786632`, 
               107.61244353226444`, 3257.480947285103}, 
              "StandardDeviation" -> {393.01607179380045`, 67.03477704200654, 
               159.36202682130502`, 11368.305968784858`}, 
              "Output" -> <|
               "(f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 1927666520227175614|>], 
            MachineLearning`MLProcessor[
            "ToLowerCase", <|
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 8121204540162656102, 
              "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
            
            MachineLearning`MLProcessor[
            "RemoveDiacritics", <|
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 1964114494773798714, 
              "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
            
            MachineLearning`MLProcessor[
            "Threads", <|
             "Input" -> <|
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "(f1f2)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
              "Output" -> <|
               "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                "(f1f2)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "Sequence", <|
                 "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Processors" -> {
                    MachineLearning`MLProcessor[
                    "TextToNominalSequence", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {13.1, 0}, "ID" -> 3628505808038090290, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", <|
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> CompressedData["
1:eJw1lEuO1FAMRXvACmg2wAKQ/P8soSVGLIEBEiMGsH9xkpdSqlIp28++vtfO
159/fvyqt7e3v5+4ff/999/HFx6+rVqq2U5t5uas6uMQ9dFe5zNhJb3HMWvS
Km1rvToSKY8jNX27tJV0aV79ODRLoq/wmC31quPoyeyWtMycu46+HDZewFKJ
ohAHj6PWCogmCuTOGPHjyBUAd5tW+tToPicytTykamdkPMuf4gEcA+a2rxM1
rxNBhfBc7fIBHSGPIwBIYaECtFDvSUWYhUY3/lQt63g5TJXO0mFWFlAPJQ6f
smRRDl38dz6OCNeUdlDNRa4/xR2MQrsxzRHOv2i3lAVShyw+8trLoQjqFTOT
BdXtdhxaEwVHCN9bgrIPXM0IhcGrBQu0nPh4PyR2V18t65jBcn18xm6BcnSu
l1i1sXabIy6IQxfS0WU0fZsTLt1UmCv4rTlmOoRwujoNi+Vt3pQg1rhPgDTk
hqJKZnJKTozTRu6xZ6FgFk2P9CXeyw5qWXrJgj8ThvK2V2vQJunFkVTMbjuM
QGMkE5jG12Vuu9t0OK0zNSJxrcWx0yu5BK4YeHQwP/bsCvijTZKUDTP/fpMA
FPQuS9IR0afuTVZlcF2z0ZQ4draQrIRv3U9Pv7TL0nQVBeqqEyc/e8BSiTvy
LfyUPvHwydaynMviFLofHpgjppClUKc0a2NHcmaYcP7ZoFkIbB87lZh/bVBO
uVyb+dgvqIau/AwjcfSqaywGdNEBTcawH3sjH3O2AdfLGuaJZ4Ad8HrJEmy5
Vx57+/WuAaBrVaHEE89SQQMnIAR+WN7bDgSWTp1LzJUZOnV5wQ2KFAqyKSMv
HpZlDgaRyiAIiJ7/oUHtSA==
                    "], "Values" -> None, "DefaultValue" -> -1, 
                    "HashFunction" -> 
                    Function[{
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {13.1, 0}|>], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+IA600prMte2//Yzh0uc0Lc4b/OvO2f3Hgdgjkun2YJ
fmyfeW918d4CDofDty3LvooKOtRuvD7VL13SYc2dWdfPNUk4HN4jtIKJicNB
lzn76IFqBofQHt6J5Rt/2/t9ZOApl7lqv6tA53swk6jDmoQr10tqLtnD9MPs
3e2fdnPWAR6HimUtfArzGRxgfJi9ySs5VzlpicPthfF9+ne8+NzyDW6ejsd+
B459HHBzlvTdKFkV9h1D3jWQ7fNc8T/2MD7MvwwQ0NA/weFNwcJn9umsKRvl
P7A7PM2JEnW6/9z+h37PXDn1b3D/wMyFhRuMD3M3TBydhtl7/8LZ5D8bf9rD
3Ksyf8un36kCDrt/bPsqpisDp2HqYf4GAF2Lu9w=
                    "], "Version" -> {13.1, 0}, "ID" -> 5006491608602871221, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                  "Invertibility" -> "Impossible", "StructurePreserving" -> 
                  True, "Missing" -> "Forbidden"|>], 
                MachineLearning`MLProcessor[
                "EmbedNominalVector", <|
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "(f1f2)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>,
                   "Index" -> {<|
                    "AUSTRIA" -> 1, "BELGIUM" -> 2, "BULGARIA" -> 3, 
                    "CROATIA" -> 4, "CYPRUS" -> 5, "CZECH REPUBLIC" -> 6, 
                    "DENMARK" -> 7, "ESTONIA" -> 8, "FINLAND" -> 9, "FRANCE" -> 
                    10, "GERMANY" -> 11, "GREECE" -> 12, "HUNGARY" -> 13, 
                    "ICELAND" -> 14, "IRELAND" -> 15, "ITALY" -> 16, 
                    "LUXEMBOURG" -> 17, "MALTA" -> 18, "NETHERLANDS" -> 19, 
                    "NORWAY" -> 20, "POLAND" -> 21, "PORTUGAL" -> 22, 
                    "ROMANIA" -> 23, "SLOVENIA" -> 24, "SPAIN" -> 25, 
                    "SWEDEN" -> 26, "SWITZERLAND" -> 27, "UKRAINE" -> 28, 
                    "UNITED KINGDOM" -> 29|>, <|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>}, 
                  "Output" -> <|
                   "(f1f2)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                  "EmbeddingVectors" -> {CompressedData["
1:eJxFSn0s1HEcvgh3JCcVSadrRJS2iOS+n++RNLOyY9e8bBVK5FZe2pmplfQ2
L+mFi9ZOeZlqesXd4ff7fMtFqdUKNVPUvJ1qtV60Eqv4p57teZ49L9LEfVHJ
ZgKBIEs4LVEJ2cGZmQk50ZYzYVeCyneNamaUTHOmmsZhwX//R+OvI7jBTwPl
T5OgWtjEfQuKpGUHdUTUZo+GdwiO7yMhN3wEhm4FU3G3glaWxuFVm+OYstYA
NS/r4MmgI7rKtehS+RaTWjqIXHhftmggDvY6JeKfaiPJ7CpmD00CNjVrgLQZ
02h70gTqGt7gjW/505/XXJnzUJA6NQtiJZ6yUX8Xmv17DDy66sDtwDXQFPuj
+PIU2geksRB9PzZo/QkJb5bJe0382OHPYNOugaUu8WzSS0ppdxtIhgPY3JJA
zsKiHVqrHKim9jkaQzzoyDIpt29nDAyWMLJriRXmX3HA5koxWx5zga8KDEKD
2BweD+0EzztFNP7aCNcU4Q2RdhPAhhaw2HSl7MMXa26Qq8HmZ7VQUWEiLU5h
fInXpfUD83LZsUkJU1bK2QqFkOr4xWzsazvmKO6S530iVodRspTePKJUZ2Dv
6gLcfdaHbgqzQm9nOWjJR5LabckdOnmR/9A5n9kFLKbK8XoynnUezUxrQJgj
Z9v601h0Wg8mlhph421rFnpJGeRbvZAPbnKFPNUf/OSgwprVHEwWOHEnvE6T
M+d0WEK2w/db+4FL+Q01Rc50rrYZaV88QtEq6HhlBo2yDS0/Xd35Kv1RsF43
gS/cnuLmnCiZd28xjm7XwIKDAvBorQe9Ph7z23ZA+XAfz034kC+6TnjWEUrS
73aQpCc/IbkwD6S0D7Z61sPnm0dQbcjgzXtq+U6RhIXOVqBhDjCVIpZmT2UB
na/GiLpG0CYuojqrIhQ/mk3lK8+g6BUHfq9lJOL6FvDqv4cVu81Z8mNfenPP
Qhq9WUTt9e5MbfsAw6XdEGfNwamEq2iyvccV/khhfwFDUVyt
                    "], 
                    RawArray["Real32",{{0., 0., 0., 0., 0.}, {
                    0.8618162870407104, -0.5170427560806274, 
                    0.13067105412483215`, 0.0519464910030365, 
                    0.2821357548236847}, {
                    0.05358464643359184, -0.4481622278690338, \
-0.2585599422454834, 
                    0.41537076234817505`, -0.8721502423286438}, \
{-0.47762107849121094`, 0.04566793516278267, 0.15804912149906158`, 
                    0.1324063390493393, -0.39964571595191956`}, {
                    0.41636601090431213`, -0.126698300242424, \
-1.0076189041137695`, 0.15269236266613007`, 
                    0.022659795358777046`}, {-0.5130622982978821, 
                    0.8752748370170593, -0.24996790289878845`, \
-0.6034899353981018, -0.10572776198387146`}, {-0.8138381838798523, 
                    0.7515830397605896, -0.6295681595802307, \
-1.1122981309890747`, 
                    0.13304246962070465`}, {-0.2974144518375397, \
-0.40220165252685547`, 
                    0.2797980308532715, -0.9168489575386047, \
-0.24606038630008698`}, {-0.4358099699020386, 
                    0.24717211723327637`, -0.1983363777399063, 
                    0.6381807923316956, -0.04446683079004288}, {
                    0.061473648995161057`, -0.23882365226745605`, 
                    0.6821203827857971, -0.5920867323875427, \
-0.44236046075820923`}, {-0.042206939309835434`, 0.2029142528772354, 
                    0.6734306812286377, -0.047500185668468475`, \
-0.1775016486644745}, {-0.24699686467647552`, -0.06097349524497986, 
                    0.15785102546215057`, 
                    0.13611683249473572`, -0.43699583411216736`}}]}, 
                  "Version" -> {13.1, 0}, "ID" -> 1419003377571028604|>]}, 
              "Invertibility" -> "Impossible", "StructurePreserving" -> True, 
              "Missing" -> "Forbidden"|>], 
            MachineLearning`MLProcessor[
            "MergeVectors", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                "(f1f2)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>, 
                "(f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Spans" -> {
                Span[1, 54], 
                Span[55, 65], 
                Span[66, 69]}, 
              "Wrappers" -> {SparseArray, Identity, Identity}, 
              "Output" -> <|
               "(f6(f1f2)(f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGBwBeIM/YV7W75Nsh+lhwbtJh5bctH1ONVpBjD4gJMGANGj
EGk=
                   "], "Type" -> "NumericalVector"|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 4482410365441739632|>]}, 
          "Invertibility" -> "Impossible", "StructurePreserving" -> True, 
          "Missing" -> "Imputed"|>]|>, 
     "Output" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "ToVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 6906009905629070033|>], 
            MachineLearning`MLProcessor[
            "IntegerEncodeNominalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Index" -> {<|"A" -> 1, "C" -> 2, "D" -> 3, "E" -> 4|>}, 
              "MissingCode" -> 0, "Version" -> {13.1, 0}, "ID" -> 
              5430399239532347052, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
            MachineLearning`MLProcessor[
            "FromVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|
                 "Type" -> "NominalVector", "Weight" -> 1, 
                  "SetSize" -> {4}|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 3683782806807983502|>], 
            MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>,
               "Key" -> "f1", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
       "Name" -> "class", 
       "Marginal" -> <|
        "A" -> 0.003484320557491289, "C" -> 0.0039198606271777, "D" -> 
         0.3623693379790941, "E" -> 0.6302264808362369|>|>, "LabelSplitter" -> 
     MachineLearning`MLProcessor[
      "FeatureLabelSplit", <|
       "Processor" -> 
        MachineLearning`MLProcessor[
         "KeyIndexSplit", <|
          "Index" -> "Ratings", 
           "Order" -> {
            "Country", "GICS Sector Name", 
             "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
             "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
             "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
             "Carbon Disclosure", "Revenue (USD mn)", "Ratings"}|>], 
        "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
     "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
     "Prior" -> Automatic, "Utility" -> 
     SparseArray[
      Automatic, {4, 5}, 0., {
       1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
     "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
     Automatic, "BatchProcessing" -> Automatic, 
     "Model" -> <|
      "LogProbabilitiesFunction" -> 
       LinearLayer[<|
         "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1:eJw9UG9IU3EUXU5SsRlO0MZksNSlgZXT9MP23rORiuFMJkKmos5UJkvzT1iz
UmuLiVpaEy3BUkNRKTSEtN7vPq2F9SEyxDJnmPYPzagcuDK1vIP8cN655757
7rn8pNoiTZ4Lj8crdd/8aLLLD5WUZJ9N3o4iN1sfLtfjT/4mYjZx3hSlfLAg
gDLFVcid3UtGOzLJSRVND010k40eh/KvaJ08adoGvoZ1YhmTEcXbaHZaLSFD
E3sAvVXCOXZfrx8go7eLriHoRdYu6wBrzeMK54ykL2FL7w7zBGTM3TyDpyj4
DPmFg2RH5zclm2cAzMHZToPRybgb70SNQG+/JZJzZl8LpVTLOQSBfczmnbgJ
t1KlXG9EN/u1NImpdKsGl+Igmv+phbGbqojirmhEYDzN9AU2MOIkKWXUWClb
iwcnLrODaXxGOW8RgCq6FvRua+yjxo+E/RlLt8p6yHD7snJuOAq0c6vExtWD
+lg1OTovZB3vi0irLMTpdbiusvydPoCM3sRaM0Evssk9ErCedG0iOFMVI9nS
ojfBgIy5+CZfDlfC1EEfkInjSHlaHGAOzn6Qm52Mu/FO1Aj0DjQ1Au691O5B
lVtzCAL7mB1ZcRHizJOcUHeBmyq4waSIU7nqK7GM3739zAFrOAi92ziX5ybG
+0cb7T+1Aospu+jUjFGqJ0xA6/pHqFfMZXh2bhps6juU3dNKgrx+0fXpPrDU
W0eZx/PBfKabyrDzuQkqnRiPFCpXEsfZ+vTrgN5i3wba6hA6Gb2NL+0Evche
WWkU1glPbSzOJNfJ6f/6fqZZiYy5+Cazai3dtSEBXbMIYOC2EnNwNjSgg0XG
3XgnagR6SZ87g3vXpBF0f/AMQWAfsw3SeDiul9KB/jZ2UNrK2F+EQEV8AzOW
+JAK4X5TFs8sOFUTQL+zvab58mLSvNBMvnupYPHPEvkH+XGzOg==
             "], "Biases" -> 
            RawArray[
              "Real32",{-4.695827960968018, -4.5182905197143555`, \
-0.39370542764663696`}]|>, 
          "Parameters" -> <|
           "OutputDimensions" -> {3}, "$OutputSize" -> 3, "$InputSize" -> 69, 
            "$InputDimensions" -> {69}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{69}, NeuralNetworks`AtomT]|>, 
          "Outputs" -> <|
           "Output" -> 
            NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>|>, <|
         "Version" -> "13.1.4", "Unstable" -> False|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "FirstValues", <|"Info" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGBwA+JJKp5AdMh+yymvf8euTxilhwi93qtoz0/G41Snb/mw
CnG9f4+TBgCKtljI
             "], "Type" -> "NumericalVector"|>, "Key" -> 
          "(f6(f1f2)(f3f4f5f7))", "Invertibility" -> "Perfect", 
          "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
       "Calibrator" -> None, "Method" -> "LogisticRegression", 
       "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
       "Options" -> <|
        "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
         "L2Regularization" -> <|"Value" -> 1., "Options" -> <||>|>, 
         "OptimizationMethod" -> <|"Value" -> "LBFGS", "Options" -> <||>|>, 
         MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
     "TrainingInformation" -> <|
      "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
       Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
       "PreprocessingTime" -> 1.306397`6.567620167915228, "LossName" -> 
       "MeanCrossEntropy", "BestModelInformation" -> 
       Dataset[<|
         "MeanCrossEntropy" -> Around[0.644156724593555, 0.0304546507765487], 
          "Accuracy" -> Around[0.7007516113043899, 0.030163449582461102`], 
          "EvaluationTime" -> 4.251495874447665*^-6, "TestSize" -> 458, 
          "ModelMemory" -> 11840, "ModelUtility" -> -0.26279030028273687`, 
          "TrainingSize" -> 1834, "TrainingTime" -> 0.12589254117941673`, 
          "TrainingMemory" -> 4141256, "ExperimentCount" -> 1, 
          "MeanCrossEntropyHistory" -> {
            Around[0.644156724593555, 0.02153469008276574]}, 
          "AccuracyHistory" -> {
            Around[0.7007516113043899, 0.02132877974373678]}, 
          "Configuration" -> {
           "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
            1., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
          "FinalTrainingSize" -> 2292|>, 
         TypeSystem`Struct[{
          "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
           "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
           "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
           "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
          TypeSystem`AnyType, TypeSystem`AnyType, 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Tuple[{
             TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType}], 
           TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
       Dataset[<|<|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0.01|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.224318443094046, 0.0895212355056767], "Accuracy" -> 
               Around[0.5585539358630469, 0.02635966993463374], 
               "EvaluationTime" -> 2.8521123994793435`*^-6, "TestSize" -> 700,
                "ModelMemory" -> 11840, "ModelUtility" -> -0.9100945473477948,
                "TrainingSize" -> 10, "TrainingTime" -> 0.015848931924611134`,
                "TrainingMemory" -> 337552, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.224318443094046, 0.06330107268626192]}, 
               "AccuracyHistory" -> {
                 Around[0.5585539358630469, 0.018639101360618675`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[2.4270878632403456`, 0.22535175778508684`], "Accuracy" -> 
               Around[0.6096010451825556, 0.0216624901593555], 
               "EvaluationTime" -> 2.2535743732392292`*^-6, "TestSize" -> 
               1000, "ModelMemory" -> 11840, 
               "ModelUtility" -> -1.5982838199332743`, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
               247568, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[2.4270878632403456`, 0.15934775608214324`]}, 
               "AccuracyHistory" -> {
                 Around[0.6096010451825556, 0.015317693689067128`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.7111954957053166, 0.029298705999781027`], "Accuracy" -> 
               Around[0.6372460192368559, 0.015172637008585036`], 
               "EvaluationTime" -> 2.7529222201227042`*^-6, "TestSize" -> 
               1992, "ModelMemory" -> 11840, 
               "ModelUtility" -> -0.36058987770515016`, "TrainingSize" -> 300,
                "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
               722096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.7111954957053166, 0.020717313692436148`]}, 
               "AccuracyHistory" -> {
                 Around[0.6372460192368559, 0.010728674517252451`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 2.7529222201227042`*^-6, "MeanCrossEntropy" -> 
              Around[0.7111954957053166, 0.029298705999781027`], 
              "ModelMemory" -> 11840, "TrainingMemory" -> 722096, 
              "TrainingTime" -> 0.6227157032539622|>, "Index" -> 1|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 1.*^6|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.365289231074334, 0.0031497725350361945`], "Accuracy" -> 
               Around[0.5504732809206725, 0.07038729003894888], 
               "EvaluationTime" -> 2.098587138277019*^-6, "TestSize" -> 1800, 
               "ModelMemory" -> 11840., 
               "ModelUtility" -> -1.0050198775190273`, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.003981071705534968, "TrainingMemory" -> 
               101509.33333333333`, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.3652901840504277`, 0.004724664651185827], 
                 Around[1.3652882780982407`, 0.004225858768128892]}, 
               "AccuracyHistory" -> {
                 Around[0.48103325146637727`, 0.017562867936323574`], 
                 Around[0.6199133103749677, 0.015235899425577256`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.365271985670306, 0.009449120846181542], "Accuracy" -> 
               Around[0.5502167965523209, 0.03497931054187846], 
               "EvaluationTime" -> 2.124418344104054*^-6, "TestSize" -> 400, 
               "ModelMemory" -> 11840, "ModelUtility" -> -1.0059291988170096`,
                "TrainingSize" -> 60, "TrainingTime" -> 0.005011872336272719, 
               "TrainingMemory" -> 186848, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.365271985670306, 0.006681537426586136]}, 
               "AccuracyHistory" -> {
                 Around[0.5502167965523209, 0.024734107685392345`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.3749390611179362`, 0.0031279340733494816`], 
               "Accuracy" -> 
               Around[0.6271467909477425, 0.015274492228084118`], 
               "EvaluationTime" -> 1.3611509352442106`*^-6, "TestSize" -> 
               1992, "ModelMemory" -> 11840, 
               "ModelUtility" -> -1.012056578609299, "TrainingSize" -> 300, 
               "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
               717240, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[1.3749390611179362`, 0.002211783394369878]}, 
               "AccuracyHistory" -> {
                 Around[0.6271467909477425, 0.010800697033659497`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 1.3611509352442106`*^-6, "MeanCrossEntropy" -> 
              Around[1.3749390611179362`, 0.0031279340733494816`], 
              "ModelMemory" -> 11840, "TrainingMemory" -> 717240, 
              "TrainingTime" -> 0.05218621282382172|>, "Index" -> 2|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0.00001|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[41.39519254577428, 4.96115381211094], "Accuracy" -> 
               Around[0.5108217224802495, 0.022242542331331574`], 
               "EvaluationTime" -> 2.318613496105109*^-6, "TestSize" -> 1000, 
               "ModelMemory" -> 11840, "ModelUtility" -> -4.4400439778489815`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.012589254117941668`,
                "TrainingMemory" -> 191608, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[41.39519254577428, 3.5080655030531362`]}, 
               "AccuracyHistory" -> {
                 Around[0.5108217224802495, 0.015727852513313396`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[23.366482468174222`, 2.639675670932021], "Accuracy" -> 
               Around[0.5737810744072847, 0.021943240232852816`], 
               "EvaluationTime" -> 2.2019119615851593`*^-6, "TestSize" -> 
               1000, "ModelMemory" -> 11840, 
               "ModelUtility" -> -3.866837138116542, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
               247744, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[23.366482468174222`, 1.8665325670491815`]}, 
               "AccuracyHistory" -> {
                 Around[0.5737810744072847, 0.0155162139698557]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 2.2019119615851593`*^-6, "MeanCrossEntropy" -> 
              Around[23.366482468174222`, 2.639675670932021], "ModelMemory" -> 
              11840, "TrainingMemory" -> 247744, "TrainingTime" -> 
              0.37584677383002885`|>, "Index" -> 3|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 1000.|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.3626852969082046`, 0.005958572565493924], "Accuracy" -> 
               Around[0.4908578770981779, 0.022207742777204064`], 
               "EvaluationTime" -> 2.2535743732392292`*^-6, "TestSize" -> 
               1000, "ModelMemory" -> 11840, 
               "ModelUtility" -> -1.0035236674124164`, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.005011872336272719, "TrainingMemory" -> 
               114568, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[1.3626852969082046`, 0.004213347067252877]}, 
               "AccuracyHistory" -> {
                 Around[0.4908578770981779, 0.015703245512607565`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.344841516656537, 0.01067499010844924], "Accuracy" -> 
               Around[0.5601687638675653, 0.04029203388979669], 
               "EvaluationTime" -> 5.007924287673053*^-6, "TestSize" -> 300, 
               "ModelMemory" -> 11840, "ModelUtility" -> -0.9910547443870442, 
               "TrainingSize" -> 60, "TrainingTime" -> 0.00630957344480193, 
               "TrainingMemory" -> 186616, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.344841516656537, 0.007548357894783775]}, 
               "AccuracyHistory" -> {
                 Around[0.5601687638675653, 0.028490770391273425`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.2700793796846241`, 0.0033493640654491904`], 
               "Accuracy" -> Around[0.6286542638938192, 0.01526174955689496], 
               "EvaluationTime" -> 1.745664588124239*^-6, "TestSize" -> 1992, 
               "ModelMemory" -> 11840, "ModelUtility" -> -0.9327989682358753, 
               "TrainingSize" -> 300, "TrainingTime" -> 0.015848931924611134`,
                "TrainingMemory" -> 717176, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.2700793796846241`, 0.002368358043341666]}, 
               "AccuracyHistory" -> {
                 Around[0.6286542638938192, 0.010791686604451213`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 1.745664588124239*^-6, "MeanCrossEntropy" -> 
              Around[1.2700793796846241`, 0.0033493640654491904`], 
              "ModelMemory" -> 11840, "TrainingMemory" -> 717176, 
              "TrainingTime" -> 0.1260977122403018|>, "Index" -> 4|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0.001|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[2.269483841523777, 0.20169811296306597`], "Accuracy" -> 
               Around[0.499776885598674, 0.022213268927633523`], 
               "EvaluationTime" -> 2.1502495499310894`*^-6, "TestSize" -> 
               1000, "ModelMemory" -> 11840, 
               "ModelUtility" -> -1.5303633786857715`, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
               187784, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[2.269483841523777, 0.14262210342871423`]}, 
               "AccuracyHistory" -> {
                 Around[0.499776885598674, 0.015707153091050093`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[5.805936875023509, 0.5993437131640836], "Accuracy" -> 
               Around[0.6076413855675247, 0.020676873012031468`], 
               "EvaluationTime" -> 2.0891939725217333`*^-6, "TestSize" -> 
               1100, "ModelMemory" -> 11840, 
               "ModelUtility" -> -2.47250892647471, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
               247744, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[5.805936875023509, 0.42380000383984856`]}, 
               "AccuracyHistory" -> {
                 Around[0.6076413855675247, 0.014620757120540563`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 2.0891939725217333`*^-6, "MeanCrossEntropy" -> 
              Around[5.805936875023509, 0.5993437131640836], "ModelMemory" -> 
              11840, "TrainingMemory" -> 247744, "TrainingTime" -> 
              0.37584677383002885`|>, "Index" -> 5|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0.1|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.001088710423213, 0.07069837627461141], "Accuracy" -> 
               Around[0.5971603313229018, 0.04128775172543494], 
               "EvaluationTime" -> 2.098587138277019*^-6, "TestSize" -> 2000, 
               "ModelMemory" -> 11840., "ModelUtility" -> -0.7083058771841997,
                "TrainingSize" -> 10, "TrainingTime" -> 0.009999999999999998, 
               "TrainingMemory" -> 187725.3333333333, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.0667769823359388`, 0.033442329930232], 
                 Around[0.935400438510487, 0.041910441398426146`]}, 
               "AccuracyHistory" -> {
                 Around[0.5573144308071841, 0.015577529278784438`], 
                 Around[0.6370062318386195, 0.015029059986861734`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.365492761842566, 0.10453801860208292`], "Accuracy" -> 
               Around[0.6073744952078513, 0.021685523786931737`], 
               "EvaluationTime" -> 2.318613496105109*^-6, "TestSize" -> 1000, 
               "ModelMemory" -> 11840, "ModelUtility" -> -1.0199030027982983`,
                "TrainingSize" -> 60, "TrainingTime" -> 0.015848931924611134`,
                "TrainingMemory" -> 247752, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.365492761842566, 0.07391954184533828]}, 
               "AccuracyHistory" -> {
                 Around[0.6073744952078513, 0.015333980923321609`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.6903497936940829, 0.022525662050833253`], "Accuracy" -> 
               Around[0.6473141682602217, 0.015079347021785686`], 
               "EvaluationTime" -> 2.0060974923614327`*^-6, "TestSize" -> 
               1992, "ModelMemory" -> 11840, 
               "ModelUtility" -> -0.329140084763904, "TrainingSize" -> 300, 
               "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
               717176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.6903497936940829, 0.015928048386860665`]}, 
               "AccuracyHistory" -> {
                 Around[0.6473141682602217, 0.010662708534969827`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.645352818590684, 0.03177104689339636], "Accuracy" -> 
               Around[0.6945974180708945, 0.030321220943814085`], 
               "EvaluationTime" -> 1.787347275805139*^-6, "TestSize" -> 458, 
               "ModelMemory" -> 11840, "ModelUtility" -> -0.2650321175241038, 
               "TrainingSize" -> 1834, "TrainingTime" -> 0.15848931924611134`,
                "TrainingMemory" -> 4144384, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.645352818590684, 0.02246552270371636]}, 
               "AccuracyHistory" -> {
                 Around[0.6945974180708945, 0.021440340943226506`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 1.787347275805139*^-6, "MeanCrossEntropy" -> 
              Around[0.645352818590684, 0.03177104689339636], "ModelMemory" -> 
              11840, "TrainingMemory" -> 4144384, "TrainingTime" -> 
              0.20806844041008027`|>, "Index" -> 6|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 1.|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.0475142910004591`, 0.025954068859717884`], "Accuracy" -> 
               Around[0.5494928808216657, 0.02205075867846894], 
               "EvaluationTime" -> 2.098587138277019*^-6, "TestSize" -> 1000, 
               "ModelMemory" -> 11840, "ModelUtility" -> -0.7445554209631571, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.012589254117941668`, 
               "TrainingMemory" -> 187528, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.0475142910004591`, 0.01835229809008912]}, 
               "AccuracyHistory" -> {
                 Around[0.5494928808216657, 0.0155922409918535]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.9089921066399916, 0.046621756602424326`], "Accuracy" -> 
               Around[0.6134260679276194, 0.02424311597344609], 
               "EvaluationTime" -> 2.2702952622539914`*^-6, "TestSize" -> 800,
                "ModelMemory" -> 11840, "ModelUtility" -> -0.6079790573342275,
                "TrainingSize" -> 60, "TrainingTime" -> 0.015848931924611134`,
                "TrainingMemory" -> 247872, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.9089921066399916, 0.032966560244402934`]}, 
               "AccuracyHistory" -> {
                 Around[0.6134260679276194, 0.01714247170191564]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.6855579457392336, 0.0184090340247621], "Accuracy" -> 
               Around[0.6666879695549327, 0.014882737467616598`], 
               "EvaluationTime" -> 1.4264512594067405`*^-6, "TestSize" -> 
               1992, "ModelMemory" -> 11840, 
               "ModelUtility" -> -0.3210261820746858, "TrainingSize" -> 300, 
               "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
               717064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.6855579457392336, 0.013017152794003162`]}, 
               "AccuracyHistory" -> {
                 Around[0.6666879695549327, 0.010523684585970802`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.644156724593555, 0.0304546507765487], "Accuracy" -> 
               Around[0.7007516113043899, 0.030163449582461102`], 
               "EvaluationTime" -> 4.251495874447665*^-6, "TestSize" -> 458, 
               "ModelMemory" -> 11840, 
               "ModelUtility" -> -0.26279030028273687`, "TrainingSize" -> 
               1834, "TrainingTime" -> 0.12589254117941673`, "TrainingMemory" -> 
               4141256, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.644156724593555, 0.02153469008276574]}, 
               "AccuracyHistory" -> {
                 Around[0.7007516113043899, 0.02132877974373678]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 4.251495874447665*^-6, "MeanCrossEntropy" -> 
              Around[0.644156724593555, 0.0304546507765487], "ModelMemory" -> 
              11840, "TrainingMemory" -> 4141256, "TrainingTime" -> 
              0.1699206087434723|>, "Index" -> 7|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 10.|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.1649602570693207`, 0.04991123544647151], "Accuracy" -> 
               Around[0.5660928245746206, 0.06001469954508674], 
               "EvaluationTime" -> 2.11934977529614*^-6, "TestSize" -> 2000, 
               "ModelMemory" -> 11840., "ModelUtility" -> -0.8544114932698678,
                "TrainingSize" -> 10, "TrainingTime" -> 0.00630957344480193, 
               "TrainingMemory" -> 163386.66666666666`, "ExperimentCount" -> 
               2, "MeanCrossEntropyHistory" -> {
                 Around[1.2146056700841021`, 0.0066326829580048985`], 
                 Around[1.115314844054539, 0.008149910759889594]}, 
               "AccuracyHistory" -> {
                 Around[0.5070792429216444, 0.01569524892530099], 
                 Around[0.6251064062275968, 0.015192433690207808`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.9146495227235311, 0.01242204052607982], "Accuracy" -> 
               Around[0.5956732970815706, 0.02178158937126056], 
               "EvaluationTime" -> 2.1502495499310894`*^-6, "TestSize" -> 
               1000, "ModelMemory" -> 11840, 
               "ModelUtility" -> -0.606690515390803, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
               247504, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.9146495227235311, 0.00878370909216515]}, 
               "AccuracyHistory" -> {
                 Around[0.5956732970815706, 0.01540190954943917]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.7285880857690815, 0.01290239622398342], "Accuracy" -> 
               Around[0.6650268650039332, 0.014904860651874486`], 
               "EvaluationTime" -> 1.4197360429349484`*^-6, "TestSize" -> 
               1992, "ModelMemory" -> 11840, 
               "ModelUtility" -> -0.38008102808124167`, "TrainingSize" -> 300,
                "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
               717600, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.7285880857690815, 0.009123371863534381]}, 
               "AccuracyHistory" -> {
                 Around[0.6650268650039332, 0.010539328039580994`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.6561858249239222, 0.028548009896583466`], "Accuracy" -> 
               Around[0.6922756335334114, 0.03039121349446763], 
               "EvaluationTime" -> 2.0713609127740474`*^-6, "TestSize" -> 458,
                "ModelMemory" -> 11840, 
               "ModelUtility" -> -0.28054457852802317`, "TrainingSize" -> 
               1834, "TrainingTime" -> 0.12589254117941673`, "TrainingMemory" -> 
               4141192, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.6561858249239222, 0.020186491387254837`]}, 
               "AccuracyHistory" -> {
                 Around[0.6922756335334114, 0.02148983315042617]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 2.0713609127740474`*^-6, "MeanCrossEntropy" -> 
              Around[0.6561858249239222, 0.028548009896583466`], 
              "ModelMemory" -> 11840, "TrainingMemory" -> 4141192, 
              "TrainingTime" -> 0.16364092807033256`|>, "Index" -> 8|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0.0001|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[10.554600903597816`, 1.246097155379523], "Accuracy" -> 
               Around[0.5048978101548179, 0.022250738313649668`], 
               "EvaluationTime" -> 2.1502495499310894`*^-6, "TestSize" -> 
               1000, "ModelMemory" -> 11840, 
               "ModelUtility" -> -3.073092085805671, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
               188016, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[10.554600903597816`, 0.8811237485861276]}, 
               "AccuracyHistory" -> {
                 Around[0.5048978101548179, 0.015733647947989003`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[13.94040924919408, 1.562926831894392], "Accuracy" -> 
               Around[0.5951363911228396, 0.02175999267454652], 
               "EvaluationTime" -> 2.0469247266229486`*^-6, "TestSize" -> 
               1000, "ModelMemory" -> 11840, 
               "ModelUtility" -> -3.3501593125273517`, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
               247872, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[13.94040924919408, 1.1051561613309318`]}, 
               "AccuracyHistory" -> {
                 Around[0.5951363911228396, 0.015386638378741444`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 2.0469247266229486`*^-6, "MeanCrossEntropy" -> 
              Around[13.94040924919408, 1.562926831894392], "ModelMemory" -> 
              11840, "TrainingMemory" -> 247872, "TrainingTime" -> 
              0.37584677383002885`|>, "Index" -> 9|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 100000.|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.3652664519152873`, 0.005976108751894043], "Accuracy" -> 
               Around[0.4898670678207096, 0.02220990917109008], 
               "EvaluationTime" -> 2.098587138277019*^-6, "TestSize" -> 1000, 
               "ModelMemory" -> 11840, "ModelUtility" -> -1.0054169583942036`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.003981071705534969, 
               "TrainingMemory" -> 104744, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.3652664519152873`, 0.004225747023572552]}, 
               "AccuracyHistory" -> {
                 Around[0.4898670678207096, 0.015704777384415086`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.36507957708813, 0.0066799808563869426`], "Accuracy" -> 
               Around[0.5808397317912745, 0.02441265598000845], 
               "EvaluationTime" -> 2.188996358671642*^-6, "TestSize" -> 800, 
               "ModelMemory" -> 11840, "ModelUtility" -> -1.0053832208505389`,
                "TrainingSize" -> 60, "TrainingTime" -> 0.005011872336272719, 
               "TrainingMemory" -> 186544, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.36507957708813, 0.004723459761747528]}, 
               "AccuracyHistory" -> {
                 Around[0.5808397317912745, 0.017262354590238296`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.3738112880488897`, 0.00312379101814627], "Accuracy" -> 
               Around[0.6271467909477425, 0.015274492228084118`], 
               "EvaluationTime" -> 1.4591014214880056`*^-6, "TestSize" -> 
               1992, "ModelMemory" -> 11840, 
               "ModelUtility" -> -1.0112357776464813`, "TrainingSize" -> 300, 
               "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
               716936, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[1.3738112880488897`, 0.0022088538119408568`]}, 
               "AccuracyHistory" -> {
                 Around[0.6271467909477425, 0.010800697033659497`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 1.4591014214880056`*^-6, "MeanCrossEntropy" -> 
              Around[1.3738112880488897`, 0.00312379101814627], "ModelMemory" -> 
              11840, "TrainingMemory" -> 716936, "TrainingTime" -> 
              0.06466774883847007|>, "Index" -> 10|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 1.*^-6|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[30.06677519049737, 2.4352878168900984`], "Accuracy" -> 
               Around[0.5767329918226435, 0.015197018150471808`], 
               "EvaluationTime" -> 1.315750035552637*^-6, "TestSize" -> 2100, 
               "ModelMemory" -> 11840, "ModelUtility" -> -4.112682414838703, 
               "TrainingSize" -> 60, "TrainingTime" -> 0.015848931924611134`, 
               "TrainingMemory" -> 247504, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[30.06677519049737, 1.7220085294639718`]}, 
               "AccuracyHistory" -> {
                 Around[0.5767329918226435, 0.010745914588013659`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 1.315750035552637*^-6, "MeanCrossEntropy" -> 
              Around[30.06677519049737, 2.4352878168900984`], "ModelMemory" -> 
              11840, "TrainingMemory" -> 247504, "TrainingTime" -> 
              0.3791064516366983|>, "Index" -> 11|>, <|
           "Value" -> "LogisticRegression", 
            "Options" -> <|
             "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 10000.|>, 
              "OptimizationMethod" -> <|"Value" -> Automatic|>, 
              MaxIterations -> <|"Value" -> 30|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.3631607001123622`, 0.006283483299049569], "Accuracy" -> 
               Around[0.5828501641120694, 0.023019747529552353`], 
               "EvaluationTime" -> 3.388488087603437*^-6, "TestSize" -> 900, 
               "ModelMemory" -> 11840, "ModelUtility" -> -1.003919802744807, 
               "TrainingSize" -> 60, "TrainingTime" -> 0.01995262314968879, 
               "TrainingMemory" -> 186784, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.3631607001123622`, 0.004443093650230369]}, 
               "AccuracyHistory" -> {
                 Around[0.5828501641120694, 0.016277419579348744`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.3628256547789104`, 0.003803481977908933], "Accuracy" -> 
               Around[0.6270031184236444, 0.018913452653762968`], 
               "EvaluationTime" -> 1.694951123946661*^-6, "TestSize" -> 1300, 
               "ModelMemory" -> 11840, "ModelUtility" -> -1.0033105309034465`,
                "TrainingSize" -> 300, "TrainingTime" -> 0.01, 
               "TrainingMemory" -> 717000, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.3628256547789104`, 0.002689467898700229]}, 
               "AccuracyHistory" -> {
                 Around[0.6270031184236444, 0.013373830627126496`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 1.694951123946661*^-6, "MeanCrossEntropy" -> 
              Around[1.3628256547789104`, 0.003803481977908933], 
              "ModelMemory" -> 11840, "TrainingMemory" -> 717000, 
              "TrainingTime" -> 0.0963526231496888|>, "Index" -> 12|>|>, 
         TypeSystem`Assoc[
          TypeSystem`Struct[{"Value", "Options"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["LogisticRegression"]], 
            TypeSystem`Assoc[TypeSystem`AnyType, 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
          
          TypeSystem`Struct[{
           "Experiments", "PredictedPerformances", "Index"}, {
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
               "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory",
                "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
             TypeSystem`AnyLength], 
            
            TypeSystem`Struct[{
             "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
              "TrainingMemory", "TrainingTime"}, {
              TypeSystem`Atom[Real], TypeSystem`AnyType, 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real]}], 
            TypeSystem`Atom[Integer]}], 12], <||>], "MaxTrainingSize" -> 2292,
        "PreprocessorEvaluationTime" -> 2.18359375*^-6, "PreprocessorMemory" -> 
       181840, "InputDimension" -> 69, "OutputDimension" -> 1, 
       "BaselineLogProbability" -> -0.70024056722671, "VariableBudget" -> 
       True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
       False, "NaturalStop" -> True, "AbortStop" -> False, 
       "LastReportingTime" -> 3.879421257517976`16.341341930369218*^9, 
       "RoundPartitioning" -> 
       Dataset[{<|
          "TrainingSizes" -> 10, "TimeBudgets" -> 0.13720000000000007`, 
           "ElapsedTimes" -> 0.19349, "ExperimentCounts" -> 13|>, <|
          "TrainingSizes" -> 60, "TimeBudgets" -> 0.19600000000000017`, 
           "ElapsedTimes" -> 0.302863, "ExperimentCounts" -> 12|>, <|
          "TrainingSizes" -> 300, "TimeBudgets" -> 0.2800000000000002, 
           "ElapsedTimes" -> 0.287134, "ExperimentCounts" -> 8|>, <|
          "TrainingSizes" -> 1834, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
           0.424485, "ExperimentCounts" -> 3|>}, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
            "ExperimentCounts"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
     None, "Log" -> <|
      "Example" -> 
       MachineLearning`MLDataset[<|
         "f1" -> <|
           "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"UNITED KINGDOM"},
             "ID" -> 6873582013879478265|>, 
          "f2" -> <|
           "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"Financials"}, 
            "ID" -> 7971373608825966019|>, 
          "f3" -> <|
           "Type" -> "Numerical", "Weight" -> 1, 
            "Values" -> {0.4051568490028274}, "ID" -> 3393134348820751293|>, 
          "f4" -> <|
           "Type" -> "Numerical", "Weight" -> 1, 
            "Values" -> {7.173747390485207}, "ID" -> 3828733207173156760|>, 
          "f5" -> <|
           "Type" -> "Numerical", "Weight" -> 1, 
            "Values" -> {28.34708907560874}, "ID" -> 4487409260182963336|>, 
          "f6" -> <|
           "Type" -> "Text", "Weight" -> 1, "Values" -> {"Estimated data"}, 
            "ID" -> 386652190722912716|>, 
          "f7" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {66.0991}, "ID" -> 
            6944730188686709292|>|>, <|
         "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0,
           "RawExample" -> False|>], "TrainingTime" -> 3.120037, 
       "MaxTrainingMemory" -> 20566624, "DataMemory" -> 3595256, 
       "FunctionMemory" -> 383840, "LanguageVersion" -> {13.1, 0}, "Date" -> 
       DateObject[{2022, 12, 7, 17, 0, 58.829869`8.522172854659216}, 
         "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, "ProcessorType" -> 
       "ARM64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
       "Evaluations" -> {}|>|>]]]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, 3.878806970579384*^9, 
   3.878811612125744*^9, 3.8791490032180023`*^9, 3.879160963309402*^9, 
   3.879325459923882*^9, {3.8793329903141823`*^9, 3.8793329994660587`*^9}, 
   3.879354647755681*^9, 3.879417659314661*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"763a43e4-2808-4f39-84b2-9c41a55787b1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"cm", " ", "=", 
    RowBox[{"ClassifierMeasurements", "[", 
     RowBox[{"cRisk", ",", "testset"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Test", " ", "our", " ", "classifier", " ", "on", " ", "the", " ", "test", 
    " ", "set"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<The accuracy is: \>\"", ",", 
    RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}], " ", "]"}], 
  RowBox[{"(*", 
   RowBox[{
   "Plot", " ", "the", " ", "accuracy", " ", "of", " ", "our", " ", "model"}],
    "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"AccuracyAss", " ", "=", " ", 
   RowBox[{"Append", "[", 
    RowBox[{"AccuracyAss", ",", " ", 
     RowBox[{"\"\<LogisticRegression\>\"", "->", 
      RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Plot", " ", "the", " ", "Confusion", " ", "Matrix"}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.878619179671941*^9, 3.8786191833045883`*^9}, {
   3.8786192222213593`*^9, 3.878619249704307*^9}, {3.878619342065884*^9, 
   3.878619346687873*^9}, {3.878619378625424*^9, 3.8786193862338676`*^9}, 
   3.878805729554159*^9, 3.878805819596631*^9, {3.878806143346759*^9, 
   3.878806195391272*^9}, {3.878806763106118*^9, 3.878806811062291*^9}, {
   3.878806841172628*^9, 3.878806863962813*^9}, 3.8788069741147137`*^9},
 CellLabel->
  "In[508]:=",ExpressionUUID->"f50b7281-5b28-4bee-886b-6e43d141e559"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"The accuracy is: \"\>", "\[InvisibleSpace]", 
   "0.615819209039548`"}],
  SequenceForm["The accuracy is: ", 0.615819209039548],
  Editable->False]], "Print",
 CellChangeTimes->{3.878806864557898*^9, 3.878806978447228*^9, 
  3.878811616421514*^9, 3.8791490567506323`*^9, 3.87916097154554*^9, 
  3.87932546563844*^9, 3.87933300270362*^9, 3.879354650633625*^9},
 CellLabel->
  "During evaluation of \
In[508]:=",ExpressionUUID->"fb1c6c22-a9d6-46c0-8150-22d71ecec140"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBghWIQGwI+2BNLn7D3mL/L+J39qeXnvvD8f2O/QTi6JSXn
BdH6yTW/7vLE2UF/X9u/8m/zevbssX2B8ad1TccO2MfZvLS4ceSt/TyvUF6e
mNf2WeslHNu1nlDNPTD6YZXIOveHt+xhIUbrcJjdK63zcvcb+1zjpO5Yjef2
pembTicaXqW6v9BpavkLAMEvnF0=
   "], {{0, 0}, {5, 5}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.012658227848101266`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "E", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 1.}], 
         Row[{"Row fraction = ", 0.012658227848101266`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.002857142857142857`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "B", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.002857142857142857}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["56", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "56", "\" examples of \"", "\"C\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.16`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{56, " examples of ", "C", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.16}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["216", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "216", "\" examples of \"", "\"D\"", "\" correctly classified\""},
             "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.6171428571428571`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9953917050691244`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7619047619047619`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{216, " examples of ", "D", " correctly classified"}], 
         Row[{"Precision = ", 0.6171428571428571}], 
         Row[{"Recall = ", 0.9953917050691244}], 
         Row[{"FScore = ", 0.7619047619047619}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["76", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "76", "\" examples of \"", "\"E\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.21714285714285714`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.9620253164556962`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{76, " examples of ", "E", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.21714285714285714`}], 
         Row[{"Row fraction = ", 0.9620253164556962}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.002857142857142857`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "A", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.002857142857142857}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.3333333333333333`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.004608294930875576`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "D", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.3333333333333333}], 
         Row[{"Row fraction = ", 0.004608294930875576}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "2", "\" examples of \"", "\"E\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.6666666666666666`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.02531645569620253`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.048780487804878044`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{2, " examples of ", "E", " correctly classified"}], 
         Row[{"Precision = ", 0.6666666666666666}], 
         Row[{"Recall = ", 0.02531645569620253}], 
         Row[{"FScore = ", 0.048780487804878044`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 4.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" of class \"", "\"B\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " of class ", "B"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 3.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "56", "\" example\"", "\"s\"", "\" of class \"", "\"C\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{56, " example", "s", " of class ", "C"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "217", "\" example\"", "\"s\"", "\" of class \"", "\"D\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9953917050691244`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{217, " example", "s", " of class ", "D"}], 
        Row[{"Recall = ", 0.9953917050691244}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "79", "\" example\"", "\"s\"", "\" of class \"", "\"E\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.02531645569620253`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{79, " example", "s", " of class ", "E"}], 
        Row[{"Recall = ", 0.02531645569620253}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" of class \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " of class ", "A"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"B\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "B"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" classified as \"", "\"C\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " classified as ", "C"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "350", "\" example\"", "\"s\"", "\" classified as \"", "\"D\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.6171428571428571`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{350, " example", "s", " classified as ", "D"}], 
        Row[{"Precision = ", 0.6171428571428571}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "3", "\" example\"", "\"s\"", "\" classified as \"", "\"E\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.6666666666666666`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{3, " example", "s", " classified as ", "E"}], 
        Row[{"Precision = ", 0.6666666666666666}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "A"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{4.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 0.], TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 0.], TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 0.], TraditionalForm]}}, {{4.5, 
       FormBox["1", TraditionalForm]}, {3.5, 
       FormBox["56", TraditionalForm]}, {2.5, 
       FormBox["217", TraditionalForm]}, {1.5, 
       FormBox["79", TraditionalForm]}, {0.5, 
       FormBox["1", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["350", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["3", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->13,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->228.,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{
  3.878619184460875*^9, 3.878619347255011*^9, 3.878619387156837*^9, 
   3.878715848704851*^9, {3.878715890521706*^9, 3.8787158953838463`*^9}, {
   3.878805538696899*^9, 3.878805553604134*^9}, 3.878806818221781*^9, 
   3.878806864604879*^9, 3.878806978492092*^9, 3.878811616470173*^9, 
   3.87914905680276*^9, 3.879160971694542*^9, 3.87932546568084*^9, 
   3.879333002746861*^9, 3.879354650698729*^9},
 CellLabel->
  "Out[511]=",ExpressionUUID->"62337a55-d7f5-4a0c-b8e0-3ef74c017060"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Gradient Boosted Trees", "Subsubsection",
 CellChangeTimes->{{3.878805416699134*^9, 3.878805417721744*^9}, {
  3.8788070078065643`*^9, 
  3.8788070120756893`*^9}},ExpressionUUID->"f53d6bbd-1785-4c17-836e-\
57829fcc4856"],

Cell["\<\
Train a classifier using an ensemble of trees trained with gradient boosting\
\>", "Text",
 CellChangeTimes->{{3.878805704170437*^9, 3.8788057223306637`*^9}, {
  3.878805766632689*^9, 3.87880578974465*^9}, {3.8788070203973217`*^9, 
  3.878807022066434*^9}},ExpressionUUID->"032cc1ba-9cd4-4b67-9266-\
120a6c713934"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cRisk", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainingset", "->", "\"\<Ratings\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<GradientBoostedTrees\>\""}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Information", "[", "cRisk", "]"}]}], "Input",
 CellChangeTimes->{{3.8786185865414057`*^9, 3.878618597824006*^9}, {
  3.878618646892776*^9, 3.878618648994371*^9}, {3.878618877270843*^9, 
  3.878618880432907*^9}, {3.878618998083866*^9, 3.878619004451974*^9}, {
  3.8786191510115213`*^9, 3.878619159945651*^9}, {3.8786192237272882`*^9, 
  3.878619223941098*^9}, {3.878806999046287*^9, 3.878807004148501*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"bfdaded8-2093-4087-9ae1-340f7ee79d36"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Numerical\"", 
                    ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"A\"", "\"C\"", "\"D\"", "\"E\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Numerical\"", 
                    ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"A\"", "\"C\"", "\"D\"", "\"E\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["2292", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 2292, "ClassNumber" -> 4, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "Country" -> <|"Type" -> "Nominal"|>, 
           "GICS Sector Name" -> <|"Type" -> "Nominal"|>, 
           "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Disclosure" -> <|"Type" -> "Text"|>, 
           "Revenue (USD mn)" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
           "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|
               "FeatureNames" -> {
                 "Country", "GICS Sector Name", 
                  "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                  "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                  "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                  "Carbon Disclosure", "Revenue (USD mn)"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 7|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Nominal", "Nominal", "Numerical", "Numerical", "Numerical", 
                  "Text", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6", "f7"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
           "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|"(f6(f1f2)(f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGBwBeIM/YV7W75Nsh+lhwbtJh5bctH1ONVpBjD4gJMGANGj
EGk=
              "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 2292, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>, 
                    "f6" -> <|"Type" -> "Text"|>, 
                    "f7" -> <|"Type" -> "Numerical"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 8728850163752787708|>], 
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4012203223801137025|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7247984987659546603|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>, 
                    "Index" -> {<|
                    "AUSTRIA" -> 1, "BELGIUM" -> 2, "BULGARIA" -> 3, 
                    "CROATIA" -> 4, "CYPRUS" -> 5, "CZECH REPUBLIC" -> 6, 
                    "DENMARK" -> 7, "ESTONIA" -> 8, "FINLAND" -> 9, "FRANCE" -> 
                    10, "GERMANY" -> 11, "GREECE" -> 12, "HUNGARY" -> 13, 
                    "ICELAND" -> 14, "IRELAND" -> 15, "ITALY" -> 16, 
                    "LUXEMBOURG" -> 17, "MALTA" -> 18, "NETHERLANDS" -> 19, 
                    "NORWAY" -> 20, "POLAND" -> 21, "PORTUGAL" -> 22, 
                    "ROMANIA" -> 23, "SLOVENIA" -> 24, "SPAIN" -> 25, 
                    "SWEDEN" -> 26, "SWITZERLAND" -> 27, "UKRAINE" -> 28, 
                    "UNITED KINGDOM" -> 29|>, <|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>, <|"" -> 1|>}, 
                    "MissingCode" -> Indeterminate, "Version" -> {13.1, 0}, 
                    "ID" -> 4113760982813578529, 
                    "Output" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {79.46666212202445, 22.194053219786632`, 
                    107.61244353226444`, 3257.480947285103}, 
                    "StandardDeviation" -> {393.01607179380045`, 
                    67.03477704200654, 159.36202682130502`, 
                    11368.305968784858`}, 
                    "Output" -> <|
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 3752698420053720059|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3, 
                    "SetSize" -> {29, 11, 1}|>|>, 
                    "Boundaries" -> {{-0.5, -0.46551724137931033`, \
-0.43103448275862066`, -0.39655172413793105`, -0.3620689655172414, \
-0.3275862068965517, -0.2931034482758621, -0.2586206896551724, \
-0.22413793103448276`, -0.1896551724137931, -0.15517241379310343`, \
-0.12068965517241381`, -0.08620689655172414, -0.051724137931034475`, \
-0.017241379310344807`, 0.017241379310344862`, 0.051724137931034475`, 
                    0.08620689655172409, 0.12068965517241381`, 
                    0.15517241379310343`, 0.18965517241379315`, 
                    0.22413793103448276`, 0.2586206896551724, 
                    0.2931034482758621, 0.3275862068965517, 
                    0.3620689655172413, 0.39655172413793105`, 
                    0.43103448275862066`, 0.4655172413793104, 
                    0.5}, {-0.5, -0.40909090909090906`, -0.3181818181818182, \
-0.2272727272727273, -0.13636363636363635`, -0.04545454545454547, 
                    0.045454545454545414`, 0.13636363636363635`, 
                    0.2272727272727273, 0.31818181818181823`, 
                    0.40909090909090906`, 0.5}, {-0.5, 0.5}}, 
                    "Version" -> {13.1, 0}, "ID" -> 2082886514676041914, 
                    "Output" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>, 
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Spans" -> {
                    Span[1, 3], 
                    Span[4, 7]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {13.1, 0}, "ID" -> 
                    3471102231048770802|>]}, "Invertibility" -> "Approximate",
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBmQFm/iFib1JlAgAAAAcAAAAHAAAAnnLlvqoafz+KYGYlv1SAv810wMpG
TDU/AUBONTBMhj+1cQuaUpuJv9YtYKAy/u8/JDt4C5UVe789VwE+XMaev6Re
LLDVXZW/XHEJgJ3inL+2nmsu51OOP9S7I3DQmH0/jzEBNLwOez84Ty8A9vXv
PwC4ljNYZnA/YvKlp+ZMWb8BfrsAaw7XvmXr3vEeUli/wN0fKg3/778UY4j9
LZCJv8n0OTY3a34/FuhJnnUT4r+CZtOVibnFv0oHbnB91MW/Yfks1GxA6b9P
BLqrDJNRv53AkMaNg4c/hST5mX0djL9QvbDVAMfhv0LLcpbgbs6/p6R84MDE
4b8RbOOt2zniPw87V6knfWi/+LzAM/eKcL+W8GVWKG6nv+1xeHQpGuK/ALPE
fAS+lT/s0sbflFbpP8BlRZdyV80/FLkGqS6tZb8AripyzMVbP7A3DnyjnGM/
kq6dzfP9zL+CSl7Il5buP9K+dmxj4se/PngTNwuaab/8oz2v+vZjvxlpOGEp
YIM/nkOrpVMmgD+WkMi9
                   "], 
                  "Precisions" -> {0.6080837241689073, 1.0249459814305149`, 
                   1.4338854587567862`, 1.4583742615351594`, 
                   12.050298831843332`, 17.732403162990845`, 
                   25.363460701880502`}, "NoisePrecision" -> None, 
                  "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {
                    0.14781839702703387`, -0.03761867444492348, \
-0.0018568141330923247`, 
                    0.00002093317943277569, -0.000032094047490506016`, \
-0.00028672757917445207`, 0.00010586837139914856`}, 
                    "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4722156746689135088|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7.|>,
                     "Key" -> "((f1f2f6)(f3f4f5f7))", "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 7, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {
                    0.14781839702703448`, -0.03761867444492345, \
-0.0018568141330923336`, 
                    0.000020933179432783272`, -0.00003209404749049296, \
-0.00028672757917443646`, 0.0001058683713990839}, 
                    "StandardDeviation" -> {0.23795387694998307`, 
                    0.2048229568696138, 0.2881101140977073, 
                    1.0000629888389347`, 1.0001224192028917`, 
                    0.9999940861686942, 1.0000688309807984`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    4503155047815583877|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                   "Mean" -> {
                    0.14781839702703448`, -0.03761867444492345, \
-0.0018568141330923336`, 
                    0.000020933179432783272`, -0.00003209404749049296, \
-0.00028672757917443646`, 0.0001058683713990839}, 
                   "StandardDeviation" -> {0.23795387694998307`, 
                    0.2048229568696138, 0.2881101140977073, 
                    1.0000629888389347`, 1.0001224192028917`, 
                    0.9999940861686942, 1.0000688309807984`}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 7, 
                   "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   4503155047815583877|>], "InputDimension" -> 0, 
                "OutputDimension" -> 7, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"UNITED KINGDOM"}, "ID" -> 
                    3679654460434315804|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"Financials"}, "ID" -> 4509295814520375433|>,
                     "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {0.4051568490028274}, "ID" -> 
                    4029740649927229730|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {7.173747390485207}, "ID" -> 
                    5883454897782969724|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {28.34708907560874}, "ID" -> 
                    151013525008169422|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 8313293367344529314|>, 
                    "f7" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {66.0991}, "ID" -> 2774697970610267399|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.061307, "MaxTrainingMemory" -> 1345632, 
                  "DataMemory" -> 541240, "FunctionMemory" -> 86128, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 12, 7, 17, 1, 38.215715`8.334816968259958}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, 
                  "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-5.612930781032486, -5.612930781032486, \
-5.3272745754000566`, -5.227760758272564, -5.1901459558849306`, \
-4.971419065536934, -4.898762215473115, -4.883258712808405, -4.8788972407619, \
-4.853815385428406, -4.8532432028568495`}, 
                   "LeftBoundary" -> -5.3272745754000566`, "LeftScale" -> 
                   0.14282810281621483`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[35.48825552541895, 0.5736581387301678], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 8833432794738512184|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f3f4f5f7)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
               "(f1f2)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                 "Version" -> {13.1, 0}, "ID" -> 7001699027996678713|>], 
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "(f1f2)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Version" -> {13.1, 0}, "ID" -> 4268131072254999855|>]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Mean" -> {79.46666212202445, 22.194053219786632`, 
              107.61244353226444`, 3257.480947285103}, 
             "StandardDeviation" -> {393.01607179380045`, 67.03477704200654, 
              159.36202682130502`, 11368.305968784858`}, 
             "Output" -> <|
              "(f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 1927666520227175614|>], 
           MachineLearning`MLProcessor[
           "ToLowerCase", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 8121204540162656102, 
             "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "RemoveDiacritics", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 1964114494773798714, 
             "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "(f1f2)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
             "Output" -> <|
              "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f2)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "Sequence", <|
                "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Processors" -> {
                   MachineLearning`MLProcessor[
                   "TextToNominalSequence", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {13.1, 0}, "ID" -> 613813152937597666, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                   MachineLearning`MLProcessor[
                   "NominalSequenceToTFIDFVector", <|
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> CompressedData["
1:eJw1lEuO1FAMRXvACmg2wAKQ/P8soSVGLIEBEiMGsH9xkpdSqlIp28++vtfO
159/fvyqt7e3v5+4ff/999/HFx6+rVqq2U5t5uas6uMQ9dFe5zNhJb3HMWvS
Km1rvToSKY8jNX27tJV0aV79ODRLoq/wmC31quPoyeyWtMycu46+HDZewFKJ
ohAHj6PWCogmCuTOGPHjyBUAd5tW+tToPicytTykamdkPMuf4gEcA+a2rxM1
rxNBhfBc7fIBHSGPIwBIYaECtFDvSUWYhUY3/lQt63g5TJXO0mFWFlAPJQ6f
smRRDl38dz6OCNeUdlDNRa4/xR2MQrsxzRHOv2i3lAVShyw+8trLoQjqFTOT
BdXtdhxaEwVHCN9bgrIPXM0IhcGrBQu0nPh4PyR2V18t65jBcn18xm6BcnSu
l1i1sXabIy6IQxfS0WU0fZsTLt1UmCv4rTlmOoRwujoNi+Vt3pQg1rhPgDTk
hqJKZnJKTozTRu6xZ6FgFk2P9CXeyw5qWXrJgj8ThvK2V2vQJunFkVTMbjuM
QGMkE5jG12Vuu9t0OK0zNSJxrcWx0yu5BK4YeHQwP/bsCvijTZKUDTP/fpMA
FPQuS9IR0afuTVZlcF2z0ZQ4draQrIRv3U9Pv7TL0nQVBeqqEyc/e8BSiTvy
LfyUPvHwydaynMviFLofHpgjppClUKc0a2NHcmaYcP7ZoFkIbB87lZh/bVBO
uVyb+dgvqIau/AwjcfSqaywGdNEBTcawH3sjH3O2AdfLGuaJZ4Ad8HrJEmy5
Vx57+/WuAaBrVaHEE89SQQMnIAR+WN7bDgSWTp1LzJUZOnV5wQ2KFAqyKSMv
HpZlDgaRyiAIiJ7/oUHtSA==
                    "], "Values" -> None, "DefaultValue" -> -1, 
                    "HashFunction" -> 
                    Function[{
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {13.1, 0}|>], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+IA600prMte2//Yzh0uc0Lc4b/OvO2f3Hgdgjkun2YJ
fmyfeW918d4CDofDty3LvooKOtRuvD7VL13SYc2dWdfPNUk4HN4jtIKJicNB
lzn76IFqBofQHt6J5Rt/2/t9ZOApl7lqv6tA53swk6jDmoQr10tqLtnD9MPs
3e2fdnPWAR6HimUtfArzGRxgfJi9ySs5VzlpicPthfF9+ne8+NzyDW6ejsd+
B459HHBzlvTdKFkV9h1D3jWQ7fNc8T/2MD7MvwwQ0NA/weFNwcJn9umsKRvl
P7A7PM2JEnW6/9z+h37PXDn1b3D/wMyFhRuMD3M3TBydhtl7/8LZ5D8bf9rD
3Ksyf8un36kCDrt/bPsqpisDp2HqYf4GAF2Lu9w=
                    "], "Version" -> {13.1, 0}, "ID" -> 2566335944547631010, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                 "Invertibility" -> "Impossible", "StructurePreserving" -> 
                 True, "Missing" -> "Forbidden"|>], 
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "(f1f2)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Index" -> {<|
                   "AUSTRIA" -> 1, "BELGIUM" -> 2, "BULGARIA" -> 3, "CROATIA" -> 
                    4, "CYPRUS" -> 5, "CZECH REPUBLIC" -> 6, "DENMARK" -> 7, 
                    "ESTONIA" -> 8, "FINLAND" -> 9, "FRANCE" -> 10, "GERMANY" -> 
                    11, "GREECE" -> 12, "HUNGARY" -> 13, "ICELAND" -> 14, 
                    "IRELAND" -> 15, "ITALY" -> 16, "LUXEMBOURG" -> 17, 
                    "MALTA" -> 18, "NETHERLANDS" -> 19, "NORWAY" -> 20, 
                    "POLAND" -> 21, "PORTUGAL" -> 22, "ROMANIA" -> 23, 
                    "SLOVENIA" -> 24, "SPAIN" -> 25, "SWEDEN" -> 26, 
                    "SWITZERLAND" -> 27, "UKRAINE" -> 28, "UNITED KINGDOM" -> 
                    29|>, <|"Communication Services" -> 1, 
                    "Consumer Discretionary" -> 2, "Consumer Staples" -> 3, 
                    "Energy" -> 4, "Financials" -> 5, "Health Care" -> 6, 
                    "Industrials" -> 7, "Information Technology" -> 8, 
                    "Materials" -> 9, "Real Estate" -> 10, "Utilities" -> 
                    11|>}, "Output" -> <|
                  "(f1f2)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> {CompressedData["
1:eJxFSn0s1HEcvgh3JCcVSadrRJS2iOS+n++RNLOyY9e8bBVK5FZe2pmplfQ2
L+mFi9ZOeZlqesXd4ff7fMtFqdUKNVPUvJ1qtV60Eqv4p57teZ49L9LEfVHJ
ZgKBIEs4LVEJ2cGZmQk50ZYzYVeCyneNamaUTHOmmsZhwX//R+OvI7jBTwPl
T5OgWtjEfQuKpGUHdUTUZo+GdwiO7yMhN3wEhm4FU3G3glaWxuFVm+OYstYA
NS/r4MmgI7rKtehS+RaTWjqIXHhftmggDvY6JeKfaiPJ7CpmD00CNjVrgLQZ
02h70gTqGt7gjW/505/XXJnzUJA6NQtiJZ6yUX8Xmv17DDy66sDtwDXQFPuj
+PIU2geksRB9PzZo/QkJb5bJe0382OHPYNOugaUu8WzSS0ppdxtIhgPY3JJA
zsKiHVqrHKim9jkaQzzoyDIpt29nDAyWMLJriRXmX3HA5koxWx5zga8KDEKD
2BweD+0EzztFNP7aCNcU4Q2RdhPAhhaw2HSl7MMXa26Qq8HmZ7VQUWEiLU5h
fInXpfUD83LZsUkJU1bK2QqFkOr4xWzsazvmKO6S530iVodRspTePKJUZ2Dv
6gLcfdaHbgqzQm9nOWjJR5LabckdOnmR/9A5n9kFLKbK8XoynnUezUxrQJgj
Z9v601h0Wg8mlhph421rFnpJGeRbvZAPbnKFPNUf/OSgwprVHEwWOHEnvE6T
M+d0WEK2w/db+4FL+Q01Rc50rrYZaV88QtEq6HhlBo2yDS0/Xd35Kv1RsF43
gS/cnuLmnCiZd28xjm7XwIKDAvBorQe9Ph7z23ZA+XAfz034kC+6TnjWEUrS
73aQpCc/IbkwD6S0D7Z61sPnm0dQbcjgzXtq+U6RhIXOVqBhDjCVIpZmT2UB
na/GiLpG0CYuojqrIhQ/mk3lK8+g6BUHfq9lJOL6FvDqv4cVu81Z8mNfenPP
Qhq9WUTt9e5MbfsAw6XdEGfNwamEq2iyvccV/khhfwFDUVyt
                   "], 
                   RawArray["Real32",{{0., 0., 0., 0., 0.}, {
                    0.8618162870407104, -0.5170427560806274, 
                    0.13067105412483215`, 0.0519464910030365, 
                    0.2821357548236847}, {
                    0.05358464643359184, -0.4481622278690338, \
-0.2585599422454834, 
                    0.41537076234817505`, -0.8721502423286438}, \
{-0.47762107849121094`, 0.04566793516278267, 0.15804912149906158`, 
                    0.1324063390493393, -0.39964571595191956`}, {
                    0.41636601090431213`, -0.126698300242424, \
-1.0076189041137695`, 0.15269236266613007`, 
                    0.022659795358777046`}, {-0.5130622982978821, 
                    0.8752748370170593, -0.24996790289878845`, \
-0.6034899353981018, -0.10572776198387146`}, {-0.8138381838798523, 
                    0.7515830397605896, -0.6295681595802307, \
-1.1122981309890747`, 
                    0.13304246962070465`}, {-0.2974144518375397, \
-0.40220165252685547`, 
                    0.2797980308532715, -0.9168489575386047, \
-0.24606038630008698`}, {-0.4358099699020386, 
                    0.24717211723327637`, -0.1983363777399063, 
                    0.6381807923316956, -0.04446683079004288}, {
                    0.061473648995161057`, -0.23882365226745605`, 
                    0.6821203827857971, -0.5920867323875427, \
-0.44236046075820923`}, {-0.042206939309835434`, 0.2029142528772354, 
                    0.6734306812286377, -0.047500185668468475`, \
-0.1775016486644745}, {-0.24699686467647552`, -0.06097349524497986, 
                    0.15785102546215057`, 
                    0.13611683249473572`, -0.43699583411216736`}}]}, 
                 "Version" -> {13.1, 0}, "ID" -> 4560545129116418848|>]}, 
             "Invertibility" -> "Impossible", "StructurePreserving" -> True, 
             "Missing" -> "Forbidden"|>], 
           MachineLearning`MLProcessor[
           "MergeVectors", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f2)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>, 
               "(f3f4f5f7)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Spans" -> {
               Span[1, 54], 
               Span[55, 65], 
               Span[66, 69]}, "Wrappers" -> {SparseArray, Identity, Identity},
              "Output" -> <|
              "(f6(f1f2)(f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGBwBeIM/YV7W75Nsh+lhwbtJh5bctH1ONVpBjD4gJMGANGj
EGk=
                  "], "Type" -> "NumericalVector"|>|>, "Version" -> {13.1, 0},
              "ID" -> 324326445301658208|>]}, "Invertibility" -> "Impossible",
          "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 6906009905629070033|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|"A" -> 1, "C" -> 2, "D" -> 3, "E" -> 4|>}, 
             "MissingCode" -> 0, "Version" -> {13.1, 0}, "ID" -> 
             5430399239532347052, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {4}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 3683782806807983502|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "A" -> 0.003484320557491289, "C" -> 0.0039198606271777, "D" -> 
        0.3623693379790941, "E" -> 0.6302264808362369|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Ratings", 
          "Order" -> {
           "Country", "GICS Sector Name", 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
            "Carbon Disclosure", "Revenue (USD mn)", "Ratings"}|>], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {4, 5}, 0., {
      1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 62, 66, 58, 4, 55, 55, 61, 61}], 
          "NumericalThresholds" -> {-0.6295681297779082, 
           0.8752755820751191, -0.20129597187042234`, -0.07536391913890837, 
           0.057239573448896415`, -0.3887754529714584, -0.03677611239254474, \
-0.43580923974514, 0.0535847693681717}, "LeafValues" -> 
          RawArray[
            "Real32",{-5.352589130401611, -5.699719429016113, \
-5.650370121002197, -5.752593517303467, -5.752593517303467, \
-5.752593517303467, -5.752593517303467, -5.752593517303467, \
-5.752593517303467, -5.752593517303467}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, 8}, {6, 
            7}, {-4, -7}, {-6, -8}, {-5, 9}, {-9, -10}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{59, 68, 68, 55, 55, 55}], 
          "NumericalThresholds" -> {-0.2489180415868759, 
           1.569790065288544, -0.5293045639991759, -0.03677661716938018, \
-0.036776971071958535`, -0.03677749074995517}, "LeafValues" -> 
          RawArray[
            "Real32",{-5.303502082824707, -5.510791301727295, \
-5.43058443069458, -5.598459243774414, -5.598459243774414, \
-5.598459243774414, -5.598459243774414}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, -5}, {
            6, -6}, {-4, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 55, 69, 55, 56, 66, 55, 67, 60, 55, 65, 
            69, 58, 67, 14}], 
          "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.23192767053842542`, -0.036776391789317124`, 
           0.32777599990367895`, -0.17361307144165036`, -0.7423808276653289, \
-0.11119628697633742`, 
           0.09353595599532129, -0.03677611239254474, -0.10572843626141547`, \
-0.24787032604217527`, -0.23054439574480054`, 0.03732480853796006, 
           0.015290492679923775`}, "LeafValues" -> 
          RawArray[
            "Real32",{-1.0152592658996582`, -0.9885934591293335, \
-1.0031214952468872`, -0.9857531189918518, -0.9895718097686768, \
-1.0402162075042725`, -1.0438562631607056`, -0.9509018659591675, \
-1.0215831995010376`, -0.9832776188850403, -1.005902886390686, \
-1.0067423582077026`, -1.0234837532043457`, -1.0248078107833862`, \
-1.057281494140625, -1.0508991479873657`}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {3, 4}, {7, 8}, {6, 9}, {-1, 14}, {
            11, -7}, {-2, -8}, {-4, -9}, {10, -10}, {-5, 13}, {-3, 
            12}, {-12, -13}, {-11, -14}, {15, -15}, {-6, -16}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 60, 68, 56, 68, 58, 65, 60, 61, 60, 67, 
            66}], "NumericalThresholds" -> {-0.20411685854196546`, 
           0.17470937967300418`, 0.553546965122223, 
           0.32777599990367895`, -0.03129779733717441, -0.0753631331026554, \
-0.1057283468544483, 0.5991612970829011, -0.5130624473094939, 
           0.09353579953312875, -0.24549285322427747`, -0.16564054787158963`},
           "LeafValues" -> 
          RawArray[
            "Real32",{-0.46038106083869934`, -0.47761738300323486`, \
-0.5087331533432007, -0.4630129039287567, -0.4347775876522064, \
-0.45479249954223633`, -0.4839824140071869, -0.44758594036102295`, \
-0.48393863439559937`, -0.46348872780799866`, -0.43507856130599976`, \
-0.4185844659805298, -0.4277593493461609}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {5, 3}, {8, -4}, {-1, 11}, {6, 10}, {
            7, -7}, {-2, 9}, {-3, -9}, {-8, -10}, {-6, -11}, {-5, 
            12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{61, 66, 61, 63, 62, 66, 60, 68, 68}], 
          "NumericalThresholds" -> {
           0.238919897004962, -0.19741514325141904`, -0.513061612844467, \
-0.6295675337314605, 0.8752754032611848, -0.20129597187042234`, 
           0.15135144442319873`, 0.553546965122223, -0.03129779733717441}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.030102545395493507`, 
            0.27071648836135864`, -0.03012659214437008, 
            0.12452542036771774`, -0.030095528811216354`, \
-0.03010137937963009, -0.030098047107458115`, -0.030096959322690964`, \
-0.030095083639025688`, -0.030094683170318604`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, 4}, {6, -4}, {-3, 5}, {
            7, -6}, {-1, -7}, {9, 8}, {-8, -9}, {-5, -10}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{59, 68, 67, 68, 60, 60, 67}], 
          "NumericalThresholds" -> {-0.2489180415868759, 
           1.703814208507538, -0.33658057451248163`, -0.5285495817661284, 
           0.2018319591879845, -0.9100264012813567, -0.006360302213579415}, 
          "LeafValues" -> 
          RawArray["Real32",{0.195729061961174, 0.05468933284282684, 
            0.141041561961174, -0.03012022376060486, -0.030110502615571022`, \
-0.030112605541944504`, -0.030111609026789665`, -0.030113739892840385`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {-4, 5}, {6, 
            7}, {-5, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 55, 69, 55, 56, 66, 58, 68, 57, 63, 65, 
            69, 67, 14}], 
          "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.19106724858283994`, -0.036776391789317124`, 
           0.32777599990367895`, -0.17361307144165036`, \
-0.24031127244234082`, -0.12043159082531928`, -0.4988738149404525, \
-0.24996779114007947`, -0.10572843626141547`, -0.24787032604217527`, 
           0.03732480853796006, 0.015290492679923775`}, "LeafValues" -> 
          RawArray["Real32",{-0.002129277214407921, 0.01726617105305195, 
            0.009180898778140545, 
            0.005146774463355541, -0.003694901941344142, \
-0.025881368666887283`, -0.030131220817565918`, 
            0.05040400102734566, -0.006760286632925272, 0.03788721561431885, 
            0.018690200522542, 
            0.006111201364547014, -0.010150965303182602`, \
-0.042918965220451355`, -0.03653381019830704}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {3, 4}, {7, -4}, {6, 8}, {-1, 13}, {
            11, -7}, {-2, -8}, {9, -9}, {10, -10}, {-5, -11}, {-3, 
            12}, {-12, -13}, {14, -14}, {-6, -15}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 60, 68, 56, 68, 58, 65, 60, 61, 60, 65, 
            67}], "NumericalThresholds" -> {-0.20411685854196546`, 
           0.17470937967300418`, 0.553546965122223, 
           0.32777599990367895`, -0.03129779733717441, -0.0753631331026554, \
-0.1057283468544483, 0.5991612970829011, -0.5130624473094939, 
           0.09353579953312875, -0.24606103450059888`, -0.21226380765438077`},
           "LeafValues" -> 
          RawArray["Real32",{
            0.001959435408934951, -0.014513959176838398`, \
-0.043249741196632385`, -0.00014384082169272006`, 0.04136892408132553, 
            0.007491568103432655, -0.02022351697087288, 
            0.014327852055430412`, -0.020254872739315033`, \
-0.0011002423707395792`, 0.026581721380352974`, 0.02621733583509922, 
            0.03388097137212753}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {5, 3}, {8, -4}, {-1, 11}, {6, 10}, {
            7, -7}, {-2, 9}, {-3, -9}, {-8, -10}, {-6, -11}, {-5, 
            12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{63, 62, 66, 65, 66, 65}], 
          "NumericalThresholds" -> {-0.6295682489871978, 
           0.8752755820751191, -0.20129597187042234`, 
           
           0.13304301351308825`, -0.19782416522502896`, \
-0.044466676190495484`}, "LeafValues" -> 
          RawArray["Real32",{0.24159687757492065`, 0.018597334623336792`, 
            0.06663159281015396, -0.03009900264441967, \
-0.030120359733700752`, -0.030092578381299973`, -0.030098116025328636`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, -5}, {-4, 
            6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{59, 68, 67, 68, 68, 60}], 
          "NumericalThresholds" -> {-0.2489180415868759, 
           1.8253696560859682`, -0.33658057451248163`, -0.5285495817661284, 
           1.1375968456268313`, 0.17471000552177432`}, "LeafValues" -> 
          RawArray["Real32",{0.15516699850559235`, 0.050240445882081985`, 
            0.14327773451805115`, -0.030116872861981392`, \
-0.03010767512023449, -0.030116409063339233`, -0.030110500752925873`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {-4, 5}, {
            6, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 60, 68, 56, 68, 57, 58, 65, 67, 68, 60, 
            67, 14}], 
          "NumericalThresholds" -> {-0.20411685854196546`, 
           0.17470937967300418`, 0.7914572954177858, 
           0.32777599990367895`, -0.03129779733717441, 
           0.1694809198379517, -0.0753631331026554, -0.1057283468544483, \
-0.14442425221204755`, -0.5226300954818724, 0.09353579953312875, 
           0.03732480853796006, 0.015290492679923775`}, "LeafValues" -> 
          RawArray["Real32",{-0.001977715641260147, 0.013362589292228222`, 
            0.052822794765233994`, -0.004121363162994385, \
-0.02461882308125496, -0.00802516471594572, 0.0353538915514946, 
            0.018134113401174545`, -0.012610488571226597`, 
            0.009604712948203087, 
            0.0019713272340595722`, -0.02497835084795952, \
-0.041628602892160416`, -0.03524690493941307}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {5, 3}, {6, -4}, {-1, 12}, {7, 
            11}, {-3, 9}, {8, -8}, {-2, 
            10}, {-7, -10}, {-9, -11}, {-6, -12}, {13, -13}, {-5, -14}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 60, 68, 56, 68, 57, 58, 65, 67, 68, 60, 
            65, 67}], 
          "NumericalThresholds" -> {-0.20411685854196546`, 
           0.17470937967300418`, 0.7914572954177858, 
           0.32777599990367895`, -0.03129779733717441, 
           0.1694809198379517, -0.0753631331026554, -0.1057283468544483, \
-0.14442425221204755`, -0.5226300954818724, 
           0.09353579953312875, -0.24606103450059888`, -0.21226380765438077`},
           "LeafValues" -> 
          RawArray["Real32",{
            0.0018956377170979977`, -0.01384782511740923, \
-0.05298849195241928, 0.0036364661063998938`, 0.04002371057868004, 
            0.007473176345229149, -0.03421737626194954, -0.01868770830333233, 
            0.013393408618867397`, -0.009926849976181984, \
-0.001471415045671165, 0.025654766708612442`, 0.024970922619104385`, 
            0.032508913427591324`}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {5, 3}, {6, -4}, {-1, 12}, {7, 
            11}, {-3, 9}, {8, -8}, {-2, 
            10}, {-7, -10}, {-9, -11}, {-6, -12}, {-5, 13}, {-13, -14}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{63, 62, 66, 65, 66, 60}], 
          "NumericalThresholds" -> {-0.6295690238475798, 
           0.8752755820751191, -0.20129597187042234`, \
-1.0000000180025095`*^-35, -0.19782416522502896`, 0.15135144442319873`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.33686307072639465`, 0.017268339172005653`, 
            0.06044026464223862, -0.030095931142568588`, \
-0.03013247437775135, -0.03008922003209591, -0.030091598629951477`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, -5}, {-4, 
            6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{59, 61, 59, 68, 59, 68}], 
          "NumericalThresholds" -> {-0.49341717362403864`, 0.416365996003151, 
           0.48644581437110906`, -0.5283324718475341, -0.18283767998218534`, 
           1.703814208507538}, "LeafValues" -> 
          RawArray["Real32",{0.22744722664356232`, 0.03539304807782173, 
            0.13993297517299652`, 
            0.0586799792945385, -0.030201025307178497`, -0.03010622225701809, \
-0.03016858734190464}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, 5}, {-5, 
            6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{58, 60, 65, 68, 57, 69, 60, 65, 67, 63, 59}], 
          "NumericalThresholds" -> {-0.2403125688433647, 
           0.17470937967300418`, -0.2460602298378944, -0.03129779733717441, 
           1.0000000180025095`*^-35, -0.255875289440155, 
           0.5991611182689668, -0.10572830960154532`, -0.32435417175292963`, \
-0.24996861070394513`, -0.023566162213683125`}, "LeafValues" -> 
          RawArray["Real32",{-0.036823514848947525`, 0.01842532493174076, 
            0.007353744003921747, 0.046888187527656555`, -0.02531295455992222,
             0.0009114996064454317, 0.02005407214164734, 
            0.022233715280890465`, -0.016935134306550026`, \
-0.0024467867333441973`, -0.0004862566420342773, -0.020874157547950745`}], 
          "Children" -> 
          RawArray["Integer16",{{11, 2}, {4, 3}, {-3, 7}, {6, 
            5}, {-5, -6}, {-2, 8}, {-4, -8}, {9, 
            10}, {-7, -10}, {-9, -11}, {-1, -12}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{58, 60, 65, 68, 56, 69, 65, 60, 67, 63, 65, 
            58}], "NumericalThresholds" -> {-0.2403125688433647, 
           0.17470937967300418`, -0.2460602298378944, -0.03129779733717441, \
-0.14419662207365033`, -0.255875289440155, -0.10572830960154532`, 
           0.5991611182689668, -0.32435417175292963`, -0.24996861070394513`, \
-0.24606103450059888`, -0.330822542309761}, "LeafValues" -> 
          RawArray["Real32",{
            0.03715385124087334, -0.018412277102470398`, \
-0.007403427269309759, -0.04665646329522133, 0.026275305077433586`, 
            0.0012836236273869872`, -0.021035989746451378`, 
            0.017714548856019974`, -0.022579841315746307`, 
            0.000996052986010909, 0.0011021348182111979`, 
            0.013841438107192516`, 0.03060946799814701}], "Children" -> 
          RawArray["Integer16",{{11, 2}, {4, 3}, {-3, 8}, {6, 
            5}, {-5, -6}, {-2, 7}, {9, 
            10}, {-4, -9}, {-7, -10}, {-8, -11}, {-1, 12}, {-12, -13}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{63, 62, 66, 63, 65, 66}], 
          "NumericalThresholds" -> {-1.0076183676719663`, 
           0.8752755820751191, -0.20129597187042234`, -0.6295679509639739, 
           0.1330426335334778, -0.19782416522502896`}, "LeafValues" -> 
          RawArray["Real32",{0.34159088134765625`, 0.015889771282672882`, 
            0.05511477217078209, -0.030195405706763268`, \
-0.03009299747645855, -0.030111467465758324`, -0.03008699230849743}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {-4, 5}, {
            6, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{56, 68, 68, 67, 59, 61}], 
          "NumericalThresholds" -> {-0.40946693718433375`, 
           1.86605179309845, -0.5298320353031157, 
           0.6473582983016969, -0.2489180415868759, 0.238919897004962}, 
          "LeafValues" -> 
          RawArray["Real32",{0.24581946432590485`, 0.0590568445622921, 
            0.12748131155967712`, -0.03024447336792946, 
            0.058665771037340164`, -0.030104774981737137`, \
-0.030120722949504852`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, -5}, {-4, 
            6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 55, 55, 69, 56, 66, 55, 67, 57, 57, 60, 
            65, 63, 67, 14}], 
          "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.036776391789317124`, -0.23192767053842542`, 
           0.32777599990367895`, -0.17361307144165036`, -0.7423808276653289, \
-0.11119628697633742`, 
           0.6533616483211518, -0.4988738149404525, -0.009310914669185875, \
-0.10572843626141547`, -0.24996777623891828`, 0.03732480853796006, 
           0.015290492679923775`}, "LeafValues" -> 
          RawArray["Real32",{-0.0014428701251745224`, 
            0.017966939136385918`, -0.013371656648814678`, \
-0.002891994547098875, 
            0.021222857758402824`, -0.02226988784968853, \
-0.029104528948664665`, 
            0.05109408497810364, -0.009725634939968586, -0.005420029163360596,
             0.04166904836893082, 
            0.012814079411327839`, -0.0037842218298465014`, 
            0.015662260353565216`, -0.039707764983177185`, \
-0.03314712271094322}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {4, 3}, {6, 9}, {7, 8}, {-1, 14}, {
            11, -7}, {-2, -8}, {-5, -9}, {10, -10}, {13, -11}, {-3, 
            12}, {-12, -13}, {-4, -14}, {15, -15}, {-6, -16}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 55, 55, 69, 56, 66, 58, 67, 60, 55, 65, 
            58, 69, 62}], 
          "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.036776391789317124`, -0.23192767053842542`, 
           0.32777599990367895`, -0.17361307144165036`, \
-0.24031095951795575`, -0.11119628697633742`, 
           0.09353595599532129, -0.03677611239254474, -0.10572843626141547`, \
-0.23054439574480054`, -0.24787032604217527`, -0.4022012501955032}, 
          "LeafValues" -> 
          RawArray["Real32",{
            0.0015407977625727654`, -0.01681879535317421, \
-0.007563289254903793, -0.02236161381006241, -0.021498972550034523`, 
            0.03744407743215561, 0.02863025665283203, -0.04984027519822121, 
            0.010603882372379303`, -0.02751227840781212, \
-0.005411798134446144, -0.005146855488419533, 0.012994436547160149`, 
            0.00996206421405077, 0.026173213496804237`}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {4, 3}, {6, 9}, {7, 8}, {-1, 14}, {
            11, -7}, {-2, -8}, {-5, -9}, {10, -10}, {-4, 12}, {-3, 
            13}, {-11, -13}, {-12, -14}, {-6, -15}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 66, 65, 63, 62, 66, 65, 60}], 
          "NumericalThresholds" -> {-1.0076183676719663`, \
-0.19741514325141904`, -0.10572828352451323`, -0.6295682489871978, 
           0.8752754628658296, -0.20129597187042234`, 
           0.13304200768470767`, -0.3090826272964477}, "LeafValues" -> 
          RawArray["Real32",{0.2377232313156128, 
            0.10297323018312454`, -0.03021087497472763, \
-0.030120136216282845`, -0.030080970376729965`, -0.03011222928762436, \
-0.030097894370555878`, -0.030103474855422974`, -0.030084947124123573`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, 6}, {-3, 5}, {
            7, -6}, {-4, -7}, {8, -8}, {-5, -9}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{56, 68, 68, 67, 59, 61}], 
          "NumericalThresholds" -> {-0.4094672948122024, 
           1.86605179309845, -0.5301915705204009, 
           0.6953771114349366, -0.2489180415868759, 0.416365459561348}, 
          "LeafValues" -> 
          RawArray["Real32",{0.23904451727867126`, 0.06278776377439499, 
            0.10691287368535995`, -0.030237941071391106`, 
            0.06096559017896652, -0.030102087184786797`, \
-0.030119307339191437`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, -5}, {-4, 
            6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{58, 60, 68, 68, 60, 57, 69, 65, 67, 68, 59}], 
          "NumericalThresholds" -> {-0.2403125688433647, 0.17470937967300418`,
            0.6306600868701936, -0.03129779733717441, 0.5991612970829011, 
           1.0000000180025095`*^-35, -0.255875289440155, \
-0.10572830960154532`, -0.32435417175292963`, -0.5207232534885405, \
-0.023566162213683125`}, "LeafValues" -> 
          RawArray["Real32",{-0.03480532765388489, 0.01657790318131447, 
            0.040239717811346054`, 
            0.000981100951321423, -0.024103160947561264`, 
            0.015594047494232655`, 0.001280538272112608, 
            0.01823095977306366, -0.009426414966583252, \
-0.0024124442134052515`, 0.002560615073889494, -0.01897526904940605}], 
          "Children" -> 
          RawArray["Integer16",{{11, 2}, {4, 3}, {5, -4}, {7, 
            6}, {-3, -6}, {-5, -7}, {-2, 8}, {9, 
            10}, {-8, -10}, {-9, -11}, {-1, -12}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{58, 60, 68, 68, 56, 60, 69, 65, 67, 63, 65, 
            58}], "NumericalThresholds" -> {-0.2403125688433647, 
           0.17470937967300418`, 
           0.6306600868701936, -0.03129779733717441, -0.14419662207365033`, 
           0.5991612970829011, -0.255875289440155, -0.1057283468544483, \
-0.32435417175292963`, -0.24996861070394513`, -0.24606103450059888`, \
-0.330822542309761}, "LeafValues" -> 
          RawArray["Real32",{
            0.035187434405088425`, -0.016584502533078194`, \
-0.039970237761735916`, -0.0013449590187519789`, 0.025255585089325905`, 
            0.0005786871770396829, -0.01594305969774723, -0.02231886237859726,
             0.017047757282853127`, 0.00241673132404685, 
            0.0007572423201054335, 0.012009718455374241`, 
            0.02842988632619381}], "Children" -> 
          RawArray["Integer16",{{11, 2}, {4, 3}, {6, -4}, {7, 
            5}, {-5, -6}, {-3, -7}, {-2, 8}, {9, 
            10}, {-8, -10}, {-9, -11}, {-1, 12}, {-12, -13}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 66, 69, 63, 62, 65, 66, 60}], 
          "NumericalThresholds" -> {-1.0076183676719663`, \
-0.19741514325141904`, -0.2455915659666061, -0.6295682489871978, 
           0.8752754628658296, 
           0.13304200768470767`, -0.20129597187042234`, -0.3090826272964477}, 
          "LeafValues" -> 
          RawArray["Real32",{0.18296340107917786`, 
            0.09716308861970901, -0.030204368755221367`, \
-0.030120208859443665`, -0.030077874660491943`, -0.030108993873000145`, \
-0.03010035678744316, -0.0301022008061409, -0.030082400888204575`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, 7}, {-3, 5}, {6, -6}, {
            8, -7}, {-4, -8}, {-5, -9}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{65, 61, 68, 67, 59, 68}], 
          "NumericalThresholds" -> {-0.8721500933170317, 0.416365996003151, 
           2.2128731012344365`, -0.3370178192853927, -0.2489180415868759, 
           1.299266815185547}, "LeafValues" -> 
          RawArray["Real32",{0.22186493873596191`, 0.06615818291902542, 
            0.10061031579971313`, 
            0.05841148644685745, -0.030277123674750328`, \
-0.030101219192147255`, -0.030152229592204094`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, 5}, {-5, 
            6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 55, 55, 69, 56, 66, 58, 68, 57, 63, 60, 
            59, 67, 14}], 
          "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.036776391789317124`, -0.19106724858283994`, 
           0.32777599990367895`, -0.17361307144165036`, \
-0.24031127244234082`, -0.12043159082531928`, -0.4988738149404525, \
-0.24996779114007947`, -0.009310914669185875, 0.3675514310598374, 
           0.03732480853796006, 0.015290492679923775`}, "LeafValues" -> 
          RawArray["Real32",{-0.0010663805296644568`, 
            0.01149931363761425, -0.012923787347972393`, \
-0.0037028207443654537`, 
            0.0023407500702887774`, -0.02006779983639717, \
-0.02778398059308529, 0.039683856070041656`, -0.00664158258587122, 
            0.03164607286453247, 0.016440555453300476`, 
            0.0043251607567071915`, -0.012419885024428368`, \
-0.03811798244714737, -0.03126804158091545}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {4, 3}, {6, 8}, {7, -5}, {-1, 13}, {
            11, -7}, {-2, -8}, {9, -9}, {10, -10}, {-4, -11}, {-3, 
            12}, {-12, -13}, {14, -14}, {-6, -15}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 55, 55, 69, 56, 66, 58, 57, 57, 67, 61, 
            59, 60, 62}], 
          "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.036776391789317124`, -0.23192767053842542`, 
           0.32777599990367895`, -0.17361307144165036`, -0.24031095951795575`,
            0.6533616483211518, -0.4988738149404525, -0.11119628697633742`, \
-0.51306214928627, 
           0.3675514608621598, -0.009310914669185875, -0.4022012501955032}, 
          "LeafValues" -> 
          RawArray["Real32",{0.001155275385826826, -0.014552323147654533`, 
            0.012783552519977093`, 
            0.005775173660367727, -0.019225498661398888`, 0.03561689704656601,
             0.027336880564689636`, -0.04507460817694664, 
            0.0063584647141397, -0.04137242212891579, 
            0.010217766277492046`, -0.013334742747247219`, 
            0.013679244555532932`, -0.0038865439128130674`, 
            0.02412126399576664}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {4, 3}, {6, 8}, {7, 10}, {-1, 14}, {
            12, -7}, {-2, -8}, {9, -9}, {11, -10}, {-5, -11}, {-4, -12}, {
            13, -13}, {-3, -14}, {-6, -15}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 62, 57, 63, 63, 66, 61, 65}], 
          "NumericalThresholds" -> {-1.0076183676719663`, 
           0.8752755820751191, -0.4988755136728286, -0.24996719509363172`, \
-0.6295682489871978, -0.19741514325141904`, -0.513061612844467, 
           0.13304200768470767`}, "LeafValues" -> 
          RawArray["Real32",{0.14866897463798523`, -0.03009803779423237, 
            0.05284152552485466, -0.03020833618938923, 
            0.08542397618293762, -0.03009781613945961, \
-0.030079148709774017`, -0.030119866132736206`, -0.030096903443336487`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, -5}, {-4, 6}, {
            7, 8}, {-6, -8}, {-7, -9}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{56, 66, 55, 67, 59, 68, 68}], 
          "NumericalThresholds" -> {-0.48675483465194697`, \
-0.10328377783298491`, -0.03677671588957309, -0.33738800883293146`, \
-0.2489180415868759, 1.1860395669937136`, -0.5289332270622252}, "LeafValues" -> 
          RawArray["Real32",{0.2065744251012802, 
            0.07100151479244232, -0.030154000967741013`, 
            0.17987611889839172`, -0.030247218906879425`, \
-0.030126286670565605`, -0.030156580731272697`, -0.030098501592874527`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, 5}, {-5, 6}, {
            7, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{58, 55, 69, 68, 55, 60, 65, 57, 55, 59, 66, 
            68}], "NumericalThresholds" -> {-0.2403125688433647, \
-0.1423426494002342, -0.1821493953466415, -0.03129779733717441, \
-0.036776391789317124`, -0.00930985528975725, -0.24605972319841382`, 
           0.20304237306118014`, -0.03677598573267459, \
-0.023566162213683125`, -0.18742114305496213`, -0.5230205059051513}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.03302786871790886, 
            0.019411249086260796`, -0.010787821374833584`, 
            0.0008256434230133891, -0.025045817717909813`, 
            0.011576598510146141`, 0.02280804142355919, 
            0.038704801350831985`, -0.004537021741271019, \
-0.007385836448520422, -0.017198670655488968`, -0.011626919731497765`, 
            0.00598166836425662}], "Children" -> 
          RawArray["Integer16",{{10, 2}, {3, 4}, {7, -4}, {5, 8}, {11, 6}, {9,
             -7}, {-2, -8}, {-5, -9}, {-6, -10}, {-1, -11}, {
            12, -12}, {-3, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{58, 60, 65, 68, 56, 69, 65, 57, 60, 61, 63, 
            65, 58, 59}], 
          "NumericalThresholds" -> {-0.2403125688433647, 
           0.17470937967300418`, -0.2460602298378944, -0.03129779733717441, \
-0.14419662207365033`, -0.2459611669182777, -0.10572830960154532`, \
-0.4988738149404525, 
           0.5991611182689668, -0.5130622684955596, -0.24996729940176007`, \
-0.24606103450059888`, -0.330822542309761, 0.36755059659481054`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.033489178866147995`, 
            0.006041595712304115, -0.004475991241633892, -0.03799326345324516,
             0.024172648787498474`, -0.000021953581381239928`, \
-0.0017572692595422268`, 
            0.002923188265413046, -0.02369186095893383, \
-0.017993630841374397`, -0.011082910932600498`, 0.01667092554271221, 
            0.01026627141982317, 0.02646142803132534, -0.01719731092453003}], 
          "Children" -> 
          RawArray["Integer16",{{12, 2}, {4, 3}, {-3, 9}, {6, 5}, {-5, -6}, {
            8, 7}, {14, 11}, {10, -9}, {-4, -10}, {-2, -11}, {-8, -12}, {-1, 
            13}, {-13, -14}, {-7, -15}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 66, 56, 63, 62, 65, 66, 60}], 
          "NumericalThresholds" -> {-1.0076183676719663`, \
-0.19741514325141904`, 0.15596465021371844`, -0.6295682489871978, 
           0.8752754628658296, 
           0.13304253667593005`, -0.20129597187042234`, -0.3090826272964477}, 
          "LeafValues" -> 
          RawArray["Real32",{0.12474653869867325`, 
            0.09098906815052032, -0.03019297868013382, \
-0.030119813978672028`, -0.030072232708334923`, -0.030110357329249382`, \
-0.030096903443336487`, -0.03010236658155918, -0.030078433454036713`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, 7}, {-3, 5}, {6, -6}, {
            8, -7}, {-4, -8}, {-5, -9}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{65, 61, 59, 67, 59, 68}], 
          "NumericalThresholds" -> {-0.8721500933170317, 0.416365996003151, 
           0.4968919754028321, -0.3370178192853927, -0.2489180415868759, 
           1.86605179309845}, "LeafValues" -> 
          RawArray["Real32",{0.17216521501541138`, 0.05467844754457474, 
            0.08501679450273514, 
            0.060198213905096054`, -0.030315326526761055`, \
-0.030095523223280907`, -0.030216744169592857`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, 5}, {-5, 
            6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 55, 55, 56, 69, 66, 58, 57, 57, 57, 60, 
            59, 31}], 
          "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.036776391789317124`, 
           0.32777599990367895`, -0.19106724858283994`, \
-0.17361307144165036`, -0.24031127244234082`, 
           0.6533616483211518, -0.4988738149404525, -0.49887450039386744`, \
-0.009310914669185875, 0.3675514310598374, 0.07297900691628458}, "LeafValues" -> 
          RawArray["Real32",{-0.0007765045738779008, 
            0.009763718582689762, -0.012168209068477154`, 
            0.012657944113016129`, -0.03308482468128204, 
            0.0019547699484974146`, -0.02623586542904377, 
            0.03565144166350365, -0.0059080482460558414`, 
            0.03608977049589157, -0.005272008944302797, 
            0.004224245436489582, -0.01174655370414257, \
-0.020827587693929672`}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {5, 3}, {6, 8}, {-1, 13}, {7, -6}, {
            11, -7}, {-2, -8}, {9, -9}, {10, -10}, {-4, -11}, {-3, 
            12}, {-12, -13}, {-5, -14}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 55, 55, 69, 56, 66, 58, 57, 57, 67, 61, 
            59, 62, 67, 66}], 
          "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.036776391789317124`, -0.23192767053842542`, 
           0.32777599990367895`, -0.17361307144165036`, -0.24031095951795575`,
            0.6533616483211518, -0.4988738149404525, -0.11119628697633742`, \
-0.51306214928627, 0.3675514608621598, 
           0.8752742707729341, -0.24549285322427747`, -0.16564054787158963`}, 
          "LeafValues" -> 
          RawArray["Real32",{
            0.0008802263182587922, -0.012483308091759682`, \
-0.00882929377257824, 0.005861630197614431, -0.017849311232566833`, 
            0.018313366919755936`, 
            0.025798935443162918`, -0.04081543907523155, 
            0.006783579010516405, -0.03862518444657326, 
            0.010327079333364964`, -0.012321812100708485`, 
            0.012951046228408813`, 0.0050756074488162994`, 
            0.036291882395744324`, 0.025170203298330307`}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {4, 3}, {6, 8}, {7, 10}, {-1, 14}, {
            12, -7}, {-2, -8}, {9, -9}, {11, -10}, {-5, -11}, {-4, -12}, {
            13, -13}, {-3, -14}, {-6, 15}, {-15, -16}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 66, 65, 63, 62, 58, 65, 60}], 
          "NumericalThresholds" -> {-1.0076183676719663`, \
-0.19741514325141904`, -0.10572828352451323`, -0.6295682489871978, 
           0.8752754628658296, -0.23054396361112592`, 
           0.13304253667593005`, -0.3090826272964477}, "LeafValues" -> 
          RawArray["Real32",{0.1080043762922287, 
            0.09013677388429642, -0.030187183991074562`, \
-0.030101899057626724`, -0.030069297179579735`, -0.030106863006949425`, \
-0.030121581628918648`, -0.030093856155872345`, -0.030076049268245697`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, 6}, {-3, 5}, {
            7, -6}, {-4, -7}, {8, -8}, {-5, -9}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{59, 68, 66, 66, 56, 65, 55}], 
          "NumericalThresholds" -> {-0.49341717362403864`, 
           1.86605179309845, -0.20005169510841367`, -0.2021006867289543, \
-0.4094672948122024, -0.8721500933170317, -0.03677574731409549}, "LeafValues" -> 
          RawArray["Real32",{0.16016605496406555`, -0.0301356203854084, 
            0.08320499956607819, -0.030436906963586807`, 
            0.15146943926811218`, -0.030148623511195183`, \
-0.030097542330622673`, -0.030126530677080154`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, -5}, {-4, 
            6}, {-6, 7}, {-7, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{58, 55, 69, 68, 55, 60, 58, 65, 59, 67, 59}], 
          "NumericalThresholds" -> {-0.2403125688433647, -0.1423426494002342, \
-0.1821493953466415, 0.281765103340149, -0.036776391789317124`, 
           0.09353579953312875, -0.1782741621136665, -0.24605972319841382`, \
-0.023566162213683125`, -0.3343645334243774, 0.36755110323429113`}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.03143901750445366, 0.017188580706715584`, 
            0.007754349149763584, 
            0.0004388685047160834, -0.018431801348924637`, 
            0.010185951367020607`, 
            0.028401147574186325`, -0.018220549449324608`, 
            0.035104598850011826`, -0.015557457692921162`, \
-0.00004278896449250169, -0.01519466657191515}], "Children" -> 
          RawArray["Integer16",{{9, 2}, {3, 4}, {8, -4}, {5, -5}, {10, 6}, {
            7, -7}, {-6, -8}, {-2, -9}, {-1, -10}, {-3, 11}, {-11, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{58, 60, 68, 68, 56, 60, 69, 65, 59, 66, 68, 
            65, 58, 59}], 
          "NumericalThresholds" -> {-0.2403125688433647, 0.17470937967300418`,
            0.6306600868701936, -0.03129779733717441, -0.14419662207365033`, 
           0.5991612970829011, -0.2459611669182777, -0.10572830960154532`, 
           0.36755086481571203`, -0.18715900182723996`, -0.5207232534885405, \
-0.24606103450059888`, -0.330822542309761, 0.36755059659481054`}, 
          "LeafValues" -> 
          RawArray["Real32",{
            0.031995806843042374`, -0.024761684238910675`, \
-0.03340241312980652, 0.0006656207260675728, 
            0.02319595403969288, -0.0002194256812799722, \
-0.012393857352435589`, -0.0015237032203003764`, 0.013376201502978802`, 
            0.0022523938678205013`, -0.00604703975841403, 
            0.0012434725649654865`, 0.00862218253314495, 
            0.02460884489119053, -0.016668738797307014`}], "Children" -> 
          RawArray["Integer16",{{12, 2}, {4, 3}, {6, -4}, {7, 
            5}, {-5, -6}, {-3, -7}, {9, 8}, {14, 11}, {
            10, -10}, {-2, -11}, {-9, -12}, {-1, 13}, {-13, -14}, {-8, -15}}],
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 62, 57, 56, 63, 66, 65, 65}], 
          "NumericalThresholds" -> {-1.0076183676719663`, 
           0.8752755820751191, -0.4988755136728286, 
           0.09390447661280633, -0.6295681297779082, -0.19741514325141904`, \
-0.10572830960154532`, 0.13304158300161364`}, "LeafValues" -> 
          RawArray["Real32",{0.09472537785768509, -0.030091218650341034`, 
            0.05050275847315788, -0.030184432864189148`, 
            0.08931364864110947, -0.0301243606954813, -0.030071886256337166`, \
-0.030098339542746544`, -0.030085278674960136`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, -5}, {-4, 6}, {
            7, 8}, {-6, -8}, {-7, -9}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{56, 66, 12, 68, 59, 68, 62}], 
          "NumericalThresholds" -> {-0.48675483465194697`, \
-0.10328377783298491`, 
           0.02351276203989983, -0.5301915705204009, -0.2489180415868759, 
           1.1860395669937136`, -0.4481614083051681}, "LeafValues" -> 
          RawArray["Real32",{0.1540284901857376, 
            0.061911050230264664`, -0.030194075778126717`, 
            0.1567123532295227, -0.03026522882282734, -0.03012283518910408, \
-0.030161865055561066`, -0.030092919245362282`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, 5}, {-5, 6}, {
            7, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{58, 55, 69, 68, 55, 60, 58, 68, 59, 67, 59}], 
          "NumericalThresholds" -> {-0.2403125688433647, -0.1423426494002342, \
-0.1821493953466415, 0.281765103340149, -0.036776391789317124`, 
           0.09353579953312875, -0.1782741621136665, -0.3154060691595077, \
-0.023566162213683125`, -0.3343645334243774, 0.36755110323429113`}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.030695507302880287`, 0.03682886064052582, 
            0.007489505223929882, 
            0.0001714374520815909, -0.017703985795378685`, 
            0.009802406653761864, 0.02723526582121849, -0.01771342009305954, 
            0.019636183977127075`, -0.014720654115080833`, \
-0.0001426051021553576, -0.014831319451332092`}], "Children" -> 
          RawArray["Integer16",{{9, 2}, {3, 4}, {8, -4}, {5, -5}, {10, 6}, {
            7, -7}, {-6, -8}, {-2, -9}, {-1, -10}, {-3, 11}, {-11, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 58, 56, 63, 68, 56, 69, 58, 62}], 
          "NumericalThresholds" -> {-0.20411685854196546`, 
           0.18760044127702716`, 0.32777599990367895`, 0.13067141920328143`, 
           0.6306600868701936, 
           0.6819218695163728, -0.0964996963739395, -0.0753631331026554, \
-0.4022012501955032}, "LeafValues" -> 
          RawArray["Real32",{0.0005847806460224092, 
            0.0008623932371847332, -0.03344759717583656, 
            0.03269287943840027, -0.005288961809128523, 
            0.012646444141864777`, -0.02125811018049717, 
            0.013027871027588844`, -0.019399961456656456`, 
            0.020349280908703804`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {5, 4}, {-1, 9}, {-3, -5}, {6, -6}, {
            7, -7}, {8, -8}, {-2, -9}, {-4, -10}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 60, 66, 69, 63, 63, 62, 65}], 
          "NumericalThresholds" -> {-0.9100271761417388, 
           0.6037080585956575, -0.19741514325141904`, -0.2455915659666061, \
-1.0076183676719663`, -0.6295680701732634, 
           0.8752755224704744, -0.10572808608412741`}, "LeafValues" -> 
          RawArray["Real32",{0.11639567464590073`, 0.10257137566804886`, 
            0.07379014790058136, -0.031131528317928314`, \
-0.030124351382255554`, -0.030161064118146896`, -0.030072227120399475`, \
-0.03011534921824932, -0.030104463919997215`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, 8}, {-4, 
            6}, {-6, 7}, {-7, -8}, {-5, -9}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{65, 61, 67, 60, 59, 68}], 
          "NumericalThresholds" -> {-0.8721500933170317, 
           0.416365996003151, -0.33738800883293146`, 
           0.5991618037223817, -0.2489180415868759, 1.86605179309845}, 
          "LeafValues" -> 
          RawArray["Real32",{0.1383579671382904, 0.06218525022268295, 
            0.07260974496603012, -0.03035729005932808, 
            0.059440866112709045`, -0.030091378837823868`, \
-0.030230341479182243`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, -5}, {-4, 
            6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{58, 55, 69, 68, 55, 60, 35, 65, 55, 59, 66, 
            68}], "NumericalThresholds" -> {-0.2403125688433647, \
-0.1423426494002342, -0.1821493953466415, -0.03129779733717441, \
-0.036776391789317124`, -0.00930985528975725, 
           0.03743703663349152, -0.24605990201234815`, -0.03677598573267459, \
-0.023566162213683125`, -0.18742114305496213`, -0.5230205059051513}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.029929524287581444`, 
            0.014911883510649204`, -0.010056698694825172`, 
            3.812581780948676*^-6, -0.02380121685564518, 0.009891231544315815,
             0.01972402259707451, -0.003206996712833643, 
            0.03168995678424835, -0.0073120370507240295`, \
-0.013942988589406013`, -0.011024250648915768`, 0.006066844332963228}], 
          "Children" -> 
          RawArray["Integer16",{{10, 2}, {3, 4}, {8, -4}, {5, 7}, {11, 6}, {
            9, -7}, {-5, -8}, {-2, -9}, {-6, -10}, {-1, -11}, {
            12, -12}, {-3, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 58, 56, 63, 68, 56, 69, 58, 67, 66}], 
          "NumericalThresholds" -> {-0.20411685854196546`, 
           0.18760044127702716`, 0.32777599990367895`, 0.13067141920328143`, 
           0.6306600868701936, 
           0.6819218695163728, -0.0964996963739395, -0.0753631331026554, \
-0.24549285322427747`, -0.16564054787158963`}, "LeafValues" -> 
          RawArray["Real32",{0.00040628365240991116`, 
            0.0008379198843613267, -0.03215820714831352, 
            0.015473755076527596`, -0.004858534317463636, 
            0.012204818427562714`, -0.019999366253614426`, 
            0.012656963430345058`, -0.018402311950922012`, 
            0.034348271787166595`, 0.022642245516180992`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {5, 4}, {-1, 9}, {-3, -5}, {6, -6}, {
            7, -7}, {8, -8}, {-2, -9}, {-4, 10}, {-10, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 66, 67, 63, 62, 66, 65, 57}], 
          "NumericalThresholds" -> {-1.0076183676719663`, \
-0.19741514325141904`, -0.32520350813865656`, -0.6295682489871978, 
           0.8752755224704744, -0.20129597187042234`, 
           0.1330416649580002, -0.4988755136728286}, "LeafValues" -> 
          RawArray["Real32",{0.08260661363601685, 
            0.08009641617536545, -0.030178463086485863`, \
-0.03012830764055252, -0.0300749484449625, -0.030111799016594887`, \
-0.030109429731965065`, -0.03008502721786499, -0.030068816617131233`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, 6}, {-3, 5}, {
            7, -6}, {-4, -7}, {8, -8}, {-5, -9}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{59, 61, 68, 60, 56, 68}], 
          "NumericalThresholds" -> {-0.49341717362403864`, 
           0.416365996003151, -0.5301915705204009, 
           0.6014347672462464, -0.48675483465194697`, 1.86605179309845}, 
          "LeafValues" -> 
          RawArray["Real32",{0.12586228549480438`, 0.06290657818317413, 
            0.07143204659223557, -0.030480682849884033`, 
            0.06102911755442619, -0.030099008232355118`, \
-0.03023539111018181}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, -5}, {-4, 
            6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 55, 55, 56, 66, 69, 55, 63, 57, 57, 57, 
            55, 62, 57, 67, 14}], 
          "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.036776391789317124`, 
           0.32777599990367895`, -0.17361307144165036`, \
-0.23192767053842542`, -0.7423808276653289, 0.15785063058137896`, 
           0.6533616483211518, -0.4988738149404525, -0.49887450039386744`, \
-0.03677715733647346, 0.8752750456333162, -0.49887524545192713`, 
           0.03732480853796006, 0.015290492679923775`}, "LeafValues" -> 
          RawArray["Real32",{-0.00007069327693898231, 0.009180986322462559, 
            0.011130686849355698`, 
            0.011251247487962246`, -0.013979829847812653`, \
-0.024502232670783997`, 0.01646733656525612, 
            0.03629486635327339, -0.009504904970526695, -0.005929952021688223,
             0.03183737024664879, -0.005864080041646957, \
-0.0014067658921703696`, -0.01856730692088604, -0.0020005181431770325`, \
-0.03461022675037384, -0.026564428582787514`}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {6, 3}, {5, 9}, {-1, 15}, {12, -6}, {
            7, 8}, {-2, -8}, {-7, -9}, {10, -10}, {11, -11}, {-4, -12}, {14, 
            13}, {-13, -14}, {-3, -15}, {16, -16}, {-5, -17}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 58, 56, 63, 69, 68, 58, 65, 57, 68, 69, 
            31}], "NumericalThresholds" -> {-0.20411685854196546`, 
           0.18760044127702716`, 0.32777599990367895`, 
           0.13067141920328143`, -0.2459611669182777, 
           0.6306600868701936, -0.23054557293653485`, -0.10572830960154532`, \
-0.4988738149404525, -0.30336581170558924`, -0.2500579953193664, 
           0.07297900691628458}, "LeafValues" -> 
          RawArray["Real32",{0.0002650234382599592, 
            0.006729101296514273, -0.030929164960980415`, 
            0.028997277840971947`, -0.004487203899770975, \
-0.014606082811951637`, 0.01534958928823471, -0.00551401125267148, 
            0.008363021537661552, -0.024028567597270012`, \
-0.004782524891197681, -0.009498748928308487, 0.01645881123840809}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {5, 4}, {-1, 12}, {-3, -5}, {9, 6}, {
            7, -7}, {-6, 8}, {-8, -9}, {11, 
            10}, {-10, -11}, {-2, -12}, {-4, -13}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 60, 66, 65, 63, 63, 62, 69}], 
          "NumericalThresholds" -> {-0.9100271761417388, 
           0.6037085056304933, -0.19741514325141904`, -0.10572828352451323`, \
-1.0076183676719663`, -0.6295680701732634, 
           0.8752755224704744, -0.24320799112319944`}, "LeafValues" -> 
          RawArray["Real32",{0.10154464840888977`, 0.0922100618481636, 
            0.0695335865020752, -0.031186049804091454`, -0.03011774644255638, \
-0.030151287093758583`, -0.030067821964621544`, -0.030108464881777763`, \
-0.03010164201259613}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, 8}, {-4, 
            6}, {-6, 7}, {-7, -8}, {-5, -9}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{56, 68, 67, 67, 59, 61}], 
          "NumericalThresholds" -> {-0.48675483465194697`, 
           1.86605179309845, -0.3377746790647506, 
           1.0099873542785647`, -0.2489180415868759, -0.04220612905919551}, 
          "LeafValues" -> 
          RawArray["Real32",{0.12077612429857254`, 0.06884095072746277, 
            0.074779212474823, -0.030301420018076897`, 
            0.07067640125751495, -0.03008858859539032, \
-0.030133457854390144`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, -5}, {-4, 
            6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{58, 55, 69, 68, 55, 60, 35, 56, 59, 55, 66, 
            68}], "NumericalThresholds" -> {-0.2403125688433647, \
-0.1423426494002342, -0.1821493953466415, -0.03129779733717441, \
-0.036776391789317124`, -0.00930985528975725, 0.03743703663349152, 
           0.6819213330745698, -0.023566162213683125`, -0.03677598573267459, \
-0.18742114305496213`, -0.5230205059051513}, "LeafValues" -> 
          RawArray["Real32",{-0.028560128062963486`, 
            0.030968599021434784`, -0.00964034628123045, \
-0.00037483801133930683`, -0.023218806833028793`, 0.009395970962941647, 
            0.018290692940354347`, -0.0027743522077798843`, 
            0.015363706275820732`, -0.012550091370940208`, \
-0.007039806805551052, -0.010634142905473709`, 0.0059255873784422874`}], 
          "Children" -> 
          RawArray["Integer16",{{9, 2}, {3, 4}, {8, -4}, {5, 7}, {11, 6}, {
            10, -7}, {-5, -8}, {-2, -9}, {-1, -10}, {-6, -11}, {
            12, -12}, {-3, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 58, 56, 63, 68, 56, 61, 60, 69, 62}], 
          "NumericalThresholds" -> {-0.20411685854196546`, 
           0.18760044127702716`, 0.32777599990367895`, 0.13067141920328143`, 
           0.6306600868701936, 
           0.6819218695163728, -0.5130624473094939, -0.009310305584222077, \
-0.15243975073099134`, -0.4022012501955032}, "LeafValues" -> 
          RawArray["Real32",{0.0002935693191830069, 
            0.01577937789261341, -0.02944996953010559, 
            0.030791018158197403`, -0.00405919412150979, 
            0.011468317359685898`, -0.018122965469956398`, \
-0.006378399208188057, -0.0038529047742486, 0.011048685759305954`, 
            0.017700552940368652`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {5, 4}, {-1, 10}, {-3, -5}, {6, -6}, {
            7, -7}, {8, 9}, {-2, -9}, {-8, -10}, {-4, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 62, 57, 62, 63, 66, 65, 60}], 
          "NumericalThresholds" -> {-1.0076183676719663`, 
           0.8752755820751191, -0.4988755136728286, 
           0.7515833079814912, -0.6295682489871978, -0.19741514325141904`, \
-0.10572828352451323`, 0.5991616547107698}, "LeafValues" -> 
          RawArray["Real32",{0.07352041453123093, -0.030088163912296295`, 
            0.0481627993285656, -0.030183443799614906`, 
            0.09592289477586746, -0.03013685718178749, \
-0.030066072940826416`, -0.030098315328359604`, -0.030081067234277725`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, -5}, {-4, 6}, {
            7, 8}, {-6, -8}, {-7, -9}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{65, 68, 66, 66, 59, 61, 59}], 
          "NumericalThresholds" -> {-0.8721500933170317, 
           1.86605179309845, -0.20005169510841367`, -0.20191619545221326`, \
-0.2489180415868759, 0.416365996003151, 0.4968919754028321}, "LeafValues" -> 
          RawArray["Real32",{0.11543732136487961`, -0.030137594789266586`, 
            0.06453806161880493, -0.03045695647597313, 
            0.14901718497276306`, -0.030087139457464218`, \
-0.030153566971421242`, -0.03014293685555458}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, -5}, {-4, 6}, {
            7, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{58, 55, 69, 67, 57, 56, 65, 61, 66, 68, 67}], 
          "NumericalThresholds" -> {-0.2403125688433647, -0.1423426494002342, \
-0.1821493953466415, 0.27385891973972326`, 0.20304237306118014`, 
           0.155965693295002, -0.10572855547070502`, -0.513062685728073, \
-0.18501072376966474`, -0.3154060691595077, -0.011519353371113537`}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.009178432635962963, 
            0.031813547015190125`, -0.007978173904120922, \
-0.0004993891925550997, -0.020880986005067825`, -0.0035769478417932987`, \
-0.02036694996058941, 0.02478807605803013, 
            0.0036605054046958685`, -0.021211855113506317`, 
            0.016173284500837326`, -0.029846012592315674`}], "Children" -> 
          RawArray["Integer16",{{9, 2}, {3, 4}, {10, -4}, {5, -5}, {6, 7}, {
            8, -7}, {-6, -8}, {-3, -9}, {-1, 11}, {-2, -11}, {-10, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 58, 56, 63, 69, 59, 60, 65, 67, 68, 57, 
            68, 69, 62}], 
          "NumericalThresholds" -> {-0.20411685854196546`, 
           0.18760044127702716`, 0.32777599990367895`, 
           0.13067141920328143`, -0.2459611669182777, 0.36755053699016577`, 
           0.12799399346113208`, -0.10572833195328711`, \
-0.10382879897952078`, -0.5203730165958403, -0.4988738149404525, \
-0.30336581170558924`, -0.2500579953193664, -0.4022012501955032}, 
          "LeafValues" -> 
          RawArray["Real32",{0.00018760371312964708`, 
            0.006448998115956783, -0.028367260470986366`, 
            0.03016160987317562, -0.0036084854509681463`, 
            0.007471182849258184, -0.017677508294582367`, \
-0.006098967511206865, 0.010855848900973797`, 
            0.026508456096053123`, -0.005107061006128788, \
-0.022286787629127502`, -0.0038331463001668453`, -0.009262979961931705, 
            0.016984710469841957`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {5, 4}, {-1, 14}, {-3, -5}, {11, 6}, {
            7, 8}, {9, -8}, {-7, 10}, {-6, -10}, {-9, -11}, {13, 
            12}, {-12, -13}, {-2, -14}, {-4, -15}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 59, 66, 61, 63, 63, 62, 65}], 
          "NumericalThresholds" -> {-0.9100271761417388, 
           0.496893122792244, -0.19741514325141904`, -0.513061612844467, \
-1.0076183676719663`, -0.6295681297779082, 
           0.8752755224704744, -0.10572805628180502`}, "LeafValues" -> 
          RawArray["Real32",{0.09023553133010864, -0.030146509408950806`, 
            0.06034225970506668, -0.03126576170325279, 
            0.08971516042947769, -0.030156604945659637`, \
-0.030064428225159645`, -0.030110454186797142`, -0.030103487893939018`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {8, -5}, {-4, 
            6}, {-6, 7}, {-7, -8}, {-2, -9}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{59, 61, 67, 68, 56, 68}], 
          "NumericalThresholds" -> {-0.49341717362403864`, 
           0.416365996003151, -0.3377746790647506, 
           2.723320007324219, -0.48675483465194697`, 1.86605179309845}, 
          "LeafValues" -> 
          RawArray["Real32",{0.1040731891989708, 0.06251324713230133, 
            0.06422092020511627, -0.030527902767062187`, 
            0.0606440007686615, -0.030097534880042076`, \
-0.030326709151268005`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, -5}, {-4, 
            6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 55, 55, 58, 56, 65, 68, 61, 56, 67, 14}], 
          "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.13194816559553144`, -0.009834094438701866, 
           0.32777599990367895`, -0.24605997651815412`, \
-0.12043159082531928`, -0.5130625069141387, 0.6295614540576936, 
           0.03732480853796006, 0.015290492679923775`}, "LeafValues" -> 
          RawArray["Real32",{0.00005018007504986599, 
            0.0019058739999309182`, -0.021036675199866295`, \
-0.0070792934857308865`, 0.023676279932260513`, -0.01138659380376339, 
            0.030475808307528496`, -0.014672104269266129`, 
            0.0053078895434737206`, 
            0.012412745505571365`, -0.033111024647951126`, \
-0.024516411125659943`}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {6, 3}, {-3, 4}, {7, -5}, {-1, 
            10}, {-2, 9}, {8, -8}, {-4, -9}, {-7, -10}, {
            11, -11}, {-6, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 58, 56, 63, 68, 55, 61, 55, 59, 31, 60}], 
          "NumericalThresholds" -> {-0.20411685854196546`, 
           0.18760044127702716`, 0.32777599990367895`, 0.13067141920328143`, 
           0.582474708557129, -0.13194877654314038`, -0.5130627453327178, \
-0.036776391789317124`, 0.21132155507802966`, 
           0.07297900691628458, -0.009310305584222077}, "LeafValues" -> 
          RawArray["Real32",{
            0.00020070293976459652`, -0.0028503129724413157`, \
-0.02740068919956684, 0.027087781578302383`, -0.003343180287629366, 
            0.010582147166132927`, 0.016880763694643974`, 
            0.0012414600932970643`, -0.009054782800376415, \
-0.019606105983257294`, 0.013849493116140366`, 0.0036007496528327465`}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {5, 4}, {-1, 10}, {-3, -5}, {6, -6}, {
            9, 7}, {11, 8}, {-8, -9}, {-2, -10}, {-4, -11}, {-7, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 62, 61, 63, 66, 62, 66, 65, 60, 60, 65}], 
          "NumericalThresholds" -> {-1.0076183676719663`, 
           0.8752745091915132, -0.513061612844467, -0.6295682489871978, \
-0.1975588724017143, 
           0.8752755820751191, -0.19768368452787397`, -0.1057283468544483, \
-0.9100271761417388, 0.5991616547107698, -0.1057278625667095}, "LeafValues" -> 
          RawArray["Real32",{
            0.06621478497982025, -0.030170070007443428`, -0.03010673262178898,
             0.1614263653755188, -0.03014441207051277, \
-0.030079519376158714`, -0.030138209462165833`, -0.030067021027207375`, \
-0.030108371749520302`, -0.030062468722462654`, -0.030082406476140022`, \
-0.030062757432460785`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {4, 3}, {6, -4}, {-2, 5}, {8, 9}, {
            7, -7}, {-3, 11}, {-5, -9}, {-6, 10}, {-10, -11}, {-8, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{65, 68, 66, 66, 59, 61, 67}], 
          "NumericalThresholds" -> {-0.8721500933170317, 
           1.86605179309845, -0.20005169510841367`, -0.20180865377187726`, \
-0.2489180415868759, 0.416365996003151, -0.3370178192853927}, "LeafValues" -> 
          RawArray["Real32",{0.09999611228704453, -0.030137812718749046`, 
            0.05627873167395592, -0.030462756752967834`, 
            0.13908152282238007`, -0.03014504164457321, \
-0.030157573521137238`, -0.03008197620511055}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, -5}, {-4, 6}, {
            7, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 69, 56, 55, 56, 55, 66, 62, 58, 60, 57, 
            64, 58, 67, 31}], 
          "NumericalThresholds" -> {-0.009311007801443337, 
           0.23136051744222644`, 0.32777599990367895`, -0.1423426494002342, 
           0.6295612752437593, -0.036776391789317124`, -0.18606545031070706`, 
           0.8752745091915132, -0.0809715911746025, 
           0.09353595599532129, -0.49887423217296595`, -0.6034896075725554, \
-0.24031142145395276`, 0.03732480853796006, 0.07297900691628458}, 
          "LeafValues" -> 
          RawArray["Real32",{0.014628700911998749`, 
            0.03163886442780495, -0.01706506870687008, -0.0236568134278059, \
-0.0019554439932107925`, -0.0007852633716538548, 
            0.014221156015992165`, -0.015049328096210957`, \
-0.014841224998235703`, -0.006385018117725849, 
            0.021092161536216736`, -0.00869070179760456, 
            0.011984176002442837`, 
            0.014827759936451912`, -0.03258056193590164, \
-0.009097715839743614}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {4, -3}, {8, 14}, {5, 6}, {-2, 13}, {
            7, 10}, {12, -8}, {9, -9}, {-1, -10}, {
            11, -11}, {-7, -12}, {-5, -13}, {-6, -14}, {15, -15}, {-4, -16}}],
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 57, 57, 69, 56, 60, 61, 68, 57, 56, 
            55}], "NumericalThresholds" -> {0.33297927677631384`, 
           0.20304237306118014`, -0.1321032717823982, -0.4988738149404525, \
-0.2425230965018272, 0.8488979637622834, 
           0.09353566542267801, -0.513062685728073, -0.1951780170202255, \
-0.4988747686147689, 0.4123635143041611, -0.3887741416692733}, "LeafValues" -> 
          RawArray["Real32",{0.002777781803160906, 
            0.03115837275981903, -0.033760279417037964`, 
            0.020907126367092133`, -0.033153045922517776`, \
-0.004911373369395733, -0.007594313006848097, 
            0.0010236604139208794`, -0.0043237595818936825`, 
            0.01396083366125822, 0.019085977226495743`, 0.010452669113874435`,
             0.01564197987318039}], "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 6}, {4, -4}, {8, 
            5}, {-5, -6}, {-3, -7}, {11, -8}, {10, 9}, {-9, -10}, {-1, -11}, {
            12, -12}, {-2, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 67, 58, 66, 63, 66, 65, 62, 62, 60, 62}], 
          "NumericalThresholds" -> {-1.0076183676719663`, \
-0.32520350813865656`, -0.23054415732622144`, -0.19782416522502896`, \
-0.6295681297779082, -0.1975588724017143, -0.10572814568877219`, 
           0.8752752840518953, 0.8752748668193818, -0.9100271761417388, 
           0.875274568796158}, "LeafValues" -> 
          RawArray["Real32",{
            0.060868456959724426`, -0.030129576101899147`, \
-0.030140411108732224`, 
            0.13182005286216736`, -0.030147092416882515`, \
-0.030076226219534874`, -0.030060742050409317`, -0.030110621824860573`, \
-0.030092541128396988`, -0.030081789940595627`, -0.030062273144721985`, \
-0.030065063387155533`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {6, -4}, {7, 5}, {-5, 
            9}, {-2, 8}, {-3, -8}, {11, -9}, {
            10, -10}, {-6, -11}, {-7, -12}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{56, 66, 64, 67, 59, 68, 62}], 
          "NumericalThresholds" -> {-0.48675483465194697`, \
-0.10328377783298491`, 
           0.13240607827901843`, -0.3380467444658279, -0.2489180415868759, 
           1.299266815185547, -0.4481614083051681}, "LeafValues" -> 
          RawArray["Real32",{0.09748722612857819, 
            0.06820379197597504, -0.030273208394646645`, 
            0.13126026093959808`, -0.03029835969209671, -0.03014409728348255, \
-0.030214494094252586`, -0.03008248470723629}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, 5}, {-5, 6}, {
            7, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{58, 55, 69, 68, 59, 65, 55, 60, 56, 64, 67, 
            67, 59}], 
          "NumericalThresholds" -> {-0.2403125688433647, -0.1423426494002342, \
-0.2274900525808334, 0.281765103340149, 
           0.1158401481807232, -0.2460600361227989, -0.036776391789317124`, 
           0.09353579953312875, 0.15596406906843188`, 
           0.13240607827901843`, -0.1694391071796417, -0.3343645334243774, 
           0.36755110323429113`}, "LeafValues" -> 
          RawArray["Real32",{-0.0007558611687272787, 0.03374046832323074, 
            0.007762042339891195, -0.00952263455837965, -0.01563096232712269, 
            0.012664888054132462`, 0.012369970791041851`, -0.0178572628647089,
             0.021605726331472397`, 
            0.008365478366613388, -0.028991566970944405`, \
-0.024092426523566246`, 0.0004833531565964222, -0.014358704909682274`}], 
          "Children" -> 
          RawArray["Integer16",{{10, 2}, {3, 4}, {5, 6}, {
            7, -5}, {-2, -6}, {-4, -7}, {12, 8}, {9, -9}, {-8, -10}, {
            11, -11}, {-1, -12}, {-3, 13}, {-13, -14}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 57, 57, 69, 56, 60, 61, 68, 68, 56, 
            55}], "NumericalThresholds" -> {0.33297927677631384`, 
           0.20304237306118014`, -0.1321032717823982, -0.4988738149404525, \
-0.2425230965018272, 0.8488979637622834, 
           0.09353549405932428, -0.513062685728073, -0.1951780170202255, \
-0.519809067249298, 0.4123635143041611, -0.38877426087856287`}, "LeafValues" -> 
          RawArray["Real32",{0.01831280067563057, 
            0.030052432790398598`, -0.03226909041404724, 
            0.020255250856280327`, -0.0318942666053772, \
-0.004457155708223581, -0.007273904979228973, 
            0.001579655916430056, -0.00417020870372653, 0.013458134606480598`,
             0.0023775955196470022`, 0.009742636233568192, 
            0.017473530024290085`}], "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 6}, {4, -4}, {8, 
            5}, {-5, -6}, {-3, -7}, {11, -8}, {10, 9}, {-9, -10}, {-1, -11}, {
            12, -12}, {-2, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 59, 66, 69, 63, 63, 62, 65}], 
          "NumericalThresholds" -> {-0.9100271761417388, 
           0.49689322710037237`, -0.19741514325141904`, -0.2455915659666061, \
-1.0076183676719663`, -0.6295680701732634, 
           0.8752755820751191, -0.10572805628180502`}, "LeafValues" -> 
          RawArray["Real32",{0.08024529367685318, 0.08691562712192535, 
            0.07337456941604614, -0.03143574297428131, -0.0301340464502573, \
-0.03014237992465496, -0.03006007708609104, -0.030115405097603798`, \
-0.030102958902716637`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, 8}, {-4, 
            6}, {-6, 7}, {-7, -8}, {-5, -9}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{65, 55, 64, 67, 59, 59, 68, 68, 67, 61}], 
          "NumericalThresholds" -> {-0.8721508681774138, -0.03677702508866786,
            0.051945621147751815`, -0.33512243628501887`, \
-0.2489180415868759, -0.182836078107357, 
           1.86605179309845, -0.11754095554351805`, -0.33537243306636805`, 
           1.0000000180025095`*^-35}, "LeafValues" -> 
          RawArray["Real32",{0.1438797116279602, -0.030727582052350044`, 
            0.06113429367542267, 
            0.09836770594120026, -0.030356919392943382`, \
-0.030165325850248337`, -0.030083099380135536`, -0.030289670452475548`, \
-0.030218657106161118`, -0.03007781133055687, -0.030132582411170006`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {5, 3}, {4, -4}, {-3, 6}, {-2, 
            7}, {-5, 8}, {9, -8}, {-7, -9}, {-6, 10}, {-10, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 69, 56, 55, 56, 55, 66, 62, 35, 57, 58, 
            68, 58, 67, 31}], 
          "NumericalThresholds" -> {-0.009311007801443337, 
           0.23136051744222644`, 0.32777599990367895`, -0.1423426494002342, 
           0.6295612752437593, -0.036776391789317124`, -0.18606545031070706`, 
           0.8752745091915132, 
           0.03206597827374936, -0.49887420237064356`, -0.0809715911746025, \
-0.5226300954818724, -0.24031142145395276`, 0.03732480853796006, 
           0.07297900691628458}, "LeafValues" -> 
          RawArray["Real32",{0.01375630684196949, 
            0.029489174485206604`, -0.016632502898573875`, \
-0.022517329081892967`, -0.005855039693415165, -0.0013030578847974539`, 
            
            0.013448798097670078`, -0.01429362315684557, \
-0.014523549936711788`, 
            0.020853497087955475`, -0.006867806892842054, \
-0.005512968637049198, 0.008281535468995571, 
            0.013563579879701138`, -0.03170279413461685, \
-0.00758717767894268}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {4, -3}, {8, 14}, {5, 6}, {-2, 13}, {
            7, 9}, {12, -8}, {11, -9}, {
            10, -10}, {-7, -11}, {-1, -12}, {-5, -13}, {-6, -14}, {
            15, -15}, {-4, -16}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 57, 57, 69, 56, 60, 61, 68, 57, 56, 
            55}], "NumericalThresholds" -> {0.33297927677631384`, 
           0.20304237306118014`, -0.1321032717823982, -0.4988738149404525, \
-0.2425230965018272, 0.8488979637622834, 
           0.09353549405932428, -0.513062685728073, -0.1951780170202255, \
-0.4988747686147689, 0.4123635143041611, -0.38877426087856287`}, "LeafValues" -> 
          RawArray["Real32",{0.0024491804651916027`, 
            0.029525788500905037`, -0.031137412413954735`, 
            0.019766105338931084`, -0.030632823705673218`, \
-0.004242310766130686, -0.006859570275992155, 
            0.0015477798879146576`, -0.004022825043648481, 
            0.012928851880133152`, 0.018289482221007347`, 
            0.009088591672480106, 0.016770441085100174`}], "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 6}, {4, -4}, {8, 
            5}, {-5, -6}, {-3, -7}, {11, -8}, {10, 9}, {-9, -10}, {-1, -11}, {
            12, -12}, {-2, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 68, 67, 61, 63, 66, 63, 66, 69, 60, 62, 
            57}], "NumericalThresholds" -> {0.353294923901558, 
           0.05555319972336293, -0.32520350813865656`, -0.513061612844467, \
-1.0076183676719663`, -0.19782416522502896`, -0.6295681297779082, \
-0.19723279029130933`, -0.2447957322001457, -0.9100271761417388, 
           0.8752751648426057, -0.4988745599985122}, "LeafValues" -> 
          RawArray["Real32",{-0.03012933023273945, 
            0.21071165800094604`, -0.030689038336277008`, \
-0.031559742987155914`, 
            0.16842836141586304`, -0.030141253024339676`, \
-0.030142320320010185`, -0.03008018247783184, -0.030061686411499977`, \
-0.030110834166407585`, -0.030061742290854454`, -0.030081531032919884`, \
-0.030057409778237343`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, 5}, {8, -5}, {-4, 6}, {
            9, 7}, {-7, 10}, {-1, 11}, {-6, -10}, {-8, -11}, {
            12, -12}, {-9, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{55, 55, 64, 67, 59, 68, 59, 68, 61, 67, 65}], 
          "NumericalThresholds" -> {-0.7423824369907378, -0.03677702508866786,
            0.051945621147751815`, -0.3360507190227508, -0.2489180415868759, 
           2.051811575889588, -0.182836078107357, -0.11240689083933829`, \
-1.0000000180025095`*^-35, -0.33492118120193476`, -0.8721500933170317}, 
          "LeafValues" -> 
          RawArray["Real32",{0.14013798534870148`, -0.030702881515026093`, 
            0.06454000622034073, 
            0.08160938322544098, -0.030343424528837204`, \
-0.030154777690768242`, -0.03036021813750267, -0.030080245807766914`, \
-0.03021608479321003, -0.030166562646627426`, -0.030075861141085625`, \
-0.030120443552732468`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {5, 3}, {4, -4}, {-3, 7}, {-2, 6}, {
            9, -7}, {-5, 8}, {-8, -9}, {10, 11}, {-6, -11}, {-10, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 69, 56, 55, 56, 55, 66, 62, 35, 57, 68, 
            67, 67, 31}], 
          "NumericalThresholds" -> {-0.009311007801443337, 
           0.23136051744222644`, 0.32777599990367895`, -0.1423426494002342, 
           0.6295612752437593, -0.036776391789317124`, -0.18606545031070706`, 
           0.8752742707729341, 
           0.03206597827374936, -0.49887420237064356`, -0.5226300954818724, \
-0.10382879897952078`, 0.03732480853796006, 0.07297900691628458}, 
          "LeafValues" -> 
          RawArray["Real32",{0.004964558407664299, 
            0.02830405905842781, -0.016228122636675835`, \
-0.021873872727155685`, -0.005739207845181227, 0.01183024886995554, 
            0.012973196804523468`, -0.01381661556661129, \
-0.012552834115922451`, 0.020104441791772842`, -0.006811985746026039, 
            0.008008148521184921, -0.0029620788991451263`, \
-0.031243333593010902`, -0.006925410125404596}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {4, -3}, {8, 13}, {5, 6}, {-2, 12}, {
            7, 9}, {11, -8}, {-1, -9}, {
            10, -10}, {-7, -11}, {-5, -12}, {-6, -13}, {14, -14}, {-4, -15}}],
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 57, 35, 56, 65, 67, 57, 10, 60}], 
          "NumericalThresholds" -> {0.33297927677631384`, 
           0.20304237306118014`, -0.1321032717823982, 0.14105830900371077`, 
           0.8488983213901521, -0.10572843626141547`, -0.017576793208718296`, \
-0.4988738149404525, 0.08564231917262079, 0.09353549405932428}, "LeafValues" -> 
          RawArray["Real32",{0.0009739090455695987, 
            0.028672151267528534`, -0.027812819927930832`, 
            0.019168546423316002`, -0.01870626024901867, \
-0.004287451505661011, 0.000845679547637701, 
            0.015421423129737377`, -0.01574440486729145, 0.006693749688565731,
             0.014866651967167854`}], "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 5}, {4, -4}, {7, -5}, {-3, -6}, {
            9, -7}, {8, -8}, {-1, -9}, {10, -10}, {-2, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 62, 61, 63, 66, 66, 65, 60, 59, 62}], 
          "NumericalThresholds" -> {-1.0076183676719663`, 
           0.8752745091915132, -0.513061612844467, -0.6295682489871978, \
-0.1975588724017143, -0.19768368452787397`, -0.10572816804051398`, \
-0.9100273549556731, 0.4864455461502076, 0.8752754032611848}, "LeafValues" -> 
          RawArray["Real32",{
            0.054429639130830765`, -0.03018212877213955, -0.03012281097471714,
             0.11704973131418228`, -0.030142169445753098`, \
-0.03008388914167881, -0.030059218406677246`, -0.03010265715420246, \
-0.030057083815336227`, -0.030083563178777695`, -0.030088072642683983`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {4, 3}, {6, -4}, {-2, 5}, {7, 
            8}, {-3, 10}, {-5, -8}, {-6, 9}, {-9, -10}, {-7, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{62, 68, 55, 67, 59, 61}], 
          "NumericalThresholds" -> {-0.44816277921199793`, 
           1.86605179309845, -0.7423821389675139, -0.3380467444658279, \
-0.2489180415868759, 1.0000000180025095`*^-35}, "LeafValues" -> 
          RawArray["Real32",{0.08486358076334, 0.07229045033454895, 
            0.04659271612763405, 
            0.057824790477752686`, -0.030431263148784637`, \
-0.03008079342544079, -0.030156107619404793`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {-4, 5}, {-5, 
            6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 58, 60, 62, 35, 56, 62, 66, 63, 62}], 
          "NumericalThresholds" -> {0.27385891973972326`, 
           0.18760015815496447`, -0.009311007801443337, -0.12669856846332547`,
            0.14105830900371077`, 0.32777599990367895`, 
           0.8752742707729341, -0.18415424972772595`, -0.24996832758188245`, \
-0.4022012501955032}, "LeafValues" -> 
          RawArray["Real32",{0.00711557362228632, -0.026313023641705513`, 
            0.0197256188839674, -0.006421681493520737, \
-0.0014579079579561949`, 
            0.01285684946924448, -0.02580343931913376, \
-0.012888835743069649`, -0.009252497926354408, 
            0.007337790448218584, -0.01126344595104456}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {6, 5}, {-2, -5}, {8, -6}, {
            7, 10}, {-1, -8}, {9, -9}, {-4, -10}, {-7, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 57, 57, 56, 65, 55, 61, 55, 10, 68, 
            60}], "NumericalThresholds" -> {0.33297927677631384`, 
           0.20304237306118014`, -0.13210488855838773`, -0.49887372553348536`,
            0.8488979637622834, -0.10572843626141547`, -0.14234218746423719`, \
-0.5130625069141387, -0.036776391789317124`, 
           0.08564231917262079, -0.5226300954818724, 0.09353549405932428}, 
          "LeafValues" -> 
          RawArray["Real32",{0.015859993174672127`, 
            0.02808280475437641, -0.028869429603219032`, 
            0.006241986062377691, -0.021906020119786263`, \
-0.006255816202610731, 0.000780438887886703, 0.0267079658806324, 
            0.0019649912137538195`, -0.01272706687450409, 
            0.0062450445257127285`, 0.002955733798444271, 
            0.014488925226032734`}], "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 5}, {4, 7}, {8, -5}, {-3, -6}, {
            10, -7}, {-4, -8}, {11, 9}, {-9, -10}, {
            12, -11}, {-1, -12}, {-2, -13}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 59, 66, 58, 63, 63, 62, 61}], 
          "NumericalThresholds" -> {-0.9100271761417388, 
           0.49689322710037237`, -0.19741514325141904`, \
-0.23054415732622144`, -1.0076183676719663`, -0.6295681297779082, 
           0.8752755820751191, -0.5130616724491118}, "LeafValues" -> 
          RawArray["Real32",{0.06838028877973557, -0.030106620863080025`, 
            0.06041327491402626, -0.031439103186130524`, 
            0.08306130766868591, -0.03014187328517437, \
-0.030057858675718307`, -0.030123628675937653`, -0.030154090374708176`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {8, -5}, {-4, 
            6}, {-6, 7}, {-7, -8}, {-2, -9}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{65, 55, 64, 55, 59, 59, 68, 59, 65, 67}], 
          "NumericalThresholds" -> {-0.8721509873867034, -0.03677702508866786,
            0.051945621147751815`, -0.03677676804363727, -0.2489180415868759, \
-0.182836078107357, 1.86605179309845, 
           0.3675517290830613, -0.8721500933170317, -0.33512243628501887`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.140953928232193, -0.030721256509423256`, 
            0.0691089779138565, 
            0.07557713240385056, -0.03032572567462921, \
-0.030162639915943146`, -0.03009811043739319, -0.030283678323030472`, \
-0.030214611440896988`, -0.030159680172801018`, -0.03008151799440384}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {5, 3}, {4, -4}, {-3, 6}, {-2, 
            7}, {-5, 8}, {9, -8}, {-7, -9}, {-6, 10}, {-10, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 58, 60, 62, 35, 56, 62, 60, 58, 62}], 
          "NumericalThresholds" -> {0.27385891973972326`, 
           0.18760015815496447`, -0.009311007801443337, -0.12669856846332547`,
            0.14105830900371077`, 0.32777599990367895`, 
           0.8752742707729341, -0.009310732595622538, -0.2305444851517677, \
-0.4022012501955032}, "LeafValues" -> 
          RawArray["Real32",{0.0069378092885017395`, -0.025819595903158188`, 
            0.018834760412573814`, 
            0.013738696463406086`, -0.0014017391949892044`, 
            0.012414723634719849`, -0.025276605039834976`, \
-0.012515205889940262`, 
            0.0036390528548508883`, -0.006772708147764206, \
-0.01079387217760086}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {6, 5}, {-2, -5}, {8, -6}, {
            7, 10}, {-1, -8}, {-4, 9}, {-9, -10}, {-7, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 57, 35, 65, 67, 57, 60, 56, 55}], 
          "NumericalThresholds" -> {0.33297927677631384`, 
           0.20304237306118014`, -0.1321032717823982, 
           0.14105830900371077`, -0.2460602298378944, -0.017576793208718296`, \
-0.4988738149404525, 0.09353566542267801, 
           0.4123635143041611, -0.3887741416692733}, "LeafValues" -> 
          RawArray["Real32",{0.0009260897058993578, 
            0.028901759535074234`, -0.0023665197659283876`, 
            0.01827947609126568, -0.017463138327002525`, \
-0.025162963196635246`, 0.014952873811125755`, -0.014667355455458164`, 
            0.0008855500491335988, 0.007052663713693619, 
            0.012841394171118736`}], "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 5}, {4, -4}, {6, -5}, {-3, -6}, {
            7, -7}, {-1, -8}, {9, -9}, {10, -10}, {-2, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 64, 67, 61, 63, 66, 63, 66, 61, 60, 62, 
            61}], "NumericalThresholds" -> {0.353294923901558, 
           0.15269247442483905`, -0.32520350813865656`, -0.513061612844467, \
-1.0076183676719663`, -0.19782416522502896`, -0.6295681297779082, \
-0.19723279029130933`, -0.513061612844467, -0.9100271761417388, 
           0.8752751648426057, -0.5130623877048491}, "LeafValues" -> 
          RawArray["Real32",{-0.03012464940547943, -0.030437028035521507`, 
            0.1645878702402115, -0.03161811828613281, 
            0.12724485993385315`, -0.030105607584118843`, \
-0.030136514455080032`, -0.030080437660217285`, -0.030052613466978073`, \
-0.030134880915284157`, -0.03005732037127018, -0.03007441945374012, \
-0.030056433752179146`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, 5}, {8, -5}, {-4, 6}, {
            9, 7}, {-7, 10}, {-1, 11}, {-6, -10}, {-8, -11}, {
            12, -12}, {-9, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{65, 55, 64, 55, 59, 59, 68, 59, 65, 67}], 
          "NumericalThresholds" -> {-0.8721509873867034, -0.03677702508866786,
            0.051945621147751815`, -0.03677678108215331, -0.2489180415868759, \
-0.182836078107357, 1.86605179309845, 
           0.36755175888538366`, -0.8721500933170317, -0.33512243628501887`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.12060367316007614`, -0.030699539929628372`, 
            0.06967873871326447, 
            0.06846380978822708, -0.030314622446894646`, \
-0.03015751950442791, -0.030095906928181648`, -0.030273305252194405`, \
-0.030212916433811188`, -0.030154669657349586`, -0.03007892519235611}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {5, 3}, {4, -4}, {-3, 6}, {-2, 
            7}, {-5, 8}, {9, -8}, {-7, -9}, {-6, 10}, {-10, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 58, 60, 62, 35, 66, 63, 56, 62, 55, 67}], 
          "NumericalThresholds" -> {0.27385891973972326`, 
           0.18760015815496447`, -0.009311007801443337, -0.12669856846332547`,
            0.14105830900371077`, -0.18763221055269239`, \
-0.24996835738420484`, 0.32777599990367895`, 
           0.8752742707729341, -0.036777138710021966`, -0.2470736280083656}, 
          "LeafValues" -> 
          RawArray["Real32",{0.006827190052717924, -0.025151168927550316`, 
            0.018130529671907425`, -0.00805350486189127, \
-0.001240437151864171, 0.011667761020362377`, 0.0017256048740819097`, 
            0.008710392750799656, -0.0073426151648163795`, \
-0.012183061800897121`, -0.014241455122828484`, -0.02218753844499588}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {8, 5}, {-2, -5}, {6, -6}, {
            7, 10}, {-4, -8}, {9, 11}, {-1, -10}, {-7, -11}, {-9, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 57, 57, 58, 65, 55, 61, 55, 10, 60, 
            60}], "NumericalThresholds" -> {0.33297927677631384`, 
           0.20304237306118014`, -0.13210488855838773`, \
-0.49887372553348536`, -0.24031080305576322`, -0.10572843626141547`, \
-0.14234218746423719`, -0.5130625069141387, -0.036776391789317124`, 
           0.08564231917262079, -0.009310305584222077, 0.09353549405932428}, 
          "LeafValues" -> 
          RawArray["Real32",{0.012671925127506256`, 
            0.027171647176146507`, -0.006166334263980389, 
            0.005856617353856564, -0.02057715691626072, \
-0.028517305850982666`, 0.0004130761371925473, 0.02590293623507023, 
            0.0019011246040463448`, -0.012296516448259354`, 
            0.0048207431100308895`, 0.0003905657504219562, 
            0.013969113118946552`}], "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 5}, {4, 7}, {8, -5}, {-3, -6}, {
            10, -7}, {-4, -8}, {11, 9}, {-9, -10}, {
            12, -11}, {-1, -12}, {-2, -13}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 62, 65, 63, 66, 61, 65, 66, 60, 59, 62}], 
          "NumericalThresholds" -> {-1.0076183676719663`, 
           0.8752745091915132, -0.10572828352451323`, -0.6295684278011321, \
-0.1975588724017143, -0.513061612844467, -0.10572816804051398`, \
-0.19896399229764936`, -0.9100273549556731, 0.4968919754028321, 
           0.8752752244472505}, "LeafValues" -> 
          RawArray["Real32",{0.04745705798268318, -0.030210498720407486`, 
            0.10434634238481522`, -0.03010418638586998, \
-0.030143167823553085`, -0.030085425823926926`, -0.030168388038873672`, \
-0.030101103708148003`, -0.030056117102503777`, -0.030053680762648582`, \
-0.030085938051342964`, -0.030072279274463654`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, 6}, {-2, 5}, {7, 9}, {
            8, -7}, {-5, -8}, {-4, 11}, {-6, 10}, {-10, -11}, {-9, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{56, 55, 68, 62, 66, 59, 59, 68, 65, 67}], 
          "NumericalThresholds" -> {-0.5812065005302428, -0.03677702508866786,
            1.703814208507538, -0.4481619149446487, -0.20005169510841367`, \
-0.2489180415868759, -0.182836078107357, 
           2.051811575889588, -0.8721502125263213, -0.33585976064205164`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.14541280269622803`, -0.030684052035212517`, 
            0.11891982704401016`, 0.11775677651166916`, 
            0.06055139750242233, -0.03041779063642025, -0.03017370030283928, \
-0.030115822330117226`, -0.030394140630960464`, -0.030162081122398376`, \
-0.030079873278737068`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {6, 3}, {4, -4}, {-3, 5}, {-5, 
            7}, {-2, 8}, {-6, -8}, {9, -9}, {-7, 10}, {-10, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 58, 60, 62, 64, 62, 56, 35, 66, 63}], 
          "NumericalThresholds" -> {0.27385891973972326`, 
           0.18760015815496447`, -0.009311007801443337, -0.12669856846332547`,
            0.13240607827901843`, 0.8752745091915132, 0.4123624116182328, 
           0.14105830900371077`, -0.18415424972772595`, \
-0.24996832758188245`}, "LeafValues" -> 
          RawArray["Real32",{0.010100752115249634`, -0.02466408722102642, 
            0.01731162704527378, -0.0060377661138772964`, \
-0.0011876041535288095`, -0.019995948299765587`, -0.013433825224637985`, \
-0.01020657829940319, 0.011274458840489388`, -0.008833574131131172, 
            0.006811357103288174}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {5, 8}, {-2, -5}, {6, -6}, {
            7, -7}, {-1, -8}, {9, -9}, {10, -10}, {-4, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 57, 57, 56, 65, 55, 61, 55, 10, 64, 
            60}], "NumericalThresholds" -> {0.33297927677631384`, 
           0.20304237306118014`, -0.13210488855838773`, -0.49887372553348536`,
            0.8488983213901521, -0.10572843626141547`, -0.14234218746423719`, \
-0.5130625069141387, -0.036776391789317124`, 
           0.08564231917262079, -0.603490263223648, 0.09353549405932428}, 
          "LeafValues" -> 
          RawArray["Real32",{0.0006377400713972747, 
            0.02663784846663475, -0.024600140750408173`, 
            0.0057491110637784, -0.01979883201420307, -0.0027909406926482916`,
             0.00033656309824436903`, 0.025440596044063568`, 
            0.0018353151390329003`, -0.011919458396732807`, 
            0.00429430091753602, 0.012734460644423962`, 0.0135464733466506}], 
          "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 5}, {4, 7}, {8, -5}, {-3, -6}, {
            10, -7}, {-4, -8}, {11, 9}, {-9, -10}, {
            12, -11}, {-1, -12}, {-2, -13}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 56, 12, 58, 63, 63, 66, 66, 65, 66, 62, 
            65, 65}], 
          "NumericalThresholds" -> {-0.9100271761417388, 0.15596465021371844`,
            0.030714473687112335`, -0.23054415732622144`, \
-1.0076183676719663`, -0.8185935616493224, -0.19768368452787397`, \
-0.1957033276557922, -0.10572805628180502`, -0.19682553410530088`, 
           0.87527534365654, -0.04446606338024139, -0.04446596466004848}, 
          "LeafValues" -> 
          RawArray["Real32",{
            0.060187067836523056`, -0.03146328032016754, \
-0.03140202537178993, -0.030126497149467468`, 
            0.11201323568820953`, -0.030165089294314384`, \
-0.030127929523587227`, -0.030056839808821678`, -0.03005368262529373, \
-0.03010658174753189, -0.030073590576648712`, -0.030100874602794647`, \
-0.030087999999523163`, -0.030080849304795265`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 5}, {6, 4}, {10, -5}, {-3, 
            7}, {-2, 8}, {9, 11}, {-7, 13}, {-6, -10}, {-4, -11}, {
            12, -12}, {-8, -13}, {-9, -14}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{56, 55, 68, 62, 68, 59, 59, 68, 65, 67}], 
          "NumericalThresholds" -> {-0.5812065005302428, -0.03677702508866786,
            1.8253696560859682`, -0.44816203415393824`, -0.5283324718475341, \
-0.2489180415868759, -0.182836078107357, 
           2.051811575889588, -0.8721502125263213, -0.3355291932821273}, 
          "LeafValues" -> 
          RawArray["Real32",{0.12527044117450714`, -0.030661722645163536`, 
            0.11093294620513916`, 0.11726489663124084`, 
            0.06721383333206177, -0.030410291627049446`, \
-0.030168777331709862`, -0.03011666238307953, -0.030379775911569595`, \
-0.030150406062602997`, -0.030077479779720306`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {6, 3}, {4, -4}, {-3, 5}, {-5, 
            7}, {-2, 8}, {-6, -8}, {9, -9}, {-7, 10}, {-10, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 58, 62, 60, 64, 62, 56, 35, 55, 67, 63}], 
          "NumericalThresholds" -> {0.27385891973972326`, 
           0.18760015815496447`, -0.12669856846332547`, -0.009311007801443337,
            0.13240607827901843`, 0.8752745091915132, 0.4123624116182328, 
           0.14105830900371077`, -0.03677613101899623, -0.32869362831115717`, \
-0.24996753782033918`}, "LeafValues" -> 
          RawArray["Real32",{0.00985681265592575, -0.02418704517185688, 
            0.016558976843953133`, -0.0011355300666764379`, 
            0.01075084786862135, -0.019506612792611122`, \
-0.013059860095381737`, -0.009716155007481575, 
            0.010887586511671543`, -0.01524718850851059, \
-0.001175328390672803, 0.0004133620241191238}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {5, 8}, {6, -6}, {
            7, -7}, {-1, -8}, {9, -9}, {10, 11}, {-5, -11}, {-10, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{69, 60, 56, 69, 63, 58, 65, 64, 65, 65, 58, 
            63, 67}], 
          "NumericalThresholds" -> {0.1921990588307381, -0.009309921879321335,
            0.32777599990367895`, -0.2485084757208824, 0.2797976285219193, 
           0.18760044127702716`, -0.10572731867432593`, -0.603489190340042, \
-0.10572833195328711`, -0.10572775080800055`, -0.07536391913890837, 
           0.15785022079944613`, -0.23054001480340955`}, "LeafValues" -> 
          RawArray["Real32",{-0.009738296270370483, 
            0.004281074274331331, -0.021077832207083702`, 
            0.005779512692242861, -0.005411837249994278, 
            0.00293076247908175, -0.021035054698586464`, 
            0.009077539667487144, -0.0003202766820322722, 0.0204799622297287, 
            0.001761716092005372, -0.00844435952603817, 0.02261197194457054, 
            0.022914860397577286`}], "Children" -> 
          RawArray["Integer16",{{2, 12}, {3, 5}, {4, 13}, {-1, 9}, {6, -6}, {
            7, -7}, {8, 11}, {-3, -9}, {-5, 
            10}, {-10, -11}, {-8, -12}, {-2, -13}, {-4, -14}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 68, 67, 61, 63, 66, 66, 63, 60, 65, 62, 
            57}], "NumericalThresholds" -> {0.353294923901558, 
           0.05555319972336293, -0.32520350813865656`, -0.513061612844467, \
-1.0076183676719663`, -0.19800319522619245`, -0.19723279029130933`, \
-0.6295681297779082, -0.9100271761417388, -0.10572814568877219`, 
           0.8752752244472505, -0.4988745599985122}, "LeafValues" -> 
          RawArray["Real32",{-0.030125614255666733`, 
            0.13572469353675842`, -0.03081286884844303, \
-0.031710442155599594`, 
            0.10571090131998062`, -0.030130324885249138`, \
-0.03013266623020172, -0.030053140595555305`, -0.030080514028668404`, \
-0.030053352937102318`, -0.030104057863354683`, -0.03007536567747593, \
-0.03004968911409378}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, 5}, {7, -5}, {-4, 6}, {
            10, 8}, {-1, 11}, {-7, 9}, {-9, -10}, {-6, -11}, {
            12, -12}, {-8, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{56, 55, 62, 68, 68, 59, 59, 68, 65, 67}], 
          "NumericalThresholds" -> {-0.5812065005302428, \
-0.03677702508866786, -0.44816277921199793`, 
           1.86605179309845, -0.5285495817661284, -0.2489180415868759, \
-0.182836078107357, 
           2.051811575889588, -0.8721502125263213, -0.33585976064205164`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.10980094224214554`, -0.03064289502799511, 
            0.11780710518360138`, 0.0631147027015686, 
            0.10402759164571762`, -0.03039867803454399, -0.03016367182135582, \
-0.030122844502329826`, -0.030373819172382355`, -0.030151614919304848`, \
-0.03007480874657631}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {6, 3}, {-3, 4}, {5, -5}, {-4, 
            7}, {-2, 8}, {-6, -8}, {9, -9}, {-7, 10}, {-10, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 58, 62, 60, 64, 62, 56, 35, 60, 58}], 
          "NumericalThresholds" -> {0.27385891973972326`, 
           0.18760015815496447`, -0.12669856846332547`, -0.009311007801443337,
            0.13240607827901843`, 0.8752745091915132, 0.4123624116182328, 
           0.14105830900371077`, -0.009310732595622538, -0.2305444851517677}, 
          "LeafValues" -> 
          RawArray["Real32",{0.009579509496688843, -0.023625820875167847`, 
            0.01581793837249279, -0.0010417653247714043`, 
            0.013014793395996094`, -0.019020332023501396`, \
-0.012602301314473152`, -0.009122572839260101, 0.01047646813094616, 
            0.0031876536086201668`, -0.00643351674079895}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {5, 8}, {6, -6}, {
            7, -7}, {-1, -8}, {9, -9}, {-5, 10}, {-10, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{69, 60, 56, 65, 65, 63, 58, 67, 59, 68, 60, 
            63, 60, 67, 14}], 
          "NumericalThresholds" -> {0.1921990588307381, -0.009309822693467138,
            0.15596530586481097`, -0.10572833195328711`, \
-0.10572776570916174`, 0.2797976285219193, 
           0.18760044127702716`, -0.24045796692371366`, 
           0.21132030338048938`, -0.5127971470355986, -0.009310732595622538, 
           0.15785022079944613`, -0.9100275337696074, -0.3257360011339187, 
           0.018010240048170093`}, "LeafValues" -> 
          RawArray["Real32",{-0.01137018483132124, 
            0.004091738723218441, -0.005433971062302589, \
-0.001077465363778174, 0.015489120036363602`, -0.008529039099812508, 
            0.002524762414395809, -0.020154448226094246`, 
            0.0073356302455067635`, -0.009771433658897877, \
-0.022703172639012337`, 0.00673868041485548, 0.022054653614759445`, 
            0.0050822664052248, 0.01343574933707714, 0.025920193642377853`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 12}, {3, 6}, {4, 13}, {-1, 5}, {-5, 11}, {
            7, -7}, {8, -8}, {10, 
            9}, {-9, -10}, {-3, -11}, {-6, -12}, {-2, -13}, {-4, 14}, {-14, 
            15}, {-15, -16}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 66, 56, 63, 67, 62, 60, 59}], 
          "NumericalThresholds" -> {-1.0076183676719663`, \
-0.19741514325141904`, 
           0.15596465021371844`, -0.6295685470104216, -0.3253586441278457, 
           0.8752755820751191, -0.9100273549556731, 0.36755035817623144`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.0417332798242569, 
            0.06893227249383926, -0.03026384860277176, -0.03017648123204708, \
-0.03008907102048397, -0.03011065162718296, -0.030133532360196114`, \
-0.030051128938794136`, -0.03006957471370697}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, 5}, {-3, 6}, {-4, -6}, {
            7, -7}, {-5, 8}, {-8, -9}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{56, 55, 62, 55, 58, 68, 59, 68, 65, 67}], 
          "NumericalThresholds" -> {-0.5812065005302428, \
-0.03677702508866786, -0.44816277921199793`, -0.0367766972631216, 
           0.16728002578020099`, 1.65354061126709, -0.2489180415868759, 
           2.051811575889588, -0.8721502125263213, -0.3355291932821273}, 
          "LeafValues" -> 
          RawArray["Real32",{0.09767330437898636, -0.030623270198702812`, 
            0.10231687873601913`, 
            0.10115066915750504`, -0.030208440497517586`, 
            0.04708944261074066, -0.030809910967946053`, \
-0.030159147456288338`, -0.030367977917194366`, -0.030140653252601624`, \
-0.03007245995104313}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {7, 3}, {-3, 4}, {-4, 5}, {
            6, -6}, {-5, -7}, {-2, 8}, {9, -9}, {-8, 10}, {-10, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 58, 62, 60, 64, 62, 56, 35, 55, 67, 63}], 
          "NumericalThresholds" -> {0.27385891973972326`, 
           0.18760015815496447`, -0.12669856846332547`, -0.009311007801443337,
            0.13240607827901843`, 0.8752745091915132, 0.4123624116182328, 
           0.14105830900371077`, -0.03677613101899623, -0.32869362831115717`, \
-0.24996753782033918`}, "LeafValues" -> 
          RawArray["Real32",{0.009256474673748016, -0.023075193166732788`, 
            0.015095353126525879`, -0.0009742063120938838, 
            0.010303400456905365`, -0.018581097945570946`, \
-0.012208908796310425`, -0.008620909415185452, 
            0.009995976462960243, -0.014873403124511242`, \
-0.0011664832709357142`, 0.0005246168002486229}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {5, 8}, {6, -6}, {
            7, -7}, {-1, -8}, {9, -9}, {10, 11}, {-5, -11}, {-10, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 60, 69, 58, 57, 64, 63, 61, 64, 63}], 
          "NumericalThresholds" -> {-0.6295681297779082, \
-0.20411685854196546`, 
           0.2503384426236153, -0.0753631331026554, -0.13210488855838773`, 
           0.051946254447102554`, -0.24996875971555707`, \
-0.04220644384622573, -0.6034891307353972, 0.15804850310087207`}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.017921287566423416`, 0.01514398492872715, 
            0.013453706167638302`, 
            0.01722877286374569, -0.021908657625317574`, 
            0.006440529599785805, -0.01439571101218462, \
-0.0033801477402448654`, 0.02395140752196312, 0.006591703277081251, 
            0.0011226886417716742`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {8, 3}, {4, -4}, {7, 5}, {-5, 
            6}, {-6, -7}, {-3, 9}, {10, -9}, {-8, -10}, {-2, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 56, 62, 58, 63, 63, 66, 66, 67, 62, 65}], 
          "NumericalThresholds" -> {-0.9100271761417388, 0.15596465021371844`,
            0.8752745091915132, 
           0.23895638436079028`, -1.0076183676719663`, -1.0076183676719663`, \
-0.19768368452787397`, -0.19741514325141904`, -0.32520350813865656`, 
           0.8752752840518953, -0.04446606338024139}, "LeafValues" -> 
          RawArray["Real32",{
            0.05291108414530754, -0.03157348930835724, -0.031434930860996246`,
             0.06982788443565369, 
            0.060840386897325516`, -0.0301317498087883, -0.03016616962850094, \
-0.030054058879613876`, -0.030066635459661484`, -0.0301037710160017, \
-0.030098458752036095`, -0.030080802738666534`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 6}, {4, -4}, {5, -5}, {-2, 
            8}, {-3, 7}, {9, 10}, {-6, -9}, {-7, -10}, {11, -11}, {-8, -12}}],
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{64, 57, 67, 67, 56, 68, 68, 55, 68}], 
          "NumericalThresholds" -> {
           0.051945621147751815`, -0.05901458673179149, -0.3380467444658279, \
-0.24549285322427747`, -0.25524775683879847`, 0.739850401878357, 
           1.86605179309845, -0.03677581436932086, -0.5293045639991759}, 
          "LeafValues" -> 
          RawArray["Real32",{0.05757339298725128, 0.08830340206623077, 
            0.0304982028901577, -0.030384140089154243`, \
-0.030310150235891342`, -0.0301140695810318, -0.030698763206601143`, \
-0.030285492539405823`, -0.030132222920656204`, -0.030062034726142883`}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 4}, {-1, 5}, {-3, 6}, {-4, 
            7}, {-5, -7}, {8, -8}, {9, -9}, {-6, -10}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 58, 62, 60, 64, 58, 62, 60, 60, 35}], 
          "NumericalThresholds" -> {0.27385891973972326`, 
           0.18760015815496447`, -0.12669856846332547`, -0.009311007801443337,
            0.13240607827901843`, -0.23054391890764234`, 
           0.8752745091915132, -0.009310732595622538, -0.00931046577170491, 
           0.14105830900371077`}, "LeafValues" -> 
          RawArray["Real32",{-0.00009271546878153458, -0.02251390554010868, 
            0.014458161778748035`, -0.0009509722585789859, 
            0.012690906412899494`, -0.01798076555132866, 
            0.008381142280995846, -0.016358118504285812`, \
-0.013456328772008419`, 0.0007393956766463816, 0.009385881945490837}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {5, 8}, {6, -6}, {
            7, -7}, {-1, -8}, {-5, 9}, {-9, 10}, {-10, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 57, 55, 58, 69, 60, 57, 63, 63, 69}], 
          "NumericalThresholds" -> {0.36726598441600805`, 
           0.20304237306118014`, -0.1321032717823982, -0.3887741416692733, \
-0.0753631331026554, -0.18415907770395276`, 0.09353549405932428, 
           0.23826786130666736`, -0.24996861070394513`, \
-0.24996709078550336`, -0.1992218121886253}, "LeafValues" -> 
          RawArray["Real32",{0.011358528397977352`, 
            0.013002470135688782`, -0.01215999387204647, 
            0.017278937622904778`, -0.02669505961239338, -0.02330479957163334,
             0.0043996404856443405`, 0.0010210791369900107`, 
            0.008109048008918762, -0.003927365876734257, 0.01151899341493845, 
            0.024675510823726654`}], "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 4}, {5, -4}, {8, -5}, {9, 
            6}, {-6, -7}, {11, -8}, {-3, -9}, {-1, 
            10}, {-10, -11}, {-2, -12}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 67, 59, 57, 59, 63, 61, 66, 63, 66, 60, 
            69}], "NumericalThresholds" -> {
           0.353294923901558, -0.32520350813865656`, 
           0.3675500303506852, -0.4988753646612167, -0.023565609008073803`, \
-1.0076183676719663`, -0.513061612844467, -0.19782416522502896`, \
-0.6295681297779082, -0.19741514325141904`, -0.9100271761417388, \
-0.2455915659666061}, "LeafValues" -> 
          RawArray["Real32",{0.16618479788303375`, 
            0.10359437763690948`, -0.03176777809858322, 
            0.08556504547595978, -0.0301220566034317, 
            0.01478765718638897, -0.03012532740831375, \
-0.030197903513908386`, -0.030128538608551025`, -0.030079718679189682`, \
-0.030052904039621353`, -0.030048782005906105`, -0.03010336123406887}], 
          "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, 6}, {-1, 4}, {-4, 
            7}, {-2, -6}, {-3, 8}, {10, -8}, {12, 9}, {-9, 
            11}, {-5, -11}, {-10, -12}, {-7, -13}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{59, 55, 68, 66, 59, 61, 68, 65, 55, 67}], 
          "NumericalThresholds" -> {-0.49341717362403864`, \
-0.03677702508866786, 
           1.86605179309845, -0.20005169510841367`, -0.2489180415868759, \
-1.0000000180025095`*^-35, 2.051811575889588, -0.8721502125263213, 
           1.0000000180025095`*^-35, -0.3360507190227508}, "LeafValues" -> 
          RawArray["Real32",{0.057783957570791245`, -0.03069920837879181, 
            0.08701489865779877, 
            0.10736173391342163`, -0.030095692723989487`, \
-0.03016011416912079, -0.03038930892944336, -0.03035374917089939, \
-0.0301533006131649, -0.030158935114741325`, -0.030069416388869286`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {5, 3}, {4, -4}, {-3, 6}, {-2, 7}, {
            9, -7}, {8, -8}, {-6, 10}, {-5, -10}, {-9, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 58, 62, 60, 64, 62, 60, 60, 56, 35}], 
          "NumericalThresholds" -> {0.27385891973972326`, 
           0.18760015815496447`, -0.12669856846332547`, -0.009311007801443337,
            0.13240607827901843`, 
           0.8752745091915132, -0.009310732595622538, -0.00931046577170491, 
           0.32777599990367895`, 0.14105830900371077`}, "LeafValues" -> 
          RawArray["Real32",{0.008685612119734287, -0.022035732865333557`, 
            0.013847030699253082`, -0.0009254582109861076, 
            0.012272699736058712`, -0.017490914091467857`, \
-0.011528255417943, -0.013094737194478512`, 
            0.0007163045229390264, -0.006561750546097755, 
            0.009043063037097454}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {5, 7}, {6, -6}, {
            9, -7}, {-5, 8}, {-8, 10}, {-1, -10}, {-9, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 69, 60, 63, 67, 64, 64, 61, 63, 58}], 
          "NumericalThresholds" -> {-0.6295681297779082, 
           0.1921990588307381, -0.009310231078416107, -0.24996861070394513`, \
-0.2470736280083656, -0.5920859277248381, -0.91684952378273, \
-0.5130626261234282, 0.27979750931262976`, -0.009835142176598309}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.017162317410111427`, 0.01896539144217968, 
            0.015195978805422783`, 0.00830828957259655, 0.009381266310811043, 
            0.024776775389909744`, 
            0.0012070639058947563`, -0.004909439478069544, \
-0.004884703550487757, 0.0013271844945847988`, -0.0182766355574131}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 7}, {-2, 5}, {8, 
            6}, {-6, -7}, {-4, 9}, {-5, -9}, {10, -10}, {-8, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 64, 69, 57, 63, 63, 67, 66, 66, 60, 63}], 
          "NumericalThresholds" -> {0.03206597827374936, 0.15269181877374652`,
            -0.25182695686817164`, -0.4988755136728286, -1.0076183676719663`, \
-0.6295690238475798, -0.3186420798301696, -0.19768368452787397`, \
-0.19782416522502896`, -0.9100273549556731, -0.6295674145221709}, 
          "LeafValues" -> 
          RawArray["Real32",{0.086421899497509, -0.03159170597791672, 
            0.08551709353923798, 
            0.06599289923906326, -0.03189762309193611, \
-0.030274473130702972`, -0.030152538791298866`, -0.030109087005257607`, \
-0.03007194772362709, -0.030108658596873283`, -0.03008028119802475, \
-0.03004935197532177}], "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -3}, {-1, 4}, {-4, 6}, {-2, 
            7}, {-5, 8}, {-6, 9}, {-7, -9}, {-8, 10}, {-10, 11}, {-11, -12}}],
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{64, 57, 68, 67, 68, 56, 68, 67, 55}], 
          "NumericalThresholds" -> {
           0.051945621147751815`, -0.05901458673179149, -0.5301915705204009, \
-0.2470736280083656, 0.8676156699657441, -0.25524775683879847`, 
           1.86605179309845, -0.3377746790647506, -0.03677581436932086}, 
          "LeafValues" -> 
          RawArray["Real32",{0.059151437133550644`, 0.07763677835464478, 
            0.029512984678149223`, -0.030395230278372765`, \
-0.030292624607682228`, -0.030754869803786278`, -0.030184203758835793`, \
-0.030296366661787033`, -0.030060110613703728`, -0.030128074809908867`}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 4}, {-1, 6}, {-3, 
            5}, {-5, -6}, {-4, 7}, {8, -8}, {-7, 9}, {-9, -10}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 58, 62, 69, 67, 58, 60, 65, 67, 68}], 
          "NumericalThresholds" -> {0.27385891973972326`, 
           0.18760015815496447`, -0.12669856846332547`, -0.1992218121886253, \
-0.10382879897952078`, -0.009835639037191866, 
           0.09353668615221979, -0.10572833195328711`, -0.32869362831115717`, \
-0.5224644541740416}, "LeafValues" -> 
          RawArray["Real32",{0.018896985799074173`, -0.021458260715007782`, 
            0.013315689750015736`, -0.0009220923529937863, \
-0.007368423044681549, -0.023329542949795723`, 0.014903305098414421`, 
            0.010681151412427425`, -0.009136978536844254, \
-0.00006859118002466857, 0.0011648699874058366`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {6, 5}, {7, -6}, {
            8, -7}, {-5, -8}, {9, 10}, {-1, -10}, {-9, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 57, 55, 57, 67, 57, 69, 61, 55, 68, 
            64}], "NumericalThresholds" -> {0.36726598441600805`, 
           0.20304237306118014`, -0.13210488855838773`, -0.3887741416692733, \
-0.49887372553348536`, -0.23175803571939466`, 
           0.23826786130666736`, -0.1956176236271858, -0.5130625069141387, \
-0.036776391789317124`, -0.5226300954818724, -0.047500848770141595`}, 
          "LeafValues" -> 
          RawArray["Real32",{
            0.014767786487936974`, -0.0038160739932209253`, \
-0.011659931391477585`, 
            0.019899269565939903`, -0.025932490825653076`, \
-0.017224755138158798`, 0.006668425165116787, 0.007790947798639536, 
            0.025276795029640198`, 
            0.001729134120978415, -0.011767515912652016`, 
            0.0028070148546248674`, 0.009667497128248215}], "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 4}, {5, 12}, {7, -5}, {
            9, -6}, {-2, 8}, {-3, -8}, {-7, -9}, {11, 
            10}, {-10, -11}, {-1, -12}, {-4, -13}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 64, 66, 58, 63, 63, 67, 62, 65, 66, 60, 
            63}], "NumericalThresholds" -> {0.03206597827374936, 
           0.15269181877374652`, -0.19741514325141904`, \
-0.23054415732622144`, -1.0076183676719663`, -1.0076183676719663`, \
-0.3198439478874206, 
           0.8752755820751191, -0.10572694614529608`, -0.19782416522502896`, \
-0.9100273549556731, -0.6295674145221709}, "LeafValues" -> 
          RawArray["Real32",{-0.030142175033688545`, -0.031542472541332245`, 
            0.07687094062566757, -0.03185219317674637, 
            0.12527164816856384`, -0.030282480642199516`, \
-0.030061574652791023`, -0.030105428770184517`, -0.030137693509459496`, \
-0.030129671096801758`, -0.030105696991086006`, -0.030077679082751274`, \
-0.030047843232750893`}], "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -3}, {4, 6}, {-1, -5}, {-2, 
            7}, {-4, 8}, {-6, 10}, {9, -9}, {-7, -10}, {-8, 11}, {-11, 
            12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{56, 66, 64, 68, 61, 65, 59}], 
          "NumericalThresholds" -> {-0.48675483465194697`, \
-0.10328377783298491`, 0.13240634649991992`, -0.5301915705204009, 
           0.05358486063778401, -0.39964559674262995`, -0.4934154003858566}, 
          "LeafValues" -> 
          RawArray["Real32",{0.05387289077043533, 
            0.05850787088274956, -0.030379008501768112`, 
            0.08330924063920975, -0.03021784871816635, \
-0.030331235378980637`, -0.030201314017176628`, -0.030078453943133354`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, 5}, {
            6, -6}, {-5, 7}, {-7, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 60, 63, 64, 68, 58, 55, 63, 69, 56, 55, 
            63, 59, 68, 58}], 
          "NumericalThresholds" -> {
           0.27385891973972326`, -0.009309822693467138, \
-0.24996861070394513`, -0.5920861661434172, -0.4516189098358154, \
-0.24031142145395276`, -0.25581888854503626`, 
           0.13067163527011874`, -0.24290934205055234`, 
           0.15596530586481097`, -0.036777138710021966`, \
-0.24996785074472425`, -0.02356593124568462, -0.5178717672824859, \
-0.23054476827383039`}, "LeafValues" -> 
          RawArray["Real32",{-0.02226480096578598, -0.0247972272336483, 
            0.021076321601867676`, 
            0.016634421423077583`, -0.003889906918630004, \
-0.011703464202582836`, 0.01624075137078762, 
            0.006851403973996639, -0.013238062150776386`, 
            0.002929910086095333, 0.00433511845767498, 
            0.0075486586429178715`, -0.008823594078421593, \
-0.0026645916514098644`, -0.019318588078022003`, -0.005132073070853949}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, 5}, {15, 10}, {-2, -5}, {9, 
            6}, {-6, 7}, {-7, 8}, {-8, -9}, {-3, -10}, {11, 13}, {-4, 
            12}, {-12, -13}, {-11, 14}, {-14, -15}, {-1, -16}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{69, 60, 56, 65, 65, 67, 55, 56, 58, 59, 65, 
            68, 60, 55}], 
          "NumericalThresholds" -> {0.1921990588307381, -0.009309822693467138,
            0.15596530586481097`, -0.10572833195328711`, \
-0.10572776570916174`, -0.24045796692371366`, -0.1423426494002342, 
           0.6295616924762727, -0.07536399364471434, -0.02356593124568462, \
-0.24605997651815412`, -0.5178717672824859, -0.009310732595622538, \
-0.03677594475448131}, "LeafValues" -> 
          RawArray["Real32",{-0.011640382930636406`, 
            0.02099229022860527, -0.006112177390605211, 
            0.00002416026109131053, 
            0.014754577539861202`, -0.008190600201487541, -0.0185055211186409,
             0.011958274058997631`, -0.0021289363503456116`, \
-0.02145976573228836, 0.0052199470810592175`, 0.0027275437023490667`, 
            0.021013924852013588`, 
            0.006351612042635679, -0.00309527525678277}], "Children" -> 
          RawArray["Integer16",{{2, 11}, {3, 6}, {4, 10}, {-1, 5}, {-5, 13}, {
            9, 7}, {8, 14}, {-7, -9}, {-3, -10}, {-4, 
            12}, {-2, -12}, {-11, -13}, {-6, -14}, {-8, -15}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 64, 69, 65, 63, 63, 58, 67, 66, 62, 66, 
            60, 63}], 
          "NumericalThresholds" -> {0.03206597827374936, 
           
           0.15269181877374652`, -0.2455915659666061, -0.10572828352451323`, \
-1.0076183676719663`, -0.6295674145221709, -0.23054432123899457`, \
-0.3198439478874206, -0.19896399229764936`, 
           0.8752754032611848, -0.19782416522502896`, -0.9100273549556731, \
-0.6295674145221709}, "LeafValues" -> 
          RawArray["Real32",{0.11112160980701447`, -0.03149106726050377, 
            0.07043857872486115, -0.03141000494360924, \
-0.030083639547228813`, -0.030274968594312668`, -0.030174383893609047`, \
-0.030699916183948517`, -0.03010198473930359, -0.03006075508892536, \
-0.030120357871055603`, -0.030102349817752838`, -0.030075054615736008`, \
-0.030046358704566956`}], "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -3}, {4, 6}, {-1, 7}, {-2, 
            8}, {-4, 9}, {-5, -8}, {-6, 11}, {-7, 10}, {-10, -11}, {-9, 
            12}, {-12, 13}, {-13, -14}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{64, 57, 56, 67, 64, 56, 56, 56, 68, 68, 55}], 
          "NumericalThresholds" -> {0.051945621147751815`, 
           0.21800861507654193`, -0.25524775683879847`, -0.3380467444658279, 
           0.1526930779218674, -0.409465804696083, -0.25524775683879847`, 
           0.41236247122287756`, 
           1.86605179309845, -0.5291711390018462, -0.03677581809461116}, 
          "LeafValues" -> 
          RawArray["Real32",{0.05519101768732071, 
            0.09829045832157135, -0.0306714940816164, 
            0.037499893456697464`, -0.030384458601474762`, \
-0.03032541088759899, -0.03033401258289814, -0.03012690506875515, \
-0.030107958242297173`, -0.03028269298374653, -0.030055884271860123`, \
-0.0301135815680027}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {3, 6}, {-2, 5}, {-1, 
            7}, {-4, -6}, {-3, 8}, {-5, 9}, {-7, -9}, {10, -10}, {-8, 
            11}, {-11, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 58, 64, 69, 67, 69, 35, 60, 66, 59}], 
          "NumericalThresholds" -> {0.27385891973972326`, 
           0.18760015815496447`, -0.5920861661434172, -0.1992218121886253, \
-0.10382879897952078`, -0.23444887995719907`, 0.04409602843225003, 
           0.09353668615221979, -0.18415424972772595`, 0.06340056657791139}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.0005799132050015032, -0.02433362975716591, 
            0.012227942235767841`, -0.0037585643585771322`, \
-0.007068478502333164, -0.02260860987007618, 
            0.013457478024065495`, -0.00034782307920977473`, 
            0.010561480186879635`, -0.014440855011343956`, 
            0.014494223520159721`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {6, 5}, {8, -6}, {
            7, -7}, {9, 10}, {-5, -9}, {-1, -10}, {-8, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 57, 55, 58, 69, 67, 57, 69, 59, 65, 
            64}], "NumericalThresholds" -> {0.36726598441600805`, 
           0.20304237306118014`, -0.13210488855838773`, -0.3887741416692733, \
-0.0753631331026554, -0.22862268984317777`, -0.23175803571939466`, 
           0.23826786130666736`, -0.1956176236271858, 
           0.36755006015300756`, -0.10572833195328711`, \
-0.047500848770141595`}, "LeafValues" -> 
          RawArray["Real32",{
            0.0119802700355649, -0.0037015234120190144`, \
-0.011239081621170044`, 
            0.019467957317829132`, -0.02518705278635025, \
-0.02702963352203369, -0.0014247397193685174`, 0.006541040260344744, 
            0.007377162110060453, 
            0.024440569803118706`, -0.008287066593766212, 
            0.002095082076266408, 0.009709403850138187}], "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 4}, {5, 12}, {8, -5}, {10, 
            6}, {-6, -7}, {-2, 9}, {-3, -9}, {-8, -10}, {-1, 
            11}, {-11, -12}, {-4, -13}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 60, 56, 61, 61, 63, 63, 67, 66, 66, 66, 
            60, 62, 63}], 
          "NumericalThresholds" -> {0.03206597827374936, -0.9100271761417388, 
           0.15596465021371844`, -0.513061612844467, -0.4358090609312057, \
-1.0076183676719663`, -1.0076183676719663`, -0.3203494548797607, \
-0.19768368452787397`, -0.19741514325141904`, -0.19782416522502896`, \
-0.9100273549556731, 0.8752752840518953, -0.6295674145221709}, "LeafValues" -> 
          RawArray["Real32",{
            0.08127715438604355, -0.031443074345588684`, \
-0.03013875149190426, -0.031643446534872055`, 0.12385010719299316`, 
            0.01413286104798317, -0.03027328848838806, \
-0.030149871483445168`, -0.030098846182227135`, -0.030057020485401154`, \
-0.030058233067393303`, -0.030100012198090553`, -0.030072713270783424`, \
-0.030092548578977585`, -0.03004489466547966}], "Children" -> 
          RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 7}, {10, 
            5}, {-5, -6}, {-2, 8}, {-4, 9}, {-7, 11}, {-8, 
            13}, {-3, -11}, {-9, 12}, {-12, 14}, {-10, -14}, {-13, -15}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{64, 57, 56, 68, 58, 56, 56, 55, 68, 67, 55}], 
          "NumericalThresholds" -> {0.051945621147751815`, 
           0.21800861507654193`, -0.25524775683879847`, -0.5301915705204009, \
-0.0753626450896263, -0.409465804696083, -0.25524775683879847`, \
-0.38877381384372706`, 
           1.86605179309845, -0.3377746790647506, -0.03677581436932086}, 
          "LeafValues" -> 
          RawArray["Real32",{0.050940994173288345`, 
            0.08889322727918625, -0.03064144030213356, 
            0.036495454609394073`, -0.03037882223725319, -0.0302528478205204, \
-0.03010496124625206, -0.030182160437107086`, -0.030331948772072792`, \
-0.030278285965323448`, -0.030054790899157524`, -0.030117899179458618`}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {3, 6}, {-2, 5}, {-1, 
            7}, {-4, -6}, {-3, 8}, {-5, 9}, {-7, -9}, {10, -10}, {-8, 
            11}, {-11, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 58, 59, 69, 58, 63, 59, 67, 61, 64, 66}], 
          "NumericalThresholds" -> {
           0.27946138381958013`, -0.07536391913890837, -0.011325109284371136`,
            0.046065660193562515`, -0.2305457219481468, -0.24996861070394513`,
            0.2113200277090073, -0.2088537365198135, -0.513062685728073, \
-0.047500681132078164`, -0.1756518557667732}, "LeafValues" -> 
          RawArray["Real32",{-0.0023124462459236383`, -0.021588260307908058`, 
            0.009446455165743828, 
            0.010706961154937744`, -0.00658148480579257, \
-0.01421805564314127, -0.00900334119796753, 
            0.0006447761552408338, -0.020443463698029518`, 
            0.004339493811130524, -0.0015505264746025205`, 
            0.022501742467284203`}], "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 4}, {8, 5}, {7, -5}, {-4, 
            6}, {-6, 9}, {
            11, -8}, {-1, -9}, {-7, -10}, {-2, -11}, {-3, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 69, 60, 58, 57, 63, 57, 67, 64, 64}], 
          "NumericalThresholds" -> {-0.6295681297779082, 
           0.5661014318466188, -0.20411685854196546`, -0.0753631331026554, \
-0.13210488855838773`, -0.24996875971555707`, 
           0.20304237306118014`, -0.25795345008373255`, -0.5920865237712859, \
-0.6034891307353972}, "LeafValues" -> 
          RawArray["Real32",{-0.016225561499595642`, -0.00046967988600954413`,
             0.017478162422776222`, 
            0.012453568167984486`, -0.01718117669224739, 
            0.007995069958269596, -0.0031366099137812853`, \
-0.009425871074199677, 0.026425175368785858`, 0.008109749294817448, 
            0.006554049905389547}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {8, 4}, {6, 5}, {-5, 
            7}, {-4, 10}, {-6, -8}, {-2, 9}, {-9, -10}, {-7, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 64, 66, 61, 63, 63, 67, 61, 67, 66, 60, 
            63, 62}], 
          "NumericalThresholds" -> {0.03206597827374936, 
           0.15269181877374652`, -0.19741514325141904`, -0.513061612844467, \
-1.0076183676719663`, -1.0076183676719663`, -0.3198439478874206, \
-0.5130615532398223, -0.325555145740509, -0.19782416522502896`, \
-0.9100273549556731, -0.6295675337314605, 0.8752754032611848}, "LeafValues" -> 
          RawArray["Real32",{-0.030130965635180473`, -0.03141540661454201, 
            0.06030439957976341, -0.03174605220556259, 
            0.10342153906822205`, -0.030264705419540405`, \
-0.030049284920096397`, -0.030095640569925308`, -0.030165916308760643`, \
-0.030067436397075653`, -0.030097326263785362`, -0.030072784051299095`, \
-0.030043404549360275`, -0.03007391095161438}], "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -3}, {4, 6}, {-1, -5}, {-2, 
            7}, {-4, 8}, {-6, 10}, {13, 9}, {-9, -10}, {-8, 11}, {-11, 
            12}, {-12, -13}, {-7, -14}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{64, 57, 67, 67, 68, 56, 59, 68, 68, 55}], 
          "NumericalThresholds" -> {
           0.051945621147751815`, -0.05901458673179149, -0.3380467444658279, \
-0.25262503325939173`, 
           0.8676156699657441, -0.25524775683879847`, -0.023565731011331078`, 
           1.86605179309845, -0.5291711390018462, -0.03677581809461116}, 
          "LeafValues" -> 
          RawArray["Real32",{0.05165673792362213, 0.06128842756152153, 
            0.03181939572095871, -0.030365675687789917`, \
-0.030477646738290787`, -0.030779825523495674`, -0.03012799844145775, \
-0.03016497567296028, -0.030268516391515732`, -0.030052583664655685`, \
-0.030106335878372192`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 4}, {-1, 6}, {-3, 5}, {
            7, -6}, {-4, 8}, {-5, -8}, {9, -9}, {-7, 10}, {-10, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 58, 64, 69, 67, 58, 60, 69, 65}], 
          "NumericalThresholds" -> {0.27946138381958013`, 
           0.18760015815496447`, -0.047500681132078164`, -0.1992218121886253, \
-0.10382879897952078`, -0.009835639037191866, 
           0.09353668615221979, -0.23444887995719907`, -0.1057283468544483}, 
          "LeafValues" -> 
          RawArray["Real32",{0.005811458919197321, -0.021098127588629723`, 
            0.011363424360752106`, -0.0014671141980215907`, \
-0.006630332209169865, -0.021501850336790085`, 0.014420083723962307`, 
            0.010295826941728592`, 
            0.009960362687706947, -0.004014784470200539}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {6, 5}, {7, -6}, {
            8, -7}, {-5, -8}, {9, -9}, {-1, -10}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 69, 58, 55, 56, 58, 67, 69, 56}], 
          "NumericalThresholds" -> {-0.6295681297779082, 
           0.2503384426236153, -0.2403125688433647, -0.1423426494002342, 
           0.15596557408571246`, -0.009835142176598309, \
-0.21226380765438077`, -0.2274900525808334, 0.6819213330745698}, "LeafValues" -> 
          RawArray["Real32",{-0.015664396807551384`, 0.0011701874900609255`, 
            0.014240687713027, -0.02533167414367199, 0.0008575469255447388, 
            0.01162588968873024, -0.015670672059059143`, 
            0.023166578263044357`, -0.0005937902606092393, \
-0.006326279602944851}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {7, 4}, {8, 5}, {
            6, -6}, {-5, -7}, {-2, -8}, {9, -9}, {-4, -10}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 67, 69, 67, 63, 63, 67, 66, 62, 66, 60, 
            63}], "NumericalThresholds" -> {0.03206597827374936, 
           0.353294923901558, -0.2455915659666061, -0.32520350813865656`, \
-1.0076183676719663`, -1.0076183676719663`, -0.3198439478874206, \
-0.19896399229764936`, 
           0.8752754032611848, -0.19782416522502896`, -0.9100273549556731, \
-0.6295675337314605}, "LeafValues" -> 
          RawArray["Real32",{0.08530470728874207, -0.031385790556669235`, 
            0.07283519208431244, -0.03220256417989731, -0.03095909208059311, \
-0.03019534982740879, -0.030257761478424072`, -0.030092623084783554`, \
-0.03006276860833168, -0.030117740854620934`, -0.03009413741528988, \
-0.030071087181568146`, -0.030042072758078575`}], "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, -3}, {4, 5}, {-1, -5}, {-4, 
            8}, {-2, 7}, {-7, 10}, {-6, 9}, {-9, -10}, {-8, 11}, {-11, 
            12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{64, 57, 56, 68, 58, 56, 56, 55, 68, 67, 55}], 
          "NumericalThresholds" -> {0.051945621147751815`, 
           0.21800861507654193`, -0.25524775683879847`, -0.5301915705204009, \
-0.07536275312304495, -0.409465804696083, -0.25524775683879847`, \
-0.38877381384372706`, 
           1.86605179309845, -0.3377746790647506, -0.03677581436932086}, 
          "LeafValues" -> 
          RawArray["Real32",{0.048175446689128876`, 
            0.07854287326335907, -0.030616745352745056`, 
            0.03494417294859886, -0.03035934828221798, -0.03025130182504654, \
-0.0301002636551857, -0.030185597017407417`, -0.03031502105295658, \
-0.030260717496275902`, -0.030051512643694878`, -0.030110204592347145`}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {3, 6}, {-2, 5}, {-1, 
            7}, {-4, -6}, {-3, 8}, {-5, 9}, {-7, -9}, {10, -10}, {-8, 
            11}, {-11, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{65, 63, 69, 60, 65, 65, 56, 69, 65, 66, 58, 
            61, 60}], 
          "NumericalThresholds" -> {-0.24606103450059888`, 
           0.27979727089405065`, -0.18811872601509091`, \
-0.009309822693467138, -0.10572833195328711`, -0.10572776570916174`, 
           0.15596470981836322`, -0.06787918508052825, -0.10572731867432593`, \
-0.19048883765935895`, -0.022098803892731663`, -0.513061612844467, \
-0.009310732595622538}, "LeafValues" -> 
          RawArray["Real32",{0.008690590038895607, 
            0.0176609605550766, -0.02253939025104046, -0.010500341653823853`, 
            0.024187138304114342`, -0.014426784589886665`, 
            0.009599832817912102, -0.0012330464087426662`, \
-0.005670485086739063, -0.007249686401337385, 0.0052380734123289585`, 
            0.011804522946476936`, -0.009200987406075, \
-0.005143855232745409}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 8}, {7, 
            6}, {-6, 12}, {-2, -8}, {9, -9}, {10, 
            11}, {-5, -11}, {-10, -12}, {13, -13}, {-7, -14}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 69, 60, 64, 57, 63, 65, 67, 64}], 
          "NumericalThresholds" -> {-0.6295681297779082, 
           0.5661014318466188, -0.20411685854196546`, -0.9168494641780852, \
-0.4988738149404525, 
           0.27979750931262976`, -0.1057283468544483, -0.25795345008373255`, \
-0.5920865237712859}, "LeafValues" -> 
          RawArray["Real32",{-0.015122519806027412`, -0.0005650652456097305, 
            0.016504598781466484`, 
            0.010864474810659885`, -0.005852256435900927, \
-0.012556588277220726`, 0.0019707269966602325`, 0.003621610812842846, 
            0.025704476982355118`, 0.007347752805799246}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {8, 4}, {-4, 5}, {7, 
            6}, {-6, -7}, {-5, -8}, {-2, 9}, {-9, -10}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 63, 69, 58, 63, 67, 66, 66, 62, 66, 60, 
            64, 63}], 
          "NumericalThresholds" -> {
           0.03206597827374936, -1.0076183676719663`, -0.2455915659666061, \
-0.23054415732622144`, -1.0076183676719663`, -0.3203494548797607, \
-0.19896399229764936`, -0.19723279029130933`, 
           0.8752754032611848, -0.19782416522502896`, -0.9100273549556731, 
           0.15269247442483905`, -0.6295674145221709}, "LeafValues" -> 
          RawArray["Real32",{
            0.05332525074481964, -0.031358957290649414`, \
-0.030139807611703873`, -0.03018987365067005, 
            0.0905812531709671, -0.03025645948946476, -0.030089624226093292`, \
-0.03005826100707054, -0.030081233009696007`, -0.03011425957083702, \
-0.03009112924337387, -0.030067594721913338`, -0.03010057471692562, \
-0.030040834099054337`}], "Children" -> 
          RawArray["Integer16",{{2, 5}, {-1, 3}, {4, 7}, {8, -5}, {-2, 
            6}, {-6, 10}, {-4, 9}, {-3, -9}, {12, -10}, {-7, 11}, {-11, 
            13}, {-8, -13}, {-12, -14}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{64, 57, 56, 66, 67, 56, 56, 55, 68, 68, 55}], 
          "NumericalThresholds" -> {0.051945621147751815`, 
           0.21800861507654193`, -0.2552490681409835, -0.0984634719789028, \
-0.3380467444658279, -0.409465804696083, -0.25524775683879847`, \
-0.38877381384372706`, 
           1.86605179309845, -0.5291711390018462, -0.03677585162222385}, 
          "LeafValues" -> 
          RawArray["Real32",{0.048767123371362686`, 
            0.08514107763767242, -0.030605046078562737`, \
-0.030382875353097916`, 
            0.06116320937871933, -0.030347926542162895`, \
-0.030097611248493195`, -0.030128633603453636`, -0.030305812135338783`, \
-0.03025253862142563, -0.03004940040409565, -0.030094953253865242`}], 
          "Children" -> 
          RawArray["Integer16",{{5, 2}, {3, 6}, {-2, 4}, {-4, -5}, {-1, 
            7}, {-3, 8}, {-6, 9}, {-7, -9}, {10, -10}, {-8, 11}, {-11, -12}}],
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 58, 64, 58, 64, 69, 55, 55, 67}], 
          "NumericalThresholds" -> {0.27946138381958013`, 
           0.18760015815496447`, -0.5920859873294829, -0.3308220654726028, \
-0.04750095307826995, -0.2752211689949035, -0.03677613101899623, \
-0.036776391789317124`, -0.23795041441917417`}, "LeafValues" -> 
          RawArray["Real32",{0.002168070524930954, -0.022620361298322678`, 
            0.010678848251700401`, -0.0031361673027276993`, 
            0.012103828601539135`, -0.023421918973326683`, \
-0.0002460122632328421, -0.0014381890650838614`, 
            0.018187208101153374`, -0.01531254593282938}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {5, 
            6}, {-1, -6}, {-5, 7}, {8, 9}, {-7, -9}, {-8, -10}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 57, 55, 55, 57, 61, 67, 57, 69, 63, 
            57}], "NumericalThresholds" -> {0.36726598441600805`, 
           0.20304237306118014`, -0.13210488855838773`, -0.3887741416692733, \
-0.25581888854503626`, -0.4988738149404525, -0.513062685728073, \
-0.23175803571939466`, 
           0.23826786130666736`, -0.17931485176086423`, \
-0.24996861070394513`, -0.4988747686147689}, "LeafValues" -> 
          RawArray["Real32",{
            0.002226434648036957, -0.003375321626663208, \
-0.010504274629056454`, 0.0008840652299113572, -0.02486731857061386, 
            0.026403995230793953`, -0.013043389655649662`, 
            0.00849233940243721, 0.006933660712093115, 0.006977246142923832, 
            0.02388109639286995, -0.0037515449803322554`, 
            0.016415191814303398`}], "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 4}, {6, 5}, {9, -5}, {-4, -6}, {
            7, -7}, {12, 11}, {-2, 
            10}, {-3, -10}, {-9, -11}, {-8, -12}, {-1, -13}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 64, 68, 61, 67, 63, 66, 67, 66, 62, 66, 
            60, 61, 63, 69}], 
          "NumericalThresholds" -> {
           0.03206597827374936, -0.6034899055957793, -0.007178284460678696, \
-0.513061612844467, -0.2877907454967498, -1.0076183676719663`, \
-0.19963497668504712`, -0.3203494548797607, -0.19741514325141904`, 
           
           0.8752754032611848, -0.19782416522502896`, -0.9100273549556731, \
-0.513061612844467, -0.6295674145221709, -0.24392297118902204`}, "LeafValues" -> 
          RawArray[
            "Real32",{-0.030226215720176697`, -0.031316183507442474`, \
-0.030121762305498123`, -0.031455036252737045`, 0.09370536357164383, 
            0.06307226419448853, -0.03025318682193756, -0.03005877695977688, \
-0.0300868209451437, -0.030050907284021378`, -0.030122434720396996`, \
-0.030089348554611206`, -0.030065329745411873`, -0.0300784632563591, \
-0.03003956377506256, -0.030046340078115463`}], "Children" -> 
          RawArray["Integer16",{{2, 6}, {7, 3}, {4, -4}, {9, 
            5}, {-5, -6}, {-2, 8}, {-1, 10}, {-7, 11}, {-3, -10}, {
            13, -11}, {-9, 12}, {-12, 14}, {15, -14}, {-13, -15}, {-8, -16}}],
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{64, 57, 56, 12, 66, 56, 56, 55, 67, 68, 68}], 
          "NumericalThresholds" -> {0.051945621147751815`, 
           0.21800861507654193`, -0.2552490681409835, 
           0.02351276203989983, -0.20164695382118222`, -0.409465804696083, \
-0.25524775683879847`, -0.38877381384372706`, -0.3380467444658279, 
           1.86605179309845, -0.5301915705204009}, "LeafValues" -> 
          RawArray["Real32",{0.04781489074230194, 
            0.07866840809583664, -0.030579183250665665`, \
-0.030433185398578644`, 
            0.061800841242074966`, -0.03034345619380474, \
-0.03009476326406002, -0.030236704275012016`, -0.030301125720143318`, \
-0.03012842684984207, -0.030248427763581276`, -0.03005254827439785}], 
          "Children" -> 
          RawArray["Integer16",{{5, 2}, {3, 6}, {-2, 4}, {-4, -5}, {-1, 
            7}, {-3, 8}, {-6, 9}, {-7, -9}, {-8, 10}, {11, -11}, {-10, -12}}],
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 58, 59, 57, 58, 63, 58, 60, 58, 61, 64, 
            57, 59}], 
          "NumericalThresholds" -> {
           0.27946138381958013`, -0.07536391913890837, \
-0.011325109284371136`, -0.13210488855838773`, -0.2305457219481468, \
-0.24996861070394513`, -0.009834559634327887, -0.9100262820720671, \
-0.3308220654726028, -0.513062685728073, -0.047500681132078164`, \
-0.5384941399097442, 0.21132014691829684`}, "LeafValues" -> 
          RawArray["Real32",{-0.014303174801170826`, -0.020012160763144493`, 
            0.007204762659966946, 0.010219567455351353`, 
            0.012173307128250599`, -0.013631973415613174`, \
-0.00853450782597065, 0.0019406364299356937`, -0.021302051842212677`, 
            0.011476786807179451`, 
            0.004058214835822582, -0.0013083475641906261`, 
            0.019997525960206985`, -0.010865462943911552`}], "Children" -> 
          RawArray["Integer16",{{2, 11}, {3, 4}, {8, 5}, {12, 7}, {-4, 
            6}, {-6, 10}, {-5, 13}, {
            9, -9}, {-1, -10}, {-7, -11}, {-2, -12}, {-3, -13}, {-8, -14}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 69, 60, 64, 57, 63, 65, 63}], 
          "NumericalThresholds" -> {-0.6295681297779082, 
           0.5661014318466188, -0.20411685854196546`, -0.9168494641780852, \
-0.4988738149404525, 0.27979750931262976`, -0.1057283468544483, 
           0.15804850310087207`}, "LeafValues" -> 
          RawArray["Real32",{-0.014452245086431503`, 0.016240082681179047`, 
            0.015820980072021484`, 
            0.010747176595032215`, -0.00548979640007019, \
-0.011985273100435734`, 0.0017610432114452124`, 0.003470874158665538, 
            0.0017779282061383128`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {8, 4}, {-4, 5}, {7, 
            6}, {-6, -7}, {-5, -8}, {-2, -9}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 64, 68, 61, 67, 63, 66, 67, 66, 62, 66, 
            60, 61, 63, 69}], 
          "NumericalThresholds" -> {
           0.03206597827374936, -0.6034899055957793, -0.007178284460678696, \
-0.513061612844467, -0.30168217420578, -1.0076183676719663`, \
-0.19963497668504712`, -0.3198439478874206, -0.19741514325141904`, 
           0.8752754032611848, -0.19782416522502896`, -0.9100273549556731, \
-0.513061612844467, -0.6295674145221709, -0.24392297118902204`}, "LeafValues" -> 
          RawArray[
            "Real32",{-0.030219528824090958`, -0.03129146248102188, \
-0.0301181823015213, -0.03142532706260681, 0.08513294160366058, 
            0.057547006756067276`, -0.03024311736226082, \
-0.030057229101657867`, -0.030084040015935898`, -0.030049394816160202`, \
-0.030118785798549652`, -0.030086548998951912`, -0.030063726007938385`, \
-0.03007601946592331, -0.030038421973586082`, -0.030045004561543465`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 6}, {7, 3}, {4, -4}, {9, 
            5}, {-5, -6}, {-2, 8}, {-1, 10}, {-7, 11}, {-3, -10}, {
            13, -11}, {-9, 12}, {-12, 14}, {15, -14}, {-13, -15}, {-8, -16}}],
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 56, 60, 63, 68, 58, 60, 61, 67, 61, 65, 
            59}], "NumericalThresholds" -> {
           0.21800861507654193`, -0.35659426450729365`, \
-0.009311229456216095, -0.24996782094240186`, 
           1.86605179309845, -0.009835074655711649, -0.9188081324100493, \
-1.0000000180025095`*^-35, -0.3380467444658279, 
           0.05358554981648923, -0.3996447771787643, -0.02356522716581821}, 
          "LeafValues" -> 
          RawArray["Real32",{0.07171060889959335, -0.03034163825213909, 
            0.12797585129737854`, -0.030229752883315086`, \
-0.030507713556289673`, -0.03059048391878605, -0.030481066554784775`, \
-0.030100900679826736`, -0.0302230566740036, -0.030067188665270805`, \
-0.030156448483467102`, -0.030035490170121193`, -0.030060600489377975`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 5}, {-3, -5}, {8, -6}, {
            7, -7}, {-2, 10}, {9, -9}, {-4, -10}, {11, -11}, {-8, 
            12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{65, 63, 69, 60, 58, 58, 66, 61, 56, 69, 65, 
            66, 58}], 
          "NumericalThresholds" -> {-0.24606103450059888`, 
           0.27979727089405065`, -0.18811872601509091`, \
-0.009309822693467138, -0.23054396361112592`, -0.23054433614015576`, \
-0.19430700689554212`, -0.5130618512630462, 
           0.15596560388803485`, -0.06787918508052825, -0.10572731867432593`, \
-0.19048883765935895`, -0.07536391913890837}, "LeafValues" -> 
          RawArray["Real32",{
            0.008279508911073208, -0.001836008857935667, \
-0.02165386639535427, -0.010158637538552284`, 0.023171281442046165`, 
            0.008489519357681274, -0.015255178324878216`, 
            0.009639850817620754, -0.02209053374826908, \
-0.0074054826982319355`, -0.005596492905169725, -0.009787912480533123, 
            0.005154251586645842, 0.008679294027388096}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 10}, {6, -6}, {
            7, -7}, {8, 9}, {-2, -9}, {-8, -10}, {11, -11}, {12, 
            13}, {-5, -13}, {-12, -14}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{65, 63, 69, 60, 60, 66, 59, 66, 63, 57, 63, 
            58, 59}], 
          "NumericalThresholds" -> {-0.24606103450059888`, 
           0.27979727089405065`, -0.18811872601509091`, 0.12799359858036044`, 
           0.5991612970829011, -0.18501072376966474`, 
           0.3675516694784165, -0.1969959735870361, -0.24996823817491529`, \
-0.49887423217296595`, -0.24996789544820783`, -0.009835639037191866, 
           0.3675504475831986}, "LeafValues" -> 
          RawArray["Real32",{-0.009893776848912239, 0.01928294263780117, 
            0.022259173914790154`, 
            0.010436248034238815`, -0.026514962315559387`, 
            0.006198814604431391, -0.0029314239509403706`, \
-0.011569146998226643`, 0.0021154291462153196`, -0.008876807987689972, 
            0.013377275317907333`, 
            0.008437923155725002, -0.011940578930079937`, \
-0.015053195878863335`}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {7, 5}, {
            6, -6}, {-5, -7}, {8, -8}, {9, 11}, {-2, 10}, {-10, -11}, {13, 
            12}, {-12, -13}, {-9, -14}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 64, 68, 68, 69, 63, 63, 66, 67, 62, 66, 
            60, 61, 63, 69}], 
          "NumericalThresholds" -> {
           0.03206597827374936, -0.6034899055957793, -0.007178284460678696, \
-0.041415886953473084`, -0.2455915659666061, -1.0076183676719663`, \
-0.2499687150120735, -0.19963497668504712`, -0.3203494548797607, 
           0.8752754032611848, -0.19782416522502896`, -0.9100273549556731, \
-0.513061612844467, -0.6295675337314605, -0.24392297118902204`}, "LeafValues" -> 
          RawArray["Real32",{-0.03021361492574215, -0.03125080093741417, 
            0.06916246563196182, -0.03138502687215805, 
            0.0918867439031601, -0.03122236765921116, -0.03023826889693737, \
-0.030109133571386337`, -0.030055474489927292`, -0.030081233009696007`, \
-0.030115248635411263`, -0.030083557590842247`, -0.0300633292645216, \
-0.030073534697294235`, -0.03003711625933647, -0.030043624341487885`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 6}, {8, 3}, {4, -4}, {5, -5}, {-3, 
            7}, {-2, 9}, {-6, -8}, {-1, 10}, {-7, 11}, {13, -11}, {-10, 
            12}, {-12, 14}, {15, -14}, {-13, -15}, {-9, -16}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 56, 60, 63, 68, 58, 60, 61, 67, 61, 65, 
            59}], "NumericalThresholds" -> {
           0.21800861507654193`, -0.35659426450729365`, \
-0.009311229456216095, -0.24996782094240186`, 
           1.86605179309845, -0.009835074655711649, -0.9188081324100493, 
           1.0000000180025095`*^-35, -0.3380467444658279, 
           0.05358554981648923, -0.3996447771787643, -0.02356522716581821}, 
          "LeafValues" -> 
          RawArray["Real32",{0.0669141337275505, -0.03033052198588848, 
            0.11088341474533081`, -0.030222872272133827`, \
-0.03049207106232643, -0.03057238645851612, -0.03046696074306965, \
-0.030097872018814087`, -0.030216947197914124`, -0.0300651453435421, \
-0.0301514845341444, -0.030034150928258896`, -0.030059034004807472`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 5}, {-3, -5}, {8, -6}, {
            7, -7}, {-2, 10}, {9, -9}, {-4, -10}, {11, -11}, {-8, 
            12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 62, 58, 57, 58, 64, 56, 68, 68, 65, 57, 
            58}], "NumericalThresholds" -> {
           0.27385891973972326`, -0.06097370013594627, -0.07536391913890837, \
-0.13210488855838773`, -0.009834559634327887, 0.13240607827901843`, 
           0.15596411377191546`, -0.5230205059051513, -0.5268073678016661, \
-0.10572725906968115`, -0.5384941399097442, 0.18759957700967791`}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.0092991404235363, -0.018069153651595116`, 
            0.002137110335752368, 0.0074460976757109165`, 
            0.012662344612181187`, -0.011026166379451752`, \
-0.01217675395309925, 0.004768341779708862, 
            0.008520174771547318, -0.015770679339766502`, \
-0.00424440111964941, 0.019389305263757706`, 0.00025686289882287383`}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {6, 4}, {11, 5}, {-5, 12}, {
            7, -7}, {-1, 8}, {9, 
            10}, {-8, -10}, {-9, -11}, {-4, -12}, {-6, -13}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 55, 57, 58, 69, 55, 67, 59, 56, 57, 
            69}], "NumericalThresholds" -> {0.36726598441600805`, 
           0.21800762414932254`, -0.3887741416692733, -0.13210488855838773`, \
-0.0753631331026554, -0.22862268984317777`, -0.25581888854503626`, \
-0.23175803571939466`, 0.36755006015300756`, 0.15596530586481097`, 
           0.23826786130666736`, -0.17931485176086423`}, "LeafValues" -> 
          RawArray["Real32",{
            0.011185741052031517`, -0.0036275351885706186`, \
-0.009848127141594887, -0.026163557544350624`, 
            0.0010646468726918101`, -0.024194521829485893`, \
-0.0007085620891302824, 0.02306005358695984, 
            0.006675338838249445, -0.0033302609808743, 0.006457683630287647, 
            0.006644440349191427, 0.02298956923186779}], "Children" -> 
          RawArray["Integer16",{{2, 8}, {4, 3}, {11, -4}, {5, 7}, {9, 
            6}, {-6, -7}, {-5, -8}, {-2, 12}, {-1, 
            10}, {-10, -11}, {-3, -12}, {-9, -13}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{68, 68, 65, 56, 63, 63, 63, 61, 66, 66, 66, 
            35, 60, 64, 67}], 
          "NumericalThresholds" -> {-0.021042029373347756`, \
-0.041415886953473084`, -0.10572828352451323`, 
           0.15596465021371844`, -1.0076183676719663`, -0.6295689046382903, \
-0.25856061279773707`, -0.513061612844467, -0.1991614997386932, \
-0.19944892823696134`, -0.19741514325141904`, 
           0.03206597827374936, -0.9100268185138701, 
           0.4153705686330796, -0.16323752701282498`}, "LeafValues" -> 
          RawArray["Real32",{0.06995273381471634, -0.03162608668208122, 
            0.08369000256061554, -0.03150150924921036, -0.03019062429666519, \
-0.030301107093691826`, -0.030086755752563477`, -0.030078424140810966`, \
-0.03022591769695282, -0.030099062249064445`, -0.03008555993437767, \
-0.03004460036754608, -0.030052529647946358`, -0.03005049005150795, \
-0.03006330132484436, -0.030037686228752136`}], "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -3}, {4, 6}, {-1, 10}, {-2, 
            7}, {-4, 8}, {-6, 13}, {11, 9}, {-9, -10}, {-5, 
            12}, {-7, -12}, {-11, -13}, {-8, 14}, {15, -15}, {-14, -16}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 56, 60, 63, 68, 58, 60, 61, 67, 61, 65, 
            59}], "NumericalThresholds" -> {
           0.21800861507654193`, -0.35659426450729365`, \
-0.009311229456216095, -0.24996782094240186`, 
           1.86605179309845, -0.009835074655711649, -0.9188081324100493, \
-1.0000000180025095`*^-35, -0.3380467444658279, 
           0.05358554981648923, -0.3996447771787643, -0.02356522716581821}, 
          "LeafValues" -> 
          RawArray["Real32",{0.0626668781042099, -0.03032669983804226, 
            0.0986359566450119, -0.0302161555737257, -0.030469432473182678`, \
-0.03055545873939991, -0.030450327321887016`, -0.030095171183347702`, \
-0.030211154371500015`, -0.03006310947239399, -0.03014800138771534, \
-0.030033167451620102`, -0.030057203024625778`}], "Children" -> 
          RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 5}, {-3, -5}, {8, -6}, {
            7, -7}, {-2, 10}, {9, -9}, {-4, -10}, {11, -11}, {-8, 
            12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{65, 63, 12, 60, 68, 59, 66, 63, 61, 66, 63, 
            55, 68}], 
          "NumericalThresholds" -> {-0.24606103450059888`, 
           0.27979727089405065`, 1.0000000180025095`*^-35, 
           0.12799359858036044`, -0.44955414533615107`, 
           0.3675516694784165, -0.1969959735870361, -0.24996823817491529`, \
-0.5130616724491118, -0.18867564201354978`, -0.2499674931168556, \
-0.03677659854292869, 0.10732876136898996`}, "LeafValues" -> 
          RawArray["Real32",{
            0.010133186355233192`, -0.019544705748558044`, \
-0.02064105123281479, -0.007934700697660446, 
            0.020195264369249344`, -0.0057326266542077065`, 
            0.012099114246666431`, 0.013742033392190933`, 
            0.007312994450330734, -0.013458441942930222`, \
-0.01037586759775877, -0.007798238657414913, 0.0055723972618579865`, 
            0.00799400545656681}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {6, 5}, {-5, 13}, {
            7, -7}, {8, 10}, {-2, 9}, {-9, -10}, {11, 
            12}, {-8, -12}, {-11, -13}, {-6, -14}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 55, 57, 55, 57, 60, 61, 55, 57, 65, 
            12}], "NumericalThresholds" -> {0.36726598441600805`, 
           0.20304237306118014`, -0.3887741416692733, -0.13210488855838773`, \
-0.25581888854503626`, -0.49887372553348536`, 
           0.09353566542267801, -0.5130625069141387, -0.036776391789317124`, 
           0.23826786130666736`, -0.10572742298245429`, 0.01746174227446318}, 
          "LeafValues" -> 
          RawArray["Real32",{0.0026740599423646927`, 
            0.00943179801106453, -0.009599455632269382, \
-0.023812737315893173`, 0.0007993587641976774, 
            0.025113653391599655`, -0.01357872411608696, 
            0.00034128816332668066`, 
            0.0015276133781298995`, -0.0112463952973485, 0.006426454056054354,
             0.01388730201870203, 0.022434817627072334`}], "Children" -> 
          RawArray["Integer16",{{2, 7}, {4, 3}, {10, -4}, {6, 5}, {-5, -6}, {
            8, -7}, {12, -8}, {11, 
            9}, {-9, -10}, {-3, -11}, {-1, -12}, {-2, -13}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 64, 68, 68, 66, 63, 67, 66, 66, 62, 60, 
            60, 63, 67, 61}], 
          "NumericalThresholds" -> {
           0.03206597827374936, -0.6034899055957793, -0.007178284460678696, \
-0.041415886953473084`, -0.19741514325141904`, -0.8185935616493224, 
           0.07591693103313447, -0.19963497668504712`, -0.19782416522502896`, 
           0.8752751648426057, -0.9100273549556731, -0.009310938417911528, \
-0.6295674145221709, 0.353294923901558, -0.513061612844467}, "LeafValues" -> 
          RawArray["Real32",{-0.030204931274056435`, -0.031133802607655525`, 
            0.06481192260980606, -0.03134216368198395, 
            0.07925579696893692, -0.030078640207648277`, \
-0.030093051493167877`, -0.03114381991326809, -0.030070383101701736`, \
-0.030078886076807976`, -0.030103318393230438`, -0.030055515468120575`, \
-0.03004087693989277, -0.030034078285098076`, -0.030046137049794197`, \
-0.030054332688450813`}], "Children" -> 
          RawArray["Integer16",{{2, 6}, {8, 3}, {4, -4}, {5, -5}, {-3, 
            7}, {-2, 9}, {-6, -8}, {-1, 10}, {-7, 11}, {12, -11}, {-10, 
            13}, {-9, 15}, {-12, 14}, {-14, -15}, {-13, -16}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 56, 60, 63, 68, 58, 60, 61, 67, 61, 65, 
            59}], "NumericalThresholds" -> {
           0.21800861507654193`, -0.35659426450729365`, \
-0.009311229456216095, -0.24996782094240186`, 
           1.86605179309845, -0.009835074655711649, -0.9188081324100493, 
           1.0000000180025095`*^-35, -0.3380467444658279, 
           0.05358554981648923, -0.3996447771787643, -0.02356522716581821}, 
          "LeafValues" -> 
          RawArray["Real32",{0.05848333239555359, -0.030321640893816948`, 
            0.08898469805717468, -0.030210250988602638`, \
-0.030445925891399384`, -0.030540917068719864`, -0.030438510701060295`, \
-0.030092362314462662`, -0.030204564332962036`, -0.030061274766921997`, \
-0.03014504723250866, -0.03003203123807907, -0.030055370181798935`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 5}, {-3, -5}, {8, -6}, {
            7, -7}, {-2, 10}, {9, -9}, {-4, -10}, {11, -11}, {-8, 
            12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 62, 58, 64, 57, 56, 65, 63, 62, 68, 68, 
            67, 63}], 
          "NumericalThresholds" -> {
           0.27385891973972326`, -0.06097304262220859, -0.07536391913890837, 
           0.13240607827901843`, -0.2835401445627212, 
           0.32777599990367895`, -0.10572833195328711`, 0.2797976285219193, 
           0.8752743303775788, -0.5207232534885405, -0.5169477760791777, \
-0.32788425683975214`, 0.1306702569127083}, "LeafValues" -> 
          RawArray["Real32",{0.02105252631008625, -0.017578715458512306`, 
            0.002174973953515291, 
            0.013764760456979275`, -0.011910507455468178`, 
            0.01390902604907751, -0.010013395920395851`, \
-0.014725195243954659`, -0.005112769547849894, 0.0029098333325237036`, 
            0.015264914371073246`, -0.0028804622124880552`, 
            0.0010781444143503904`, -0.0014507798478007317`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, 5}, {7, -5}, {-4, 6}, {
            13, -7}, {8, 10}, {9, -9}, {-1, -10}, {12, 
            11}, {-11, -12}, {-8, -13}, {-6, -14}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 69, 60, 55, 62, 63, 64, 4}], 
          "NumericalThresholds" -> {-0.6295681297779082, 
           0.5661014318466188, -0.20411685854196546`, -0.03677575476467609, \
-0.40220184624195093`, -0.24996875971555707`, 0.13240607827901843`, 
           1.0000000180025095`*^-35}, "LeafValues" -> 
          RawArray["Real32",{-0.013607515022158623`, 0.014233605936169624`, 
            0.015085996128618717`, -0.008361181244254112, \
-0.010388175956904888`, 0.017481502145528793`, -0.0004431375418789685, 
            0.020174961537122726`, -0.008742300793528557}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {7, 4}, {5, -5}, {-4, 
            6}, {-6, -7}, {8, -8}, {-2, -9}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 61, 68, 68, 61, 63, 63, 65, 66, 64, 66, 
            60, 62, 63, 69, 67, 57}], 
          "NumericalThresholds" -> {
           0.03206597827374936, -0.513061612844467, -0.021042029373347756`, \
-0.041415886953473084`, -0.5130614936351775, -1.0076183676719663`, \
-0.8185935616493224, -0.10572710260748862`, -0.19741514325141904`, 
           0.13611683994531634`, -0.19782416522502896`, -0.9100273549556731, 
           0.8752754032611848, -0.6295674145221709, -0.24729322642087934`, 
           0.353294923901558, -0.4988748282194137}, "LeafValues" -> 
          RawArray["Real32",{-0.030129075050354004`, -0.03111104667186737, 
            0.10490452498197556`, -0.031999621540308, 
            0.07332548499107361, -0.030141910538077354`, \
-0.030054956674575806`, -0.030090073123574257`, -0.03078756481409073, \
-0.030050119385123253`, -0.030150577425956726`, -0.03007655218243599, \
-0.030053943395614624`, -0.030067088082432747`, -0.030033059418201447`, \
-0.030039459466934204`, -0.03004482202231884, -0.030033845454454422`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 7}, {9, 3}, {4, 6}, {5, -5}, {-3, 8}, {-4,
             10}, {-2, 11}, {-6, -9}, {-1, 13}, {-7, -11}, {-8, 12}, {-12, 
            14}, {15, -14}, {-13, 16}, {-10, 17}, {-15, -17}, {-16, -18}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 56, 60, 57, 68, 58, 60, 61, 67, 61, 65, 
            59}], "NumericalThresholds" -> {
           0.21800861507654193`, -0.35659426450729365`, \
-0.009311229456216095, -0.059014666825532906`, 
           1.86605179309845, -0.009835074655711649, -0.9188081324100493, 
           1.0000000180025095`*^-35, -0.3380467444658279, 
           0.05358554981648923, -0.3996447771787643, -0.02356522716581821}, 
          "LeafValues" -> 
          RawArray["Real32",{0.05511363223195076, -0.030309781432151794`, 
            0.08301939815282822, -0.030204202979803085`, \
-0.030442392453551292`, -0.030528536066412926`, -0.030428892001509666`, \
-0.030089613050222397`, -0.030200058594346046`, -0.03005938045680523, \
-0.030141783878207207`, -0.030031004920601845`, -0.03005378134548664}], 
          "Children" -> 
          RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 5}, {-3, -5}, {8, -6}, {
            7, -7}, {-2, 10}, {9, -9}, {-4, -10}, {11, -11}, {-8, 
            12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 57, 55, 55, 60, 68, 58, 69, 59, 65, 
            57}], "NumericalThresholds" -> {0.36726598441600805`, 
           0.20304237306118014`, -0.13210488855838773`, \
-0.25581888854503626`, -0.3887741416692733, -0.9100266396999358, \
-0.12043159082531928`, -0.0753631331026554, -0.22862268984317777`, 
           0.3675502091646195, -0.10572833195328711`, 0.23826786130666736`}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.009336759336292744, -0.02189827337861061, 
            0.009655704721808434, 
            0.0003197666665073484, -0.025034280493855476`, 
            0.02210569754242897, 
            0.0055903480388224125`, -0.014162465929985046`, 
            0.021339958533644676`, 0.0003900609153788537, 
            0.008836638182401657, -0.0016218448290601373`, \
-0.00538798188790679}], "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 5}, {8, 4}, {-4, -5}, {
            12, -6}, {-2, 7}, {-7, -8}, {10, 9}, {-9, -10}, {-1, 
            11}, {-11, -12}, {-3, -13}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 55, 57, 55, 58, 69, 67, 63, 67, 57, 
            69}], "NumericalThresholds" -> {0.36726598441600805`, 
           0.21800762414932254`, -0.3887741416692733, -0.13210488855838773`, \
-0.25581888854503626`, -0.0753631331026554, -0.22862268984317777`, \
-0.23175803571939466`, -0.24996861070394513`, -0.32520350813865656`, 
           0.23826786130666736`, -0.17931485176086423`}, "LeafValues" -> 
          RawArray["Real32",{
            0.009712728671729565, -0.0036993094254285097`, \
-0.009245731867849827, -0.024814914911985397`, 0.00046750454930588603`, 
            0.02202649973332882, -0.02305527962744236, \
-0.00010777387069538236`, 0.006521562580019236, -0.004779389593750238, 
            0.006377073470503092, 0.006078907288610935, 0.02225026860833168}],
           "Children" -> 
          RawArray["Integer16",{{2, 8}, {4, 3}, {11, -4}, {6, 5}, {-5, -6}, {
            9, 7}, {-7, -8}, {-2, 12}, {-1, 
            10}, {-10, -11}, {-3, -12}, {-9, -13}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{68, 68, 65, 62, 63, 63, 63, 61, 66, 66, 66, 
            67, 60, 66, 59}], 
          "NumericalThresholds" -> {-0.021042029373347756`, \
-0.041415886953473084`, -0.10572828352451323`, 
           0.8752745091915132, -1.0076183676719663`, -0.629568725824356, \
-0.25856061279773707`, -0.513061612844467, -0.1991614997386932, \
-0.19800319522619245`, -0.19741514325141904`, 
           0.353294923901558, -0.9100268781185149, -0.17844413220882413`, 
           0.35283870995044714`}, "LeafValues" -> 
          RawArray["Real32",{-0.030159462243318558`, -0.0315127968788147, 
            0.06852424144744873, -0.031275004148483276`, 
            0.06319159269332886, -0.030280740931630135`, \
-0.030082672834396362`, -0.030073465779423714`, -0.03023182973265648, \
-0.03009391389787197, -0.03005126118659973, -0.03003990277647972, \
-0.03008771687746048, -0.03005746752023697, -0.030032625421881676`, \
-0.030049510300159454`}], "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -3}, {4, 6}, {10, -5}, {-2, 
            7}, {-4, 8}, {-6, 13}, {11, 9}, {-9, -10}, {-1, 
            12}, {-7, -12}, {-11, -13}, {-8, 14}, {-14, 15}, {-15, -16}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 56, 60, 57, 68, 58, 60, 61, 67, 61, 65, 
            59}], "NumericalThresholds" -> {
           0.21800861507654193`, -0.35659426450729365`, \
-0.009311229456216095, -0.059014666825532906`, 
           1.86605179309845, -0.009835074655711649, -0.9188081324100493, 
           1.0000000180025095`*^-35, -0.3380467444658279, 
           0.05358554981648923, -0.3996447771787643, -0.02356522716581821}, 
          "LeafValues" -> 
          RawArray["Real32",{0.052300307899713516`, -0.03030276857316494, 
            0.07565034180879593, -0.03019835241138935, \
-0.030424190685153008`, -0.030511101707816124`, -0.030412517488002777`, \
-0.03008684143424034, -0.030193142592906952`, -0.0300575140863657, \
-0.030138500034809113`, -0.030030151829123497`, -0.030052131041884422`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 5}, {-3, -5}, {8, -6}, {
            7, -7}, {-2, 10}, {9, -9}, {-4, -10}, {11, -11}, {-8, 
            12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 66, 65, 64, 62, 65, 55, 66, 57, 55}], 
          "NumericalThresholds" -> {
           0.27946138381958013`, -0.0984634719789028, -0.24606103450059888`, 
           0.41537036001682287`, -0.06097304262220859, -0.10572830960154532`, \
-0.03677575476467609, -0.18399276584386823`, -0.4988741129636764, \
-0.1423426494002342}, "LeafValues" -> 
          RawArray["Real32",{-0.017722254619002342`, -0.01673826202750206, 
            0.014224010519683361`, 0.012307367287576199`, 
            0.004266106057912111, 
            0.001576284528709948, -0.00042816338827833533`, 
            0.013113528490066528`, -0.013667658902704716`, 
            0.010914710350334644`, -0.012592541053891182`}], "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -3}, {4, 6}, {-1, -5}, {-2, -6}, {
            9, 7}, {8, -8}, {-7, -9}, {-4, 10}, {-10, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 64, 58, 69, 57, 59, 57, 58}], 
          "NumericalThresholds" -> {-0.6295682489871978, -0.91684952378273, \
-0.3308220654726028, 0.2503384426236153, 0.20304237306118014`, 
           0.35283868014812475`, -0.13210488855838773`, -0.3308230191469192}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.0160972960293293, 0.012445601634681225`, 
            0.00015580528997816145`, -0.0014913321938365698`, 
            0.011858465149998665`, -0.002141461009159684, \
-0.02298600785434246, 0.010300691239535809`, 0.022540247067809105`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, 3}, {8, 4}, {5, -5}, {7, 
            6}, {-6, -7}, {-4, -8}, {-3, -9}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{68, 68, 65, 56, 63, 63, 63, 61, 66, 66, 66, 
            35, 60, 64, 67}], 
          "NumericalThresholds" -> {-0.021042029373347756`, \
-0.041415886953473084`, -0.10572828352451323`, 
           0.15596465021371844`, -1.0076183676719663`, -0.629568725824356, \
-0.25856061279773707`, -0.513061612844467, -0.1991614997386932, \
-0.19944892823696134`, -0.19741514325141904`, 
           0.03206597827374936, -0.9100268185138701, 
           0.4153705686330796, -0.1694391071796417}, "LeafValues" -> 
          RawArray["Real32",{0.058584753423929214`, -0.031478919088840485`, 
            0.06420345604419708, -0.031249988824129105`, \
-0.030188383534550667`, -0.030273456126451492`, -0.03008025698363781, \
-0.030068976804614067`, -0.030225086957216263`, -0.030091144144535065`, \
-0.030080057680606842`, -0.030038751661777496`, -0.030046451836824417`, \
-0.03004555031657219, -0.03005600906908512, -0.030033482238650322`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -3}, {4, 6}, {-1, 10}, {-2, 
            7}, {-4, 8}, {-6, 13}, {11, 9}, {-9, -10}, {-5, 
            12}, {-7, -12}, {-11, -13}, {-8, 14}, {15, -15}, {-14, -16}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{64, 57, 67, 56, 67, 56, 56, 55, 68, 68, 55}], 
          "NumericalThresholds" -> {0.051945621147751815`, 
           0.21800861507654193`, -0.3380467444658279, -0.35659426450729365`, 
           0.4105451703071595, -0.25524775683879847`, -0.409465804696083, \
-0.38877381384372706`, 
           1.86605179309845, -0.5291711390018462, -0.03677585162222385}, 
          "LeafValues" -> 
          RawArray["Real32",{0.048956505954265594`, 
            0.060107018798589706`, -0.03047320619225502, \
-0.030340049415826797`, -0.030383409932255745`, 
            0.05338529124855995, -0.030109688639640808`, \
-0.030076855793595314`, -0.030251074582338333`, -0.030205830931663513`, \
-0.030043892562389374`, -0.030081726610660553`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {4, 7}, {-1, 6}, {-2, 
            5}, {-5, -6}, {-4, 9}, {-3, 8}, {-8, -9}, {10, -10}, {-7, 
            11}, {-11, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 66, 65, 64, 58, 64, 66, 62, 64, 68}], 
          "NumericalThresholds" -> {
           0.27946138381958013`, -0.0984634719789028, -0.24606103450059888`, 
           0.41537036001682287`, -0.009835639037191866, -0.6034907400608062, \
-0.18415424972772595`, -0.4022012501955032, -0.6034905016422271, \
-0.525403469800949}, "LeafValues" -> 
          RawArray["Real32",{-0.017288006842136383`, -0.0007823088089935482, 
            0.013758507557213306`, 0.018255850300192833`, 
            0.004143234342336655, -0.018589777871966362`, \
-0.013378694653511047`, 0.009313570335507393, -0.009898298420011997, 
            0.011052229441702366`, -0.0015458338893949986`}], "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -3}, {4, 6}, {-1, -5}, {-2, -6}, {
            7, 9}, {-4, 8}, {-8, -9}, {-7, 10}, {-10, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 69, 60, 55, 62, 63, 64, 4}], 
          "NumericalThresholds" -> {-0.6295681297779082, 
           0.5661014318466188, -0.20411685854196546`, -0.03677575476467609, \
-0.40220184624195093`, -0.24996875971555707`, 0.13240607827901843`, 
           1.0000000180025095`*^-35}, "LeafValues" -> 
          RawArray["Real32",{-0.012534450739622116`, 0.01352524384856224, 
            0.014249988831579685`, -0.008111226372420788, \
-0.009850660338997841, 0.016753079369664192`, -0.0003412287915125489, 
            0.019610723480582237`, -0.009091057814657688}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {7, 4}, {5, -5}, {-4, 
            6}, {-6, -7}, {8, -8}, {-2, -9}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 64, 68, 66, 67, 58, 63, 63, 66, 62, 66, 
            60, 60, 63, 61, 67}], 
          "NumericalThresholds" -> {
           0.03206597827374936, -0.6034899055957793, -0.007178284460678696, 
           0.425636500120163, -0.32520350813865656`, -0.23054417222738263`, \
-0.25855948030948633`, -0.8185935616493224, -0.19963497668504712`, 
           0.8752751648426057, -0.19782416522502896`, -0.9100273549556731, \
-0.009310938417911528, -0.6295674145221709, -0.513061612844467, 
           0.353294923901558}, "LeafValues" -> 
          RawArray["Real32",{-0.030204152688384056`, -0.031029555946588516`, 
            0.015688715502619743`, -0.031229982152581215`, 
            0.07500660419464111, -0.034249864518642426`, 
            0.10626289248466492`, -0.030105458572506905`, \
-0.030083931982517242`, -0.030065197497606277`, -0.03010580688714981, \
-0.03007011115550995, -0.030049605295062065`, -0.03003663383424282, \
-0.03003089502453804, -0.030050525441765785`, -0.03004218265414238}], 
          "Children" -> 
          RawArray["Integer16",{{2, 8}, {9, 3}, {4, -4}, {5, -5}, {6, 
            7}, {-3, -7}, {-6, -8}, {-2, 11}, {-1, 10}, {13, -11}, {-9, 
            12}, {-12, 14}, {-10, 15}, {-13, 16}, {-14, -16}, {-15, -17}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 61, 66, 68, 65, 56, 58, 55, 60, 67, 61, 
            68, 65, 60, 59}], 
          "NumericalThresholds" -> {
           0.21800861507654193`, -0.5130616724491118, -0.19715302437543866`, 
           1.86605179309845, -0.8721500933170317, -0.35659500956535334`, \
-0.009835074655711649, -0.03677574731409549, -0.9188081324100493, \
-0.3380467444658279, 
           0.05358554981648923, -0.5293045639991759, -0.3996447771787643, \
-0.009311229456216095, -0.02356522716581821}, "LeafValues" -> 
          RawArray["Real32",{-0.03020342066884041, -0.030282434076070786`, 
            0.07191538065671921, 0.04252655431628227, 
            0.06205148994922638, -0.032079774886369705`, \
-0.030260836705565453`, -0.030395114794373512`, -0.030328601598739624`, \
-0.03008217178285122, -0.030103761702775955`, -0.030131574720144272`, \
-0.030065884813666344`, -0.030028371140360832`, -0.030039934441447258`, \
-0.030049074441194534`}], "Children" -> 
          RawArray["Integer16",{{2, 7}, {8, 3}, {-3, 4}, {5, -5}, {-4, 
            6}, {-6, -7}, {9, -8}, {10, -9}, {-2, 11}, {-1, 12}, {
            13, -12}, {-11, 14}, {-10, 15}, {-13, -15}, {-14, -16}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 55, 57, 55, 58, 69, 60, 59, 65, 57, 
            12}], "NumericalThresholds" -> {0.36726598441600805`, 
           0.20304237306118014`, -0.3887741416692733, -0.13210488855838773`, \
-0.25581888854503626`, -0.0753631331026554, -0.22862268984317777`, 
           0.09353549405932428, 0.3675502091646195, -0.10572833195328711`, 
           0.23826786130666736`, 0.01746174227446318}, "LeafValues" -> 
          RawArray["Real32",{-0.009035967290401459, -0.009362176060676575, 
            0.008850895799696445, 0.020775124430656433`, 
            0.0006103566847741604, -0.02387908101081848, 
            0.020486878231167793`, 0.0006247652927413583, 
            0.00011042440019082278`, 
            0.008386538363993168, -0.0016386202769353986`, \
-0.004996222443878651, -0.0244150273501873}], "Children" -> 
          RawArray["Integer16",{{2, 8}, {4, 3}, {11, -4}, {6, 5}, {-5, -6}, {
            9, 7}, {-7, -8}, {12, -9}, {-1, 
            10}, {-10, -11}, {-3, -12}, {-2, -13}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 55, 57, 57, 55, 61, 58, 67, 60, 69, 
            57}], "NumericalThresholds" -> {0.36726598441600805`, 
           0.21800762414932254`, -0.3887741416692733, -0.13210488855838773`, \
-0.4988738149404525, -0.25581888854503626`, -0.5130625069141387, \
-0.2305454388260841, -0.23175803571939466`, -0.009310305584222077, \
-0.17931485176086423`, 0.23826786130666736`}, "LeafValues" -> 
          RawArray["Real32",{
            0.013185366988182068`, -0.0037066845688968897`, \
-0.008473298512399197, -0.02336413785815239, 
            0.00014449826267082244`, -0.011035468429327011`, 
            0.02095210924744606, -0.016038548201322556`, 
            0.0003445338224992156, 0.006255343556404114, 
            0.0001793256087694317, 0.021523812785744667`, 
            0.005701196379959583}], "Children" -> 
          RawArray["Integer16",{{2, 9}, {4, 3}, {12, -4}, {5, 6}, {
            7, -6}, {-5, -7}, {10, 8}, {-8, -9}, {-2, 
            11}, {-1, -11}, {-10, -12}, {-3, -13}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 61, 68, 68, 61, 63, 63, 65, 66, 64, 66, 
            60, 62, 63, 69, 67, 57}], 
          "NumericalThresholds" -> {
           0.03206597827374936, -0.513061612844467, -0.021042029373347756`, \
-0.041415886953473084`, -0.5130614936351775, -1.0076183676719663`, \
-0.8185935616493224, -0.10572719946503638`, -0.19741514325141904`, 
           0.13611683994531634`, -0.19782416522502896`, -0.9100273549556731, 
           0.8752754032611848, -0.6295674145221709, -0.24718905240297315`, 
           0.353294923901558, -0.4988748282194137}, "LeafValues" -> 
          RawArray["Real32",{-0.03013073280453682, -0.030999045819044113`, 
            0.08336848020553589, -0.03182239830493927, 
            0.05912632495164871, -0.030131729319691658`, \
-0.03004850633442402, -0.030081333592534065`, -0.030687611550092697`, \
-0.030047887936234474`, -0.030133439227938652`, -0.030068112537264824`, \
-0.03004792146384716, -0.030067771673202515`, -0.0300298985093832, \
-0.03003726154565811, -0.030040835961699486`, -0.030031515285372734`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 7}, {9, 3}, {4, 6}, {5, -5}, {-3, 8}, {-4,
             10}, {-2, 11}, {-6, -9}, {-1, 13}, {-7, -11}, {-8, 12}, {-12, 
            14}, {15, -14}, {-13, 16}, {-10, 17}, {-15, -17}, {-16, -18}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 56, 60, 55, 68, 58, 60, 61, 67, 61, 65, 
            60}], "NumericalThresholds" -> {
           0.21800861507654193`, -0.35659426450729365`, \
-0.009311229456216095, -0.03677634708583354, 
           1.86605179309845, -0.009835074655711649, -0.9188081324100493, \
-1.0000000180025095`*^-35, -0.3380467444658279, 
           0.05358554981648923, -0.3996447771787643, 
           1.0000000180025095`*^-35}, "LeafValues" -> 
          RawArray["Real32",{0.04597831517457962, -0.030275855213403702`, 
            0.07610674202442169, -0.030200431123375893`, 
            0.0012486338382586837`, -0.030533092096447945`, \
-0.030379347503185272`, -0.030079614371061325`, -0.030191076919436455`, \
-0.030053047463297844`, -0.030128421261906624`, -0.0300276018679142, \
-0.030047554522752762`}], "Children" -> 
          RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 5}, {-3, -5}, {8, -6}, {
            7, -7}, {-2, 10}, {9, -9}, {-4, -10}, {11, -11}, {-8, 
            12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 64, 58, 64, 57, 58, 56, 57, 59, 24, 65}], 
          "NumericalThresholds" -> {
           0.27946138381958013`, -0.047500681132078164`, -0.07536391913890837,
            0.13240607827901843`, 0.16948024928569796`, -0.009834498167037962,
            0.5187081396579744, 0.23826720565557483`, 0.36755006015300756`, 
           0.06381659768521787, -0.10572851821780203`}, "LeafValues" -> 
          RawArray[
            "Real32",{-0.01606404036283493, -0.01808970980346203, \
-0.00030838814564049244`, 0.015597477555274963`, -0.011714219115674496`, 
            0.009325781837105751, -0.010349598713219166`, \
-0.0004238273249939084, 0.00015202803479041904`, 0.011067145504057407`, 
            0.018776092678308487`, -0.0010648500174283981`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, 5}, {8, -5}, {7, 
            6}, {-6, -7}, {-4, -8}, {9, 10}, {-1, 
            11}, {-9, -11}, {-10, -12}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 68, 67, 69, 60, 11, 65, 63, 67, 65}], 
          "NumericalThresholds" -> {-0.6295681297779082, 
           0.42628329992294317`, -0.0966806299984455, -0.2263475731015205, 
           0.12799382954835894`, 
           1.0000000180025095`*^-35, -0.10572833195328711`, \
-0.24996861070394513`, -0.32869362831115717`, -0.10572719201445578`}, 
          "LeafValues" -> 
          RawArray[
            "Real32",{-0.012142387218773365`, -0.017069822177290916`, \
-0.0021990921813994646`, 0.0021115720737725496`, 
            0.022123582661151886`, -0.013358711265027523`, 
            0.012001934461295605`, 
            0.016222963109612465`, -0.00005994477396598086, \
-0.001294359564781189, 0.000877828395459801}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {5, 3}, {-3, 4}, {-4, -5}, {6, 10}, {
            7, -7}, {9, 8}, {-8, -9}, {-2, -10}, {-6, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 61, 68, 68, 61, 63, 63, 63, 66, 64, 66, 
            60, 62, 63, 69, 67, 57}], 
          "NumericalThresholds" -> {
           0.03206597827374936, -0.513061612844467, -0.021042029373347756`, \
-0.041415886953473084`, -0.5130615532398223, -1.0076183676719663`, \
-0.8185935616493224, -0.24996823817491529`, -0.19741514325141904`, 
           0.13611683994531634`, -0.19782416522502896`, -0.9100273549556731, 
           0.8752754032611848, -0.6295674145221709, -0.24718905240297315`, 
           0.353294923901558, -0.4988748282194137}, "LeafValues" -> 
          RawArray["Real32",{-0.030127378180623055`, -0.03097892925143242, 
            0.1107143983244896, -0.03178342804312706, 
            0.05607545003294945, -0.030667196959257126`, \
-0.030046913772821426`, -0.030079204589128494`, -0.030153445899486542`, \
-0.030046580359339714`, -0.030130790546536446`, -0.030066249892115593`, \
-0.030046673491597176`, -0.030065985396504402`, -0.030029024928808212`, \
-0.030036158859729767`, -0.030039669945836067`, -0.030030611902475357`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 7}, {9, 3}, {4, 6}, {5, -5}, {-3, 8}, {-4,
             10}, {-2, 11}, {-6, -9}, {-1, 13}, {-7, -11}, {-8, 12}, {-12, 
            14}, {15, -14}, {-13, 16}, {-10, 17}, {-15, -17}, {-16, -18}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 61, 66, 64, 56, 58, 56, 60, 67, 64, 61, 
            68, 65, 60, 59}], 
          "NumericalThresholds" -> {
           0.21800861507654193`, -0.5130616724491118, -0.20005169510841367`, 
           0.13240634649991992`, -0.25524775683879847`, \
-0.009835074655711649, -0.1441973969340324, -0.9188081324100493, \
-0.3380467444658279, -0.5920875966548919, 
           0.05358554981648923, -0.5293045639991759, -0.3996447771787643, \
-0.009311229456216095, -0.02356522716581821}, "LeafValues" -> 
          RawArray["Real32",{-0.030334630981087685`, -0.03026520274579525, 
            0.0835106149315834, -0.03077283874154091, 
            0.03133649751543999, -0.030069313943386078`, \
-0.030369743704795837`, -0.030193425714969635`, -0.03007747232913971, \
-0.030099239200353622`, -0.030166735872626305`, -0.030124684795737267`, \
-0.03006795048713684, -0.030026720836758614`, -0.030038021504878998`, \
-0.0300461258739233}], "Children" -> 
          RawArray["Integer16",{{2, 6}, {7, 3}, {-3, 4}, {5, -5}, {-4, 10}, {
            8, -7}, {-1, 9}, {-2, 11}, {-8, 12}, {-6, -11}, {13, -12}, {-10, 
            14}, {-9, 15}, {-13, -15}, {-14, -16}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 58, 57, 55, 60, 57, 62, 61, 58, 58}], 
          "NumericalThresholds" -> {0.36726598441600805`, 
           0.20304237306118014`, -0.24031142145395276`, \
-0.13210488855838773`, -0.25581888854503626`, -0.9100263416767119, \
-0.4988738149404525, -0.0609738565981388, -0.513062685728073, \
-0.2305454686284065, -0.23054461926221845`}, "LeafValues" -> 
          RawArray[
            "Real32",{-0.015224470756947994`, -0.018425000831484795`, \
-0.00036441738484427333`, 0.016711238771677017`, 
            0.0007151095196604729, -0.022917835041880608`, \
-0.00954864826053381, 0.009847805835306644, 0.007184890098869801, 
            0.012231116183102131`, -0.00041011988651007414`, \
-0.0013134317705407739`}], "Children" -> 
          RawArray["Integer16",{{2, 6}, {4, 3}, {-3, -4}, {7, 
            5}, {-5, -6}, {-2, 8}, {9, -8}, {-7, -9}, {11, 
            10}, {-10, -11}, {-1, -12}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 55, 68, 68, 64, 63, 69, 67, 60, 57}], 
          "NumericalThresholds" -> {0.36726598441600805`, 
           0.21800762414932254`, -0.3887741416692733, -0.03129779733717441, \
-0.3743704110383987, -0.6034906804561614, -0.24996835738420484`, \
-0.22862268984317777`, -0.23175803571939466`, 0.09353566542267801, 
           0.23826786130666736`}, "LeafValues" -> 
          RawArray[
            "Real32",{-0.00980681274086237, -0.0036966619081795216`, \
-0.008000975474715233, -0.02221819758415222, -0.0018996166763827205`, \
-0.014565017074346542`, 0.010426969267427921`, -0.00027634858270175755`, 
            0.015417585149407387`, 0.01930380053818226, 0.004973902367055416, 
            0.005412247963249683}], "Children" -> 
          RawArray["Integer16",{{2, 9}, {4, 3}, {11, -4}, {5, 8}, {
            6, -6}, {-1, 7}, {-7, -8}, {-5, -9}, {-2, 
            10}, {-10, -11}, {-3, -12}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 64, 68, 66, 67, 58, 63, 63, 66, 62, 66, 
            60, 60, 63, 61, 67}], 
          "NumericalThresholds" -> {
           0.03206597827374936, -0.6034899055957793, -0.007178284460678696, 
           0.425636500120163, -0.32520350813865656`, -0.23054415732622144`, \
-0.2585605233907699, -0.8185935616493224, -0.19963497668504712`, 
           0.8752751648426057, -0.19782416522502896`, -0.9100273549556731, \
-0.009310938417911528, -0.6295675337314605, -0.513061612844467, 
           0.353294923901558}, "LeafValues" -> 
          RawArray["Real32",{-0.030213696882128716`, -0.030942538753151894`, 
            0.013301576487720013`, -0.031159350648522377`, 
            0.06672409176826477, -0.03515120595693588, 
            0.08851402252912521, -0.030100950971245766`, \
-0.030076947063207626`, -0.030061978846788406`, -0.03010127879679203, \
-0.030064329504966736`, -0.030046436935663223`, -0.030033456161618233`, \
-0.03002808429300785, -0.030048668384552002`, -0.0300384983420372}], 
          "Children" -> 
          RawArray["Integer16",{{2, 8}, {9, 3}, {4, -4}, {5, -5}, {6, 
            7}, {-3, -7}, {-6, -8}, {-2, 11}, {-1, 10}, {13, -11}, {-9, 
            12}, {-12, 14}, {-10, 15}, {-13, 16}, {-14, -16}, {-15, -17}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{56, 61, 57, 60, 56, 69, 68, 55, 56, 67, 55, 
            61, 68, 60, 68, 64}], 
          "NumericalThresholds" -> {
           0.15596566349267962`, -0.5130616724491118, -0.059014666825532906`, \
-0.009311229456216095, -0.48675483465194697`, -0.22862268984317777`, 
           1.86605179309845, -0.03677666001021861, -0.25524775683879847`, \
-0.3380467444658279, -0.03677695244550704, 
           1.0000000180025095`*^-35, -0.5289332270622252, \
-0.009311229456216095, -0.5140972733497619, 0.13240581750869754`}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.03029847890138626, -0.030063830316066742`, 
            0.08359207212924957, 0.02054496854543686, 
            0.04939000681042671, -0.030123567208647728`, \
-0.030539190396666527`, -0.030445769429206848`, -0.030388422310352325`, \
-0.030181927606463432`, -0.030094273388385773`, -0.03016294166445732, \
-0.03008914925158024, -0.030073385685682297`, -0.030037283897399902`, \
-0.030030345544219017`, -0.030054062604904175`}], "Children" -> 
          RawArray["Integer16",{{2, 7}, {9, 3}, {4, 6}, {-3, 5}, {-5, 
            8}, {-4, -7}, {11, -8}, {-6, -9}, {-1, 10}, {-10, 13}, {
            12, -12}, {15, -13}, {-11, 14}, {-14, -15}, {-2, 
            16}, {-16, -17}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 67, 66, 65, 62, 35, 67, 63, 63, 56}], 
          "NumericalThresholds" -> {0.27385891973972326`, 
           0.5014521181583406, -0.12605434656143186`, -0.24606103450059888`, \
-0.44816149771213526`, 
           0.03206597827374936, -0.2704524844884872, -0.24996861070394513`, \
-0.24996710568666455`, 0.3277754187583924}, "LeafValues" -> 
          RawArray["Real32",{0.0002952539944089949, -0.020782150328159332`, 
            0.000045996494009159505`, 
            0.010386561043560505`, -0.011531383730471134`, \
-0.018057649955153465`, 0.01789814420044422, 0.00700211338698864, 
            0.0034852016251534224`, -0.005764129105955362, \
-0.004319019615650177}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {5, 6}, {-1, -6}, {
            8, 7}, {-7, 10}, {-5, 9}, {-9, -10}, {-8, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 69, 58, 64, 57, 59, 64, 69}], 
          "NumericalThresholds" -> {-0.6295681297779082, 
           0.5661014318466188, -0.3308220654726028, -0.9168494641780852, 
           0.20304237306118014`, 
           0.35283868014812475`, -0.04750095307826995, -0.2459611669182777}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.011557183228433132`, -0.000707348168361932, 
            0.013704431243240833`, 
            0.011131429113447666`, -0.004698106087744236, \
-0.00226383819244802, -0.021549252793192863`, 0.023936470970511436`, 
            0.0029316821601241827`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {7, 4}, {-4, 5}, {8, 
            6}, {-6, -7}, {-2, -8}, {-5, -9}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 61, 68, 68, 61, 63, 63, 63, 66, 64, 66, 
            60, 62, 63, 69, 67, 57}], 
          "NumericalThresholds" -> {
           0.03206597827374936, -0.513061612844467, -0.021042029373347756`, \
-0.041415886953473084`, -0.5130615532398223, -1.0076183676719663`, \
-0.8185935616493224, -0.2499682083725929, -0.19741514325141904`, 
           0.13611735403537753`, -0.19782416522502896`, -0.9100273549556731, 
           0.8752754032611848, -0.6295675337314605, -0.2470230385661125, 
           0.353294923901558, -0.4988748282194137}, "LeafValues" -> 
          RawArray["Real32",{-0.030126605182886124`, -0.03091946616768837, 
            0.09443584829568863, -0.03170199319720268, 
            0.051991790533065796`, -0.030623599886894226`, \
-0.030043991282582283`, -0.030074583366513252`, -0.03014429472386837, \
-0.0300446767359972, -0.030124809592962265`, -0.03006243333220482, \
-0.030045147985219955`, -0.030065692961215973`, -0.0300272386521101, \
-0.030035359784960747`, -0.03003751114010811, -0.030029330402612686`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 7}, {9, 3}, {4, 6}, {5, -5}, {-3, 8}, {-4,
             10}, {-2, 11}, {-6, -9}, {-1, 13}, {-7, -11}, {-8, 12}, {-12, 
            14}, {15, -14}, {-13, 16}, {-10, 17}, {-15, -17}, {-16, -18}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 61, 66, 64, 56, 58, 55, 60, 67, 64, 61, 
            68, 65, 60, 59}], 
          "NumericalThresholds" -> {
           0.21800861507654193`, -0.5130616724491118, -0.20005169510841367`, 
           0.13240634649991992`, -0.25524775683879847`, \
-0.009835074655711649, -0.03677574731409549, -0.9188081324100493, \
-0.3380467444658279, -0.5920875966548919, 
           0.05358554981648923, -0.5293045639991759, -0.3996447771787643, \
-0.009311229456216095, -0.02356522716581821}, "LeafValues" -> 
          RawArray["Real32",{-0.0301826149225235, -0.030252588912844658`, 
            0.07463977485895157, -0.030746541917324066`, 
            0.028803342953324318`, -0.03006765991449356, \
-0.030352283269166946`, -0.030306095257401466`, -0.030072959139943123`, \
-0.030093764886260033`, -0.03015710785984993, -0.03011925332248211, \
-0.030063822865486145`, -0.03002508170902729, -0.030035363510251045`, \
-0.03004387393593788}], "Children" -> 
          RawArray["Integer16",{{2, 6}, {7, 3}, {-3, 4}, {5, -5}, {-4, 10}, {
            8, -7}, {9, -8}, {-2, 11}, {-1, 12}, {-6, -11}, {13, -12}, {-10, 
            14}, {-9, 15}, {-13, -15}, {-14, -16}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 58, 66, 65, 63, 60, 65, 66, 58, 65, 57}], 
          "NumericalThresholds" -> {
           0.27946138381958013`, -0.009835639037191866, -0.131475456058979, \
-0.24606103450059888`, -0.2585592716932296, -0.009309822693467138, \
-0.10572734847664832`, -0.1899178400635719, -0.23054396361112592`, \
-0.10572833195328711`, 0.20304237306118014`}, "LeafValues" -> 
          RawArray["Real32",{0.001224570907652378, 
            0.00014772047870792449`, -0.01783471368253231, 
            0.009253453463315964, 0.005230830982327461, -0.01840006373822689, 
            0.018914274871349335`, -0.010154347866773605`, 
            0.001161868334747851, 0.009138956665992737, -0.006876541767269373,
             0.005975349806249142}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {5, 6}, {-1, -6}, {
            9, 7}, {8, 11}, {-7, -9}, {10, -10}, {-5, -11}, {-8, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{63, 69, 60, 63, 64, 64, 4, 64, 59, 58}], 
          "NumericalThresholds" -> {-0.6295681297779082, 
           0.5661014318466188, -0.009309921879321335, -0.24996861070394513`, \
-0.9168494641780852, -0.603489190340042, 
           1.0000000180025095`*^-35, -0.6034904420375823, \
-0.02356647979468107, -0.23054396361112592`}, "LeafValues" -> 
          RawArray["Real32",{-0.011115613393485546`, 0.016377542167901993`, 
            0.013356326147913933`, 0.009512682445347309, 
            0.012393161654472351`, -0.003369320649653673, \
-0.005713930353522301, 0.008994746953248978, -0.016882389783859253`, 
            0.0013333427486941218`, -0.014090687036514282`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, 9}, {-4, 6}, {
            8, 7}, {-7, -8}, {-6, -9}, {-5, 10}, {-10, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 61, 68, 68, 61, 63, 63, 63, 66, 64, 66, 
            62, 60, 63, 69, 67, 57}], 
          "NumericalThresholds" -> {
           0.03206597827374936, -0.513061612844467, -0.021042029373347756`, \
-0.041415886953473084`, -0.5130615532398223, -1.0076183676719663`, \
-0.8185935616493224, -0.24996823817491529`, -0.19741514325141904`, 
           0.13611735403537753`, -0.19782416522502896`, 
           0.8752754032611848, -0.9100273549556731, -0.6295674145221709, \
-0.2470230385661125, 0.353294923901558, -0.4988748282194137}, "LeafValues" -> 
          RawArray["Real32",{-0.030122889205813408`, -0.030898667871952057`, 
            0.08585942536592484, -0.03165951371192932, 
            0.0496353879570961, -0.030622325837612152`, -0.03004254586994648, \
-0.030071932822465897`, -0.030144263058900833`, -0.030043363571166992`, \
-0.0301218219101429, -0.03006034903228283, -0.030063727870583534`, \
-0.030042970553040504`, -0.030026495456695557`, -0.030034346505999565`, \
-0.030036495998501778`, -0.030028490349650383`}], "Children" -> 
          RawArray["Integer16",{{2, 7}, {9, 3}, {4, 6}, {5, -5}, {-3, 8}, {-4,
             10}, {-2, 11}, {-6, -9}, {-1, 12}, {-7, -11}, {-8, 13}, {
            15, -13}, {-12, 14}, {-14, 16}, {-10, 
            17}, {-15, -17}, {-16, -18}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{56, 61, 57, 60, 56, 60, 68, 55, 56, 67, 55, 
            61, 68, 60, 57, 63}], 
          "NumericalThresholds" -> {
           0.15596566349267962`, -0.5130616724491118, -0.059014666825532906`, \
-0.009311229456216095, -0.48675483465194697`, 0.17470937967300418`, 
           1.86605179309845, -0.03677666001021861, -0.25524775683879847`, \
-0.3380467444658279, -0.03677695244550704, 
           0.05358374863862992, -0.5289332270622252, -0.009311229456216095, 
           0.22246871143579486`, -0.24996706098318097`}, "LeafValues" -> 
          RawArray["Real32",{-0.030276795849204063`, -0.03005187027156353, 
            0.07449546456336975, -0.03047826699912548, 
            0.04584950953722, -0.030123675242066383`, 
            0.020583871752023697`, -0.030443158000707626`, \
-0.03038943000137806, -0.030171306803822517`, -0.03008890338242054, \
-0.03015761822462082, -0.0300887580960989, -0.030068805441260338`, \
-0.030035100877285004`, -0.030039925128221512`, -0.03002634085714817}], 
          "Children" -> 
          RawArray["Integer16",{{2, 7}, {9, 3}, {4, 6}, {-3, 5}, {-5, 
            8}, {-4, -7}, {11, -8}, {-6, -9}, {-1, 10}, {-10, 13}, {
            12, -12}, {15, -13}, {-11, 14}, {-14, -15}, {-2, 
            16}, {-16, -17}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 55, 67, 60, 55, 56, 58, 65, 12}], 
          "NumericalThresholds" -> {0.36726598441600805`, 
           0.2180084437131882, -0.3887741416692733, 0.27385891973972326`, 
           0.09353549405932428, -0.26989696919918055`, 
           0.155965693295002, -0.07536391913890837, -0.24605972319841382`, 
           0.01746174227446318}, "LeafValues" -> 
          RawArray["Real32",{
            0.010598236694931984`, -0.00838643778115511, \
-0.005338671151548624, 0.022954067215323448`, -0.012751014903187752`, 
            0.00036469113547354937`, -0.00041080894879996777`, \
-0.012585297226905823`, 0.011492018587887287`, 
            0.007735707331448793, -0.02356836386024952}], "Children" -> 
          RawArray["Integer16",{{2, 5}, {4, 3}, {9, -4}, {6, -5}, {
            10, -6}, {-1, 7}, {8, -8}, {-7, -9}, {-3, -10}, {-2, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{57, 57, 55, 57, 57, 55, 61, 55, 67, 69, 57, 
            68}], "NumericalThresholds" -> {0.36726598441600805`, 
           0.21800762414932254`, -0.3887741416692733, -0.13210488855838773`, \
-0.49887372553348536`, -0.25581888854503626`, -0.5130625069141387, \
-0.036776391789317124`, -0.23175803571939466`, -0.17931485176086423`, 
           0.23826786130666736`, -0.5226300954818724}, "LeafValues" -> 
          RawArray["Real32",{
            
            0.0133674256503582, -0.003757208352908492, -0.007404666393995285, \
-0.02107659913599491, 0.00011102720600320026`, -0.012250366620719433`, 
            0.019585570320487022`, 
            0.0016120134387165308`, -0.010541525669395924`, 
            0.005544296465814114, 0.02035471796989441, 0.005401209928095341, 
            0.0024227325338870287`}], "Children" -> 
          RawArray["Integer16",{{2, 9}, {4, 3}, {11, -4}, {5, 6}, {
            7, -6}, {-5, -7}, {12, 8}, {-8, -9}, {-2, 
            10}, {-10, -11}, {-3, -12}, {-1, -13}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>]}, "ClassNumber" -> 4, "IterationsNumber" -> 50, "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"(f6(f1f2)(f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGBwBeIM/YV7W75Nsh+lhwbtJh5bctH1ONVpBjD4gJMGANGj
EGk=
              "], "Type" -> "NumericalVector"|>|>, 
         "Output" -> <|
          "(f6(f1f2)(f3f4f5f7))" -> <|
            "Type" -> "NumericalVector", "Weight" -> 6.999999999999998|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "DensifyNumericalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f6(f1f2)(f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGBwBeIM/YV7W75Nsh+lhwbtJh5bctH1ONVpBjD4gJMGANGj
EGk=
                  "], "Type" -> "NumericalVector"|>|>, "Version" -> {13.1, 0},
              "ID" -> 8857647472391453893, 
             "Output" -> <|
              "(f6(f1f2)(f3f4f5f7))" -> <|
                "Type" -> "NumericalVector", "Weight" -> 
                 6.999999999999998|>|>|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|
              "Type" -> "NumericalVector", "Weight" -> 6.999999999999998|>, 
             "Key" -> "(f6(f1f2)(f3f4f5f7))", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
      "GradientBoostedTrees", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "BoostingMethod" -> <|"Value" -> "Gradient", "Options" -> <||>|>, 
        MaxTrainingRounds -> <|"Value" -> 50, "Options" -> <||>|>, 
        "LeavesNumber" -> <|"Value" -> 250, "Options" -> <||>|>, 
        "LearningRate" -> <|"Value" -> 0.04, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "MaxBinNumber" -> <|"Value" -> 255, "Options" -> <||>|>, 
        "ThreadNumber" -> <|"Value" -> 8, "Options" -> <||>|>, 
        "MaxDepth" -> <|"Value" -> 6, "Options" -> <||>|>, 
        "LeafSize" -> <|"Value" -> 90, "Options" -> <||>|>, 
        "FeatureFraction" -> <|"Value" -> 1, "Options" -> <||>|>, 
        "BaggingFraction" -> <|"Value" -> 1, "Options" -> <||>|>, 
        "BaggingFrequency" -> <|"Value" -> 0, "Options" -> <||>|>, 
        "MinGainToSplit" -> <|"Value" -> 0, "Options" -> <||>|>, 
        "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.282757`5.9029583587247405, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.6046844687995591, 0.03189080306164598], "Accuracy" -> 
         Around[0.6940183528789351, 0.03236921531227903], "EvaluationTime" -> 
         0.00029726300545832105`, "TestSize" -> 400, "ModelMemory" -> 439168, 
         "ModelUtility" -> -0.2007362477136022, "TrainingSize" -> 1834, 
         "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 4704456, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.6046844687995591, 0.022550203102374582`]}, 
         "AccuracyHistory" -> {
           Around[0.6940183528789351, 0.022888491648999927`]}, 
         "Configuration" -> {
          "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
           MaxTrainingRounds -> 50, "LeavesNumber" -> 250, "LearningRate" -> 
           0.04, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
           "ThreadNumber" -> 8, "MaxDepth" -> 6, "LeafSize" -> 90, 
           "FeatureFraction" -> 1, "BaggingFraction" -> 1, "BaggingFrequency" -> 
           0, "MinGainToSplit" -> 0, "L1Regularization" -> 0, 
           "L2Regularization" -> 0, "LossFunction" -> Automatic}|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 17]}], <||>], 
      "Configurations" -> 
      Dataset[<|<|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 110|>, 
             "LearningRate" -> <|"Value" -> 0.2|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 7|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8345367847002391, 0.01750840298278031], "Accuracy" -> 
              Around[0.38115312728723005`, 0.06851221220205125], 
              "EvaluationTime" -> 0.0005011872336272722, "TestSize" -> 100, 
              "ModelMemory" -> 26184, "ModelUtility" -> -0.5165048399971447, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 106000, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8345367847002391, 0.012380310476870732`]}, 
              "AccuracyHistory" -> {
                Around[0.38115312728723005`, 0.04844544984216216]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.140028036610683, 0.371618564027554], "Accuracy" -> 
              Around[0.5949654970315852, 0.04884493716896793], 
              "EvaluationTime" -> 0.000142190930212764, "TestSize" -> 200, 
              "ModelMemory" -> 314920, "ModelUtility" -> -1.4882226825764313`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 1199208, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.140028036610683, 0.2627740066386906]}, 
              "AccuracyHistory" -> {
                Around[0.5949654970315852, 0.034538586298808065`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000142190930212764, "MeanCrossEntropy" -> 
             Around[2.140028036610683, 0.371618564027554], "ModelMemory" -> 
             314920, "TrainingMemory" -> 1199208, "TrainingTime" -> 
             5.78886647762164|>, "Index" -> 1|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 250|>, 
             "LearningRate" -> <|"Value" -> 0.04|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 90|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8325207701515268, 0.012427924763523881`], "Accuracy" -> 
              Around[0.3464129816786372, 0.0384647252259898], 
              "EvaluationTime" -> 0.00003981071705534969, "TestSize" -> 300, 
              "ModelMemory" -> 26184, "ModelUtility" -> -0.5128797136083173, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 87848, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8325207701515268, 0.008787869876363956]}, 
              "AccuracyHistory" -> {
                Around[0.3464129816786372, 0.027198668043774642`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7021634417728769, 0.0077212458883845845`], "Accuracy" -> 
              Around[0.6492390576783281, 0.038624766483147166`], 
              "EvaluationTime" -> 0.000043246719157808864`, "TestSize" -> 300,
               "ModelMemory" -> 26184, "ModelUtility" -> -0.3418034395349808, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 204176, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7021634417728769, 0.005459745326885488]}, 
              "AccuracyHistory" -> {
                Around[0.6492390576783281, 0.027311834301980236`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6657967736847902, 0.027498908833926177`], "Accuracy" -> 
              Around[0.6531584616818203, 0.03867470930764361], 
              "EvaluationTime" -> 0.00011726169411961113`, "TestSize" -> 300, 
              "ModelMemory" -> 373504, "ModelUtility" -> -0.2947323218437581, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 1530328, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6657967736847902, 0.019444664911699855`]}, 
              "AccuracyHistory" -> {
                Around[0.6531584616818203, 0.02734714921185328]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6046844687995591, 0.03189080306164598], "Accuracy" -> 
              Around[0.6940183528789351, 0.03236921531227903], 
              "EvaluationTime" -> 0.00029726300545832105`, "TestSize" -> 400, 
              "ModelMemory" -> 439168, "ModelUtility" -> -0.2007362477136022, 
              "TrainingSize" -> 1834, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 4704456, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6046844687995591, 0.022550203102374582`]}, 
              "AccuracyHistory" -> {
                Around[0.6940183528789351, 0.022888491648999927`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00029726300545832105`, "MeanCrossEntropy" -> 
             Around[0.6046844687995591, 0.03189080306164598], "ModelMemory" -> 
             439168, "TrainingMemory" -> 4704456, "TrainingTime" -> 
             0.6326569777379907|>, "Index" -> 2|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 13|>, 
             "LearningRate" -> <|"Value" -> 0.01|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 15|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8344765139750193, 0.011332717113614502`], "Accuracy" -> 
              Around[0.35930527356571007`, 0.03361268774348175], 
              "EvaluationTime" -> 0.000037763731941933215`, "TestSize" -> 400,
               "ModelMemory" -> 26184, "ModelUtility" -> -0.5149574187886024, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 87768, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8344765139750193, 0.008013441120305652]}, 
              "AccuracyHistory" -> {
                Around[0.35930527356571007`, 0.023767759437321897`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7364123466650455, 0.03821939101554543], "Accuracy" -> 
              Around[0.5198291914586299, 0.049796459623624514`], 
              "EvaluationTime" -> 0.0001, "TestSize" -> 200, "ModelMemory" -> 
              314960, "ModelUtility" -> -0.39762427701147884`, "TrainingSize" -> 
              60, "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
              1000856, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7364123466650455, 0.02702519055991238]}, 
              "AccuracyHistory" -> {
                Around[0.5198291914586299, 0.03521141427894701]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.657224530055194, 0.02705378634371448], "Accuracy" -> 
              Around[0.6706007889849369, 0.03790429903722604], 
              "EvaluationTime" -> 0.00025118864315095795`, "TestSize" -> 300, 
              "ModelMemory" -> 421328, "ModelUtility" -> -0.281757335187258, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 2267752, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.657224530055194, 0.01912991578041252]}, 
              "AccuracyHistory" -> {
                Around[0.6706007889849369, 0.026802386885345253`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00025118864315095795`, "MeanCrossEntropy" -> 
             Around[0.657224530055194, 0.02705378634371448], "ModelMemory" -> 
             421328, "TrainingMemory" -> 2267752, "TrainingTime" -> 
             3.049482065375962|>, "Index" -> 3|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 6|>, 
             "LearningRate" -> <|"Value" -> 0.1|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 15|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8345367847002391, 0.01750840298278031], "Accuracy" -> 
              Around[0.38115312728723005`, 0.06851221220205125], 
              "EvaluationTime" -> 0.00019952623149688788`, "TestSize" -> 100, 
              "ModelMemory" -> 26184, "ModelUtility" -> -0.5165045383361426, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 130328, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8345367847002391, 0.012380310476870732`]}, 
              "AccuracyHistory" -> {
                Around[0.38115312728723005`, 0.04844544984216216]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00019952623149688788`, "MeanCrossEntropy" -> 
             Around[0.8345367847002391, 0.01750840298278031], "ModelMemory" -> 
             26184, "TrainingMemory" -> 130328, "TrainingTime" -> 
             1.509249967996622|>, "Index" -> 4|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 60|>, 
             "LearningRate" -> <|"Value" -> 0.1|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 90|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8325207701515268, 0.012427924763523881`], "Accuracy" -> 
              Around[0.3464129816786372, 0.0384647252259898], 
              "EvaluationTime" -> 0.00003981071705534969, "TestSize" -> 300, 
              "ModelMemory" -> 26184, "ModelUtility" -> -0.5128797136083173, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 87680, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8325207701515268, 0.008787869876363956]}, 
              "AccuracyHistory" -> {
                Around[0.3464129816786372, 0.027198668043774642`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7021634417728769, 0.0077212458883845845`], "Accuracy" -> 
              Around[0.6492390576783281, 0.038624766483147166`], 
              "EvaluationTime" -> 0.00003981071705534969, "TestSize" -> 300, 
              "ModelMemory" -> 26184, "ModelUtility" -> -0.3418034360989787, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 204112, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7021634417728769, 0.005459745326885488]}, 
              "AccuracyHistory" -> {
                Around[0.6492390576783281, 0.027311834301980236`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6393630886822188, 0.035687446985667545`], "Accuracy" -> 
              Around[0.6534635670629344, 0.047464978431321525`], 
              "EvaluationTime" -> 0.0001258925411794167, "TestSize" -> 200, 
              "ModelMemory" -> 375904, 
              "ModelUtility" -> -0.25709598187678673`, "TrainingSize" -> 300, 
              "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
              1561992, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6393630886822188, 0.025234835766800936`]}, 
              "AccuracyHistory" -> {
                Around[0.6534635670629344, 0.033562808117660665`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0001258925411794167, "MeanCrossEntropy" -> 
             Around[0.6393630886822188, 0.035687446985667545`], "ModelMemory" -> 
             375904, "TrainingMemory" -> 1561992, "TrainingTime" -> 
             0.613176344774153|>, "Index" -> 5|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 25|>, 
             "LearningRate" -> <|"Value" -> 0.1|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 35|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8345367847002391, 0.01750840298278031], "Accuracy" -> 
              Around[0.38115312728723005`, 0.06851221220205125], 
              "EvaluationTime" -> 0.00015848931924611134`, "TestSize" -> 100, 
              "ModelMemory" -> 26184, "ModelUtility" -> -0.5165044972992303, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 124968, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8345367847002391, 0.012380310476870732`]}, 
              "AccuracyHistory" -> {
                Around[0.38115312728723005`, 0.04844544984216216]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00015848931924611134`, "MeanCrossEntropy" -> 
             Around[0.8345367847002391, 0.01750840298278031], "ModelMemory" -> 
             26184, "TrainingMemory" -> 124968, "TrainingTime" -> 
             1.509249967996622|>, "Index" -> 6|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 60|>, 
             "LearningRate" -> <|"Value" -> 0.04|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 15|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8325207701515268, 0.012427924763523881`], "Accuracy" -> 
              Around[0.3464129816786372, 0.0384647252259898], 
              "EvaluationTime" -> 0.0000370814035707944, "TestSize" -> 300, 
              "ModelMemory" -> 26184, "ModelUtility" -> -0.5128797108790039, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 87792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8325207701515268, 0.008787869876363956]}, 
              "AccuracyHistory" -> {
                Around[0.3464129816786372, 0.027198668043774642`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7695418154836474, 0.059022223611060264`], "Accuracy" -> 
              Around[0.5400717755006896, 0.04955724210732323], 
              "EvaluationTime" -> 0.00011294627058970834`, "TestSize" -> 200, 
              "ModelMemory" -> 316528, 
              "ModelUtility" -> -0.44652645852311323`, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.0630957344480193, "TrainingMemory" -> 
              1023384, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7695418154836474, 0.04173501455608947]}, 
              "AccuracyHistory" -> {
                Around[0.5400717755006896, 0.03504226195099176]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00011294627058970834`, "MeanCrossEntropy" -> 
             Around[0.7695418154836474, 0.059022223611060264`], "ModelMemory" -> 
             316528, "TrainingMemory" -> 1023384, "TrainingTime" -> 
             1.4524638069934046`|>, "Index" -> 7|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 3|>, 
             "LearningRate" -> <|"Value" -> 0.1|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 35|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7494392458643957, 0.08350565956136755], "Accuracy" -> 
              Around[0.4921726375755127, 0.14685970709834306`], 
              "EvaluationTime" -> 0.00004482649063407055, "TestSize" -> 700, 
              "ModelMemory" -> 26184., 
              "ModelUtility" -> -0.42680579665435936`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.008402800335848509, "TrainingMemory" -> 
              87669.33333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8325207701515268, 0.008787869876363956], 
                Around[0.6663577215772647, 0.02881613411491643]}, 
              "AccuracyHistory" -> {
                Around[0.3464129816786372, 0.027198668043774642`], 
                Around[0.6379322934723882, 0.02387175587983893]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7029975079606907, 0.007631275540467484], "Accuracy" -> 
              Around[0.6350119326535514, 0.03375044563825558], 
              "EvaluationTime" -> 0.000039810717055349695`, "TestSize" -> 400,
               "ModelMemory" -> 26184, 
              "ModelUtility" -> -0.34296243905584733`, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
              204176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7029975079606907, 0.005396126683767593]}, 
              "AccuracyHistory" -> {
                Around[0.6350119326535514, 0.023865168978878453`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6550454239624716, 0.03559792839543557], "Accuracy" -> 
              Around[0.6420719394486022, 0.03903109503761105], 
              "EvaluationTime" -> 0.00012812728680850936`, "TestSize" -> 300, 
              "ModelMemory" -> 374360, "ModelUtility" -> -0.2810363163962625, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 1548696, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6550454239624716, 0.025171536564605645`]}, 
              "AccuracyHistory" -> {
                Around[0.6420719394486022, 0.027599151978231377`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6104983898586541, 0.02432358283125846], "Accuracy" -> 
              Around[0.7126876096274283, 0.026015742017651687`], 
              "EvaluationTime" -> 0.00018584726074662907`, "TestSize" -> 300, 
              "ModelMemory" -> 374360, "ModelUtility" -> -0.2077341004919525, 
              "TrainingSize" -> 1834, "TrainingTime" -> 0.15848931924611134`, 
              "TrainingMemory" -> 4159176, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6104983898586541, 0.02432358283125846]}, 
              "AccuracyHistory" -> {
                Around[0.7126876096274283, 0.026015742017651687`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00018584726074662907`, "MeanCrossEntropy" -> 
             Around[0.6104983898586541, 0.02432358283125846], "ModelMemory" -> 
             374360, "TrainingMemory" -> 4159176, "TrainingTime" -> 
             0.20647124074592876`|>, "Index" -> 8|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 13|>, 
             "LearningRate" -> <|"Value" -> 0.02|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 7|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8325207701515268, 0.012427924763523881`], "Accuracy" -> 
              Around[0.3464129816786372, 0.0384647252259898], 
              "EvaluationTime" -> 0.00003981071705534969, "TestSize" -> 300, 
              "ModelMemory" -> 26184, "ModelUtility" -> -0.5128797136083173, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              87792, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.8325207701515268, 0.008787869876363956]}, 
              "AccuracyHistory" -> {
                Around[0.3464129816786372, 0.027198668043774642`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.652721369957131, 0.03399881223269586], "Accuracy" -> 
              Around[0.6844144479419557, 0.037685975648348885`], 
              "EvaluationTime" -> 0.00021663075097077685`, "TestSize" -> 300, 
              "ModelMemory" -> 431960, 
              "ModelUtility" -> -0.27704904650293916`, "TrainingSize" -> 300, 
              "TrainingTime" -> 0.15848931924611134`, "TrainingMemory" -> 
              2410848, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.652721369957131, 0.024040790682027385`]}, 
              "AccuracyHistory" -> {
                Around[0.6844144479419557, 0.02664800893657859]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8115263159491859, 0.05220328215695357], "Accuracy" -> 
              Around[0.5499628920645779, 0.0403753565923247], 
              "EvaluationTime" -> 0.0001367581338683149, "TestSize" -> 300, 
              "ModelMemory" -> 335440, "ModelUtility" -> -0.4972126937673893, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.1, "TrainingMemory" -> 
              1297992, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.8115263159491859, 0.03691329481337657]}, 
              "AccuracyHistory" -> {
                Around[0.5499628920645779, 0.028549688439257766`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0001367581338683149, "MeanCrossEntropy" -> 
             Around[0.8115263159491859, 0.05220328215695357], "ModelMemory" -> 
             335440, "TrainingMemory" -> 1297992, "TrainingTime" -> 2.302|>, 
           "Index" -> 9|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 13|>, 
             "LearningRate" -> <|"Value" -> 0.2|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 8|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 35|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8345367847002391, 0.01750840298278031], "Accuracy" -> 
              Around[0.38115312728723005`, 0.06851221220205125], 
              "EvaluationTime" -> 0.00019952623149688788`, "TestSize" -> 100, 
              "ModelMemory" -> 26184, "ModelUtility" -> -0.5165045383361426, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 187912, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8345367847002391, 0.012380310476870732`]}, 
              "AccuracyHistory" -> {
                Around[0.38115312728723005`, 0.04844544984216216]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00019952623149688788`, "MeanCrossEntropy" -> 
             Around[0.8345367847002391, 0.01750840298278031], "ModelMemory" -> 
             26184, "TrainingMemory" -> 187912, "TrainingTime" -> 
             1.509249967996622|>, "Index" -> 10|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["GradientBoostedTrees"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 16]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 2292, 
      "PreprocessorEvaluationTime" -> 2.1328125*^-6, "PreprocessorMemory" -> 
      181840, "InputDimension" -> 69, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.70024056722671, "VariableBudget" -> True,
       "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.879421301772293`16.341341935323413*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.39520641660248007`, 
          "ElapsedTimes" -> 0.502565, "ExperimentCounts" -> 11|>, <|
         "TrainingSizes" -> 60, "TimeBudgets" -> 0.5645805951464, 
          "ElapsedTimes" -> 0.747757, "ExperimentCounts" -> 7|>, <|
         "TrainingSizes" -> 300, "TimeBudgets" -> 0.8065437073519999, 
          "ElapsedTimes" -> 1.152548, "ExperimentCounts" -> 5|>, <|
         "TrainingSizes" -> 1834, "TimeBudgets" -> 1.1522052962171427`, 
          "ElapsedTimes" -> 0.951419, "ExperimentCounts" -> 2|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"UNITED KINGDOM"}, 
           "ID" -> 6873582013879478265|>, 
         "f2" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"Financials"}, 
           "ID" -> 7971373608825966019|>, 
         "f3" -> <|
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.4051568490028274}, "ID" -> 3393134348820751293|>, 
         "f4" -> <|
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {7.173747390485207}, "ID" -> 3828733207173156760|>, 
         "f5" -> <|
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {28.34708907560874}, "ID" -> 4487409260182963336|>, 
         "f6" -> <|
          "Type" -> "Text", "Weight" -> 1, "Values" -> {"Estimated data"}, 
           "ID" -> 386652190722912716|>, 
         "f7" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {66.0991}, "ID" -> 
           6944730188686709292|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 4.088666, 
      "MaxTrainingMemory" -> 7417976, "DataMemory" -> 3595256, 
      "FunctionMemory" -> 831088, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 12, 7, 17, 1, 42.17922`8.377673521983374}, "Instant", 
        "Gregorian", 1.], "ProcessorCount" -> 8, "ProcessorType" -> "ARM64", 
      "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, 3.87880702612108*^9, 
   3.8788116206807327`*^9, 3.8791491067640038`*^9, 3.879160983834428*^9, {
   3.8793254697452908`*^9, 3.8793254742039957`*^9}, 3.879333006457473*^9, 
   3.879354672716642*^9, 3.879417702201025*^9},
 CellLabel->"Out[49]=",ExpressionUUID->"47d2b1d0-4266-4efd-a786-d0026177e5f2"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Data type"], 
                   TextCell["Data type"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{
                   InterpretationBox[
                    Cell["Mixed"], 
                    TextCell["Mixed"]], 
                   StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]},
                  "RowDefault"],
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Numerical\"", 
                    ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Text\"", ",", "\"Numerical\""}], "}"}], 
                  Short[#, 10]& ]],
                Annotation[#, 
                 
                 Short[{"Nominal", "Nominal", "Numerical", "Numerical", 
                   "Numerical", "Text", "Numerical"}, 10], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classes"], 
                   TextCell["Classes"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 InterpretationBox[
                  Cell["A"], 
                  TextCell["A"]], 
                 InterpretationBox[
                  Cell["C"], 
                  TextCell["C"]], 
                 InterpretationBox[
                  Cell["D"], 
                  TextCell["D"]], 
                 InterpretationBox[
                  Cell["E"], 
                  TextCell["E"]]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"69.4", "3.2"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    69.4018352878935047556`3., 3.2369215312279027152`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Method"], 
                   TextCell["Method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 
                 InterpretationBox[Cell[
                  "GradientBoostedTrees",ExpressionUUID->
                   "9c90f1d4-c509-406b-8a49-9c8a65a0c5eb"],
                  TextCell["GradientBoostedTrees"]],
                 StyleBox[
                  TagBox[
                   
                   GridBox[{{"\"BoostingMethod\"", "\"Gradient\""}, {
                    "MaxTrainingRounds", "50"}, {"\"LeavesNumber\"", "250"}, {
                    "\"LearningRate\"", "0.04`"}, {"\"MaxDepth\"", "6"}, {
                    "\"LeafSize\"", "90"}, {"\"L1Regularization\"", "0"}, {
                    "\"L2Regularization\"", "0"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                  "Verdana", StripOnInput -> False]],
                Annotation[#, 
                 Style[
                  
                  Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 250}, {
                    "LearningRate", 0.04}, {"MaxDepth", 6}, {
                    "LeafSize", 90}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                   FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                   Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                 "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"9.41`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"8.13`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                   Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.6046844687995590606`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0318908030616459823`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.5409028626762670822`3.", "\", \"", 
                   "0.668466074922851039`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.5409028626762670822`3., 
                   ", ", 0.668466074922851039`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Model memory"], 
                   TextCell["Model memory"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"845.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training examples used"], 
                   TextCell["Training examples used"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               TemplateBox[{
                "2292", "\"examples\"", "examples", "\"Examples\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training time"], 
                   TextCell["Training time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"4.08`", "\"s\"", "seconds", "\"Seconds\""},
                "Quantity"]},
              {
               ItemBox[
                
                DynamicModuleBox[{
                 MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                 DynamicBox[ToBoxes[
                   Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.28843002427882947`}, {
                    4.0943445622221, -0.35358907901711717`}, {
                    5.703782474656201, -0.44728277207680806`}, {
                    7.51425465281641, -0.5030484961744386}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.302585092994046, -0.28843002427882947`}}, {{
                    4.0943445622221, -0.35358907901711717`}}, {{
                    5.703782474656201, -0.44728277207680806`}}, {{
                    7.51425465281641, -0.5030484961744386}}}]}}}, {{}, {}}}, \
{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.4065653336798677}, {
                    2.302585092994046, -0.18278777894769907`}, {
                    2.302585092994046, -0.18278777894769907`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, -0.36464635151948244`}, {
                    4.0943445622221, -0.3426527338816936}, {
                    4.0943445622221, -0.3426527338816936}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.703782474656201, -0.5047182423513165}, {
                    5.703782474656201, -0.39296772325592244`}, {
                    5.703782474656201, -0.39296772325592244`}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{7.51425465281641, -0.5572297218152937}, {
                    7.51425465281641, -0.45165260896461634`}, {
                    7.51425465281641, -0.45165260896461634`}}]}}}, {{}, \
{}}}}, {DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {1.2416317385598423`, -0.5198436095665073}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{1.2416317385598423`, 
                    7.73718007783463}, {-0.5198436095665073, \
-0.28843002427882947`}}, PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.4921726375755127}, {
                    4.0943445622221, 0.6492390576783281}, {5.703782474656201, 
                    0.6534635670629344}, {7.51425465281641, 
                    0.6940183528789351}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.4921726375755127}}, {{4.0943445622221, 
                    0.6492390576783281}}, {{5.703782474656201, 
                    0.6534635670629344}}, {{7.51425465281641, 
                    0.6940183528789351}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {1.2416317385598423`, 0.4654448816584355}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{1.2416317385598423`, 7.73718007783463}, {
                    0.4654448816584355, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.18087845692335164`}, {
                    4.0943445622221, 0.7608189301678852}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 110}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {"LeafSize", 7}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.1832971083077994}, {
                    4.0943445622221, -0.35358907901711717`}, {
                    5.703782474656201, -0.406770799625272}, {
                    7.51425465281641, -0.5030484961744386}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 250}, {
                    "LearningRate", 0.04}, {"MaxDepth", 6}, {
                    "LeafSize", 90}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.18095068010490903`}, {
                    4.0943445622221, -0.3059650635157414}, {
                    5.703782474656201, -0.4197295684163886}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 13}, {
                    "LearningRate", 0.01}, {"MaxDepth", 6}, {
                    "LeafSize", 15}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.18087845692335164`}, {
                    2.302585092994046, -0.18087845692335164`}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 6}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 15}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.1832971083077994}, {
                    4.0943445622221, -0.35358907901711717`}, {
                    5.703782474656201, -0.44728277207680806`}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 90}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.18087845692335164`}, {
                    2.302585092994046, -0.18087845692335164`}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 25}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 35}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.1832971083077994}, {
                    4.0943445622221, -0.2619599860702744}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.04}, {"MaxDepth", 6}, {
                    "LeafSize", 15}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.28843002427882947`}, {
                    4.0943445622221, -0.35240193204163756`}, {
                    5.703782474656201, -0.4230506961904295}, {
                    7.51425465281641, -0.49347962284901764`}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 3}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 35}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.1832971083077994}, {
                    4.0943445622221, -0.20883846378042012`}, {
                    5.703782474656201, -0.42660493302029223`}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 13}, {
                    "LearningRate", 0.02}, {"MaxDepth", 6}, {"LeafSize", 7}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.18087845692335164`}, {
                    2.302585092994046, -0.18087845692335164`}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 13}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {"LeafSize", 35}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, -0.18087845692335164`}}, {{
                    4.0943445622221, 0.7608189301678852}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 110}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {"LeafSize", 7}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, -0.1832971083077994}}, {{
                    4.0943445622221, -0.35358907901711717`}}, {{
                    5.703782474656201, -0.406770799625272}}, {{
                    7.51425465281641, -0.5030484961744386}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 250}, {
                    "LearningRate", 0.04}, {"MaxDepth", 6}, {
                    "LeafSize", 90}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, -0.18095068010490903`}}, {{
                    4.0943445622221, -0.3059650635157414}}, {{
                    5.703782474656201, -0.4197295684163886}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 13}, {
                    "LearningRate", 0.01}, {"MaxDepth", 6}, {
                    "LeafSize", 15}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, -0.18087845692335164`}}, {{
                    2.302585092994046, -0.18087845692335164`}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 6}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 15}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, -0.1832971083077994}}, {{
                    4.0943445622221, -0.35358907901711717`}}, {{
                    5.703782474656201, -0.44728277207680806`}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 90}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, -0.18087845692335164`}}, {{
                    2.302585092994046, -0.18087845692335164`}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 25}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 35}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, -0.1832971083077994}}, {{
                    4.0943445622221, -0.2619599860702744}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.04}, {"MaxDepth", 6}, {
                    "LeafSize", 15}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, -0.28843002427882947`}}, {{
                    4.0943445622221, -0.35240193204163756`}}, {{
                    5.703782474656201, -0.4230506961904295}}, {{
                    7.51425465281641, -0.49347962284901764`}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 3}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 35}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, -0.1832971083077994}}, {{
                    4.0943445622221, -0.20883846378042012`}}, {{
                    5.703782474656201, -0.42660493302029223`}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 13}, {
                    "LearningRate", 0.02}, {"MaxDepth", 6}, {"LeafSize", 7}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, -0.18087845692335164`}}, {{
                    2.302585092994046, -0.18087845692335164`}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 13}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {"LeafSize", 35}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {1.2416317385598423`, -0.6019532947711187}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{1.2416317385598423`, 
                    7.73718007783463}, {-0.6019532947711187, 
                    0.7608189301678852}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, -1], 
                    Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, 
                    Plus[1]], Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                  ImageSizeCache->{330., {120., 126.}}],
                 DynamicModuleValues:>{}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> 
           ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  MachineLearning`MLInformationObject[
   ClassifierFunction[<|
    "ExampleNumber" -> 2292, "ClassNumber" -> 4, 
     "Input" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|
           "Country" -> <|"Type" -> "Nominal"|>, 
            "GICS Sector Name" -> <|"Type" -> "Nominal"|>, 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Disclosure" -> <|"Type" -> "Text"|>, 
            "Revenue (USD mn)" -> <|"Type" -> "Numerical"|>|>, 
          "Output" -> <|
           "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
            "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["FromDataset"], 
               MachineLearning`MLProcessor[
               "FromNamedFeatures", <|
                "FeatureNames" -> {
                  "Country", "GICS Sector Name", 
                   "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                   "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                   "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                   "Carbon Disclosure", "Revenue (USD mn)"}|>], 
               MachineLearning`MLProcessor[
               "Transpose", <|"FeatureNumber" -> 7|>], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {
                  "Nominal", "Nominal", "Numerical", "Numerical", "Numerical",
                    "Text", "Numerical"}, 
                 "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6", "f7"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          False, "Invertibility" -> "Perfect", "StructurePreserving" -> False,
           "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|
           "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
            "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Output" -> <|
           "(f6(f1f2)(f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGBwBeIM/YV7W75Nsh+lhwbtJh5bctH1ONVpBjD4gJMGANGj
EGk=
               "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
            MachineLearning`MLProcessor[
            "SynthesizeMissingValues", <|
             "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Distribution" -> 
              LearnedDistribution[<|
                "ExampleNumber" -> 2292, "Preprocessor" -> 
                 MachineLearning`MLProcessor[
                  "ToMLDataset", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>, 
                    "f6" -> <|"Type" -> "Text"|>, 
                    "f7" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                  "Processor" -> 
                 MachineLearning`MLProcessor[
                  "Sequence", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 8728850163752787708|>], 
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4012203223801137025|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7247984987659546603|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>, 
                    "Index" -> {<|
                    "AUSTRIA" -> 1, "BELGIUM" -> 2, "BULGARIA" -> 3, 
                    "CROATIA" -> 4, "CYPRUS" -> 5, "CZECH REPUBLIC" -> 6, 
                    "DENMARK" -> 7, "ESTONIA" -> 8, "FINLAND" -> 9, "FRANCE" -> 
                    10, "GERMANY" -> 11, "GREECE" -> 12, "HUNGARY" -> 13, 
                    "ICELAND" -> 14, "IRELAND" -> 15, "ITALY" -> 16, 
                    "LUXEMBOURG" -> 17, "MALTA" -> 18, "NETHERLANDS" -> 19, 
                    "NORWAY" -> 20, "POLAND" -> 21, "PORTUGAL" -> 22, 
                    "ROMANIA" -> 23, "SLOVENIA" -> 24, "SPAIN" -> 25, 
                    "SWEDEN" -> 26, "SWITZERLAND" -> 27, "UKRAINE" -> 28, 
                    "UNITED KINGDOM" -> 29|>, <|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>, <|"" -> 1|>}, 
                    "MissingCode" -> Indeterminate, "Version" -> {13.1, 0}, 
                    "ID" -> 4113760982813578529, 
                    "Output" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {79.46666212202445, 22.194053219786632`, 
                    107.61244353226444`, 3257.480947285103}, 
                    "StandardDeviation" -> {393.01607179380045`, 
                    67.03477704200654, 159.36202682130502`, 
                    11368.305968784858`}, 
                    "Output" -> <|
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 3752698420053720059|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3, 
                    "SetSize" -> {29, 11, 1}|>|>, 
                    "Boundaries" -> {{-0.5, -0.46551724137931033`, \
-0.43103448275862066`, -0.39655172413793105`, -0.3620689655172414, \
-0.3275862068965517, -0.2931034482758621, -0.2586206896551724, \
-0.22413793103448276`, -0.1896551724137931, -0.15517241379310343`, \
-0.12068965517241381`, -0.08620689655172414, -0.051724137931034475`, \
-0.017241379310344807`, 0.017241379310344862`, 0.051724137931034475`, 
                    0.08620689655172409, 0.12068965517241381`, 
                    0.15517241379310343`, 0.18965517241379315`, 
                    0.22413793103448276`, 0.2586206896551724, 
                    0.2931034482758621, 0.3275862068965517, 
                    0.3620689655172413, 0.39655172413793105`, 
                    0.43103448275862066`, 0.4655172413793104, 
                    0.5}, {-0.5, -0.40909090909090906`, -0.3181818181818182, \
-0.2272727272727273, -0.13636363636363635`, -0.04545454545454547, 
                    0.045454545454545414`, 0.13636363636363635`, 
                    0.2272727272727273, 0.31818181818181823`, 
                    0.40909090909090906`, 0.5}, {-0.5, 0.5}}, 
                    "Version" -> {13.1, 0}, "ID" -> 2082886514676041914, 
                    "Output" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>, 
                    "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Spans" -> {
                    Span[1, 3], 
                    Span[4, 7]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {13.1, 0}, "ID" -> 
                    3471102231048770802|>]}, "Invertibility" -> "Approximate",
                     "StructurePreserving" -> True, "Missing" -> "Allowed"|>],
                  "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                 Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBmQFm/iFib1JlAgAAAAcAAAAHAAAAnnLlvqoafz+KYGYlv1SAv810wMpG
TDU/AUBONTBMhj+1cQuaUpuJv9YtYKAy/u8/JDt4C5UVe789VwE+XMaev6Re
LLDVXZW/XHEJgJ3inL+2nmsu51OOP9S7I3DQmH0/jzEBNLwOez84Ty8A9vXv
PwC4ljNYZnA/YvKlp+ZMWb8BfrsAaw7XvmXr3vEeUli/wN0fKg3/778UY4j9
LZCJv8n0OTY3a34/FuhJnnUT4r+CZtOVibnFv0oHbnB91MW/Yfks1GxA6b9P
BLqrDJNRv53AkMaNg4c/hST5mX0djL9QvbDVAMfhv0LLcpbgbs6/p6R84MDE
4b8RbOOt2zniPw87V6knfWi/+LzAM/eKcL+W8GVWKG6nv+1xeHQpGuK/ALPE
fAS+lT/s0sbflFbpP8BlRZdyV80/FLkGqS6tZb8AripyzMVbP7A3DnyjnGM/
kq6dzfP9zL+CSl7Il5buP9K+dmxj4se/PngTNwuaab/8oz2v+vZjvxlpOGEp
YIM/nkOrpVMmgD+WkMi9
                    "], 
                   "Precisions" -> {0.6080837241689073, 1.0249459814305149`, 
                    1.4338854587567862`, 1.4583742615351594`, 
                    12.050298831843332`, 17.732403162990845`, 
                    25.363460701880502`}, "NoisePrecision" -> None, 
                   "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {
                    0.14781839702703387`, -0.03761867444492348, \
-0.0018568141330923247`, 
                    0.00002093317943277569, -0.000032094047490506016`, \
-0.00028672757917445207`, 0.00010586837139914856`}, 
                    "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4722156746689135088|>], 
                   "PostProcessor" -> 
                   MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7.|>,
                     "Key" -> "((f1f2f6)(f3f4f5f7))", "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                   "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 7, "Options" -> <||>|>|>|>, 
                 "TrainingInformation" -> <|
                  "Configurations" -> 
                   Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {
                    0.14781839702703448`, -0.03761867444492345, \
-0.0018568141330923336`, 
                    0.000020933179432783272`, -0.00003209404749049296, \
-0.00028672757917443646`, 0.0001058683713990839}, 
                    "StandardDeviation" -> {0.23795387694998307`, 
                    0.2048229568696138, 0.2881101140977073, 
                    1.0000629888389347`, 1.0001224192028917`, 
                    0.9999940861686942, 1.0000688309807984`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    4503155047815583877|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                   Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                 "NaiveImputer" -> 
                 MachineLearning`MLProcessor[
                  "ImputeMissing", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, 
                    "Mean" -> {
                    0.14781839702703448`, -0.03761867444492345, \
-0.0018568141330923336`, 
                    0.000020933179432783272`, -0.00003209404749049296, \
-0.00028672757917443646`, 0.0001058683713990839}, 
                    "StandardDeviation" -> {0.23795387694998307`, 
                    0.2048229568696138, 0.2881101140977073, 
                    1.0000629888389347`, 1.0001224192028917`, 
                    0.9999940861686942, 1.0000688309807984`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "((f1f2f6)(f3f4f5f7))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    4503155047815583877|>], "InputDimension" -> 0, 
                 "OutputDimension" -> 7, 
                 "Log" -> <|
                  "Example" -> 
                   MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"UNITED KINGDOM"}, "ID" -> 
                    3679654460434315804|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"Financials"}, "ID" -> 4509295814520375433|>,
                     "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {0.4051568490028274}, "ID" -> 
                    4029740649927229730|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {7.173747390485207}, "ID" -> 
                    5883454897782969724|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {28.34708907560874}, "ID" -> 
                    151013525008169422|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 8313293367344529314|>, 
                    "f7" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {66.0991}, "ID" -> 2774697970610267399|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                   "TrainingTime" -> 0.061307, "MaxTrainingMemory" -> 1345632,
                    "DataMemory" -> 541240, "FunctionMemory" -> 86128, 
                   "LanguageVersion" -> {13.1, 0}, "Date" -> 
                   DateObject[{
                    2022, 12, 7, 17, 1, 38.215715`8.334816968259958}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, 
                   "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                 "LogPDFDistribution" -> 
                 MachineLearning`TailedQuantileDistribution[<|
                   "Quantiles" -> {-5.612930781032486, -5.612930781032486, \
-5.3272745754000566`, -5.227760758272564, -5.1901459558849306`, \
-4.971419065536934, -4.898762215473115, -4.883258712808405, -4.8788972407619, \
-4.853815385428406, -4.8532432028568495`}, 
                    "LeftBoundary" -> -5.3272745754000566`, "LeftScale" -> 
                    0.14282810281621483`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                 Around[35.48825552541895, 0.5736581387301678], 
                 "EntropySampleSize" -> 10|>], 
              "Output" -> <|
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
              "ID" -> 8833432794738512184|>], 
            MachineLearning`MLProcessor[
            "Threads", <|
             "Input" -> <|
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f3f4f5f7)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>,
                 "(f1f2)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "(f3f4f5f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 7001699027996678713|>], 
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "(f1f2)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>,
                   "Version" -> {13.1, 0}, "ID" -> 4268131072254999855|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
              "Missing" -> "Allowed"|>], 
            MachineLearning`MLProcessor[
            "Standardize", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Mean" -> {79.46666212202445, 22.194053219786632`, 
               107.61244353226444`, 3257.480947285103}, 
              "StandardDeviation" -> {393.01607179380045`, 67.03477704200654, 
               159.36202682130502`, 11368.305968784858`}, 
              "Output" -> <|
               "(f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 1927666520227175614|>], 
            MachineLearning`MLProcessor[
            "ToLowerCase", <|
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 8121204540162656102, 
              "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
            
            MachineLearning`MLProcessor[
            "RemoveDiacritics", <|
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 1964114494773798714, 
              "Output" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
            
            MachineLearning`MLProcessor[
            "Threads", <|
             "Input" -> <|
               "f6" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "(f1f2)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
              "Output" -> <|
               "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                "(f1f2)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "Sequence", <|
                 "Input" -> <|"f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Processors" -> {
                    MachineLearning`MLProcessor[
                    "TextToNominalSequence", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {13.1, 0}, "ID" -> 613813152937597666, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", <|
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f6" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> CompressedData["
1:eJw1lEuO1FAMRXvACmg2wAKQ/P8soSVGLIEBEiMGsH9xkpdSqlIp28++vtfO
159/fvyqt7e3v5+4ff/999/HFx6+rVqq2U5t5uas6uMQ9dFe5zNhJb3HMWvS
Km1rvToSKY8jNX27tJV0aV79ODRLoq/wmC31quPoyeyWtMycu46+HDZewFKJ
ohAHj6PWCogmCuTOGPHjyBUAd5tW+tToPicytTykamdkPMuf4gEcA+a2rxM1
rxNBhfBc7fIBHSGPIwBIYaECtFDvSUWYhUY3/lQt63g5TJXO0mFWFlAPJQ6f
smRRDl38dz6OCNeUdlDNRa4/xR2MQrsxzRHOv2i3lAVShyw+8trLoQjqFTOT
BdXtdhxaEwVHCN9bgrIPXM0IhcGrBQu0nPh4PyR2V18t65jBcn18xm6BcnSu
l1i1sXabIy6IQxfS0WU0fZsTLt1UmCv4rTlmOoRwujoNi+Vt3pQg1rhPgDTk
hqJKZnJKTozTRu6xZ6FgFk2P9CXeyw5qWXrJgj8ThvK2V2vQJunFkVTMbjuM
QGMkE5jG12Vuu9t0OK0zNSJxrcWx0yu5BK4YeHQwP/bsCvijTZKUDTP/fpMA
FPQuS9IR0afuTVZlcF2z0ZQ4draQrIRv3U9Pv7TL0nQVBeqqEyc/e8BSiTvy
LfyUPvHwydaynMviFLofHpgjppClUKc0a2NHcmaYcP7ZoFkIbB87lZh/bVBO
uVyb+dgvqIau/AwjcfSqaywGdNEBTcawH3sjH3O2AdfLGuaJZ4Ad8HrJEmy5
Vx57+/WuAaBrVaHEE89SQQMnIAR+WN7bDgSWTp1LzJUZOnV5wQ2KFAqyKSMv
HpZlDgaRyiAIiJ7/oUHtSA==
                    "], "Values" -> None, "DefaultValue" -> -1, 
                    "HashFunction" -> 
                    Function[{
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {13.1, 0}|>], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+IA600prMte2//Yzh0uc0Lc4b/OvO2f3Hgdgjkun2YJ
fmyfeW918d4CDofDty3LvooKOtRuvD7VL13SYc2dWdfPNUk4HN4jtIKJicNB
lzn76IFqBofQHt6J5Rt/2/t9ZOApl7lqv6tA53swk6jDmoQr10tqLtnD9MPs
3e2fdnPWAR6HimUtfArzGRxgfJi9ySs5VzlpicPthfF9+ne8+NzyDW6ejsd+
B459HHBzlvTdKFkV9h1D3jWQ7fNc8T/2MD7MvwwQ0NA/weFNwcJn9umsKRvl
P7A7PM2JEnW6/9z+h37PXDn1b3D/wMyFhRuMD3M3TBydhtl7/8LZ5D8bf9rD
3Ksyf8un36kCDrt/bPsqpisDp2HqYf4GAF2Lu9w=
                    "], "Version" -> {13.1, 0}, "ID" -> 2566335944547631010, 
                    "Output" -> <|
                    "f6" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                  "Invertibility" -> "Impossible", "StructurePreserving" -> 
                  True, "Missing" -> "Forbidden"|>], 
                MachineLearning`MLProcessor[
                "EmbedNominalVector", <|
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "(f1f2)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>,
                   "Index" -> {<|
                    "AUSTRIA" -> 1, "BELGIUM" -> 2, "BULGARIA" -> 3, 
                    "CROATIA" -> 4, "CYPRUS" -> 5, "CZECH REPUBLIC" -> 6, 
                    "DENMARK" -> 7, "ESTONIA" -> 8, "FINLAND" -> 9, "FRANCE" -> 
                    10, "GERMANY" -> 11, "GREECE" -> 12, "HUNGARY" -> 13, 
                    "ICELAND" -> 14, "IRELAND" -> 15, "ITALY" -> 16, 
                    "LUXEMBOURG" -> 17, "MALTA" -> 18, "NETHERLANDS" -> 19, 
                    "NORWAY" -> 20, "POLAND" -> 21, "PORTUGAL" -> 22, 
                    "ROMANIA" -> 23, "SLOVENIA" -> 24, "SPAIN" -> 25, 
                    "SWEDEN" -> 26, "SWITZERLAND" -> 27, "UKRAINE" -> 28, 
                    "UNITED KINGDOM" -> 29|>, <|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>}, 
                  "Output" -> <|
                   "(f1f2)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                  "EmbeddingVectors" -> {CompressedData["
1:eJxFSn0s1HEcvgh3JCcVSadrRJS2iOS+n++RNLOyY9e8bBVK5FZe2pmplfQ2
L+mFi9ZOeZlqesXd4ff7fMtFqdUKNVPUvJ1qtV60Eqv4p57teZ49L9LEfVHJ
ZgKBIEs4LVEJ2cGZmQk50ZYzYVeCyneNamaUTHOmmsZhwX//R+OvI7jBTwPl
T5OgWtjEfQuKpGUHdUTUZo+GdwiO7yMhN3wEhm4FU3G3glaWxuFVm+OYstYA
NS/r4MmgI7rKtehS+RaTWjqIXHhftmggDvY6JeKfaiPJ7CpmD00CNjVrgLQZ
02h70gTqGt7gjW/505/XXJnzUJA6NQtiJZ6yUX8Xmv17DDy66sDtwDXQFPuj
+PIU2geksRB9PzZo/QkJb5bJe0382OHPYNOugaUu8WzSS0ppdxtIhgPY3JJA
zsKiHVqrHKim9jkaQzzoyDIpt29nDAyWMLJriRXmX3HA5koxWx5zga8KDEKD
2BweD+0EzztFNP7aCNcU4Q2RdhPAhhaw2HSl7MMXa26Qq8HmZ7VQUWEiLU5h
fInXpfUD83LZsUkJU1bK2QqFkOr4xWzsazvmKO6S530iVodRspTePKJUZ2Dv
6gLcfdaHbgqzQm9nOWjJR5LabckdOnmR/9A5n9kFLKbK8XoynnUezUxrQJgj
Z9v601h0Wg8mlhph421rFnpJGeRbvZAPbnKFPNUf/OSgwprVHEwWOHEnvE6T
M+d0WEK2w/db+4FL+Q01Rc50rrYZaV88QtEq6HhlBo2yDS0/Xd35Kv1RsF43
gS/cnuLmnCiZd28xjm7XwIKDAvBorQe9Ph7z23ZA+XAfz034kC+6TnjWEUrS
73aQpCc/IbkwD6S0D7Z61sPnm0dQbcjgzXtq+U6RhIXOVqBhDjCVIpZmT2UB
na/GiLpG0CYuojqrIhQ/mk3lK8+g6BUHfq9lJOL6FvDqv4cVu81Z8mNfenPP
Qhq9WUTt9e5MbfsAw6XdEGfNwamEq2iyvccV/khhfwFDUVyt
                    "], 
                    RawArray["Real32",{{0., 0., 0., 0., 0.}, {
                    0.8618162870407104, -0.5170427560806274, 
                    0.13067105412483215`, 0.0519464910030365, 
                    0.2821357548236847}, {
                    0.05358464643359184, -0.4481622278690338, \
-0.2585599422454834, 
                    0.41537076234817505`, -0.8721502423286438}, \
{-0.47762107849121094`, 0.04566793516278267, 0.15804912149906158`, 
                    0.1324063390493393, -0.39964571595191956`}, {
                    0.41636601090431213`, -0.126698300242424, \
-1.0076189041137695`, 0.15269236266613007`, 
                    0.022659795358777046`}, {-0.5130622982978821, 
                    0.8752748370170593, -0.24996790289878845`, \
-0.6034899353981018, -0.10572776198387146`}, {-0.8138381838798523, 
                    0.7515830397605896, -0.6295681595802307, \
-1.1122981309890747`, 
                    0.13304246962070465`}, {-0.2974144518375397, \
-0.40220165252685547`, 
                    0.2797980308532715, -0.9168489575386047, \
-0.24606038630008698`}, {-0.4358099699020386, 
                    0.24717211723327637`, -0.1983363777399063, 
                    0.6381807923316956, -0.04446683079004288}, {
                    0.061473648995161057`, -0.23882365226745605`, 
                    0.6821203827857971, -0.5920867323875427, \
-0.44236046075820923`}, {-0.042206939309835434`, 0.2029142528772354, 
                    0.6734306812286377, -0.047500185668468475`, \
-0.1775016486644745}, {-0.24699686467647552`, -0.06097349524497986, 
                    0.15785102546215057`, 
                    0.13611683249473572`, -0.43699583411216736`}}]}, 
                  "Version" -> {13.1, 0}, "ID" -> 4560545129116418848|>]}, 
              "Invertibility" -> "Impossible", "StructurePreserving" -> True, 
              "Missing" -> "Forbidden"|>], 
            MachineLearning`MLProcessor[
            "MergeVectors", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f6" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                "(f1f2)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>, 
                "(f3f4f5f7)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Spans" -> {
                Span[1, 54], 
                Span[55, 65], 
                Span[66, 69]}, 
              "Wrappers" -> {SparseArray, Identity, Identity}, 
              "Output" -> <|
               "(f6(f1f2)(f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGBwBeIM/YV7W75Nsh+lhwbtJh5bctH1ONVpBjD4gJMGANGj
EGk=
                   "], "Type" -> "NumericalVector"|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 324326445301658208|>]}, 
          "Invertibility" -> "Impossible", "StructurePreserving" -> True, 
          "Missing" -> "Imputed"|>]|>, 
     "Output" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "ToVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 6906009905629070033|>], 
            MachineLearning`MLProcessor[
            "IntegerEncodeNominalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Index" -> {<|"A" -> 1, "C" -> 2, "D" -> 3, "E" -> 4|>}, 
              "MissingCode" -> 0, "Version" -> {13.1, 0}, "ID" -> 
              5430399239532347052, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
            MachineLearning`MLProcessor[
            "FromVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|
                 "Type" -> "NominalVector", "Weight" -> 1, 
                  "SetSize" -> {4}|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 3683782806807983502|>], 
            MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>,
               "Key" -> "f1", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
       "Name" -> "class", 
       "Marginal" -> <|
        "A" -> 0.003484320557491289, "C" -> 0.0039198606271777, "D" -> 
         0.3623693379790941, "E" -> 0.6302264808362369|>|>, "LabelSplitter" -> 
     MachineLearning`MLProcessor[
      "FeatureLabelSplit", <|
       "Processor" -> 
        MachineLearning`MLProcessor[
         "KeyIndexSplit", <|
          "Index" -> "Ratings", 
           "Order" -> {
            "Country", "GICS Sector Name", 
             "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
             "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
             "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
             "Carbon Disclosure", "Revenue (USD mn)", "Ratings"}|>], 
        "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
     "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
     "Prior" -> Automatic, "Utility" -> 
     SparseArray[
      Automatic, {4, 5}, 0., {
       1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
     "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
     Automatic, "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 62, 66, 58, 4, 55, 55, 61, 61}], 
           "NumericalThresholds" -> {-0.6295681297779082, 
            0.8752755820751191, -0.20129597187042234`, -0.07536391913890837, 
            0.057239573448896415`, -0.3887754529714584, -0.03677611239254474, \
-0.43580923974514, 0.0535847693681717}, "LeafValues" -> 
           RawArray[
             "Real32",{-5.352589130401611, -5.699719429016113, \
-5.650370121002197, -5.752593517303467, -5.752593517303467, \
-5.752593517303467, -5.752593517303467, -5.752593517303467, \
-5.752593517303467, -5.752593517303467}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, 8}, {6, 
             7}, {-4, -7}, {-6, -8}, {-5, 9}, {-9, -10}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{59, 68, 68, 55, 55, 55}], 
           "NumericalThresholds" -> {-0.2489180415868759, 
            1.569790065288544, -0.5293045639991759, -0.03677661716938018, \
-0.036776971071958535`, -0.03677749074995517}, "LeafValues" -> 
           RawArray[
             "Real32",{-5.303502082824707, -5.510791301727295, \
-5.43058443069458, -5.598459243774414, -5.598459243774414, \
-5.598459243774414, -5.598459243774414}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, -5}, {
             6, -6}, {-4, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 55, 69, 55, 56, 66, 55, 67, 60, 55, 65, 
             69, 58, 67, 14}], 
           "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.23192767053842542`, -0.036776391789317124`, 
            0.32777599990367895`, -0.17361307144165036`, -0.7423808276653289, \
-0.11119628697633742`, 
            0.09353595599532129, -0.03677611239254474, -0.10572843626141547`, \
-0.24787032604217527`, -0.23054439574480054`, 0.03732480853796006, 
            0.015290492679923775`}, "LeafValues" -> 
           RawArray[
             "Real32",{-1.0152592658996582`, -0.9885934591293335, \
-1.0031214952468872`, -0.9857531189918518, -0.9895718097686768, \
-1.0402162075042725`, -1.0438562631607056`, -0.9509018659591675, \
-1.0215831995010376`, -0.9832776188850403, -1.005902886390686, \
-1.0067423582077026`, -1.0234837532043457`, -1.0248078107833862`, \
-1.057281494140625, -1.0508991479873657`}], "Children" -> 
           RawArray["Integer16",{{5, 2}, {3, 4}, {7, 8}, {6, 9}, {-1, 14}, {
             11, -7}, {-2, -8}, {-4, -9}, {10, -10}, {-5, 13}, {-3, 
             12}, {-12, -13}, {-11, -14}, {15, -15}, {-6, -16}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 60, 68, 56, 68, 58, 65, 60, 61, 60, 67, 
             66}], "NumericalThresholds" -> {-0.20411685854196546`, 
            0.17470937967300418`, 0.553546965122223, 
            0.32777599990367895`, -0.03129779733717441, -0.0753631331026554, \
-0.1057283468544483, 0.5991612970829011, -0.5130624473094939, 
            0.09353579953312875, -0.24549285322427747`, \
-0.16564054787158963`}, "LeafValues" -> 
           RawArray[
             "Real32",{-0.46038106083869934`, -0.47761738300323486`, \
-0.5087331533432007, -0.4630129039287567, -0.4347775876522064, \
-0.45479249954223633`, -0.4839824140071869, -0.44758594036102295`, \
-0.48393863439559937`, -0.46348872780799866`, -0.43507856130599976`, \
-0.4185844659805298, -0.4277593493461609}], "Children" -> 
           RawArray["Integer16",{{4, 2}, {5, 3}, {8, -4}, {-1, 11}, {6, 10}, {
             7, -7}, {-2, 9}, {-3, -9}, {-8, -10}, {-6, -11}, {-5, 
             12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{61, 66, 61, 63, 62, 66, 60, 68, 68}], 
           "NumericalThresholds" -> {
            0.238919897004962, -0.19741514325141904`, -0.513061612844467, \
-0.6295675337314605, 0.8752754032611848, -0.20129597187042234`, 
            0.15135144442319873`, 0.553546965122223, -0.03129779733717441}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.030102545395493507`, 
             0.27071648836135864`, -0.03012659214437008, 
             0.12452542036771774`, -0.030095528811216354`, \
-0.03010137937963009, -0.030098047107458115`, -0.030096959322690964`, \
-0.030095083639025688`, -0.030094683170318604`}], "Children" -> 
           RawArray["Integer16",{{2, -2}, {3, 4}, {6, -4}, {-3, 5}, {
             7, -6}, {-1, -7}, {9, 8}, {-8, -9}, {-5, -10}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{59, 68, 67, 68, 60, 60, 67}], 
           "NumericalThresholds" -> {-0.2489180415868759, 
            1.703814208507538, -0.33658057451248163`, -0.5285495817661284, 
            0.2018319591879845, -0.9100264012813567, -0.006360302213579415}, 
           "LeafValues" -> 
           RawArray["Real32",{0.195729061961174, 0.05468933284282684, 
             0.141041561961174, -0.03012022376060486, -0.030110502615571022`, \
-0.030112605541944504`, -0.030111609026789665`, -0.030113739892840385`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {-4, 5}, {6, 
             7}, {-5, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 55, 69, 55, 56, 66, 58, 68, 57, 63, 65, 
             69, 67, 14}], 
           "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.19106724858283994`, -0.036776391789317124`, 
            0.32777599990367895`, -0.17361307144165036`, \
-0.24031127244234082`, -0.12043159082531928`, -0.4988738149404525, \
-0.24996779114007947`, -0.10572843626141547`, -0.24787032604217527`, 
            0.03732480853796006, 0.015290492679923775`}, "LeafValues" -> 
           RawArray["Real32",{-0.002129277214407921, 0.01726617105305195, 
             0.009180898778140545, 
             
             0.005146774463355541, -0.003694901941344142, \
-0.025881368666887283`, -0.030131220817565918`, 
             0.05040400102734566, -0.006760286632925272, 0.03788721561431885, 
             0.018690200522542, 
             0.006111201364547014, -0.010150965303182602`, \
-0.042918965220451355`, -0.03653381019830704}], "Children" -> 
           RawArray["Integer16",{{5, 2}, {3, 4}, {7, -4}, {6, 8}, {-1, 13}, {
             11, -7}, {-2, -8}, {9, -9}, {10, -10}, {-5, -11}, {-3, 
             12}, {-12, -13}, {14, -14}, {-6, -15}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 60, 68, 56, 68, 58, 65, 60, 61, 60, 65, 
             67}], "NumericalThresholds" -> {-0.20411685854196546`, 
            0.17470937967300418`, 0.553546965122223, 
            0.32777599990367895`, -0.03129779733717441, -0.0753631331026554, \
-0.1057283468544483, 0.5991612970829011, -0.5130624473094939, 
            0.09353579953312875, -0.24606103450059888`, \
-0.21226380765438077`}, "LeafValues" -> 
           RawArray["Real32",{
             0.001959435408934951, -0.014513959176838398`, \
-0.043249741196632385`, -0.00014384082169272006`, 0.04136892408132553, 
             0.007491568103432655, -0.02022351697087288, 
             0.014327852055430412`, -0.020254872739315033`, \
-0.0011002423707395792`, 0.026581721380352974`, 0.02621733583509922, 
             0.03388097137212753}], "Children" -> 
           RawArray["Integer16",{{4, 2}, {5, 3}, {8, -4}, {-1, 11}, {6, 10}, {
             7, -7}, {-2, 9}, {-3, -9}, {-8, -10}, {-6, -11}, {-5, 
             12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{63, 62, 66, 65, 66, 65}], 
           "NumericalThresholds" -> {-0.6295682489871978, 
            0.8752755820751191, -0.20129597187042234`, 
            0.13304301351308825`, -0.19782416522502896`, \
-0.044466676190495484`}, "LeafValues" -> 
           RawArray["Real32",{0.24159687757492065`, 0.018597334623336792`, 
             0.06663159281015396, -0.03009900264441967, \
-0.030120359733700752`, -0.030092578381299973`, -0.030098116025328636`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, -5}, {-4, 
             6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{59, 68, 67, 68, 68, 60}], 
           "NumericalThresholds" -> {-0.2489180415868759, 
            1.8253696560859682`, -0.33658057451248163`, -0.5285495817661284, 
            1.1375968456268313`, 0.17471000552177432`}, "LeafValues" -> 
           RawArray["Real32",{0.15516699850559235`, 0.050240445882081985`, 
             0.14327773451805115`, -0.030116872861981392`, \
-0.03010767512023449, -0.030116409063339233`, -0.030110500752925873`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {-4, 5}, {
             6, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 60, 68, 56, 68, 57, 58, 65, 67, 68, 60, 
             67, 14}], 
           "NumericalThresholds" -> {-0.20411685854196546`, 
            0.17470937967300418`, 0.7914572954177858, 
            0.32777599990367895`, -0.03129779733717441, 
            0.1694809198379517, -0.0753631331026554, -0.1057283468544483, \
-0.14442425221204755`, -0.5226300954818724, 0.09353579953312875, 
            0.03732480853796006, 0.015290492679923775`}, "LeafValues" -> 
           RawArray["Real32",{-0.001977715641260147, 0.013362589292228222`, 
             0.052822794765233994`, -0.004121363162994385, \
-0.02461882308125496, -0.00802516471594572, 0.0353538915514946, 
             0.018134113401174545`, -0.012610488571226597`, 
             0.009604712948203087, 
             0.0019713272340595722`, -0.02497835084795952, \
-0.041628602892160416`, -0.03524690493941307}], "Children" -> 
           RawArray["Integer16",{{4, 2}, {5, 3}, {6, -4}, {-1, 12}, {7, 
             11}, {-3, 9}, {8, -8}, {-2, 
             10}, {-7, -10}, {-9, -11}, {-6, -12}, {13, -13}, {-5, -14}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 60, 68, 56, 68, 57, 58, 65, 67, 68, 60, 
             65, 67}], 
           "NumericalThresholds" -> {-0.20411685854196546`, 
            0.17470937967300418`, 0.7914572954177858, 
            0.32777599990367895`, -0.03129779733717441, 
            0.1694809198379517, -0.0753631331026554, -0.1057283468544483, \
-0.14442425221204755`, -0.5226300954818724, 
            0.09353579953312875, -0.24606103450059888`, \
-0.21226380765438077`}, "LeafValues" -> 
           RawArray["Real32",{
             0.0018956377170979977`, -0.01384782511740923, \
-0.05298849195241928, 0.0036364661063998938`, 0.04002371057868004, 
             0.007473176345229149, -0.03421737626194954, -0.01868770830333233,
              0.013393408618867397`, -0.009926849976181984, \
-0.001471415045671165, 0.025654766708612442`, 0.024970922619104385`, 
             0.032508913427591324`}], "Children" -> 
           RawArray["Integer16",{{4, 2}, {5, 3}, {6, -4}, {-1, 12}, {7, 
             11}, {-3, 9}, {8, -8}, {-2, 
             10}, {-7, -10}, {-9, -11}, {-6, -12}, {-5, 13}, {-13, -14}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{63, 62, 66, 65, 66, 60}], 
           "NumericalThresholds" -> {-0.6295690238475798, 
            0.8752755820751191, -0.20129597187042234`, \
-1.0000000180025095`*^-35, -0.19782416522502896`, 0.15135144442319873`}, 
           "LeafValues" -> 
           RawArray["Real32",{0.33686307072639465`, 0.017268339172005653`, 
             0.06044026464223862, -0.030095931142568588`, \
-0.03013247437775135, -0.03008922003209591, -0.030091598629951477`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, -5}, {-4, 
             6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{59, 61, 59, 68, 59, 68}], 
           "NumericalThresholds" -> {-0.49341717362403864`, 0.416365996003151,
             0.48644581437110906`, -0.5283324718475341, -0.18283767998218534`,
             1.703814208507538}, "LeafValues" -> 
           RawArray["Real32",{0.22744722664356232`, 0.03539304807782173, 
             0.13993297517299652`, 
             0.0586799792945385, -0.030201025307178497`, \
-0.03010622225701809, -0.03016858734190464}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, 5}, {-5, 
             6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{58, 60, 65, 68, 57, 69, 60, 65, 67, 63, 59}],
            "NumericalThresholds" -> {-0.2403125688433647, 
            0.17470937967300418`, -0.2460602298378944, -0.03129779733717441, 
            1.0000000180025095`*^-35, -0.255875289440155, 
            0.5991611182689668, -0.10572830960154532`, -0.32435417175292963`, \
-0.24996861070394513`, -0.023566162213683125`}, "LeafValues" -> 
           RawArray["Real32",{-0.036823514848947525`, 0.01842532493174076, 
             0.007353744003921747, 
             0.046888187527656555`, -0.02531295455992222, 
             0.0009114996064454317, 0.02005407214164734, 
             0.022233715280890465`, -0.016935134306550026`, \
-0.0024467867333441973`, -0.0004862566420342773, -0.020874157547950745`}], 
           "Children" -> 
           RawArray["Integer16",{{11, 2}, {4, 3}, {-3, 7}, {6, 
             5}, {-5, -6}, {-2, 8}, {-4, -8}, {9, 
             10}, {-7, -10}, {-9, -11}, {-1, -12}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{58, 60, 65, 68, 56, 69, 65, 60, 67, 63, 65, 
             58}], "NumericalThresholds" -> {-0.2403125688433647, 
            0.17470937967300418`, -0.2460602298378944, -0.03129779733717441, \
-0.14419662207365033`, -0.255875289440155, -0.10572830960154532`, 
            0.5991611182689668, -0.32435417175292963`, -0.24996861070394513`, \
-0.24606103450059888`, -0.330822542309761}, "LeafValues" -> 
           RawArray["Real32",{
             0.03715385124087334, -0.018412277102470398`, \
-0.007403427269309759, -0.04665646329522133, 0.026275305077433586`, 
             0.0012836236273869872`, -0.021035989746451378`, 
             0.017714548856019974`, -0.022579841315746307`, 
             0.000996052986010909, 0.0011021348182111979`, 
             0.013841438107192516`, 0.03060946799814701}], "Children" -> 
           RawArray["Integer16",{{11, 2}, {4, 3}, {-3, 8}, {6, 
             5}, {-5, -6}, {-2, 7}, {9, 
             10}, {-4, -9}, {-7, -10}, {-8, -11}, {-1, 12}, {-12, -13}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{63, 62, 66, 63, 65, 66}], 
           "NumericalThresholds" -> {-1.0076183676719663`, 
            0.8752755820751191, -0.20129597187042234`, -0.6295679509639739, 
            0.1330426335334778, -0.19782416522502896`}, "LeafValues" -> 
           RawArray["Real32",{0.34159088134765625`, 0.015889771282672882`, 
             0.05511477217078209, -0.030195405706763268`, \
-0.03009299747645855, -0.030111467465758324`, -0.03008699230849743}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {-4, 5}, {
             6, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{56, 68, 68, 67, 59, 61}], 
           "NumericalThresholds" -> {-0.40946693718433375`, 
            1.86605179309845, -0.5298320353031157, 
            0.6473582983016969, -0.2489180415868759, 0.238919897004962}, 
           "LeafValues" -> 
           RawArray["Real32",{0.24581946432590485`, 0.0590568445622921, 
             0.12748131155967712`, -0.03024447336792946, 
             0.058665771037340164`, -0.030104774981737137`, \
-0.030120722949504852`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, -5}, {-4, 
             6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 55, 55, 69, 56, 66, 55, 67, 57, 57, 60, 
             65, 63, 67, 14}], 
           "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.036776391789317124`, -0.23192767053842542`, 
            0.32777599990367895`, -0.17361307144165036`, -0.7423808276653289, \
-0.11119628697633742`, 
            0.6533616483211518, -0.4988738149404525, -0.009310914669185875, \
-0.10572843626141547`, -0.24996777623891828`, 0.03732480853796006, 
            0.015290492679923775`}, "LeafValues" -> 
           RawArray["Real32",{-0.0014428701251745224`, 
             0.017966939136385918`, -0.013371656648814678`, \
-0.002891994547098875, 
             0.021222857758402824`, -0.02226988784968853, \
-0.029104528948664665`, 
             0.05109408497810364, -0.009725634939968586, \
-0.005420029163360596, 0.04166904836893082, 
             0.012814079411327839`, -0.0037842218298465014`, 
             0.015662260353565216`, -0.039707764983177185`, \
-0.03314712271094322}], "Children" -> 
           RawArray["Integer16",{{5, 2}, {4, 3}, {6, 9}, {7, 8}, {-1, 14}, {
             11, -7}, {-2, -8}, {-5, -9}, {10, -10}, {13, -11}, {-3, 
             12}, {-12, -13}, {-4, -14}, {15, -15}, {-6, -16}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 55, 55, 69, 56, 66, 58, 67, 60, 55, 65, 
             58, 69, 62}], 
           "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.036776391789317124`, -0.23192767053842542`, 
            0.32777599990367895`, -0.17361307144165036`, \
-0.24031095951795575`, -0.11119628697633742`, 
            0.09353595599532129, -0.03677611239254474, -0.10572843626141547`, \
-0.23054439574480054`, -0.24787032604217527`, -0.4022012501955032}, 
           "LeafValues" -> 
           RawArray["Real32",{
             0.0015407977625727654`, -0.01681879535317421, \
-0.007563289254903793, -0.02236161381006241, -0.021498972550034523`, 
             0.03744407743215561, 0.02863025665283203, -0.04984027519822121, 
             0.010603882372379303`, -0.02751227840781212, \
-0.005411798134446144, -0.005146855488419533, 0.012994436547160149`, 
             0.00996206421405077, 0.026173213496804237`}], "Children" -> 
           RawArray["Integer16",{{5, 2}, {4, 3}, {6, 9}, {7, 8}, {-1, 14}, {
             11, -7}, {-2, -8}, {-5, -9}, {10, -10}, {-4, 12}, {-3, 
             13}, {-11, -13}, {-12, -14}, {-6, -15}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 66, 65, 63, 62, 66, 65, 60}], 
           "NumericalThresholds" -> {-1.0076183676719663`, \
-0.19741514325141904`, -0.10572828352451323`, -0.6295682489871978, 
            0.8752754628658296, -0.20129597187042234`, 
            0.13304200768470767`, -0.3090826272964477}, "LeafValues" -> 
           RawArray["Real32",{0.2377232313156128, 
             0.10297323018312454`, -0.03021087497472763, \
-0.030120136216282845`, -0.030080970376729965`, -0.03011222928762436, \
-0.030097894370555878`, -0.030103474855422974`, -0.030084947124123573`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, 6}, {-3, 5}, {
             7, -6}, {-4, -7}, {8, -8}, {-5, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{56, 68, 68, 67, 59, 61}], 
           "NumericalThresholds" -> {-0.4094672948122024, 
            1.86605179309845, -0.5301915705204009, 
            0.6953771114349366, -0.2489180415868759, 0.416365459561348}, 
           "LeafValues" -> 
           RawArray["Real32",{0.23904451727867126`, 0.06278776377439499, 
             0.10691287368535995`, -0.030237941071391106`, 
             0.06096559017896652, -0.030102087184786797`, \
-0.030119307339191437`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, -5}, {-4, 
             6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{58, 60, 68, 68, 60, 57, 69, 65, 67, 68, 59}],
            "NumericalThresholds" -> {-0.2403125688433647, 
            0.17470937967300418`, 0.6306600868701936, -0.03129779733717441, 
            0.5991612970829011, 
            1.0000000180025095`*^-35, -0.255875289440155, \
-0.10572830960154532`, -0.32435417175292963`, -0.5207232534885405, \
-0.023566162213683125`}, "LeafValues" -> 
           RawArray["Real32",{-0.03480532765388489, 0.01657790318131447, 
             0.040239717811346054`, 
             0.000981100951321423, -0.024103160947561264`, 
             0.015594047494232655`, 0.001280538272112608, 
             0.01823095977306366, -0.009426414966583252, \
-0.0024124442134052515`, 0.002560615073889494, -0.01897526904940605}], 
           "Children" -> 
           RawArray["Integer16",{{11, 2}, {4, 3}, {5, -4}, {7, 
             6}, {-3, -6}, {-5, -7}, {-2, 8}, {9, 
             10}, {-8, -10}, {-9, -11}, {-1, -12}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{58, 60, 68, 68, 56, 60, 69, 65, 67, 63, 65, 
             58}], "NumericalThresholds" -> {-0.2403125688433647, 
            0.17470937967300418`, 
            0.6306600868701936, -0.03129779733717441, -0.14419662207365033`, 
            0.5991612970829011, -0.255875289440155, -0.1057283468544483, \
-0.32435417175292963`, -0.24996861070394513`, -0.24606103450059888`, \
-0.330822542309761}, "LeafValues" -> 
           RawArray["Real32",{
             0.035187434405088425`, -0.016584502533078194`, \
-0.039970237761735916`, -0.0013449590187519789`, 0.025255585089325905`, 
             0.0005786871770396829, -0.01594305969774723, \
-0.02231886237859726, 0.017047757282853127`, 0.00241673132404685, 
             0.0007572423201054335, 0.012009718455374241`, 
             0.02842988632619381}], "Children" -> 
           RawArray["Integer16",{{11, 2}, {4, 3}, {6, -4}, {7, 
             5}, {-5, -6}, {-3, -7}, {-2, 8}, {9, 
             10}, {-8, -10}, {-9, -11}, {-1, 12}, {-12, -13}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 66, 69, 63, 62, 65, 66, 60}], 
           "NumericalThresholds" -> {-1.0076183676719663`, \
-0.19741514325141904`, -0.2455915659666061, -0.6295682489871978, 
            0.8752754628658296, 
            0.13304200768470767`, -0.20129597187042234`, -0.3090826272964477},
            "LeafValues" -> 
           RawArray["Real32",{0.18296340107917786`, 
             0.09716308861970901, -0.030204368755221367`, \
-0.030120208859443665`, -0.030077874660491943`, -0.030108993873000145`, \
-0.03010035678744316, -0.0301022008061409, -0.030082400888204575`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, 7}, {-3, 5}, {6, -6}, {
             8, -7}, {-4, -8}, {-5, -9}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{65, 61, 68, 67, 59, 68}], 
           "NumericalThresholds" -> {-0.8721500933170317, 0.416365996003151, 
            2.2128731012344365`, -0.3370178192853927, -0.2489180415868759, 
            1.299266815185547}, "LeafValues" -> 
           RawArray["Real32",{0.22186493873596191`, 0.06615818291902542, 
             0.10061031579971313`, 
             0.05841148644685745, -0.030277123674750328`, \
-0.030101219192147255`, -0.030152229592204094`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, 5}, {-5, 
             6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 55, 55, 69, 56, 66, 58, 68, 57, 63, 60, 
             59, 67, 14}], 
           "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.036776391789317124`, -0.19106724858283994`, 
            0.32777599990367895`, -0.17361307144165036`, \
-0.24031127244234082`, -0.12043159082531928`, -0.4988738149404525, \
-0.24996779114007947`, -0.009310914669185875, 0.3675514310598374, 
            0.03732480853796006, 0.015290492679923775`}, "LeafValues" -> 
           RawArray["Real32",{-0.0010663805296644568`, 
             0.01149931363761425, -0.012923787347972393`, \
-0.0037028207443654537`, 
             0.0023407500702887774`, -0.02006779983639717, \
-0.02778398059308529, 0.039683856070041656`, -0.00664158258587122, 
             0.03164607286453247, 0.016440555453300476`, 
             0.0043251607567071915`, -0.012419885024428368`, \
-0.03811798244714737, -0.03126804158091545}], "Children" -> 
           RawArray["Integer16",{{5, 2}, {4, 3}, {6, 8}, {7, -5}, {-1, 13}, {
             11, -7}, {-2, -8}, {9, -9}, {10, -10}, {-4, -11}, {-3, 
             12}, {-12, -13}, {14, -14}, {-6, -15}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 55, 55, 69, 56, 66, 58, 57, 57, 67, 61, 
             59, 60, 62}], 
           "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.036776391789317124`, -0.23192767053842542`, 
            0.32777599990367895`, -0.17361307144165036`, \
-0.24031095951795575`, 
            0.6533616483211518, -0.4988738149404525, -0.11119628697633742`, \
-0.51306214928627, 
            0.3675514608621598, -0.009310914669185875, -0.4022012501955032}, 
           "LeafValues" -> 
           RawArray["Real32",{0.001155275385826826, -0.014552323147654533`, 
             0.012783552519977093`, 
             0.005775173660367727, -0.019225498661398888`, 
             0.03561689704656601, 0.027336880564689636`, -0.04507460817694664,
              0.0063584647141397, -0.04137242212891579, 
             0.010217766277492046`, -0.013334742747247219`, 
             0.013679244555532932`, -0.0038865439128130674`, 
             0.02412126399576664}], "Children" -> 
           RawArray["Integer16",{{5, 2}, {4, 3}, {6, 8}, {7, 10}, {-1, 14}, {
             12, -7}, {-2, -8}, {9, -9}, {11, -10}, {-5, -11}, {-4, -12}, {
             13, -13}, {-3, -14}, {-6, -15}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 62, 57, 63, 63, 66, 61, 65}], 
           "NumericalThresholds" -> {-1.0076183676719663`, 
            0.8752755820751191, -0.4988755136728286, -0.24996719509363172`, \
-0.6295682489871978, -0.19741514325141904`, -0.513061612844467, 
            0.13304200768470767`}, "LeafValues" -> 
           RawArray["Real32",{0.14866897463798523`, -0.03009803779423237, 
             0.05284152552485466, -0.03020833618938923, 
             
             0.08542397618293762, -0.03009781613945961, \
-0.030079148709774017`, -0.030119866132736206`, -0.030096903443336487`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, -5}, {-4, 
             6}, {7, 8}, {-6, -8}, {-7, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{56, 66, 55, 67, 59, 68, 68}], 
           "NumericalThresholds" -> {-0.48675483465194697`, \
-0.10328377783298491`, -0.03677671588957309, -0.33738800883293146`, \
-0.2489180415868759, 1.1860395669937136`, -0.5289332270622252}, "LeafValues" -> 
           RawArray["Real32",{0.2065744251012802, 
             0.07100151479244232, -0.030154000967741013`, 
             0.17987611889839172`, -0.030247218906879425`, \
-0.030126286670565605`, -0.030156580731272697`, -0.030098501592874527`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, 5}, {-5, 
             6}, {7, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
            "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{58, 55, 69, 68, 55, 60, 65, 57, 55, 59, 66, 
             68}], "NumericalThresholds" -> {-0.2403125688433647, \
-0.1423426494002342, -0.1821493953466415, -0.03129779733717441, \
-0.036776391789317124`, -0.00930985528975725, -0.24605972319841382`, 
            0.20304237306118014`, -0.03677598573267459, \
-0.023566162213683125`, -0.18742114305496213`, -0.5230205059051513}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.03302786871790886, 
             0.019411249086260796`, -0.010787821374833584`, 
             0.0008256434230133891, -0.025045817717909813`, 
             0.011576598510146141`, 0.02280804142355919, 
             0.038704801350831985`, -0.004537021741271019, \
-0.007385836448520422, -0.017198670655488968`, -0.011626919731497765`, 
             0.00598166836425662}], "Children" -> 
           RawArray["Integer16",{{10, 2}, {3, 4}, {7, -4}, {5, 8}, {11, 6}, {
             9, -7}, {-2, -8}, {-5, -9}, {-6, -10}, {-1, -11}, {
             12, -12}, {-3, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{58, 60, 65, 68, 56, 69, 65, 57, 60, 61, 63, 
             65, 58, 59}], 
           "NumericalThresholds" -> {-0.2403125688433647, 
            0.17470937967300418`, -0.2460602298378944, -0.03129779733717441, \
-0.14419662207365033`, -0.2459611669182777, -0.10572830960154532`, \
-0.4988738149404525, 
            0.5991611182689668, -0.5130622684955596, -0.24996729940176007`, \
-0.24606103450059888`, -0.330822542309761, 0.36755059659481054`}, 
           "LeafValues" -> 
           RawArray["Real32",{0.033489178866147995`, 
             0.006041595712304115, -0.004475991241633892, \
-0.03799326345324516, 
             0.024172648787498474`, -0.000021953581381239928`, \
-0.0017572692595422268`, 
             0.002923188265413046, -0.02369186095893383, \
-0.017993630841374397`, -0.011082910932600498`, 0.01667092554271221, 
             0.01026627141982317, 0.02646142803132534, -0.01719731092453003}],
            "Children" -> 
           RawArray["Integer16",{{12, 2}, {4, 3}, {-3, 9}, {6, 5}, {-5, -6}, {
             8, 7}, {14, 11}, {10, -9}, {-4, -10}, {-2, -11}, {-8, -12}, {-1, 
             13}, {-13, -14}, {-7, -15}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 66, 56, 63, 62, 65, 66, 60}], 
           "NumericalThresholds" -> {-1.0076183676719663`, \
-0.19741514325141904`, 0.15596465021371844`, -0.6295682489871978, 
            0.8752754628658296, 
            0.13304253667593005`, -0.20129597187042234`, -0.3090826272964477},
            "LeafValues" -> 
           RawArray["Real32",{0.12474653869867325`, 
             0.09098906815052032, -0.03019297868013382, \
-0.030119813978672028`, -0.030072232708334923`, -0.030110357329249382`, \
-0.030096903443336487`, -0.03010236658155918, -0.030078433454036713`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, 7}, {-3, 5}, {6, -6}, {
             8, -7}, {-4, -8}, {-5, -9}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{65, 61, 59, 67, 59, 68}], 
           "NumericalThresholds" -> {-0.8721500933170317, 0.416365996003151, 
            0.4968919754028321, -0.3370178192853927, -0.2489180415868759, 
            1.86605179309845}, "LeafValues" -> 
           RawArray["Real32",{0.17216521501541138`, 0.05467844754457474, 
             0.08501679450273514, 
             0.060198213905096054`, -0.030315326526761055`, \
-0.030095523223280907`, -0.030216744169592857`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, 5}, {-5, 
             6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 55, 55, 56, 69, 66, 58, 57, 57, 57, 60, 
             59, 31}], 
           "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.036776391789317124`, 
            0.32777599990367895`, -0.19106724858283994`, \
-0.17361307144165036`, -0.24031127244234082`, 
            0.6533616483211518, -0.4988738149404525, -0.49887450039386744`, \
-0.009310914669185875, 0.3675514310598374, 0.07297900691628458}, "LeafValues" -> 
           RawArray["Real32",{-0.0007765045738779008, 
             0.009763718582689762, -0.012168209068477154`, 
             0.012657944113016129`, -0.03308482468128204, 
             0.0019547699484974146`, -0.02623586542904377, 
             0.03565144166350365, -0.0059080482460558414`, 
             0.03608977049589157, -0.005272008944302797, 
             0.004224245436489582, -0.01174655370414257, \
-0.020827587693929672`}], "Children" -> 
           RawArray["Integer16",{{4, 2}, {5, 3}, {6, 8}, {-1, 13}, {7, -6}, {
             11, -7}, {-2, -8}, {9, -9}, {10, -10}, {-4, -11}, {-3, 
             12}, {-12, -13}, {-5, -14}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 55, 55, 69, 56, 66, 58, 57, 57, 67, 61, 
             59, 62, 67, 66}], 
           "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.036776391789317124`, -0.23192767053842542`, 
            0.32777599990367895`, -0.17361307144165036`, \
-0.24031095951795575`, 
            0.6533616483211518, -0.4988738149404525, -0.11119628697633742`, \
-0.51306214928627, 0.3675514608621598, 
            0.8752742707729341, -0.24549285322427747`, -0.16564054787158963`},
            "LeafValues" -> 
           RawArray["Real32",{
             0.0008802263182587922, -0.012483308091759682`, \
-0.00882929377257824, 0.005861630197614431, -0.017849311232566833`, 
             0.018313366919755936`, 
             0.025798935443162918`, -0.04081543907523155, 
             0.006783579010516405, -0.03862518444657326, 
             0.010327079333364964`, -0.012321812100708485`, 
             0.012951046228408813`, 0.0050756074488162994`, 
             0.036291882395744324`, 0.025170203298330307`}], "Children" -> 
           RawArray["Integer16",{{5, 2}, {4, 3}, {6, 8}, {7, 10}, {-1, 14}, {
             12, -7}, {-2, -8}, {9, -9}, {11, -10}, {-5, -11}, {-4, -12}, {
             13, -13}, {-3, -14}, {-6, 15}, {-15, -16}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 66, 65, 63, 62, 58, 65, 60}], 
           "NumericalThresholds" -> {-1.0076183676719663`, \
-0.19741514325141904`, -0.10572828352451323`, -0.6295682489871978, 
            0.8752754628658296, -0.23054396361112592`, 
            0.13304253667593005`, -0.3090826272964477}, "LeafValues" -> 
           RawArray["Real32",{0.1080043762922287, 
             0.09013677388429642, -0.030187183991074562`, \
-0.030101899057626724`, -0.030069297179579735`, -0.030106863006949425`, \
-0.030121581628918648`, -0.030093856155872345`, -0.030076049268245697`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, 6}, {-3, 5}, {
             7, -6}, {-4, -7}, {8, -8}, {-5, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{59, 68, 66, 66, 56, 65, 55}], 
           "NumericalThresholds" -> {-0.49341717362403864`, 
            1.86605179309845, -0.20005169510841367`, -0.2021006867289543, \
-0.4094672948122024, -0.8721500933170317, -0.03677574731409549}, "LeafValues" -> 
           RawArray["Real32",{0.16016605496406555`, -0.0301356203854084, 
             0.08320499956607819, -0.030436906963586807`, 
             0.15146943926811218`, -0.030148623511195183`, \
-0.030097542330622673`, -0.030126530677080154`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, -5}, {-4, 
             6}, {-6, 7}, {-7, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
            "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{58, 55, 69, 68, 55, 60, 58, 65, 59, 67, 59}],
            "NumericalThresholds" -> {-0.2403125688433647, \
-0.1423426494002342, -0.1821493953466415, 
            0.281765103340149, -0.036776391789317124`, 
            0.09353579953312875, -0.1782741621136665, -0.24605972319841382`, \
-0.023566162213683125`, -0.3343645334243774, 0.36755110323429113`}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.03143901750445366, 0.017188580706715584`, 
             0.007754349149763584, 
             0.0004388685047160834, -0.018431801348924637`, 
             0.010185951367020607`, 
             0.028401147574186325`, -0.018220549449324608`, 
             0.035104598850011826`, -0.015557457692921162`, \
-0.00004278896449250169, -0.01519466657191515}], "Children" -> 
           RawArray["Integer16",{{9, 2}, {3, 4}, {8, -4}, {5, -5}, {10, 6}, {
             7, -7}, {-6, -8}, {-2, -9}, {-1, -10}, {-3, 11}, {-11, -12}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{58, 60, 68, 68, 56, 60, 69, 65, 59, 66, 68, 
             65, 58, 59}], 
           "NumericalThresholds" -> {-0.2403125688433647, 
            0.17470937967300418`, 
            0.6306600868701936, -0.03129779733717441, -0.14419662207365033`, 
            0.5991612970829011, -0.2459611669182777, -0.10572830960154532`, 
            0.36755086481571203`, -0.18715900182723996`, -0.5207232534885405, \
-0.24606103450059888`, -0.330822542309761, 0.36755059659481054`}, 
           "LeafValues" -> 
           RawArray["Real32",{
             0.031995806843042374`, -0.024761684238910675`, \
-0.03340241312980652, 0.0006656207260675728, 
             0.02319595403969288, -0.0002194256812799722, \
-0.012393857352435589`, -0.0015237032203003764`, 0.013376201502978802`, 
             0.0022523938678205013`, -0.00604703975841403, 
             0.0012434725649654865`, 0.00862218253314495, 
             0.02460884489119053, -0.016668738797307014`}], "Children" -> 
           RawArray["Integer16",{{12, 2}, {4, 3}, {6, -4}, {7, 
             5}, {-5, -6}, {-3, -7}, {9, 8}, {14, 11}, {
             10, -10}, {-2, -11}, {-9, -12}, {-1, 
             13}, {-13, -14}, {-8, -15}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 62, 57, 56, 63, 66, 65, 65}], 
           "NumericalThresholds" -> {-1.0076183676719663`, 
            0.8752755820751191, -0.4988755136728286, 
            0.09390447661280633, -0.6295681297779082, -0.19741514325141904`, \
-0.10572830960154532`, 0.13304158300161364`}, "LeafValues" -> 
           RawArray["Real32",{0.09472537785768509, -0.030091218650341034`, 
             0.05050275847315788, -0.030184432864189148`, 
             0.08931364864110947, -0.0301243606954813, \
-0.030071886256337166`, -0.030098339542746544`, -0.030085278674960136`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, -5}, {-4, 
             6}, {7, 8}, {-6, -8}, {-7, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{56, 66, 12, 68, 59, 68, 62}], 
           "NumericalThresholds" -> {-0.48675483465194697`, \
-0.10328377783298491`, 
            0.02351276203989983, -0.5301915705204009, -0.2489180415868759, 
            1.1860395669937136`, -0.4481614083051681}, "LeafValues" -> 
           RawArray["Real32",{0.1540284901857376, 
             0.061911050230264664`, -0.030194075778126717`, 
             0.1567123532295227, -0.03026522882282734, -0.03012283518910408, \
-0.030161865055561066`, -0.030092919245362282`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, 5}, {-5, 
             6}, {7, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
            "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{58, 55, 69, 68, 55, 60, 58, 68, 59, 67, 59}],
            "NumericalThresholds" -> {-0.2403125688433647, \
-0.1423426494002342, -0.1821493953466415, 
            0.281765103340149, -0.036776391789317124`, 
            0.09353579953312875, -0.1782741621136665, -0.3154060691595077, \
-0.023566162213683125`, -0.3343645334243774, 0.36755110323429113`}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.030695507302880287`, 0.03682886064052582, 
             0.007489505223929882, 
             0.0001714374520815909, -0.017703985795378685`, 
             0.009802406653761864, 0.02723526582121849, -0.01771342009305954, 
             0.019636183977127075`, -0.014720654115080833`, \
-0.0001426051021553576, -0.014831319451332092`}], "Children" -> 
           RawArray["Integer16",{{9, 2}, {3, 4}, {8, -4}, {5, -5}, {10, 6}, {
             7, -7}, {-6, -8}, {-2, -9}, {-1, -10}, {-3, 11}, {-11, -12}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 58, 56, 63, 68, 56, 69, 58, 62}], 
           "NumericalThresholds" -> {-0.20411685854196546`, 
            0.18760044127702716`, 0.32777599990367895`, 0.13067141920328143`, 
            0.6306600868701936, 
            0.6819218695163728, -0.0964996963739395, -0.0753631331026554, \
-0.4022012501955032}, "LeafValues" -> 
           RawArray["Real32",{0.0005847806460224092, 
             0.0008623932371847332, -0.03344759717583656, 
             0.03269287943840027, -0.005288961809128523, 
             0.012646444141864777`, -0.02125811018049717, 
             0.013027871027588844`, -0.019399961456656456`, 
             0.020349280908703804`}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {5, 4}, {-1, 9}, {-3, -5}, {6, -6}, {
             7, -7}, {8, -8}, {-2, -9}, {-4, -10}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 60, 66, 69, 63, 63, 62, 65}], 
           "NumericalThresholds" -> {-0.9100271761417388, 
            0.6037080585956575, -0.19741514325141904`, -0.2455915659666061, \
-1.0076183676719663`, -0.6295680701732634, 
            0.8752755224704744, -0.10572808608412741`}, "LeafValues" -> 
           RawArray["Real32",{0.11639567464590073`, 0.10257137566804886`, 
             0.07379014790058136, -0.031131528317928314`, \
-0.030124351382255554`, -0.030161064118146896`, -0.030072227120399475`, \
-0.03011534921824932, -0.030104463919997215`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, 8}, {-4, 
             6}, {-6, 7}, {-7, -8}, {-5, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{65, 61, 67, 60, 59, 68}], 
           "NumericalThresholds" -> {-0.8721500933170317, 
            0.416365996003151, -0.33738800883293146`, 
            0.5991618037223817, -0.2489180415868759, 1.86605179309845}, 
           "LeafValues" -> 
           RawArray["Real32",{0.1383579671382904, 0.06218525022268295, 
             0.07260974496603012, -0.03035729005932808, 
             0.059440866112709045`, -0.030091378837823868`, \
-0.030230341479182243`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, -5}, {-4, 
             6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{58, 55, 69, 68, 55, 60, 35, 65, 55, 59, 66, 
             68}], "NumericalThresholds" -> {-0.2403125688433647, \
-0.1423426494002342, -0.1821493953466415, -0.03129779733717441, \
-0.036776391789317124`, -0.00930985528975725, 
            0.03743703663349152, -0.24605990201234815`, -0.03677598573267459, \
-0.023566162213683125`, -0.18742114305496213`, -0.5230205059051513}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.029929524287581444`, 
             0.014911883510649204`, -0.010056698694825172`, 
             3.812581780948676*^-6, -0.02380121685564518, 
             0.009891231544315815, 0.01972402259707451, -0.003206996712833643,
              0.03168995678424835, -0.0073120370507240295`, \
-0.013942988589406013`, -0.011024250648915768`, 0.006066844332963228}], 
           "Children" -> 
           RawArray["Integer16",{{10, 2}, {3, 4}, {8, -4}, {5, 7}, {11, 6}, {
             9, -7}, {-5, -8}, {-2, -9}, {-6, -10}, {-1, -11}, {
             12, -12}, {-3, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 58, 56, 63, 68, 56, 69, 58, 67, 66}], 
           "NumericalThresholds" -> {-0.20411685854196546`, 
            0.18760044127702716`, 0.32777599990367895`, 0.13067141920328143`, 
            0.6306600868701936, 
            0.6819218695163728, -0.0964996963739395, -0.0753631331026554, \
-0.24549285322427747`, -0.16564054787158963`}, "LeafValues" -> 
           RawArray["Real32",{0.00040628365240991116`, 
             0.0008379198843613267, -0.03215820714831352, 
             0.015473755076527596`, -0.004858534317463636, 
             0.012204818427562714`, -0.019999366253614426`, 
             0.012656963430345058`, -0.018402311950922012`, 
             0.034348271787166595`, 0.022642245516180992`}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {5, 4}, {-1, 9}, {-3, -5}, {6, -6}, {
             7, -7}, {8, -8}, {-2, -9}, {-4, 10}, {-10, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 66, 67, 63, 62, 66, 65, 57}], 
           "NumericalThresholds" -> {-1.0076183676719663`, \
-0.19741514325141904`, -0.32520350813865656`, -0.6295682489871978, 
            0.8752755224704744, -0.20129597187042234`, 
            0.1330416649580002, -0.4988755136728286}, "LeafValues" -> 
           RawArray["Real32",{0.08260661363601685, 
             0.08009641617536545, -0.030178463086485863`, \
-0.03012830764055252, -0.0300749484449625, -0.030111799016594887`, \
-0.030109429731965065`, -0.03008502721786499, -0.030068816617131233`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, 6}, {-3, 5}, {
             7, -6}, {-4, -7}, {8, -8}, {-5, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{59, 61, 68, 60, 56, 68}], 
           "NumericalThresholds" -> {-0.49341717362403864`, 
            0.416365996003151, -0.5301915705204009, 
            0.6014347672462464, -0.48675483465194697`, 1.86605179309845}, 
           "LeafValues" -> 
           RawArray["Real32",{0.12586228549480438`, 0.06290657818317413, 
             0.07143204659223557, -0.030480682849884033`, 
             0.06102911755442619, -0.030099008232355118`, \
-0.03023539111018181}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, -5}, {-4, 
             6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 55, 55, 56, 66, 69, 55, 63, 57, 57, 57, 
             55, 62, 57, 67, 14}], 
           "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.036776391789317124`, 
            0.32777599990367895`, -0.17361307144165036`, \
-0.23192767053842542`, -0.7423808276653289, 0.15785063058137896`, 
            0.6533616483211518, -0.4988738149404525, -0.49887450039386744`, \
-0.03677715733647346, 0.8752750456333162, -0.49887524545192713`, 
            0.03732480853796006, 0.015290492679923775`}, "LeafValues" -> 
           RawArray["Real32",{-0.00007069327693898231, 0.009180986322462559, 
             0.011130686849355698`, 
             0.011251247487962246`, -0.013979829847812653`, \
-0.024502232670783997`, 0.01646733656525612, 
             0.03629486635327339, -0.009504904970526695, \
-0.005929952021688223, 
             0.03183737024664879, -0.005864080041646957, \
-0.0014067658921703696`, -0.01856730692088604, -0.0020005181431770325`, \
-0.03461022675037384, -0.026564428582787514`}], "Children" -> 
           RawArray["Integer16",{{4, 2}, {6, 3}, {5, 9}, {-1, 15}, {12, -6}, {
             7, 8}, {-2, -8}, {-7, -9}, {10, -10}, {11, -11}, {-4, -12}, {14, 
             13}, {-13, -14}, {-3, -15}, {16, -16}, {-5, -17}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 58, 56, 63, 69, 68, 58, 65, 57, 68, 69, 
             31}], "NumericalThresholds" -> {-0.20411685854196546`, 
            0.18760044127702716`, 0.32777599990367895`, 
            0.13067141920328143`, -0.2459611669182777, 
            0.6306600868701936, -0.23054557293653485`, -0.10572830960154532`, \
-0.4988738149404525, -0.30336581170558924`, -0.2500579953193664, 
            0.07297900691628458}, "LeafValues" -> 
           RawArray["Real32",{0.0002650234382599592, 
             0.006729101296514273, -0.030929164960980415`, 
             0.028997277840971947`, -0.004487203899770975, \
-0.014606082811951637`, 0.01534958928823471, -0.00551401125267148, 
             0.008363021537661552, -0.024028567597270012`, \
-0.004782524891197681, -0.009498748928308487, 0.01645881123840809}], 
           "Children" -> 
           RawArray["Integer16",{{3, 2}, {5, 4}, {-1, 12}, {-3, -5}, {9, 6}, {
             7, -7}, {-6, 8}, {-8, -9}, {11, 
             10}, {-10, -11}, {-2, -12}, {-4, -13}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 60, 66, 65, 63, 63, 62, 69}], 
           "NumericalThresholds" -> {-0.9100271761417388, 
            0.6037085056304933, -0.19741514325141904`, -0.10572828352451323`, \
-1.0076183676719663`, -0.6295680701732634, 
            0.8752755224704744, -0.24320799112319944`}, "LeafValues" -> 
           RawArray["Real32",{0.10154464840888977`, 0.0922100618481636, 
             0.0695335865020752, -0.031186049804091454`, \
-0.03011774644255638, -0.030151287093758583`, -0.030067821964621544`, \
-0.030108464881777763`, -0.03010164201259613}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, 8}, {-4, 
             6}, {-6, 7}, {-7, -8}, {-5, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{56, 68, 67, 67, 59, 61}], 
           "NumericalThresholds" -> {-0.48675483465194697`, 
            1.86605179309845, -0.3377746790647506, 
            1.0099873542785647`, -0.2489180415868759, -0.04220612905919551}, 
           "LeafValues" -> 
           RawArray["Real32",{0.12077612429857254`, 0.06884095072746277, 
             0.074779212474823, -0.030301420018076897`, 
             0.07067640125751495, -0.03008858859539032, \
-0.030133457854390144`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, -5}, {-4, 
             6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{58, 55, 69, 68, 55, 60, 35, 56, 59, 55, 66, 
             68}], "NumericalThresholds" -> {-0.2403125688433647, \
-0.1423426494002342, -0.1821493953466415, -0.03129779733717441, \
-0.036776391789317124`, -0.00930985528975725, 0.03743703663349152, 
            0.6819213330745698, -0.023566162213683125`, -0.03677598573267459, \
-0.18742114305496213`, -0.5230205059051513}, "LeafValues" -> 
           RawArray["Real32",{-0.028560128062963486`, 
             0.030968599021434784`, -0.00964034628123045, \
-0.00037483801133930683`, -0.023218806833028793`, 0.009395970962941647, 
             0.018290692940354347`, -0.0027743522077798843`, 
             0.015363706275820732`, -0.012550091370940208`, \
-0.007039806805551052, -0.010634142905473709`, 0.0059255873784422874`}], 
           "Children" -> 
           RawArray["Integer16",{{9, 2}, {3, 4}, {8, -4}, {5, 7}, {11, 6}, {
             10, -7}, {-5, -8}, {-2, -9}, {-1, -10}, {-6, -11}, {
             12, -12}, {-3, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 58, 56, 63, 68, 56, 61, 60, 69, 62}], 
           "NumericalThresholds" -> {-0.20411685854196546`, 
            0.18760044127702716`, 0.32777599990367895`, 0.13067141920328143`, 
            0.6306600868701936, 
            0.6819218695163728, -0.5130624473094939, -0.009310305584222077, \
-0.15243975073099134`, -0.4022012501955032}, "LeafValues" -> 
           RawArray["Real32",{0.0002935693191830069, 
             0.01577937789261341, -0.02944996953010559, 
             0.030791018158197403`, -0.00405919412150979, 
             0.011468317359685898`, -0.018122965469956398`, \
-0.006378399208188057, -0.0038529047742486, 0.011048685759305954`, 
             0.017700552940368652`}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {5, 4}, {-1, 10}, {-3, -5}, {
             6, -6}, {7, -7}, {8, 9}, {-2, -9}, {-8, -10}, {-4, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 62, 57, 62, 63, 66, 65, 60}], 
           "NumericalThresholds" -> {-1.0076183676719663`, 
            0.8752755820751191, -0.4988755136728286, 
            0.7515833079814912, -0.6295682489871978, -0.19741514325141904`, \
-0.10572828352451323`, 0.5991616547107698}, "LeafValues" -> 
           RawArray["Real32",{0.07352041453123093, -0.030088163912296295`, 
             0.0481627993285656, -0.030183443799614906`, 
             0.09592289477586746, -0.03013685718178749, \
-0.030066072940826416`, -0.030098315328359604`, -0.030081067234277725`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, -5}, {-4, 
             6}, {7, 8}, {-6, -8}, {-7, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{65, 68, 66, 66, 59, 61, 59}], 
           "NumericalThresholds" -> {-0.8721500933170317, 
            1.86605179309845, -0.20005169510841367`, -0.20191619545221326`, \
-0.2489180415868759, 0.416365996003151, 0.4968919754028321}, "LeafValues" -> 
           RawArray["Real32",{0.11543732136487961`, -0.030137594789266586`, 
             0.06453806161880493, -0.03045695647597313, 
             0.14901718497276306`, -0.030087139457464218`, \
-0.030153566971421242`, -0.03014293685555458}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, -5}, {-4, 
             6}, {7, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
            "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{58, 55, 69, 67, 57, 56, 65, 61, 66, 68, 67}],
            "NumericalThresholds" -> {-0.2403125688433647, \
-0.1423426494002342, -0.1821493953466415, 0.27385891973972326`, 
            0.20304237306118014`, 
            0.155965693295002, -0.10572855547070502`, -0.513062685728073, \
-0.18501072376966474`, -0.3154060691595077, -0.011519353371113537`}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.009178432635962963, 
             0.031813547015190125`, -0.007978173904120922, \
-0.0004993891925550997, -0.020880986005067825`, -0.0035769478417932987`, \
-0.02036694996058941, 0.02478807605803013, 
             0.0036605054046958685`, -0.021211855113506317`, 
             0.016173284500837326`, -0.029846012592315674`}], "Children" -> 
           RawArray["Integer16",{{9, 2}, {3, 4}, {10, -4}, {5, -5}, {6, 7}, {
             8, -7}, {-6, -8}, {-3, -9}, {-1, 11}, {-2, -11}, {-10, -12}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 58, 56, 63, 69, 59, 60, 65, 67, 68, 57, 
             68, 69, 62}], 
           "NumericalThresholds" -> {-0.20411685854196546`, 
            0.18760044127702716`, 0.32777599990367895`, 
            0.13067141920328143`, -0.2459611669182777, 0.36755053699016577`, 
            0.12799399346113208`, -0.10572833195328711`, \
-0.10382879897952078`, -0.5203730165958403, -0.4988738149404525, \
-0.30336581170558924`, -0.2500579953193664, -0.4022012501955032}, 
           "LeafValues" -> 
           RawArray["Real32",{0.00018760371312964708`, 
             0.006448998115956783, -0.028367260470986366`, 
             0.03016160987317562, -0.0036084854509681463`, 
             0.007471182849258184, -0.017677508294582367`, \
-0.006098967511206865, 0.010855848900973797`, 
             0.026508456096053123`, -0.005107061006128788, \
-0.022286787629127502`, -0.0038331463001668453`, -0.009262979961931705, 
             0.016984710469841957`}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {5, 4}, {-1, 14}, {-3, -5}, {11, 
             6}, {7, 8}, {9, -8}, {-7, 10}, {-6, -10}, {-9, -11}, {13, 
             12}, {-12, -13}, {-2, -14}, {-4, -15}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 59, 66, 61, 63, 63, 62, 65}], 
           "NumericalThresholds" -> {-0.9100271761417388, 
            0.496893122792244, -0.19741514325141904`, -0.513061612844467, \
-1.0076183676719663`, -0.6295681297779082, 
            0.8752755224704744, -0.10572805628180502`}, "LeafValues" -> 
           RawArray["Real32",{0.09023553133010864, -0.030146509408950806`, 
             0.06034225970506668, -0.03126576170325279, 
             0.08971516042947769, -0.030156604945659637`, \
-0.030064428225159645`, -0.030110454186797142`, -0.030103487893939018`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {8, -5}, {-4, 
             6}, {-6, 7}, {-7, -8}, {-2, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{59, 61, 67, 68, 56, 68}], 
           "NumericalThresholds" -> {-0.49341717362403864`, 
            0.416365996003151, -0.3377746790647506, 
            2.723320007324219, -0.48675483465194697`, 1.86605179309845}, 
           "LeafValues" -> 
           RawArray["Real32",{0.1040731891989708, 0.06251324713230133, 
             0.06422092020511627, -0.030527902767062187`, 
             0.0606440007686615, -0.030097534880042076`, \
-0.030326709151268005`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {5, -5}, {-4, 
             6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 55, 55, 58, 56, 65, 68, 61, 56, 67, 14}],
            "NumericalThresholds" -> {-0.20411685854196546`, \
-0.1423426494002342, -0.13194816559553144`, -0.009834094438701866, 
            0.32777599990367895`, -0.24605997651815412`, \
-0.12043159082531928`, -0.5130625069141387, 0.6295614540576936, 
            0.03732480853796006, 0.015290492679923775`}, "LeafValues" -> 
           RawArray["Real32",{0.00005018007504986599, 
             0.0019058739999309182`, -0.021036675199866295`, \
-0.0070792934857308865`, 0.023676279932260513`, -0.01138659380376339, 
             0.030475808307528496`, -0.014672104269266129`, 
             0.0053078895434737206`, 
             0.012412745505571365`, -0.033111024647951126`, \
-0.024516411125659943`}], "Children" -> 
           RawArray["Integer16",{{5, 2}, {6, 3}, {-3, 4}, {7, -5}, {-1, 
             10}, {-2, 9}, {8, -8}, {-4, -9}, {-7, -10}, {
             11, -11}, {-6, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 58, 56, 63, 68, 55, 61, 55, 59, 31, 60}],
            "NumericalThresholds" -> {-0.20411685854196546`, 
            0.18760044127702716`, 0.32777599990367895`, 0.13067141920328143`, 
            0.582474708557129, -0.13194877654314038`, -0.5130627453327178, \
-0.036776391789317124`, 0.21132155507802966`, 
            0.07297900691628458, -0.009310305584222077}, "LeafValues" -> 
           RawArray["Real32",{
             0.00020070293976459652`, -0.0028503129724413157`, \
-0.02740068919956684, 0.027087781578302383`, -0.003343180287629366, 
             0.010582147166132927`, 0.016880763694643974`, 
             0.0012414600932970643`, -0.009054782800376415, \
-0.019606105983257294`, 0.013849493116140366`, 0.0036007496528327465`}], 
           "Children" -> 
           RawArray["Integer16",{{3, 2}, {5, 4}, {-1, 10}, {-3, -5}, {
             6, -6}, {9, 7}, {11, 
             8}, {-8, -9}, {-2, -10}, {-4, -11}, {-7, -12}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 62, 61, 63, 66, 62, 66, 65, 60, 60, 65}],
            "NumericalThresholds" -> {-1.0076183676719663`, 
            0.8752745091915132, -0.513061612844467, -0.6295682489871978, \
-0.1975588724017143, 
            0.8752755820751191, -0.19768368452787397`, -0.1057283468544483, \
-0.9100271761417388, 0.5991616547107698, -0.1057278625667095}, "LeafValues" -> 
           RawArray["Real32",{
             0.06621478497982025, -0.030170070007443428`, \
-0.03010673262178898, 
             0.1614263653755188, -0.03014441207051277, \
-0.030079519376158714`, -0.030138209462165833`, -0.030067021027207375`, \
-0.030108371749520302`, -0.030062468722462654`, -0.030082406476140022`, \
-0.030062757432460785`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {4, 3}, {6, -4}, {-2, 5}, {8, 9}, {
             7, -7}, {-3, 11}, {-5, -9}, {-6, 10}, {-10, -11}, {-8, -12}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{65, 68, 66, 66, 59, 61, 67}], 
           "NumericalThresholds" -> {-0.8721500933170317, 
            1.86605179309845, -0.20005169510841367`, -0.20180865377187726`, \
-0.2489180415868759, 0.416365996003151, -0.3370178192853927}, "LeafValues" -> 
           RawArray["Real32",{0.09999611228704453, -0.030137812718749046`, 
             0.05627873167395592, -0.030462756752967834`, 
             0.13908152282238007`, -0.03014504164457321, \
-0.030157573521137238`, -0.03008197620511055}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, -5}, {-4, 
             6}, {7, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
            "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 69, 56, 55, 56, 55, 66, 62, 58, 60, 57, 
             64, 58, 67, 31}], 
           "NumericalThresholds" -> {-0.009311007801443337, 
            0.23136051744222644`, 0.32777599990367895`, -0.1423426494002342, 
            0.6295612752437593, -0.036776391789317124`, -0.18606545031070706`,
             0.8752745091915132, -0.0809715911746025, 
            0.09353595599532129, -0.49887423217296595`, -0.6034896075725554, \
-0.24031142145395276`, 0.03732480853796006, 0.07297900691628458}, 
           "LeafValues" -> 
           RawArray["Real32",{0.014628700911998749`, 
             0.03163886442780495, -0.01706506870687008, -0.0236568134278059, \
-0.0019554439932107925`, -0.0007852633716538548, 
             0.014221156015992165`, -0.015049328096210957`, \
-0.014841224998235703`, -0.006385018117725849, 
             0.021092161536216736`, -0.00869070179760456, 
             0.011984176002442837`, 
             0.014827759936451912`, -0.03258056193590164, \
-0.009097715839743614}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {4, -3}, {8, 14}, {5, 6}, {-2, 13}, {
             7, 10}, {12, -8}, {9, -9}, {-1, -10}, {
             11, -11}, {-7, -12}, {-5, -13}, {-6, -14}, {
             15, -15}, {-4, -16}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 57, 57, 69, 56, 60, 61, 68, 57, 56, 
             55}], "NumericalThresholds" -> {0.33297927677631384`, 
            0.20304237306118014`, -0.1321032717823982, -0.4988738149404525, \
-0.2425230965018272, 0.8488979637622834, 
            0.09353566542267801, -0.513062685728073, -0.1951780170202255, \
-0.4988747686147689, 0.4123635143041611, -0.3887741416692733}, "LeafValues" -> 
           RawArray["Real32",{0.002777781803160906, 
             0.03115837275981903, -0.033760279417037964`, 
             0.020907126367092133`, -0.033153045922517776`, \
-0.004911373369395733, -0.007594313006848097, 
             0.0010236604139208794`, -0.0043237595818936825`, 
             0.01396083366125822, 0.019085977226495743`, 
             0.010452669113874435`, 0.01564197987318039}], "Children" -> 
           RawArray["Integer16",{{2, 7}, {3, 6}, {4, -4}, {8, 
             5}, {-5, -6}, {-3, -7}, {11, -8}, {10, 
             9}, {-9, -10}, {-1, -11}, {12, -12}, {-2, -13}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 67, 58, 66, 63, 66, 65, 62, 62, 60, 62}],
            "NumericalThresholds" -> {-1.0076183676719663`, \
-0.32520350813865656`, -0.23054415732622144`, -0.19782416522502896`, \
-0.6295681297779082, -0.1975588724017143, -0.10572814568877219`, 
            0.8752752840518953, 0.8752748668193818, -0.9100271761417388, 
            0.875274568796158}, "LeafValues" -> 
           RawArray["Real32",{
             0.060868456959724426`, -0.030129576101899147`, \
-0.030140411108732224`, 
             0.13182005286216736`, -0.030147092416882515`, \
-0.030076226219534874`, -0.030060742050409317`, -0.030110621824860573`, \
-0.030092541128396988`, -0.030081789940595627`, -0.030062273144721985`, \
-0.030065063387155533`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 4}, {6, -4}, {7, 5}, {-5, 
             9}, {-2, 8}, {-3, -8}, {11, -9}, {
             10, -10}, {-6, -11}, {-7, -12}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{56, 66, 64, 67, 59, 68, 62}], 
           "NumericalThresholds" -> {-0.48675483465194697`, \
-0.10328377783298491`, 
            0.13240607827901843`, -0.3380467444658279, -0.2489180415868759, 
            1.299266815185547, -0.4481614083051681}, "LeafValues" -> 
           RawArray["Real32",{0.09748722612857819, 
             0.06820379197597504, -0.030273208394646645`, 
             0.13126026093959808`, -0.03029835969209671, \
-0.03014409728348255, -0.030214494094252586`, -0.03008248470723629}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, 5}, {-5, 
             6}, {7, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
            "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{58, 55, 69, 68, 59, 65, 55, 60, 56, 64, 67, 
             67, 59}], 
           "NumericalThresholds" -> {-0.2403125688433647, \
-0.1423426494002342, -0.2274900525808334, 0.281765103340149, 
            0.1158401481807232, -0.2460600361227989, -0.036776391789317124`, 
            0.09353579953312875, 0.15596406906843188`, 
            0.13240607827901843`, -0.1694391071796417, -0.3343645334243774, 
            0.36755110323429113`}, "LeafValues" -> 
           RawArray["Real32",{-0.0007558611687272787, 0.03374046832323074, 
             0.007762042339891195, -0.00952263455837965, -0.01563096232712269,
              0.012664888054132462`, 
             0.012369970791041851`, -0.0178572628647089, 
             0.021605726331472397`, 
             0.008365478366613388, -0.028991566970944405`, \
-0.024092426523566246`, 0.0004833531565964222, -0.014358704909682274`}], 
           "Children" -> 
           RawArray["Integer16",{{10, 2}, {3, 4}, {5, 6}, {
             7, -5}, {-2, -6}, {-4, -7}, {12, 8}, {9, -9}, {-8, -10}, {
             11, -11}, {-1, -12}, {-3, 13}, {-13, -14}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 57, 57, 69, 56, 60, 61, 68, 68, 56, 
             55}], "NumericalThresholds" -> {0.33297927677631384`, 
            0.20304237306118014`, -0.1321032717823982, -0.4988738149404525, \
-0.2425230965018272, 0.8488979637622834, 
            0.09353549405932428, -0.513062685728073, -0.1951780170202255, \
-0.519809067249298, 0.4123635143041611, -0.38877426087856287`}, "LeafValues" -> 
           RawArray["Real32",{0.01831280067563057, 
             0.030052432790398598`, -0.03226909041404724, 
             0.020255250856280327`, -0.0318942666053772, \
-0.004457155708223581, -0.007273904979228973, 
             0.001579655916430056, -0.00417020870372653, 
             0.013458134606480598`, 0.0023775955196470022`, 
             0.009742636233568192, 0.017473530024290085`}], "Children" -> 
           RawArray["Integer16",{{2, 7}, {3, 6}, {4, -4}, {8, 
             5}, {-5, -6}, {-3, -7}, {11, -8}, {10, 
             9}, {-9, -10}, {-1, -11}, {12, -12}, {-2, -13}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 59, 66, 69, 63, 63, 62, 65}], 
           "NumericalThresholds" -> {-0.9100271761417388, 
            0.49689322710037237`, -0.19741514325141904`, -0.2455915659666061, \
-1.0076183676719663`, -0.6295680701732634, 
            0.8752755820751191, -0.10572805628180502`}, "LeafValues" -> 
           RawArray["Real32",{0.08024529367685318, 0.08691562712192535, 
             0.07337456941604614, -0.03143574297428131, -0.0301340464502573, \
-0.03014237992465496, -0.03006007708609104, -0.030115405097603798`, \
-0.030102958902716637`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, 8}, {-4, 
             6}, {-6, 7}, {-7, -8}, {-5, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{65, 55, 64, 67, 59, 59, 68, 68, 67, 61}], 
           "NumericalThresholds" -> {-0.8721508681774138, \
-0.03677702508866786, 
            0.051945621147751815`, -0.33512243628501887`, \
-0.2489180415868759, -0.182836078107357, 
            1.86605179309845, -0.11754095554351805`, -0.33537243306636805`, 
            1.0000000180025095`*^-35}, "LeafValues" -> 
           RawArray["Real32",{0.1438797116279602, -0.030727582052350044`, 
             0.06113429367542267, 
             0.09836770594120026, -0.030356919392943382`, \
-0.030165325850248337`, -0.030083099380135536`, -0.030289670452475548`, \
-0.030218657106161118`, -0.03007781133055687, -0.030132582411170006`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {5, 3}, {4, -4}, {-3, 6}, {-2, 
             7}, {-5, 8}, {9, -8}, {-7, -9}, {-6, 10}, {-10, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 69, 56, 55, 56, 55, 66, 62, 35, 57, 58, 
             68, 58, 67, 31}], 
           "NumericalThresholds" -> {-0.009311007801443337, 
            0.23136051744222644`, 0.32777599990367895`, -0.1423426494002342, 
            0.6295612752437593, -0.036776391789317124`, -0.18606545031070706`,
             0.8752745091915132, 
            0.03206597827374936, -0.49887420237064356`, -0.0809715911746025, \
-0.5226300954818724, -0.24031142145395276`, 0.03732480853796006, 
            0.07297900691628458}, "LeafValues" -> 
           RawArray["Real32",{0.01375630684196949, 
             0.029489174485206604`, -0.016632502898573875`, \
-0.022517329081892967`, -0.005855039693415165, -0.0013030578847974539`, 
             0.013448798097670078`, -0.01429362315684557, \
-0.014523549936711788`, 
             0.020853497087955475`, -0.006867806892842054, \
-0.005512968637049198, 0.008281535468995571, 
             0.013563579879701138`, -0.03170279413461685, \
-0.00758717767894268}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {4, -3}, {8, 14}, {5, 6}, {-2, 13}, {
             7, 9}, {12, -8}, {11, -9}, {
             10, -10}, {-7, -11}, {-1, -12}, {-5, -13}, {-6, -14}, {
             15, -15}, {-4, -16}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 57, 57, 69, 56, 60, 61, 68, 57, 56, 
             55}], "NumericalThresholds" -> {0.33297927677631384`, 
            0.20304237306118014`, -0.1321032717823982, -0.4988738149404525, \
-0.2425230965018272, 0.8488979637622834, 
            0.09353549405932428, -0.513062685728073, -0.1951780170202255, \
-0.4988747686147689, 0.4123635143041611, -0.38877426087856287`}, "LeafValues" -> 
           RawArray["Real32",{0.0024491804651916027`, 
             0.029525788500905037`, -0.031137412413954735`, 
             0.019766105338931084`, -0.030632823705673218`, \
-0.004242310766130686, -0.006859570275992155, 
             0.0015477798879146576`, -0.004022825043648481, 
             0.012928851880133152`, 0.018289482221007347`, 
             0.009088591672480106, 0.016770441085100174`}], "Children" -> 
           RawArray["Integer16",{{2, 7}, {3, 6}, {4, -4}, {8, 
             5}, {-5, -6}, {-3, -7}, {11, -8}, {10, 
             9}, {-9, -10}, {-1, -11}, {12, -12}, {-2, -13}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 68, 67, 61, 63, 66, 63, 66, 69, 60, 62, 
             57}], "NumericalThresholds" -> {0.353294923901558, 
            0.05555319972336293, -0.32520350813865656`, -0.513061612844467, \
-1.0076183676719663`, -0.19782416522502896`, -0.6295681297779082, \
-0.19723279029130933`, -0.2447957322001457, -0.9100271761417388, 
            0.8752751648426057, -0.4988745599985122}, "LeafValues" -> 
           RawArray["Real32",{-0.03012933023273945, 
             
             0.21071165800094604`, -0.030689038336277008`, \
-0.031559742987155914`, 
             0.16842836141586304`, -0.030141253024339676`, \
-0.030142320320010185`, -0.03008018247783184, -0.030061686411499977`, \
-0.030110834166407585`, -0.030061742290854454`, -0.030081531032919884`, \
-0.030057409778237343`}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {-2, -3}, {4, 5}, {8, -5}, {-4, 6}, {
             9, 7}, {-7, 10}, {-1, 11}, {-6, -10}, {-8, -11}, {
             12, -12}, {-9, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{55, 55, 64, 67, 59, 68, 59, 68, 61, 67, 65}],
            "NumericalThresholds" -> {-0.7423824369907378, \
-0.03677702508866786, 
            0.051945621147751815`, -0.3360507190227508, -0.2489180415868759, 
            2.051811575889588, -0.182836078107357, -0.11240689083933829`, \
-1.0000000180025095`*^-35, -0.33492118120193476`, -0.8721500933170317}, 
           "LeafValues" -> 
           RawArray["Real32",{0.14013798534870148`, -0.030702881515026093`, 
             0.06454000622034073, 
             0.08160938322544098, -0.030343424528837204`, \
-0.030154777690768242`, -0.03036021813750267, -0.030080245807766914`, \
-0.03021608479321003, -0.030166562646627426`, -0.030075861141085625`, \
-0.030120443552732468`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {5, 3}, {4, -4}, {-3, 7}, {-2, 6}, {
             9, -7}, {-5, 8}, {-8, -9}, {10, 11}, {-6, -11}, {-10, -12}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 69, 56, 55, 56, 55, 66, 62, 35, 57, 68, 
             67, 67, 31}], 
           "NumericalThresholds" -> {-0.009311007801443337, 
            0.23136051744222644`, 0.32777599990367895`, -0.1423426494002342, 
            0.6295612752437593, -0.036776391789317124`, -0.18606545031070706`,
             0.8752742707729341, 
            0.03206597827374936, -0.49887420237064356`, -0.5226300954818724, \
-0.10382879897952078`, 0.03732480853796006, 0.07297900691628458}, 
           "LeafValues" -> 
           RawArray["Real32",{0.004964558407664299, 
             0.02830405905842781, -0.016228122636675835`, \
-0.021873872727155685`, -0.005739207845181227, 0.01183024886995554, 
             0.012973196804523468`, -0.01381661556661129, \
-0.012552834115922451`, 0.020104441791772842`, -0.006811985746026039, 
             0.008008148521184921, -0.0029620788991451263`, \
-0.031243333593010902`, -0.006925410125404596}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {4, -3}, {8, 13}, {5, 6}, {-2, 12}, {
             7, 9}, {11, -8}, {-1, -9}, {
             10, -10}, {-7, -11}, {-5, -12}, {-6, -13}, {
             14, -14}, {-4, -15}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 57, 35, 56, 65, 67, 57, 10, 60}], 
           "NumericalThresholds" -> {0.33297927677631384`, 
            0.20304237306118014`, -0.1321032717823982, 0.14105830900371077`, 
            0.8488983213901521, -0.10572843626141547`, \
-0.017576793208718296`, -0.4988738149404525, 0.08564231917262079, 
            0.09353549405932428}, "LeafValues" -> 
           RawArray["Real32",{0.0009739090455695987, 
             0.028672151267528534`, -0.027812819927930832`, 
             0.019168546423316002`, -0.01870626024901867, \
-0.004287451505661011, 0.000845679547637701, 
             0.015421423129737377`, -0.01574440486729145, 
             0.006693749688565731, 0.014866651967167854`}], "Children" -> 
           RawArray["Integer16",{{2, 6}, {3, 5}, {4, -4}, {7, -5}, {-3, -6}, {
             9, -7}, {8, -8}, {-1, -9}, {10, -10}, {-2, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 62, 61, 63, 66, 66, 65, 60, 59, 62}], 
           "NumericalThresholds" -> {-1.0076183676719663`, 
            0.8752745091915132, -0.513061612844467, -0.6295682489871978, \
-0.1975588724017143, -0.19768368452787397`, -0.10572816804051398`, \
-0.9100273549556731, 0.4864455461502076, 0.8752754032611848}, "LeafValues" -> 
           RawArray["Real32",{
             0.054429639130830765`, -0.03018212877213955, \
-0.03012281097471714, 
             0.11704973131418228`, -0.030142169445753098`, \
-0.03008388914167881, -0.030059218406677246`, -0.03010265715420246, \
-0.030057083815336227`, -0.030083563178777695`, -0.030088072642683983`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {4, 3}, {6, -4}, {-2, 5}, {7, 
             8}, {-3, 10}, {-5, -8}, {-6, 9}, {-9, -10}, {-7, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{62, 68, 55, 67, 59, 61}], 
           "NumericalThresholds" -> {-0.44816277921199793`, 
            1.86605179309845, -0.7423821389675139, -0.3380467444658279, \
-0.2489180415868759, 1.0000000180025095`*^-35}, "LeafValues" -> 
           RawArray["Real32",{0.08486358076334, 0.07229045033454895, 
             0.04659271612763405, 
             0.057824790477752686`, -0.030431263148784637`, \
-0.03008079342544079, -0.030156107619404793`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {-4, 5}, {-5, 
             6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 58, 60, 62, 35, 56, 62, 66, 63, 62}], 
           "NumericalThresholds" -> {0.27385891973972326`, 
            0.18760015815496447`, -0.009311007801443337, \
-0.12669856846332547`, 0.14105830900371077`, 0.32777599990367895`, 
            0.8752742707729341, -0.18415424972772595`, -0.24996832758188245`, \
-0.4022012501955032}, "LeafValues" -> 
           RawArray["Real32",{0.00711557362228632, -0.026313023641705513`, 
             0.0197256188839674, -0.006421681493520737, \
-0.0014579079579561949`, 
             0.01285684946924448, -0.02580343931913376, \
-0.012888835743069649`, -0.009252497926354408, 
             0.007337790448218584, -0.01126344595104456}], "Children" -> 
           RawArray["Integer16",{{2, 4}, {3, -3}, {6, 5}, {-2, -5}, {8, -6}, {
             7, 10}, {-1, -8}, {9, -9}, {-4, -10}, {-7, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 57, 57, 56, 65, 55, 61, 55, 10, 68, 
             60}], "NumericalThresholds" -> {0.33297927677631384`, 
            0.20304237306118014`, -0.13210488855838773`, \
-0.49887372553348536`, 
            0.8488979637622834, -0.10572843626141547`, -0.14234218746423719`, \
-0.5130625069141387, -0.036776391789317124`, 
            0.08564231917262079, -0.5226300954818724, 0.09353549405932428}, 
           "LeafValues" -> 
           RawArray["Real32",{0.015859993174672127`, 
             0.02808280475437641, -0.028869429603219032`, 
             0.006241986062377691, -0.021906020119786263`, \
-0.006255816202610731, 0.000780438887886703, 0.0267079658806324, 
             0.0019649912137538195`, -0.01272706687450409, 
             0.0062450445257127285`, 0.002955733798444271, 
             0.014488925226032734`}], "Children" -> 
           RawArray["Integer16",{{2, 6}, {3, 5}, {4, 7}, {8, -5}, {-3, -6}, {
             10, -7}, {-4, -8}, {11, 9}, {-9, -10}, {
             12, -11}, {-1, -12}, {-2, -13}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 59, 66, 58, 63, 63, 62, 61}], 
           "NumericalThresholds" -> {-0.9100271761417388, 
            0.49689322710037237`, -0.19741514325141904`, \
-0.23054415732622144`, -1.0076183676719663`, -0.6295681297779082, 
            0.8752755820751191, -0.5130616724491118}, "LeafValues" -> 
           RawArray["Real32",{0.06838028877973557, -0.030106620863080025`, 
             0.06041327491402626, -0.031439103186130524`, 
             0.08306130766868591, -0.03014187328517437, \
-0.030057858675718307`, -0.030123628675937653`, -0.030154090374708176`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {8, -5}, {-4, 
             6}, {-6, 7}, {-7, -8}, {-2, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{65, 55, 64, 55, 59, 59, 68, 59, 65, 67}], 
           "NumericalThresholds" -> {-0.8721509873867034, \
-0.03677702508866786, 
            0.051945621147751815`, -0.03677676804363727, -0.2489180415868759, \
-0.182836078107357, 1.86605179309845, 
            0.3675517290830613, -0.8721500933170317, -0.33512243628501887`}, 
           "LeafValues" -> 
           RawArray["Real32",{0.140953928232193, -0.030721256509423256`, 
             0.0691089779138565, 
             0.07557713240385056, -0.03032572567462921, \
-0.030162639915943146`, -0.03009811043739319, -0.030283678323030472`, \
-0.030214611440896988`, -0.030159680172801018`, -0.03008151799440384}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {5, 3}, {4, -4}, {-3, 6}, {-2, 
             7}, {-5, 8}, {9, -8}, {-7, -9}, {-6, 10}, {-10, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 58, 60, 62, 35, 56, 62, 60, 58, 62}], 
           "NumericalThresholds" -> {0.27385891973972326`, 
            0.18760015815496447`, -0.009311007801443337, \
-0.12669856846332547`, 0.14105830900371077`, 0.32777599990367895`, 
            0.8752742707729341, -0.009310732595622538, -0.2305444851517677, \
-0.4022012501955032}, "LeafValues" -> 
           RawArray["Real32",{0.0069378092885017395`, -0.025819595903158188`, 
             0.018834760412573814`, 
             0.013738696463406086`, -0.0014017391949892044`, 
             0.012414723634719849`, -0.025276605039834976`, \
-0.012515205889940262`, 
             0.0036390528548508883`, -0.006772708147764206, \
-0.01079387217760086}], "Children" -> 
           RawArray["Integer16",{{2, 4}, {3, -3}, {6, 5}, {-2, -5}, {8, -6}, {
             7, 10}, {-1, -8}, {-4, 9}, {-9, -10}, {-7, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 57, 35, 65, 67, 57, 60, 56, 55}], 
           "NumericalThresholds" -> {0.33297927677631384`, 
            0.20304237306118014`, -0.1321032717823982, 
            0.14105830900371077`, -0.2460602298378944, \
-0.017576793208718296`, -0.4988738149404525, 0.09353566542267801, 
            0.4123635143041611, -0.3887741416692733}, "LeafValues" -> 
           RawArray["Real32",{0.0009260897058993578, 
             0.028901759535074234`, -0.0023665197659283876`, 
             0.01827947609126568, -0.017463138327002525`, \
-0.025162963196635246`, 0.014952873811125755`, -0.014667355455458164`, 
             0.0008855500491335988, 0.007052663713693619, 
             0.012841394171118736`}], "Children" -> 
           RawArray["Integer16",{{2, 8}, {3, 5}, {4, -4}, {6, -5}, {-3, -6}, {
             7, -7}, {-1, -8}, {9, -9}, {10, -10}, {-2, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 64, 67, 61, 63, 66, 63, 66, 61, 60, 62, 
             61}], "NumericalThresholds" -> {0.353294923901558, 
            0.15269247442483905`, -0.32520350813865656`, -0.513061612844467, \
-1.0076183676719663`, -0.19782416522502896`, -0.6295681297779082, \
-0.19723279029130933`, -0.513061612844467, -0.9100271761417388, 
            0.8752751648426057, -0.5130623877048491}, "LeafValues" -> 
           RawArray["Real32",{-0.03012464940547943, -0.030437028035521507`, 
             0.1645878702402115, -0.03161811828613281, 
             0.12724485993385315`, -0.030105607584118843`, \
-0.030136514455080032`, -0.030080437660217285`, -0.030052613466978073`, \
-0.030134880915284157`, -0.03005732037127018, -0.03007441945374012, \
-0.030056433752179146`}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {-2, -3}, {4, 5}, {8, -5}, {-4, 6}, {
             9, 7}, {-7, 10}, {-1, 11}, {-6, -10}, {-8, -11}, {
             12, -12}, {-9, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{65, 55, 64, 55, 59, 59, 68, 59, 65, 67}], 
           "NumericalThresholds" -> {-0.8721509873867034, \
-0.03677702508866786, 
            0.051945621147751815`, -0.03677678108215331, -0.2489180415868759, \
-0.182836078107357, 1.86605179309845, 
            0.36755175888538366`, -0.8721500933170317, -0.33512243628501887`},
            "LeafValues" -> 
           RawArray["Real32",{0.12060367316007614`, -0.030699539929628372`, 
             0.06967873871326447, 
             0.06846380978822708, -0.030314622446894646`, \
-0.03015751950442791, -0.030095906928181648`, -0.030273305252194405`, \
-0.030212916433811188`, -0.030154669657349586`, -0.03007892519235611}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {5, 3}, {4, -4}, {-3, 6}, {-2, 
             7}, {-5, 8}, {9, -8}, {-7, -9}, {-6, 10}, {-10, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 58, 60, 62, 35, 66, 63, 56, 62, 55, 67}],
            "NumericalThresholds" -> {0.27385891973972326`, 
            0.18760015815496447`, -0.009311007801443337, \
-0.12669856846332547`, 
            0.14105830900371077`, -0.18763221055269239`, \
-0.24996835738420484`, 0.32777599990367895`, 
            0.8752742707729341, -0.036777138710021966`, -0.2470736280083656}, 
           "LeafValues" -> 
           RawArray["Real32",{0.006827190052717924, -0.025151168927550316`, 
             0.018130529671907425`, -0.00805350486189127, \
-0.001240437151864171, 0.011667761020362377`, 0.0017256048740819097`, 
             0.008710392750799656, -0.0073426151648163795`, \
-0.012183061800897121`, -0.014241455122828484`, -0.02218753844499588}], 
           "Children" -> 
           RawArray["Integer16",{{2, 4}, {3, -3}, {8, 5}, {-2, -5}, {6, -6}, {
             7, 10}, {-4, -8}, {9, 11}, {-1, -10}, {-7, -11}, {-9, -12}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 57, 57, 58, 65, 55, 61, 55, 10, 60, 
             60}], "NumericalThresholds" -> {0.33297927677631384`, 
            0.20304237306118014`, -0.13210488855838773`, \
-0.49887372553348536`, -0.24031080305576322`, -0.10572843626141547`, \
-0.14234218746423719`, -0.5130625069141387, -0.036776391789317124`, 
            0.08564231917262079, -0.009310305584222077, 0.09353549405932428}, 
           "LeafValues" -> 
           RawArray["Real32",{0.012671925127506256`, 
             0.027171647176146507`, -0.006166334263980389, 
             0.005856617353856564, -0.02057715691626072, \
-0.028517305850982666`, 0.0004130761371925473, 0.02590293623507023, 
             0.0019011246040463448`, -0.012296516448259354`, 
             0.0048207431100308895`, 0.0003905657504219562, 
             0.013969113118946552`}], "Children" -> 
           RawArray["Integer16",{{2, 6}, {3, 5}, {4, 7}, {8, -5}, {-3, -6}, {
             10, -7}, {-4, -8}, {11, 9}, {-9, -10}, {
             12, -11}, {-1, -12}, {-2, -13}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 62, 65, 63, 66, 61, 65, 66, 60, 59, 62}],
            "NumericalThresholds" -> {-1.0076183676719663`, 
            0.8752745091915132, -0.10572828352451323`, -0.6295684278011321, \
-0.1975588724017143, -0.513061612844467, -0.10572816804051398`, \
-0.19896399229764936`, -0.9100273549556731, 0.4968919754028321, 
            0.8752752244472505}, "LeafValues" -> 
           RawArray["Real32",{0.04745705798268318, -0.030210498720407486`, 
             0.10434634238481522`, -0.03010418638586998, \
-0.030143167823553085`, -0.030085425823926926`, -0.030168388038873672`, \
-0.030101103708148003`, -0.030056117102503777`, -0.030053680762648582`, \
-0.030085938051342964`, -0.030072279274463654`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, 6}, {-2, 5}, {7, 9}, {
             8, -7}, {-5, -8}, {-4, 11}, {-6, 10}, {-10, -11}, {-9, -12}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{56, 55, 68, 62, 66, 59, 59, 68, 65, 67}], 
           "NumericalThresholds" -> {-0.5812065005302428, \
-0.03677702508866786, 
            1.703814208507538, -0.4481619149446487, -0.20005169510841367`, \
-0.2489180415868759, -0.182836078107357, 
            2.051811575889588, -0.8721502125263213, -0.33585976064205164`}, 
           "LeafValues" -> 
           RawArray["Real32",{0.14541280269622803`, -0.030684052035212517`, 
             0.11891982704401016`, 0.11775677651166916`, 
             0.06055139750242233, -0.03041779063642025, -0.03017370030283928, \
-0.030115822330117226`, -0.030394140630960464`, -0.030162081122398376`, \
-0.030079873278737068`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {6, 3}, {4, -4}, {-3, 5}, {-5, 
             7}, {-2, 8}, {-6, -8}, {9, -9}, {-7, 10}, {-10, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 58, 60, 62, 64, 62, 56, 35, 66, 63}], 
           "NumericalThresholds" -> {0.27385891973972326`, 
            0.18760015815496447`, -0.009311007801443337, \
-0.12669856846332547`, 0.13240607827901843`, 0.8752745091915132, 
            0.4123624116182328, 
            0.14105830900371077`, -0.18415424972772595`, \
-0.24996832758188245`}, "LeafValues" -> 
           RawArray["Real32",{0.010100752115249634`, -0.02466408722102642, 
             0.01731162704527378, -0.0060377661138772964`, \
-0.0011876041535288095`, -0.019995948299765587`, -0.013433825224637985`, \
-0.01020657829940319, 0.011274458840489388`, -0.008833574131131172, 
             0.006811357103288174}], "Children" -> 
           RawArray["Integer16",{{2, 4}, {3, -3}, {5, 8}, {-2, -5}, {6, -6}, {
             7, -7}, {-1, -8}, {9, -9}, {10, -10}, {-4, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 57, 57, 56, 65, 55, 61, 55, 10, 64, 
             60}], "NumericalThresholds" -> {0.33297927677631384`, 
            0.20304237306118014`, -0.13210488855838773`, \
-0.49887372553348536`, 
            0.8488983213901521, -0.10572843626141547`, -0.14234218746423719`, \
-0.5130625069141387, -0.036776391789317124`, 
            0.08564231917262079, -0.603490263223648, 0.09353549405932428}, 
           "LeafValues" -> 
           RawArray["Real32",{0.0006377400713972747, 
             0.02663784846663475, -0.024600140750408173`, 
             0.0057491110637784, -0.01979883201420307, \
-0.0027909406926482916`, 0.00033656309824436903`, 0.025440596044063568`, 
             0.0018353151390329003`, -0.011919458396732807`, 
             0.00429430091753602, 0.012734460644423962`, 0.0135464733466506}],
            "Children" -> 
           RawArray["Integer16",{{2, 6}, {3, 5}, {4, 7}, {8, -5}, {-3, -6}, {
             10, -7}, {-4, -8}, {11, 9}, {-9, -10}, {
             12, -11}, {-1, -12}, {-2, -13}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 56, 12, 58, 63, 63, 66, 66, 65, 66, 62, 
             65, 65}], 
           "NumericalThresholds" -> {-0.9100271761417388, 
            0.15596465021371844`, 
            0.030714473687112335`, -0.23054415732622144`, \
-1.0076183676719663`, -0.8185935616493224, -0.19768368452787397`, \
-0.1957033276557922, -0.10572805628180502`, -0.19682553410530088`, 
            0.87527534365654, -0.04446606338024139, -0.04446596466004848}, 
           "LeafValues" -> 
           RawArray["Real32",{
             0.060187067836523056`, -0.03146328032016754, \
-0.03140202537178993, -0.030126497149467468`, 
             0.11201323568820953`, -0.030165089294314384`, \
-0.030127929523587227`, -0.030056839808821678`, -0.03005368262529373, \
-0.03010658174753189, -0.030073590576648712`, -0.030100874602794647`, \
-0.030087999999523163`, -0.030080849304795265`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 5}, {6, 4}, {10, -5}, {-3, 
             7}, {-2, 8}, {9, 11}, {-7, 13}, {-6, -10}, {-4, -11}, {
             12, -12}, {-8, -13}, {-9, -14}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{56, 55, 68, 62, 68, 59, 59, 68, 65, 67}], 
           "NumericalThresholds" -> {-0.5812065005302428, \
-0.03677702508866786, 
            1.8253696560859682`, -0.44816203415393824`, -0.5283324718475341, \
-0.2489180415868759, -0.182836078107357, 
            2.051811575889588, -0.8721502125263213, -0.3355291932821273}, 
           "LeafValues" -> 
           RawArray["Real32",{0.12527044117450714`, -0.030661722645163536`, 
             0.11093294620513916`, 0.11726489663124084`, 
             0.06721383333206177, -0.030410291627049446`, \
-0.030168777331709862`, -0.03011666238307953, -0.030379775911569595`, \
-0.030150406062602997`, -0.030077479779720306`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {6, 3}, {4, -4}, {-3, 5}, {-5, 
             7}, {-2, 8}, {-6, -8}, {9, -9}, {-7, 10}, {-10, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 58, 62, 60, 64, 62, 56, 35, 55, 67, 63}],
            "NumericalThresholds" -> {0.27385891973972326`, 
            0.18760015815496447`, -0.12669856846332547`, \
-0.009311007801443337, 0.13240607827901843`, 0.8752745091915132, 
            0.4123624116182328, 
            0.14105830900371077`, -0.03677613101899623, \
-0.32869362831115717`, -0.24996753782033918`}, "LeafValues" -> 
           RawArray["Real32",{0.00985681265592575, -0.02418704517185688, 
             0.016558976843953133`, -0.0011355300666764379`, 
             0.01075084786862135, -0.019506612792611122`, \
-0.013059860095381737`, -0.009716155007481575, 
             0.010887586511671543`, -0.01524718850851059, \
-0.001175328390672803, 0.0004133620241191238}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {5, 8}, {6, -6}, {
             7, -7}, {-1, -8}, {9, -9}, {10, 11}, {-5, -11}, {-10, -12}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{69, 60, 56, 69, 63, 58, 65, 64, 65, 65, 58, 
             63, 67}], 
           "NumericalThresholds" -> {
            0.1921990588307381, -0.009309921879321335, 
            0.32777599990367895`, -0.2485084757208824, 0.2797976285219193, 
            0.18760044127702716`, -0.10572731867432593`, -0.603489190340042, \
-0.10572833195328711`, -0.10572775080800055`, -0.07536391913890837, 
            0.15785022079944613`, -0.23054001480340955`}, "LeafValues" -> 
           RawArray["Real32",{-0.009738296270370483, 
             0.004281074274331331, -0.021077832207083702`, 
             0.005779512692242861, -0.005411837249994278, 
             0.00293076247908175, -0.021035054698586464`, 
             0.009077539667487144, -0.0003202766820322722, 0.0204799622297287,
              0.001761716092005372, -0.00844435952603817, 0.02261197194457054,
              0.022914860397577286`}], "Children" -> 
           RawArray["Integer16",{{2, 12}, {3, 5}, {4, 13}, {-1, 9}, {6, -6}, {
             7, -7}, {8, 11}, {-3, -9}, {-5, 
             10}, {-10, -11}, {-8, -12}, {-2, -13}, {-4, -14}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 68, 67, 61, 63, 66, 66, 63, 60, 65, 62, 
             57}], "NumericalThresholds" -> {0.353294923901558, 
            0.05555319972336293, -0.32520350813865656`, -0.513061612844467, \
-1.0076183676719663`, -0.19800319522619245`, -0.19723279029130933`, \
-0.6295681297779082, -0.9100271761417388, -0.10572814568877219`, 
            0.8752752244472505, -0.4988745599985122}, "LeafValues" -> 
           RawArray["Real32",{-0.030125614255666733`, 
             0.13572469353675842`, -0.03081286884844303, \
-0.031710442155599594`, 
             0.10571090131998062`, -0.030130324885249138`, \
-0.03013266623020172, -0.030053140595555305`, -0.030080514028668404`, \
-0.030053352937102318`, -0.030104057863354683`, -0.03007536567747593, \
-0.03004968911409378}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {-2, -3}, {4, 5}, {7, -5}, {-4, 6}, {
             10, 8}, {-1, 11}, {-7, 9}, {-9, -10}, {-6, -11}, {
             12, -12}, {-8, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{56, 55, 62, 68, 68, 59, 59, 68, 65, 67}], 
           "NumericalThresholds" -> {-0.5812065005302428, \
-0.03677702508866786, -0.44816277921199793`, 
            1.86605179309845, -0.5285495817661284, -0.2489180415868759, \
-0.182836078107357, 
            2.051811575889588, -0.8721502125263213, -0.33585976064205164`}, 
           "LeafValues" -> 
           RawArray["Real32",{0.10980094224214554`, -0.03064289502799511, 
             0.11780710518360138`, 0.0631147027015686, 
             0.10402759164571762`, -0.03039867803454399, \
-0.03016367182135582, -0.030122844502329826`, -0.030373819172382355`, \
-0.030151614919304848`, -0.03007480874657631}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {6, 3}, {-3, 4}, {5, -5}, {-4, 
             7}, {-2, 8}, {-6, -8}, {9, -9}, {-7, 10}, {-10, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 58, 62, 60, 64, 62, 56, 35, 60, 58}], 
           "NumericalThresholds" -> {0.27385891973972326`, 
            0.18760015815496447`, -0.12669856846332547`, \
-0.009311007801443337, 0.13240607827901843`, 0.8752745091915132, 
            0.4123624116182328, 
            0.14105830900371077`, -0.009310732595622538, -0.2305444851517677},
            "LeafValues" -> 
           RawArray["Real32",{0.009579509496688843, -0.023625820875167847`, 
             0.01581793837249279, -0.0010417653247714043`, 
             0.013014793395996094`, -0.019020332023501396`, \
-0.012602301314473152`, -0.009122572839260101, 0.01047646813094616, 
             0.0031876536086201668`, -0.00643351674079895}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {5, 8}, {6, -6}, {
             7, -7}, {-1, -8}, {9, -9}, {-5, 10}, {-10, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{69, 60, 56, 65, 65, 63, 58, 67, 59, 68, 60, 
             63, 60, 67, 14}], 
           "NumericalThresholds" -> {
            0.1921990588307381, -0.009309822693467138, 
            0.15596530586481097`, -0.10572833195328711`, \
-0.10572776570916174`, 0.2797976285219193, 
            0.18760044127702716`, -0.24045796692371366`, 
            0.21132030338048938`, -0.5127971470355986, -0.009310732595622538, 
            0.15785022079944613`, -0.9100275337696074, -0.3257360011339187, 
            0.018010240048170093`}, "LeafValues" -> 
           RawArray["Real32",{-0.01137018483132124, 
             0.004091738723218441, -0.005433971062302589, \
-0.001077465363778174, 0.015489120036363602`, -0.008529039099812508, 
             0.002524762414395809, -0.020154448226094246`, 
             0.0073356302455067635`, -0.009771433658897877, \
-0.022703172639012337`, 0.00673868041485548, 0.022054653614759445`, 
             0.0050822664052248, 0.01343574933707714, 0.025920193642377853`}],
            "Children" -> 
           RawArray["Integer16",{{2, 12}, {3, 6}, {4, 13}, {-1, 5}, {-5, 
             11}, {7, -7}, {8, -8}, {10, 
             9}, {-9, -10}, {-3, -11}, {-6, -12}, {-2, -13}, {-4, 14}, {-14, 
             15}, {-15, -16}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 66, 56, 63, 67, 62, 60, 59}], 
           "NumericalThresholds" -> {-1.0076183676719663`, \
-0.19741514325141904`, 
            0.15596465021371844`, -0.6295685470104216, -0.3253586441278457, 
            0.8752755820751191, -0.9100273549556731, 0.36755035817623144`}, 
           "LeafValues" -> 
           RawArray["Real32",{0.0417332798242569, 
             0.06893227249383926, -0.03026384860277176, -0.03017648123204708, \
-0.03008907102048397, -0.03011065162718296, -0.030133532360196114`, \
-0.030051128938794136`, -0.03006957471370697}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, 5}, {-3, 
             6}, {-4, -6}, {7, -7}, {-5, 8}, {-8, -9}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{56, 55, 62, 55, 58, 68, 59, 68, 65, 67}], 
           "NumericalThresholds" -> {-0.5812065005302428, \
-0.03677702508866786, -0.44816277921199793`, -0.0367766972631216, 
            0.16728002578020099`, 1.65354061126709, -0.2489180415868759, 
            2.051811575889588, -0.8721502125263213, -0.3355291932821273}, 
           "LeafValues" -> 
           RawArray["Real32",{0.09767330437898636, -0.030623270198702812`, 
             0.10231687873601913`, 
             0.10115066915750504`, -0.030208440497517586`, 
             
             0.04708944261074066, -0.030809910967946053`, \
-0.030159147456288338`, -0.030367977917194366`, -0.030140653252601624`, \
-0.03007245995104313}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {7, 3}, {-3, 4}, {-4, 5}, {
             6, -6}, {-5, -7}, {-2, 8}, {9, -9}, {-8, 10}, {-10, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 58, 62, 60, 64, 62, 56, 35, 55, 67, 63}],
            "NumericalThresholds" -> {0.27385891973972326`, 
            0.18760015815496447`, -0.12669856846332547`, \
-0.009311007801443337, 0.13240607827901843`, 0.8752745091915132, 
            0.4123624116182328, 
            0.14105830900371077`, -0.03677613101899623, \
-0.32869362831115717`, -0.24996753782033918`}, "LeafValues" -> 
           RawArray["Real32",{0.009256474673748016, -0.023075193166732788`, 
             0.015095353126525879`, -0.0009742063120938838, 
             0.010303400456905365`, -0.018581097945570946`, \
-0.012208908796310425`, -0.008620909415185452, 
             0.009995976462960243, -0.014873403124511242`, \
-0.0011664832709357142`, 0.0005246168002486229}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {5, 8}, {6, -6}, {
             7, -7}, {-1, -8}, {9, -9}, {10, 11}, {-5, -11}, {-10, -12}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 60, 69, 58, 57, 64, 63, 61, 64, 63}], 
           "NumericalThresholds" -> {-0.6295681297779082, \
-0.20411685854196546`, 
            0.2503384426236153, -0.0753631331026554, -0.13210488855838773`, 
            0.051946254447102554`, -0.24996875971555707`, \
-0.04220644384622573, -0.6034891307353972, 0.15804850310087207`}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.017921287566423416`, 0.01514398492872715, 
             0.013453706167638302`, 
             0.01722877286374569, -0.021908657625317574`, 
             0.006440529599785805, -0.01439571101218462, \
-0.0033801477402448654`, 0.02395140752196312, 0.006591703277081251, 
             0.0011226886417716742`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {8, 3}, {4, -4}, {7, 5}, {-5, 
             6}, {-6, -7}, {-3, 9}, {10, -9}, {-8, -10}, {-2, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{60, 56, 62, 58, 63, 63, 66, 66, 67, 62, 65}],
            "NumericalThresholds" -> {-0.9100271761417388, 
            0.15596465021371844`, 0.8752745091915132, 
            0.23895638436079028`, -1.0076183676719663`, -1.0076183676719663`, \
-0.19768368452787397`, -0.19741514325141904`, -0.32520350813865656`, 
            0.8752752840518953, -0.04446606338024139}, "LeafValues" -> 
           RawArray["Real32",{
             0.05291108414530754, -0.03157348930835724, \
-0.031434930860996246`, 0.06982788443565369, 
             0.060840386897325516`, -0.0301317498087883, \
-0.03016616962850094, -0.030054058879613876`, -0.030066635459661484`, \
-0.0301037710160017, -0.030098458752036095`, -0.030080802738666534`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 6}, {4, -4}, {5, -5}, {-2, 
             8}, {-3, 7}, {9, 10}, {-6, -9}, {-7, -10}, {
             11, -11}, {-8, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{64, 57, 67, 67, 56, 68, 68, 55, 68}], 
           "NumericalThresholds" -> {
            0.051945621147751815`, -0.05901458673179149, -0.3380467444658279, \
-0.24549285322427747`, -0.25524775683879847`, 0.739850401878357, 
            1.86605179309845, -0.03677581436932086, -0.5293045639991759}, 
           "LeafValues" -> 
           RawArray["Real32",{0.05757339298725128, 0.08830340206623077, 
             0.0304982028901577, -0.030384140089154243`, \
-0.030310150235891342`, -0.0301140695810318, -0.030698763206601143`, \
-0.030285492539405823`, -0.030132222920656204`, -0.030062034726142883`}], 
           "Children" -> 
           RawArray["Integer16",{{3, 2}, {-2, 4}, {-1, 5}, {-3, 6}, {-4, 
             7}, {-5, -7}, {8, -8}, {9, -9}, {-6, -10}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 58, 62, 60, 64, 58, 62, 60, 60, 35}], 
           "NumericalThresholds" -> {0.27385891973972326`, 
            0.18760015815496447`, -0.12669856846332547`, \
-0.009311007801443337, 0.13240607827901843`, -0.23054391890764234`, 
            0.8752745091915132, -0.009310732595622538, -0.00931046577170491, 
            0.14105830900371077`}, "LeafValues" -> 
           RawArray["Real32",{-0.00009271546878153458, -0.02251390554010868, 
             0.014458161778748035`, -0.0009509722585789859, 
             0.012690906412899494`, -0.01798076555132866, 
             0.008381142280995846, -0.016358118504285812`, \
-0.013456328772008419`, 0.0007393956766463816, 0.009385881945490837}], 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {5, 8}, {6, -6}, {
             7, -7}, {-1, -8}, {-5, 9}, {-9, 10}, {-10, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 57, 55, 58, 69, 60, 57, 63, 63, 69}],
            "NumericalThresholds" -> {0.36726598441600805`, 
            0.20304237306118014`, -0.1321032717823982, -0.3887741416692733, \
-0.0753631331026554, -0.18415907770395276`, 0.09353549405932428, 
            0.23826786130666736`, -0.24996861070394513`, \
-0.24996709078550336`, -0.1992218121886253}, "LeafValues" -> 
           RawArray["Real32",{0.011358528397977352`, 
             0.013002470135688782`, -0.01215999387204647, 
             0.017278937622904778`, -0.02669505961239338, \
-0.02330479957163334, 0.0043996404856443405`, 0.0010210791369900107`, 
             0.008109048008918762, -0.003927365876734257, 0.01151899341493845,
              0.024675510823726654`}], "Children" -> 
           RawArray["Integer16",{{2, 7}, {3, 4}, {5, -4}, {8, -5}, {9, 
             6}, {-6, -7}, {11, -8}, {-3, -9}, {-1, 
             10}, {-10, -11}, {-2, -12}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 67, 59, 57, 59, 63, 61, 66, 63, 66, 60, 
             69}], "NumericalThresholds" -> {
            0.353294923901558, -0.32520350813865656`, 
            0.3675500303506852, -0.4988753646612167, -0.023565609008073803`, \
-1.0076183676719663`, -0.513061612844467, -0.19782416522502896`, \
-0.6295681297779082, -0.19741514325141904`, -0.9100271761417388, \
-0.2455915659666061}, "LeafValues" -> 
           RawArray["Real32",{0.16618479788303375`, 
             0.10359437763690948`, -0.03176777809858322, 
             0.08556504547595978, -0.0301220566034317, 
             0.01478765718638897, -0.03012532740831375, \
-0.030197903513908386`, -0.030128538608551025`, -0.030079718679189682`, \
-0.030052904039621353`, -0.030048782005906105`, -0.03010336123406887}], 
           "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, 6}, {-1, 4}, {-4, 
             7}, {-2, -6}, {-3, 8}, {10, -8}, {12, 9}, {-9, 
             11}, {-5, -11}, {-10, -12}, {-7, -13}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{59, 55, 68, 66, 59, 61, 68, 65, 55, 67}], 
           "NumericalThresholds" -> {-0.49341717362403864`, \
-0.03677702508866786, 
            1.86605179309845, -0.20005169510841367`, -0.2489180415868759, \
-1.0000000180025095`*^-35, 2.051811575889588, -0.8721502125263213, 
            1.0000000180025095`*^-35, -0.3360507190227508}, "LeafValues" -> 
           RawArray["Real32",{0.057783957570791245`, -0.03069920837879181, 
             0.08701489865779877, 
             0.10736173391342163`, -0.030095692723989487`, \
-0.03016011416912079, -0.03038930892944336, -0.03035374917089939, \
-0.0301533006131649, -0.030158935114741325`, -0.030069416388869286`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {5, 3}, {4, -4}, {-3, 6}, {-2, 7}, {
             9, -7}, {8, -8}, {-6, 10}, {-5, -10}, {-9, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 58, 62, 60, 64, 62, 60, 60, 56, 35}], 
           "NumericalThresholds" -> {0.27385891973972326`, 
            0.18760015815496447`, -0.12669856846332547`, \
-0.009311007801443337, 0.13240607827901843`, 
            0.8752745091915132, -0.009310732595622538, -0.00931046577170491, 
            0.32777599990367895`, 0.14105830900371077`}, "LeafValues" -> 
           RawArray["Real32",{0.008685612119734287, -0.022035732865333557`, 
             0.013847030699253082`, -0.0009254582109861076, 
             0.012272699736058712`, -0.017490914091467857`, \
-0.011528255417943, -0.013094737194478512`, 
             0.0007163045229390264, -0.006561750546097755, 
             0.009043063037097454}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {5, 7}, {6, -6}, {
             9, -7}, {-5, 8}, {-8, 10}, {-1, -10}, {-9, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 69, 60, 63, 67, 64, 64, 61, 63, 58}], 
           "NumericalThresholds" -> {-0.6295681297779082, 
            0.1921990588307381, -0.009310231078416107, -0.24996861070394513`, \
-0.2470736280083656, -0.5920859277248381, -0.91684952378273, \
-0.5130626261234282, 0.27979750931262976`, -0.009835142176598309}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.017162317410111427`, 0.01896539144217968, 
             0.015195978805422783`, 0.00830828957259655, 0.009381266310811043,
              0.024776775389909744`, 
             0.0012070639058947563`, -0.004909439478069544, \
-0.004884703550487757, 0.0013271844945847988`, -0.0182766355574131}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 7}, {-2, 5}, {8, 
             6}, {-6, -7}, {-4, 9}, {-5, -9}, {10, -10}, {-8, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{35, 64, 69, 57, 63, 63, 67, 66, 66, 60, 63}],
            "NumericalThresholds" -> {0.03206597827374936, 
            0.15269181877374652`, -0.25182695686817164`, -0.4988755136728286, \
-1.0076183676719663`, -0.6295690238475798, -0.3186420798301696, \
-0.19768368452787397`, -0.19782416522502896`, -0.9100273549556731, \
-0.6295674145221709}, "LeafValues" -> 
           RawArray["Real32",{0.086421899497509, -0.03159170597791672, 
             0.08551709353923798, 
             0.06599289923906326, -0.03189762309193611, \
-0.030274473130702972`, -0.030152538791298866`, -0.030109087005257607`, \
-0.03007194772362709, -0.030108658596873283`, -0.03008028119802475, \
-0.03004935197532177}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -3}, {-1, 4}, {-4, 6}, {-2, 
             7}, {-5, 8}, {-6, 9}, {-7, -9}, {-8, 10}, {-10, 
             11}, {-11, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{64, 57, 68, 67, 68, 56, 68, 67, 55}], 
           "NumericalThresholds" -> {
            0.051945621147751815`, -0.05901458673179149, -0.5301915705204009, \
-0.2470736280083656, 0.8676156699657441, -0.25524775683879847`, 
            1.86605179309845, -0.3377746790647506, -0.03677581436932086}, 
           "LeafValues" -> 
           RawArray["Real32",{0.059151437133550644`, 0.07763677835464478, 
             0.029512984678149223`, -0.030395230278372765`, \
-0.030292624607682228`, -0.030754869803786278`, -0.030184203758835793`, \
-0.030296366661787033`, -0.030060110613703728`, -0.030128074809908867`}], 
           "Children" -> 
           RawArray["Integer16",{{3, 2}, {-2, 4}, {-1, 6}, {-3, 
             5}, {-5, -6}, {-4, 7}, {8, -8}, {-7, 9}, {-9, -10}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 58, 62, 69, 67, 58, 60, 65, 67, 68}], 
           "NumericalThresholds" -> {0.27385891973972326`, 
            0.18760015815496447`, -0.12669856846332547`, -0.1992218121886253, \
-0.10382879897952078`, -0.009835639037191866, 
            0.09353668615221979, -0.10572833195328711`, \
-0.32869362831115717`, -0.5224644541740416}, "LeafValues" -> 
           RawArray["Real32",{0.018896985799074173`, -0.021458260715007782`, 
             0.013315689750015736`, -0.0009220923529937863, \
-0.007368423044681549, -0.023329542949795723`, 0.014903305098414421`, 
             0.010681151412427425`, -0.009136978536844254, \
-0.00006859118002466857, 0.0011648699874058366`}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {6, 5}, {7, -6}, {
             8, -7}, {-5, -8}, {9, 10}, {-1, -10}, {-9, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 57, 55, 57, 67, 57, 69, 61, 55, 68, 
             64}], "NumericalThresholds" -> {0.36726598441600805`, 
            0.20304237306118014`, -0.13210488855838773`, -0.3887741416692733, \
-0.49887372553348536`, -0.23175803571939466`, 
            0.23826786130666736`, -0.1956176236271858, -0.5130625069141387, \
-0.036776391789317124`, -0.5226300954818724, -0.047500848770141595`}, 
           "LeafValues" -> 
           RawArray["Real32",{
             0.014767786487936974`, -0.0038160739932209253`, \
-0.011659931391477585`, 
             0.019899269565939903`, -0.025932490825653076`, \
-0.017224755138158798`, 0.006668425165116787, 0.007790947798639536, 
             0.025276795029640198`, 
             0.001729134120978415, -0.011767515912652016`, 
             0.0028070148546248674`, 0.009667497128248215}], "Children" -> 
           RawArray["Integer16",{{2, 6}, {3, 4}, {5, 12}, {7, -5}, {
             9, -6}, {-2, 8}, {-3, -8}, {-7, -9}, {11, 
             10}, {-10, -11}, {-1, -12}, {-4, -13}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{35, 64, 66, 58, 63, 63, 67, 62, 65, 66, 60, 
             63}], "NumericalThresholds" -> {0.03206597827374936, 
            0.15269181877374652`, -0.19741514325141904`, \
-0.23054415732622144`, -1.0076183676719663`, -1.0076183676719663`, \
-0.3198439478874206, 
            0.8752755820751191, -0.10572694614529608`, -0.19782416522502896`, \
-0.9100273549556731, -0.6295674145221709}, "LeafValues" -> 
           RawArray["Real32",{-0.030142175033688545`, -0.031542472541332245`, 
             0.07687094062566757, -0.03185219317674637, 
             0.12527164816856384`, -0.030282480642199516`, \
-0.030061574652791023`, -0.030105428770184517`, -0.030137693509459496`, \
-0.030129671096801758`, -0.030105696991086006`, -0.030077679082751274`, \
-0.030047843232750893`}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -3}, {4, 6}, {-1, -5}, {-2, 
             7}, {-4, 8}, {-6, 10}, {9, -9}, {-7, -10}, {-8, 11}, {-11, 
             12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{56, 66, 64, 68, 61, 65, 59}], 
           "NumericalThresholds" -> {-0.48675483465194697`, \
-0.10328377783298491`, 0.13240634649991992`, -0.5301915705204009, 
            0.05358486063778401, -0.39964559674262995`, -0.4934154003858566}, 
           "LeafValues" -> 
           RawArray["Real32",{0.05387289077043533, 
             0.05850787088274956, -0.030379008501768112`, 
             0.08330924063920975, -0.03021784871816635, \
-0.030331235378980637`, -0.030201314017176628`, -0.030078453943133354`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, 5}, {
             6, -6}, {-5, 7}, {-7, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 60, 63, 64, 68, 58, 55, 63, 69, 56, 55, 
             63, 59, 68, 58}], 
           "NumericalThresholds" -> {
            0.27385891973972326`, -0.009309822693467138, \
-0.24996861070394513`, -0.5920861661434172, -0.4516189098358154, \
-0.24031142145395276`, -0.25581888854503626`, 
            0.13067163527011874`, -0.24290934205055234`, 
            0.15596530586481097`, -0.036777138710021966`, \
-0.24996785074472425`, -0.02356593124568462, -0.5178717672824859, \
-0.23054476827383039`}, "LeafValues" -> 
           RawArray["Real32",{-0.02226480096578598, -0.0247972272336483, 
             0.021076321601867676`, 
             
             0.016634421423077583`, -0.003889906918630004, \
-0.011703464202582836`, 0.01624075137078762, 
             0.006851403973996639, -0.013238062150776386`, 
             0.002929910086095333, 0.00433511845767498, 
             0.0075486586429178715`, -0.008823594078421593, \
-0.0026645916514098644`, -0.019318588078022003`, -0.005132073070853949}], 
           "Children" -> 
           RawArray["Integer16",{{2, 4}, {3, 5}, {15, 10}, {-2, -5}, {9, 
             6}, {-6, 7}, {-7, 8}, {-8, -9}, {-3, -10}, {11, 13}, {-4, 
             12}, {-12, -13}, {-11, 14}, {-14, -15}, {-1, -16}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{69, 60, 56, 65, 65, 67, 55, 56, 58, 59, 65, 
             68, 60, 55}], 
           "NumericalThresholds" -> {
            0.1921990588307381, -0.009309822693467138, 
            0.15596530586481097`, -0.10572833195328711`, \
-0.10572776570916174`, -0.24045796692371366`, -0.1423426494002342, 
            0.6295616924762727, -0.07536399364471434, -0.02356593124568462, \
-0.24605997651815412`, -0.5178717672824859, -0.009310732595622538, \
-0.03677594475448131}, "LeafValues" -> 
           RawArray["Real32",{-0.011640382930636406`, 
             0.02099229022860527, -0.006112177390605211, 
             0.00002416026109131053, 
             0.014754577539861202`, -0.008190600201487541, \
-0.0185055211186409, 
             0.011958274058997631`, -0.0021289363503456116`, \
-0.02145976573228836, 0.0052199470810592175`, 0.0027275437023490667`, 
             0.021013924852013588`, 
             0.006351612042635679, -0.00309527525678277}], "Children" -> 
           RawArray["Integer16",{{2, 11}, {3, 6}, {4, 10}, {-1, 5}, {-5, 
             13}, {9, 7}, {8, 14}, {-7, -9}, {-3, -10}, {-4, 
             12}, {-2, -12}, {-11, -13}, {-6, -14}, {-8, -15}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{35, 64, 69, 65, 63, 63, 58, 67, 66, 62, 66, 
             60, 63}], 
           "NumericalThresholds" -> {0.03206597827374936, 
            0.15269181877374652`, -0.2455915659666061, -0.10572828352451323`, \
-1.0076183676719663`, -0.6295674145221709, -0.23054432123899457`, \
-0.3198439478874206, -0.19896399229764936`, 
            0.8752754032611848, -0.19782416522502896`, -0.9100273549556731, \
-0.6295674145221709}, "LeafValues" -> 
           RawArray["Real32",{0.11112160980701447`, -0.03149106726050377, 
             0.07043857872486115, -0.03141000494360924, \
-0.030083639547228813`, -0.030274968594312668`, -0.030174383893609047`, \
-0.030699916183948517`, -0.03010198473930359, -0.03006075508892536, \
-0.030120357871055603`, -0.030102349817752838`, -0.030075054615736008`, \
-0.030046358704566956`}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -3}, {4, 6}, {-1, 7}, {-2, 
             8}, {-4, 9}, {-5, -8}, {-6, 11}, {-7, 10}, {-10, -11}, {-9, 
             12}, {-12, 13}, {-13, -14}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{64, 57, 56, 67, 64, 56, 56, 56, 68, 68, 55}],
            "NumericalThresholds" -> {0.051945621147751815`, 
            0.21800861507654193`, -0.25524775683879847`, -0.3380467444658279, 
            0.1526930779218674, -0.409465804696083, -0.25524775683879847`, 
            0.41236247122287756`, 
            1.86605179309845, -0.5291711390018462, -0.03677581809461116}, 
           "LeafValues" -> 
           RawArray["Real32",{0.05519101768732071, 
             0.09829045832157135, -0.0306714940816164, 
             0.037499893456697464`, -0.030384458601474762`, \
-0.03032541088759899, -0.03033401258289814, -0.03012690506875515, \
-0.030107958242297173`, -0.03028269298374653, -0.030055884271860123`, \
-0.0301135815680027}], "Children" -> 
           RawArray["Integer16",{{4, 2}, {3, 6}, {-2, 5}, {-1, 
             7}, {-4, -6}, {-3, 8}, {-5, 9}, {-7, -9}, {10, -10}, {-8, 
             11}, {-11, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 58, 64, 69, 67, 69, 35, 60, 66, 59}], 
           "NumericalThresholds" -> {0.27385891973972326`, 
            0.18760015815496447`, -0.5920861661434172, -0.1992218121886253, \
-0.10382879897952078`, -0.23444887995719907`, 0.04409602843225003, 
            0.09353668615221979, -0.18415424972772595`, 0.06340056657791139}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.0005799132050015032, -0.02433362975716591, 
             0.012227942235767841`, -0.0037585643585771322`, \
-0.007068478502333164, -0.02260860987007618, 
             0.013457478024065495`, -0.00034782307920977473`, 
             0.010561480186879635`, -0.014440855011343956`, 
             0.014494223520159721`}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {6, 5}, {8, -6}, {
             7, -7}, {9, 10}, {-5, -9}, {-1, -10}, {-8, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 57, 55, 58, 69, 67, 57, 69, 59, 65, 
             64}], "NumericalThresholds" -> {0.36726598441600805`, 
            0.20304237306118014`, -0.13210488855838773`, -0.3887741416692733, \
-0.0753631331026554, -0.22862268984317777`, -0.23175803571939466`, 
            0.23826786130666736`, -0.1956176236271858, 
            0.36755006015300756`, -0.10572833195328711`, \
-0.047500848770141595`}, "LeafValues" -> 
           RawArray["Real32",{
             0.0119802700355649, -0.0037015234120190144`, \
-0.011239081621170044`, 
             0.019467957317829132`, -0.02518705278635025, \
-0.02702963352203369, -0.0014247397193685174`, 0.006541040260344744, 
             0.007377162110060453, 
             0.024440569803118706`, -0.008287066593766212, 
             0.002095082076266408, 0.009709403850138187}], "Children" -> 
           RawArray["Integer16",{{2, 7}, {3, 4}, {5, 12}, {8, -5}, {10, 
             6}, {-6, -7}, {-2, 9}, {-3, -9}, {-8, -10}, {-1, 
             11}, {-11, -12}, {-4, -13}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{35, 60, 56, 61, 61, 63, 63, 67, 66, 66, 66, 
             60, 62, 63}], 
           "NumericalThresholds" -> {0.03206597827374936, -0.9100271761417388,
             0.15596465021371844`, -0.513061612844467, -0.4358090609312057, \
-1.0076183676719663`, -1.0076183676719663`, -0.3203494548797607, \
-0.19768368452787397`, -0.19741514325141904`, -0.19782416522502896`, \
-0.9100273549556731, 0.8752752840518953, -0.6295674145221709}, "LeafValues" -> 
           RawArray["Real32",{
             0.08127715438604355, -0.031443074345588684`, \
-0.03013875149190426, -0.031643446534872055`, 0.12385010719299316`, 
             0.01413286104798317, -0.03027328848838806, \
-0.030149871483445168`, -0.030098846182227135`, -0.030057020485401154`, \
-0.030058233067393303`, -0.030100012198090553`, -0.030072713270783424`, \
-0.030092548578977585`, -0.03004489466547966}], "Children" -> 
           RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 7}, {10, 
             5}, {-5, -6}, {-2, 8}, {-4, 9}, {-7, 11}, {-8, 
             13}, {-3, -11}, {-9, 12}, {-12, 14}, {-10, -14}, {-13, -15}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{64, 57, 56, 68, 58, 56, 56, 55, 68, 67, 55}],
            "NumericalThresholds" -> {0.051945621147751815`, 
            0.21800861507654193`, -0.25524775683879847`, -0.5301915705204009, \
-0.0753626450896263, -0.409465804696083, -0.25524775683879847`, \
-0.38877381384372706`, 
            1.86605179309845, -0.3377746790647506, -0.03677581436932086}, 
           "LeafValues" -> 
           RawArray["Real32",{0.050940994173288345`, 
             0.08889322727918625, -0.03064144030213356, 
             0.036495454609394073`, -0.03037882223725319, \
-0.0302528478205204, -0.03010496124625206, -0.030182160437107086`, \
-0.030331948772072792`, -0.030278285965323448`, -0.030054790899157524`, \
-0.030117899179458618`}], "Children" -> 
           RawArray["Integer16",{{4, 2}, {3, 6}, {-2, 5}, {-1, 
             7}, {-4, -6}, {-3, 8}, {-5, 9}, {-7, -9}, {10, -10}, {-8, 
             11}, {-11, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 58, 59, 69, 58, 63, 59, 67, 61, 64, 66}],
            "NumericalThresholds" -> {
            0.27946138381958013`, -0.07536391913890837, \
-0.011325109284371136`, 
            0.046065660193562515`, -0.2305457219481468, -0.24996861070394513`,
             0.2113200277090073, -0.2088537365198135, -0.513062685728073, \
-0.047500681132078164`, -0.1756518557667732}, "LeafValues" -> 
           RawArray["Real32",{-0.0023124462459236383`, -0.021588260307908058`,
              0.009446455165743828, 
             0.010706961154937744`, -0.00658148480579257, \
-0.01421805564314127, -0.00900334119796753, 
             0.0006447761552408338, -0.020443463698029518`, 
             0.004339493811130524, -0.0015505264746025205`, 
             0.022501742467284203`}], "Children" -> 
           RawArray["Integer16",{{2, 10}, {3, 4}, {8, 5}, {7, -5}, {-4, 
             6}, {-6, 9}, {
             11, -8}, {-1, -9}, {-7, -10}, {-2, -11}, {-3, -12}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 69, 60, 58, 57, 63, 57, 67, 64, 64}], 
           "NumericalThresholds" -> {-0.6295681297779082, 
            0.5661014318466188, -0.20411685854196546`, -0.0753631331026554, \
-0.13210488855838773`, -0.24996875971555707`, 
            0.20304237306118014`, -0.25795345008373255`, -0.5920865237712859, \
-0.6034891307353972}, "LeafValues" -> 
           RawArray[
             "Real32",{-0.016225561499595642`, -0.00046967988600954413`, 
             0.017478162422776222`, 
             0.012453568167984486`, -0.01718117669224739, 
             0.007995069958269596, -0.0031366099137812853`, \
-0.009425871074199677, 0.026425175368785858`, 0.008109749294817448, 
             0.006554049905389547}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {8, 4}, {6, 5}, {-5, 
             7}, {-4, 10}, {-6, -8}, {-2, 9}, {-9, -10}, {-7, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{35, 64, 66, 61, 63, 63, 67, 61, 67, 66, 60, 
             63, 62}], 
           "NumericalThresholds" -> {0.03206597827374936, 
            0.15269181877374652`, -0.19741514325141904`, -0.513061612844467, \
-1.0076183676719663`, -1.0076183676719663`, -0.3198439478874206, \
-0.5130615532398223, -0.325555145740509, -0.19782416522502896`, \
-0.9100273549556731, -0.6295675337314605, 0.8752754032611848}, "LeafValues" -> 
           RawArray["Real32",{-0.030130965635180473`, -0.03141540661454201, 
             0.06030439957976341, -0.03174605220556259, 
             0.10342153906822205`, -0.030264705419540405`, \
-0.030049284920096397`, -0.030095640569925308`, -0.030165916308760643`, \
-0.030067436397075653`, -0.030097326263785362`, -0.030072784051299095`, \
-0.030043404549360275`, -0.03007391095161438}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -3}, {4, 6}, {-1, -5}, {-2, 
             7}, {-4, 8}, {-6, 10}, {13, 9}, {-9, -10}, {-8, 11}, {-11, 
             12}, {-12, -13}, {-7, -14}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{64, 57, 67, 67, 68, 56, 59, 68, 68, 55}], 
           "NumericalThresholds" -> {
            0.051945621147751815`, -0.05901458673179149, -0.3380467444658279, \
-0.25262503325939173`, 
            0.8676156699657441, -0.25524775683879847`, -0.023565731011331078`,
             1.86605179309845, -0.5291711390018462, -0.03677581809461116}, 
           "LeafValues" -> 
           RawArray["Real32",{0.05165673792362213, 0.06128842756152153, 
             0.03181939572095871, -0.030365675687789917`, \
-0.030477646738290787`, -0.030779825523495674`, -0.03012799844145775, \
-0.03016497567296028, -0.030268516391515732`, -0.030052583664655685`, \
-0.030106335878372192`}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {-2, 4}, {-1, 6}, {-3, 5}, {
             7, -6}, {-4, 8}, {-5, -8}, {9, -9}, {-7, 10}, {-10, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 58, 64, 69, 67, 58, 60, 69, 65}], 
           "NumericalThresholds" -> {0.27946138381958013`, 
            0.18760015815496447`, -0.047500681132078164`, \
-0.1992218121886253, -0.10382879897952078`, -0.009835639037191866, 
            0.09353668615221979, -0.23444887995719907`, -0.1057283468544483}, 
           "LeafValues" -> 
           RawArray["Real32",{0.005811458919197321, -0.021098127588629723`, 
             0.011363424360752106`, -0.0014671141980215907`, \
-0.006630332209169865, -0.021501850336790085`, 0.014420083723962307`, 
             0.010295826941728592`, 
             0.009960362687706947, -0.004014784470200539}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {6, 5}, {7, -6}, {
             8, -7}, {-5, -8}, {9, -9}, {-1, -10}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 69, 58, 55, 56, 58, 67, 69, 56}], 
           "NumericalThresholds" -> {-0.6295681297779082, 
            0.2503384426236153, -0.2403125688433647, -0.1423426494002342, 
            0.15596557408571246`, -0.009835142176598309, \
-0.21226380765438077`, -0.2274900525808334, 0.6819213330745698}, "LeafValues" -> 
           RawArray["Real32",{-0.015664396807551384`, 0.0011701874900609255`, 
             0.014240687713027, -0.02533167414367199, 0.0008575469255447388, 
             0.01162588968873024, -0.015670672059059143`, 
             0.023166578263044357`, -0.0005937902606092393, \
-0.006326279602944851}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {7, 4}, {8, 5}, {
             6, -6}, {-5, -7}, {-2, -8}, {9, -9}, {-4, -10}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{35, 67, 69, 67, 63, 63, 67, 66, 62, 66, 60, 
             63}], "NumericalThresholds" -> {0.03206597827374936, 
            0.353294923901558, -0.2455915659666061, -0.32520350813865656`, \
-1.0076183676719663`, -1.0076183676719663`, -0.3198439478874206, \
-0.19896399229764936`, 
            0.8752754032611848, -0.19782416522502896`, -0.9100273549556731, \
-0.6295675337314605}, "LeafValues" -> 
           RawArray["Real32",{0.08530470728874207, -0.031385790556669235`, 
             0.07283519208431244, -0.03220256417989731, -0.03095909208059311, \
-0.03019534982740879, -0.030257761478424072`, -0.030092623084783554`, \
-0.03006276860833168, -0.030117740854620934`, -0.03009413741528988, \
-0.030071087181568146`, -0.030042072758078575`}], "Children" -> 
           RawArray["Integer16",{{2, 6}, {3, -3}, {4, 5}, {-1, -5}, {-4, 
             8}, {-2, 7}, {-7, 10}, {-6, 9}, {-9, -10}, {-8, 11}, {-11, 
             12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{64, 57, 56, 68, 58, 56, 56, 55, 68, 67, 55}],
            "NumericalThresholds" -> {0.051945621147751815`, 
            0.21800861507654193`, -0.25524775683879847`, -0.5301915705204009, \
-0.07536275312304495, -0.409465804696083, -0.25524775683879847`, \
-0.38877381384372706`, 
            1.86605179309845, -0.3377746790647506, -0.03677581436932086}, 
           "LeafValues" -> 
           RawArray["Real32",{0.048175446689128876`, 
             0.07854287326335907, -0.030616745352745056`, 
             0.03494417294859886, -0.03035934828221798, -0.03025130182504654, \
-0.0301002636551857, -0.030185597017407417`, -0.03031502105295658, \
-0.030260717496275902`, -0.030051512643694878`, -0.030110204592347145`}], 
           "Children" -> 
           RawArray["Integer16",{{4, 2}, {3, 6}, {-2, 5}, {-1, 
             7}, {-4, -6}, {-3, 8}, {-5, 9}, {-7, -9}, {10, -10}, {-8, 
             11}, {-11, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{65, 63, 69, 60, 65, 65, 56, 69, 65, 66, 58, 
             61, 60}], 
           "NumericalThresholds" -> {-0.24606103450059888`, 
            0.27979727089405065`, -0.18811872601509091`, \
-0.009309822693467138, -0.10572833195328711`, -0.10572776570916174`, 
            0.15596470981836322`, -0.06787918508052825, -0.10572731867432593`,
             -0.19048883765935895`, -0.022098803892731663`, \
-0.513061612844467, -0.009310732595622538}, "LeafValues" -> 
           RawArray["Real32",{0.008690590038895607, 
             0.0176609605550766, -0.02253939025104046, -0.010500341653823853`,
              0.024187138304114342`, -0.014426784589886665`, 
             0.009599832817912102, -0.0012330464087426662`, \
-0.005670485086739063, -0.007249686401337385, 0.0052380734123289585`, 
             0.011804522946476936`, -0.009200987406075, \
-0.005143855232745409}], "Children" -> 
           RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 8}, {7, 
             6}, {-6, 12}, {-2, -8}, {9, -9}, {10, 
             11}, {-5, -11}, {-10, -12}, {13, -13}, {-7, -14}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 69, 60, 64, 57, 63, 65, 67, 64}], 
           "NumericalThresholds" -> {-0.6295681297779082, 
            0.5661014318466188, -0.20411685854196546`, -0.9168494641780852, \
-0.4988738149404525, 
            0.27979750931262976`, -0.1057283468544483, -0.25795345008373255`, \
-0.5920865237712859}, "LeafValues" -> 
           RawArray["Real32",{-0.015122519806027412`, -0.0005650652456097305, 
             0.016504598781466484`, 
             0.010864474810659885`, -0.005852256435900927, \
-0.012556588277220726`, 0.0019707269966602325`, 0.003621610812842846, 
             0.025704476982355118`, 0.007347752805799246}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {8, 4}, {-4, 5}, {7, 
             6}, {-6, -7}, {-5, -8}, {-2, 9}, {-9, -10}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{35, 63, 69, 58, 63, 67, 66, 66, 62, 66, 60, 
             64, 63}], 
           "NumericalThresholds" -> {
            0.03206597827374936, -1.0076183676719663`, -0.2455915659666061, \
-0.23054415732622144`, -1.0076183676719663`, -0.3203494548797607, \
-0.19896399229764936`, -0.19723279029130933`, 
            0.8752754032611848, -0.19782416522502896`, -0.9100273549556731, 
            0.15269247442483905`, -0.6295674145221709}, "LeafValues" -> 
           RawArray["Real32",{
             0.05332525074481964, -0.031358957290649414`, \
-0.030139807611703873`, -0.03018987365067005, 
             0.0905812531709671, -0.03025645948946476, \
-0.030089624226093292`, -0.03005826100707054, -0.030081233009696007`, \
-0.03011425957083702, -0.03009112924337387, -0.030067594721913338`, \
-0.03010057471692562, -0.030040834099054337`}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {-1, 3}, {4, 7}, {8, -5}, {-2, 
             6}, {-6, 10}, {-4, 9}, {-3, -9}, {12, -10}, {-7, 11}, {-11, 
             13}, {-8, -13}, {-12, -14}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{64, 57, 56, 66, 67, 56, 56, 55, 68, 68, 55}],
            "NumericalThresholds" -> {0.051945621147751815`, 
            0.21800861507654193`, -0.2552490681409835, -0.0984634719789028, \
-0.3380467444658279, -0.409465804696083, -0.25524775683879847`, \
-0.38877381384372706`, 
            1.86605179309845, -0.5291711390018462, -0.03677585162222385}, 
           "LeafValues" -> 
           RawArray["Real32",{0.048767123371362686`, 
             0.08514107763767242, -0.030605046078562737`, \
-0.030382875353097916`, 
             0.06116320937871933, -0.030347926542162895`, \
-0.030097611248493195`, -0.030128633603453636`, -0.030305812135338783`, \
-0.03025253862142563, -0.03004940040409565, -0.030094953253865242`}], 
           "Children" -> 
           RawArray["Integer16",{{5, 2}, {3, 6}, {-2, 4}, {-4, -5}, {-1, 
             7}, {-3, 8}, {-6, 9}, {-7, -9}, {10, -10}, {-8, 
             11}, {-11, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 58, 64, 58, 64, 69, 55, 55, 67}], 
           "NumericalThresholds" -> {0.27946138381958013`, 
            0.18760015815496447`, -0.5920859873294829, -0.3308220654726028, \
-0.04750095307826995, -0.2752211689949035, -0.03677613101899623, \
-0.036776391789317124`, -0.23795041441917417`}, "LeafValues" -> 
           RawArray["Real32",{0.002168070524930954, -0.022620361298322678`, 
             0.010678848251700401`, -0.0031361673027276993`, 
             0.012103828601539135`, -0.023421918973326683`, \
-0.0002460122632328421, -0.0014381890650838614`, 
             0.018187208101153374`, -0.01531254593282938}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {5, 
             6}, {-1, -6}, {-5, 7}, {8, 9}, {-7, -9}, {-8, -10}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 57, 55, 55, 57, 61, 67, 57, 69, 63, 
             57}], "NumericalThresholds" -> {0.36726598441600805`, 
            0.20304237306118014`, -0.13210488855838773`, -0.3887741416692733, \
-0.25581888854503626`, -0.4988738149404525, -0.513062685728073, \
-0.23175803571939466`, 
            0.23826786130666736`, -0.17931485176086423`, \
-0.24996861070394513`, -0.4988747686147689}, "LeafValues" -> 
           RawArray["Real32",{
             0.002226434648036957, -0.003375321626663208, \
-0.010504274629056454`, 0.0008840652299113572, -0.02486731857061386, 
             0.026403995230793953`, -0.013043389655649662`, 
             0.00849233940243721, 0.006933660712093115, 0.006977246142923832, 
             0.02388109639286995, -0.0037515449803322554`, 
             0.016415191814303398`}], "Children" -> 
           RawArray["Integer16",{{2, 8}, {3, 4}, {6, 5}, {9, -5}, {-4, -6}, {
             7, -7}, {12, 11}, {-2, 
             10}, {-3, -10}, {-9, -11}, {-8, -12}, {-1, -13}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{35, 64, 68, 61, 67, 63, 66, 67, 66, 62, 66, 
             60, 61, 63, 69}], 
           "NumericalThresholds" -> {
            0.03206597827374936, -0.6034899055957793, -0.007178284460678696, \
-0.513061612844467, -0.2877907454967498, -1.0076183676719663`, \
-0.19963497668504712`, -0.3203494548797607, -0.19741514325141904`, 
            0.8752754032611848, -0.19782416522502896`, -0.9100273549556731, \
-0.513061612844467, -0.6295674145221709, -0.24392297118902204`}, "LeafValues" -> 
           RawArray[
             "Real32",{-0.030226215720176697`, -0.031316183507442474`, \
-0.030121762305498123`, -0.031455036252737045`, 0.09370536357164383, 
             0.06307226419448853, -0.03025318682193756, -0.03005877695977688, \
-0.0300868209451437, -0.030050907284021378`, -0.030122434720396996`, \
-0.030089348554611206`, -0.030065329745411873`, -0.0300784632563591, \
-0.03003956377506256, -0.030046340078115463`}], "Children" -> 
           RawArray["Integer16",{{2, 6}, {7, 3}, {4, -4}, {9, 
             5}, {-5, -6}, {-2, 8}, {-1, 10}, {-7, 11}, {-3, -10}, {
             13, -11}, {-9, 12}, {-12, 14}, {
             15, -14}, {-13, -15}, {-8, -16}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{64, 57, 56, 12, 66, 56, 56, 55, 67, 68, 68}],
            "NumericalThresholds" -> {0.051945621147751815`, 
            0.21800861507654193`, -0.2552490681409835, 
            0.02351276203989983, -0.20164695382118222`, -0.409465804696083, \
-0.25524775683879847`, -0.38877381384372706`, -0.3380467444658279, 
            1.86605179309845, -0.5301915705204009}, "LeafValues" -> 
           RawArray["Real32",{0.04781489074230194, 
             0.07866840809583664, -0.030579183250665665`, \
-0.030433185398578644`, 
             0.061800841242074966`, -0.03034345619380474, \
-0.03009476326406002, -0.030236704275012016`, -0.030301125720143318`, \
-0.03012842684984207, -0.030248427763581276`, -0.03005254827439785}], 
           "Children" -> 
           RawArray["Integer16",{{5, 2}, {3, 6}, {-2, 4}, {-4, -5}, {-1, 
             7}, {-3, 8}, {-6, 9}, {-7, -9}, {-8, 10}, {
             11, -11}, {-10, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 58, 59, 57, 58, 63, 58, 60, 58, 61, 64, 
             57, 59}], 
           "NumericalThresholds" -> {
            0.27946138381958013`, -0.07536391913890837, \
-0.011325109284371136`, -0.13210488855838773`, -0.2305457219481468, \
-0.24996861070394513`, -0.009834559634327887, -0.9100262820720671, \
-0.3308220654726028, -0.513062685728073, -0.047500681132078164`, \
-0.5384941399097442, 0.21132014691829684`}, "LeafValues" -> 
           RawArray["Real32",{-0.014303174801170826`, -0.020012160763144493`, 
             0.007204762659966946, 0.010219567455351353`, 
             0.012173307128250599`, -0.013631973415613174`, \
-0.00853450782597065, 0.0019406364299356937`, -0.021302051842212677`, 
             0.011476786807179451`, 
             0.004058214835822582, -0.0013083475641906261`, 
             0.019997525960206985`, -0.010865462943911552`}], "Children" -> 
           RawArray["Integer16",{{2, 11}, {3, 4}, {8, 5}, {12, 7}, {-4, 
             6}, {-6, 10}, {-5, 13}, {
             9, -9}, {-1, -10}, {-7, -11}, {-2, -12}, {-3, -13}, {-8, -14}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 69, 60, 64, 57, 63, 65, 63}], 
           "NumericalThresholds" -> {-0.6295681297779082, 
            0.5661014318466188, -0.20411685854196546`, -0.9168494641780852, \
-0.4988738149404525, 0.27979750931262976`, -0.1057283468544483, 
            0.15804850310087207`}, "LeafValues" -> 
           RawArray["Real32",{-0.014452245086431503`, 0.016240082681179047`, 
             0.015820980072021484`, 
             0.010747176595032215`, -0.00548979640007019, \
-0.011985273100435734`, 0.0017610432114452124`, 0.003470874158665538, 
             0.0017779282061383128`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {8, 4}, {-4, 5}, {7, 
             6}, {-6, -7}, {-5, -8}, {-2, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{35, 64, 68, 61, 67, 63, 66, 67, 66, 62, 66, 
             60, 61, 63, 69}], 
           "NumericalThresholds" -> {
            0.03206597827374936, -0.6034899055957793, -0.007178284460678696, \
-0.513061612844467, -0.30168217420578, -1.0076183676719663`, \
-0.19963497668504712`, -0.3198439478874206, -0.19741514325141904`, 
            0.8752754032611848, -0.19782416522502896`, -0.9100273549556731, \
-0.513061612844467, -0.6295674145221709, -0.24392297118902204`}, "LeafValues" -> 
           RawArray[
             "Real32",{-0.030219528824090958`, -0.03129146248102188, \
-0.0301181823015213, -0.03142532706260681, 0.08513294160366058, 
             0.057547006756067276`, -0.03024311736226082, \
-0.030057229101657867`, -0.030084040015935898`, -0.030049394816160202`, \
-0.030118785798549652`, -0.030086548998951912`, -0.030063726007938385`, \
-0.03007601946592331, -0.030038421973586082`, -0.030045004561543465`}], 
           "Children" -> 
           RawArray["Integer16",{{2, 6}, {7, 3}, {4, -4}, {9, 
             5}, {-5, -6}, {-2, 8}, {-1, 10}, {-7, 11}, {-3, -10}, {
             13, -11}, {-9, 12}, {-12, 14}, {
             15, -14}, {-13, -15}, {-8, -16}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 56, 60, 63, 68, 58, 60, 61, 67, 61, 65, 
             59}], "NumericalThresholds" -> {
            0.21800861507654193`, -0.35659426450729365`, \
-0.009311229456216095, -0.24996782094240186`, 
            1.86605179309845, -0.009835074655711649, -0.9188081324100493, \
-1.0000000180025095`*^-35, -0.3380467444658279, 
            0.05358554981648923, -0.3996447771787643, -0.02356522716581821}, 
           "LeafValues" -> 
           RawArray["Real32",{0.07171060889959335, -0.03034163825213909, 
             0.12797585129737854`, -0.030229752883315086`, \
-0.030507713556289673`, -0.03059048391878605, -0.030481066554784775`, \
-0.030100900679826736`, -0.0302230566740036, -0.030067188665270805`, \
-0.030156448483467102`, -0.030035490170121193`, -0.030060600489377975`}], 
           "Children" -> 
           RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 5}, {-3, -5}, {8, -6}, {
             7, -7}, {-2, 10}, {9, -9}, {-4, -10}, {11, -11}, {-8, 
             12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{65, 63, 69, 60, 58, 58, 66, 61, 56, 69, 65, 
             66, 58}], 
           "NumericalThresholds" -> {-0.24606103450059888`, 
            0.27979727089405065`, -0.18811872601509091`, \
-0.009309822693467138, -0.23054396361112592`, -0.23054433614015576`, \
-0.19430700689554212`, -0.5130618512630462, 
            0.15596560388803485`, -0.06787918508052825, \
-0.10572731867432593`, -0.19048883765935895`, -0.07536391913890837}, 
           "LeafValues" -> 
           RawArray["Real32",{
             0.008279508911073208, -0.001836008857935667, \
-0.02165386639535427, -0.010158637538552284`, 0.023171281442046165`, 
             0.008489519357681274, -0.015255178324878216`, 
             0.009639850817620754, -0.02209053374826908, \
-0.0074054826982319355`, -0.005596492905169725, -0.009787912480533123, 
             0.005154251586645842, 0.008679294027388096}], "Children" -> 
           RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 10}, {
             6, -6}, {7, -7}, {8, 9}, {-2, -9}, {-8, -10}, {11, -11}, {12, 
             13}, {-5, -13}, {-12, -14}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{65, 63, 69, 60, 60, 66, 59, 66, 63, 57, 63, 
             58, 59}], 
           "NumericalThresholds" -> {-0.24606103450059888`, 
            0.27979727089405065`, -0.18811872601509091`, 0.12799359858036044`,
             0.5991612970829011, -0.18501072376966474`, 
            0.3675516694784165, -0.1969959735870361, -0.24996823817491529`, \
-0.49887423217296595`, -0.24996789544820783`, -0.009835639037191866, 
            0.3675504475831986}, "LeafValues" -> 
           RawArray["Real32",{-0.009893776848912239, 0.01928294263780117, 
             0.022259173914790154`, 
             0.010436248034238815`, -0.026514962315559387`, 
             0.006198814604431391, -0.0029314239509403706`, \
-0.011569146998226643`, 0.0021154291462153196`, -0.008876807987689972, 
             0.013377275317907333`, 
             0.008437923155725002, -0.011940578930079937`, \
-0.015053195878863335`}], "Children" -> 
           RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {7, 5}, {
             6, -6}, {-5, -7}, {8, -8}, {9, 11}, {-2, 10}, {-10, -11}, {13, 
             12}, {-12, -13}, {-9, -14}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{35, 64, 68, 68, 69, 63, 63, 66, 67, 62, 66, 
             60, 61, 63, 69}], 
           "NumericalThresholds" -> {
            0.03206597827374936, -0.6034899055957793, -0.007178284460678696, \
-0.041415886953473084`, -0.2455915659666061, -1.0076183676719663`, \
-0.2499687150120735, -0.19963497668504712`, -0.3203494548797607, 
            0.8752754032611848, -0.19782416522502896`, -0.9100273549556731, \
-0.513061612844467, -0.6295675337314605, -0.24392297118902204`}, "LeafValues" -> 
           RawArray["Real32",{-0.03021361492574215, -0.03125080093741417, 
             0.06916246563196182, -0.03138502687215805, 
             0.0918867439031601, -0.03122236765921116, -0.03023826889693737, \
-0.030109133571386337`, -0.030055474489927292`, -0.030081233009696007`, \
-0.030115248635411263`, -0.030083557590842247`, -0.0300633292645216, \
-0.030073534697294235`, -0.03003711625933647, -0.030043624341487885`}], 
           "Children" -> 
           RawArray["Integer16",{{2, 6}, {8, 3}, {4, -4}, {5, -5}, {-3, 
             7}, {-2, 9}, {-6, -8}, {-1, 10}, {-7, 11}, {13, -11}, {-10, 
             12}, {-12, 14}, {15, -14}, {-13, -15}, {-9, -16}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 56, 60, 63, 68, 58, 60, 61, 67, 61, 65, 
             59}], "NumericalThresholds" -> {
            0.21800861507654193`, -0.35659426450729365`, \
-0.009311229456216095, -0.24996782094240186`, 
            1.86605179309845, -0.009835074655711649, -0.9188081324100493, 
            1.0000000180025095`*^-35, -0.3380467444658279, 
            0.05358554981648923, -0.3996447771787643, -0.02356522716581821}, 
           "LeafValues" -> 
           RawArray["Real32",{0.0669141337275505, -0.03033052198588848, 
             0.11088341474533081`, -0.030222872272133827`, \
-0.03049207106232643, -0.03057238645851612, -0.03046696074306965, \
-0.030097872018814087`, -0.030216947197914124`, -0.0300651453435421, \
-0.0301514845341444, -0.030034150928258896`, -0.030059034004807472`}], 
           "Children" -> 
           RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 5}, {-3, -5}, {8, -6}, {
             7, -7}, {-2, 10}, {9, -9}, {-4, -10}, {11, -11}, {-8, 
             12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 62, 58, 57, 58, 64, 56, 68, 68, 65, 57, 
             58}], "NumericalThresholds" -> {
            0.27385891973972326`, -0.06097370013594627, -0.07536391913890837, \
-0.13210488855838773`, -0.009834559634327887, 0.13240607827901843`, 
            0.15596411377191546`, -0.5230205059051513, -0.5268073678016661, \
-0.10572725906968115`, -0.5384941399097442, 0.18759957700967791`}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.0092991404235363, -0.018069153651595116`, 
             0.002137110335752368, 0.0074460976757109165`, 
             0.012662344612181187`, -0.011026166379451752`, \
-0.01217675395309925, 0.004768341779708862, 
             0.008520174771547318, -0.015770679339766502`, \
-0.00424440111964941, 0.019389305263757706`, 0.00025686289882287383`}], 
           "Children" -> 
           RawArray["Integer16",{{3, 2}, {-2, -3}, {6, 4}, {11, 5}, {-5, 
             12}, {7, -7}, {-1, 8}, {9, 
             10}, {-8, -10}, {-9, -11}, {-4, -12}, {-6, -13}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 55, 57, 58, 69, 55, 67, 59, 56, 57, 
             69}], "NumericalThresholds" -> {0.36726598441600805`, 
            0.21800762414932254`, -0.3887741416692733, -0.13210488855838773`, \
-0.0753631331026554, -0.22862268984317777`, -0.25581888854503626`, \
-0.23175803571939466`, 0.36755006015300756`, 0.15596530586481097`, 
            0.23826786130666736`, -0.17931485176086423`}, "LeafValues" -> 
           RawArray["Real32",{
             0.011185741052031517`, -0.0036275351885706186`, \
-0.009848127141594887, -0.026163557544350624`, 
             0.0010646468726918101`, -0.024194521829485893`, \
-0.0007085620891302824, 0.02306005358695984, 
             0.006675338838249445, -0.0033302609808743, 0.006457683630287647, 
             0.006644440349191427, 0.02298956923186779}], "Children" -> 
           RawArray["Integer16",{{2, 8}, {4, 3}, {11, -4}, {5, 7}, {9, 
             6}, {-6, -7}, {-5, -8}, {-2, 12}, {-1, 
             10}, {-10, -11}, {-3, -12}, {-9, -13}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{68, 68, 65, 56, 63, 63, 63, 61, 66, 66, 66, 
             35, 60, 64, 67}], 
           "NumericalThresholds" -> {-0.021042029373347756`, \
-0.041415886953473084`, -0.10572828352451323`, 
            0.15596465021371844`, -1.0076183676719663`, -0.6295689046382903, \
-0.25856061279773707`, -0.513061612844467, -0.1991614997386932, \
-0.19944892823696134`, -0.19741514325141904`, 
            0.03206597827374936, -0.9100268185138701, 
            0.4153705686330796, -0.16323752701282498`}, "LeafValues" -> 
           RawArray["Real32",{0.06995273381471634, -0.03162608668208122, 
             0.08369000256061554, -0.03150150924921036, -0.03019062429666519, \
-0.030301107093691826`, -0.030086755752563477`, -0.030078424140810966`, \
-0.03022591769695282, -0.030099062249064445`, -0.03008555993437767, \
-0.03004460036754608, -0.030052529647946358`, -0.03005049005150795, \
-0.03006330132484436, -0.030037686228752136`}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -3}, {4, 6}, {-1, 10}, {-2, 
             7}, {-4, 8}, {-6, 13}, {11, 9}, {-9, -10}, {-5, 
             12}, {-7, -12}, {-11, -13}, {-8, 14}, {15, -15}, {-14, -16}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 56, 60, 63, 68, 58, 60, 61, 67, 61, 65, 
             59}], "NumericalThresholds" -> {
            0.21800861507654193`, -0.35659426450729365`, \
-0.009311229456216095, -0.24996782094240186`, 
            1.86605179309845, -0.009835074655711649, -0.9188081324100493, \
-1.0000000180025095`*^-35, -0.3380467444658279, 
            0.05358554981648923, -0.3996447771787643, -0.02356522716581821}, 
           "LeafValues" -> 
           RawArray["Real32",{0.0626668781042099, -0.03032669983804226, 
             0.0986359566450119, -0.0302161555737257, -0.030469432473182678`, \
-0.03055545873939991, -0.030450327321887016`, -0.030095171183347702`, \
-0.030211154371500015`, -0.03006310947239399, -0.03014800138771534, \
-0.030033167451620102`, -0.030057203024625778`}], "Children" -> 
           RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 5}, {-3, -5}, {8, -6}, {
             7, -7}, {-2, 10}, {9, -9}, {-4, -10}, {11, -11}, {-8, 
             12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{65, 63, 12, 60, 68, 59, 66, 63, 61, 66, 63, 
             55, 68}], 
           "NumericalThresholds" -> {-0.24606103450059888`, 
            0.27979727089405065`, 1.0000000180025095`*^-35, 
            0.12799359858036044`, -0.44955414533615107`, 
            0.3675516694784165, -0.1969959735870361, -0.24996823817491529`, \
-0.5130616724491118, -0.18867564201354978`, -0.2499674931168556, \
-0.03677659854292869, 0.10732876136898996`}, "LeafValues" -> 
           RawArray["Real32",{
             0.010133186355233192`, -0.019544705748558044`, \
-0.02064105123281479, -0.007934700697660446, 
             0.020195264369249344`, -0.0057326266542077065`, 
             0.012099114246666431`, 0.013742033392190933`, 
             0.007312994450330734, -0.013458441942930222`, \
-0.01037586759775877, -0.007798238657414913, 0.0055723972618579865`, 
             0.00799400545656681}], "Children" -> 
           RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {6, 5}, {-5, 
             13}, {7, -7}, {8, 10}, {-2, 9}, {-9, -10}, {11, 
             12}, {-8, -12}, {-11, -13}, {-6, -14}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 55, 57, 55, 57, 60, 61, 55, 57, 65, 
             12}], "NumericalThresholds" -> {0.36726598441600805`, 
            0.20304237306118014`, -0.3887741416692733, -0.13210488855838773`, \
-0.25581888854503626`, -0.49887372553348536`, 
            0.09353566542267801, -0.5130625069141387, -0.036776391789317124`, 
            0.23826786130666736`, -0.10572742298245429`, 0.01746174227446318},
            "LeafValues" -> 
           RawArray["Real32",{0.0026740599423646927`, 
             0.00943179801106453, -0.009599455632269382, \
-0.023812737315893173`, 0.0007993587641976774, 
             0.025113653391599655`, -0.01357872411608696, 
             0.00034128816332668066`, 
             0.0015276133781298995`, -0.0112463952973485, 
             0.006426454056054354, 0.01388730201870203, 
             0.022434817627072334`}], "Children" -> 
           RawArray["Integer16",{{2, 7}, {4, 3}, {10, -4}, {6, 5}, {-5, -6}, {
             8, -7}, {12, -8}, {11, 
             9}, {-9, -10}, {-3, -11}, {-1, -12}, {-2, -13}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{35, 64, 68, 68, 66, 63, 67, 66, 66, 62, 60, 
             60, 63, 67, 61}], 
           "NumericalThresholds" -> {
            0.03206597827374936, -0.6034899055957793, -0.007178284460678696, \
-0.041415886953473084`, -0.19741514325141904`, -0.8185935616493224, 
            0.07591693103313447, -0.19963497668504712`, -0.19782416522502896`,
             0.8752751648426057, -0.9100273549556731, -0.009310938417911528, \
-0.6295674145221709, 0.353294923901558, -0.513061612844467}, "LeafValues" -> 
           RawArray["Real32",{-0.030204931274056435`, -0.031133802607655525`, 
             0.06481192260980606, -0.03134216368198395, 
             0.07925579696893692, -0.030078640207648277`, \
-0.030093051493167877`, -0.03114381991326809, -0.030070383101701736`, \
-0.030078886076807976`, -0.030103318393230438`, -0.030055515468120575`, \
-0.03004087693989277, -0.030034078285098076`, -0.030046137049794197`, \
-0.030054332688450813`}], "Children" -> 
           RawArray["Integer16",{{2, 6}, {8, 3}, {4, -4}, {5, -5}, {-3, 
             7}, {-2, 9}, {-6, -8}, {-1, 10}, {-7, 11}, {12, -11}, {-10, 
             13}, {-9, 15}, {-12, 14}, {-14, -15}, {-13, -16}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 56, 60, 63, 68, 58, 60, 61, 67, 61, 65, 
             59}], "NumericalThresholds" -> {
            0.21800861507654193`, -0.35659426450729365`, \
-0.009311229456216095, -0.24996782094240186`, 
            1.86605179309845, -0.009835074655711649, -0.9188081324100493, 
            1.0000000180025095`*^-35, -0.3380467444658279, 
            0.05358554981648923, -0.3996447771787643, -0.02356522716581821}, 
           "LeafValues" -> 
           RawArray["Real32",{0.05848333239555359, -0.030321640893816948`, 
             0.08898469805717468, -0.030210250988602638`, \
-0.030445925891399384`, -0.030540917068719864`, -0.030438510701060295`, \
-0.030092362314462662`, -0.030204564332962036`, -0.030061274766921997`, \
-0.03014504723250866, -0.03003203123807907, -0.030055370181798935`}], 
           "Children" -> 
           RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 5}, {-3, -5}, {8, -6}, {
             7, -7}, {-2, 10}, {9, -9}, {-4, -10}, {11, -11}, {-8, 
             12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 62, 58, 64, 57, 56, 65, 63, 62, 68, 68, 
             67, 63}], 
           "NumericalThresholds" -> {
            0.27385891973972326`, -0.06097304262220859, -0.07536391913890837, 
            0.13240607827901843`, -0.2835401445627212, 
            0.32777599990367895`, -0.10572833195328711`, 0.2797976285219193, 
            0.8752743303775788, -0.5207232534885405, -0.5169477760791777, \
-0.32788425683975214`, 0.1306702569127083}, "LeafValues" -> 
           RawArray["Real32",{0.02105252631008625, -0.017578715458512306`, 
             0.002174973953515291, 
             0.013764760456979275`, -0.011910507455468178`, 
             0.01390902604907751, -0.010013395920395851`, \
-0.014725195243954659`, -0.005112769547849894, 0.0029098333325237036`, 
             0.015264914371073246`, -0.0028804622124880552`, 
             0.0010781444143503904`, -0.0014507798478007317`}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {-2, -3}, {4, 5}, {7, -5}, {-4, 6}, {
             13, -7}, {8, 10}, {9, -9}, {-1, -10}, {12, 
             11}, {-11, -12}, {-8, -13}, {-6, -14}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 69, 60, 55, 62, 63, 64, 4}], 
           "NumericalThresholds" -> {-0.6295681297779082, 
            0.5661014318466188, -0.20411685854196546`, -0.03677575476467609, \
-0.40220184624195093`, -0.24996875971555707`, 0.13240607827901843`, 
            1.0000000180025095`*^-35}, "LeafValues" -> 
           RawArray["Real32",{-0.013607515022158623`, 0.014233605936169624`, 
             0.015085996128618717`, -0.008361181244254112, \
-0.010388175956904888`, 0.017481502145528793`, -0.0004431375418789685, 
             0.020174961537122726`, -0.008742300793528557}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {7, 4}, {5, -5}, {-4, 
             6}, {-6, -7}, {8, -8}, {-2, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{35, 61, 68, 68, 61, 63, 63, 65, 66, 64, 66, 
             60, 62, 63, 69, 67, 57}], 
           "NumericalThresholds" -> {
            0.03206597827374936, -0.513061612844467, -0.021042029373347756`, \
-0.041415886953473084`, -0.5130614936351775, -1.0076183676719663`, \
-0.8185935616493224, -0.10572710260748862`, -0.19741514325141904`, 
            0.13611683994531634`, -0.19782416522502896`, -0.9100273549556731, 
            0.8752754032611848, -0.6295674145221709, -0.24729322642087934`, 
            0.353294923901558, -0.4988748282194137}, "LeafValues" -> 
           RawArray["Real32",{-0.030129075050354004`, -0.03111104667186737, 
             0.10490452498197556`, -0.031999621540308, 
             0.07332548499107361, -0.030141910538077354`, \
-0.030054956674575806`, -0.030090073123574257`, -0.03078756481409073, \
-0.030050119385123253`, -0.030150577425956726`, -0.03007655218243599, \
-0.030053943395614624`, -0.030067088082432747`, -0.030033059418201447`, \
-0.030039459466934204`, -0.03004482202231884, -0.030033845454454422`}], 
           "Children" -> 
           RawArray["Integer16",{{2, 7}, {9, 3}, {4, 6}, {5, -5}, {-3, 
             8}, {-4, 10}, {-2, 11}, {-6, -9}, {-1, 13}, {-7, -11}, {-8, 
             12}, {-12, 14}, {15, -14}, {-13, 16}, {-10, 
             17}, {-15, -17}, {-16, -18}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 56, 60, 57, 68, 58, 60, 61, 67, 61, 65, 
             59}], "NumericalThresholds" -> {
            0.21800861507654193`, -0.35659426450729365`, \
-0.009311229456216095, -0.059014666825532906`, 
            1.86605179309845, -0.009835074655711649, -0.9188081324100493, 
            1.0000000180025095`*^-35, -0.3380467444658279, 
            0.05358554981648923, -0.3996447771787643, -0.02356522716581821}, 
           "LeafValues" -> 
           RawArray["Real32",{0.05511363223195076, -0.030309781432151794`, 
             0.08301939815282822, -0.030204202979803085`, \
-0.030442392453551292`, -0.030528536066412926`, -0.030428892001509666`, \
-0.030089613050222397`, -0.030200058594346046`, -0.03005938045680523, \
-0.030141783878207207`, -0.030031004920601845`, -0.03005378134548664}], 
           "Children" -> 
           RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 5}, {-3, -5}, {8, -6}, {
             7, -7}, {-2, 10}, {9, -9}, {-4, -10}, {11, -11}, {-8, 
             12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 57, 55, 55, 60, 68, 58, 69, 59, 65, 
             57}], "NumericalThresholds" -> {0.36726598441600805`, 
            0.20304237306118014`, -0.13210488855838773`, \
-0.25581888854503626`, -0.3887741416692733, -0.9100266396999358, \
-0.12043159082531928`, -0.0753631331026554, -0.22862268984317777`, 
            0.3675502091646195, -0.10572833195328711`, 0.23826786130666736`}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.009336759336292744, -0.02189827337861061, 
             0.009655704721808434, 
             0.0003197666665073484, -0.025034280493855476`, 
             0.02210569754242897, 
             0.0055903480388224125`, -0.014162465929985046`, 
             0.021339958533644676`, 0.0003900609153788537, 
             0.008836638182401657, -0.0016218448290601373`, \
-0.00538798188790679}], "Children" -> 
           RawArray["Integer16",{{2, 6}, {3, 5}, {8, 4}, {-4, -5}, {
             12, -6}, {-2, 7}, {-7, -8}, {10, 9}, {-9, -10}, {-1, 
             11}, {-11, -12}, {-3, -13}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 55, 57, 55, 58, 69, 67, 63, 67, 57, 
             69}], "NumericalThresholds" -> {0.36726598441600805`, 
            0.21800762414932254`, -0.3887741416692733, -0.13210488855838773`, \
-0.25581888854503626`, -0.0753631331026554, -0.22862268984317777`, \
-0.23175803571939466`, -0.24996861070394513`, -0.32520350813865656`, 
            0.23826786130666736`, -0.17931485176086423`}, "LeafValues" -> 
           RawArray["Real32",{
             0.009712728671729565, -0.0036993094254285097`, \
-0.009245731867849827, -0.024814914911985397`, 0.00046750454930588603`, 
             0.02202649973332882, -0.02305527962744236, \
-0.00010777387069538236`, 0.006521562580019236, -0.004779389593750238, 
             0.006377073470503092, 0.006078907288610935, 
             0.02225026860833168}], "Children" -> 
           RawArray["Integer16",{{2, 8}, {4, 3}, {11, -4}, {6, 5}, {-5, -6}, {
             9, 7}, {-7, -8}, {-2, 12}, {-1, 
             10}, {-10, -11}, {-3, -12}, {-9, -13}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{68, 68, 65, 62, 63, 63, 63, 61, 66, 66, 66, 
             67, 60, 66, 59}], 
           "NumericalThresholds" -> {-0.021042029373347756`, \
-0.041415886953473084`, -0.10572828352451323`, 
            0.8752745091915132, -1.0076183676719663`, -0.629568725824356, \
-0.25856061279773707`, -0.513061612844467, -0.1991614997386932, \
-0.19800319522619245`, -0.19741514325141904`, 
            0.353294923901558, -0.9100268781185149, -0.17844413220882413`, 
            0.35283870995044714`}, "LeafValues" -> 
           RawArray["Real32",{-0.030159462243318558`, -0.0315127968788147, 
             0.06852424144744873, -0.031275004148483276`, 
             0.06319159269332886, -0.030280740931630135`, \
-0.030082672834396362`, -0.030073465779423714`, -0.03023182973265648, \
-0.03009391389787197, -0.03005126118659973, -0.03003990277647972, \
-0.03008771687746048, -0.03005746752023697, -0.030032625421881676`, \
-0.030049510300159454`}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -3}, {4, 6}, {10, -5}, {-2, 
             7}, {-4, 8}, {-6, 13}, {11, 9}, {-9, -10}, {-1, 
             12}, {-7, -12}, {-11, -13}, {-8, 14}, {-14, 15}, {-15, -16}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 56, 60, 57, 68, 58, 60, 61, 67, 61, 65, 
             59}], "NumericalThresholds" -> {
            0.21800861507654193`, -0.35659426450729365`, \
-0.009311229456216095, -0.059014666825532906`, 
            1.86605179309845, -0.009835074655711649, -0.9188081324100493, 
            1.0000000180025095`*^-35, -0.3380467444658279, 
            0.05358554981648923, -0.3996447771787643, -0.02356522716581821}, 
           "LeafValues" -> 
           RawArray["Real32",{0.052300307899713516`, -0.03030276857316494, 
             0.07565034180879593, -0.03019835241138935, \
-0.030424190685153008`, -0.030511101707816124`, -0.030412517488002777`, \
-0.03008684143424034, -0.030193142592906952`, -0.0300575140863657, \
-0.030138500034809113`, -0.030030151829123497`, -0.030052131041884422`}], 
           "Children" -> 
           RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 5}, {-3, -5}, {8, -6}, {
             7, -7}, {-2, 10}, {9, -9}, {-4, -10}, {11, -11}, {-8, 
             12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 66, 65, 64, 62, 65, 55, 66, 57, 55}], 
           "NumericalThresholds" -> {
            0.27946138381958013`, -0.0984634719789028, -0.24606103450059888`, 
            0.41537036001682287`, -0.06097304262220859, \
-0.10572830960154532`, -0.03677575476467609, -0.18399276584386823`, \
-0.4988741129636764, -0.1423426494002342}, "LeafValues" -> 
           RawArray["Real32",{-0.017722254619002342`, -0.01673826202750206, 
             0.014224010519683361`, 0.012307367287576199`, 
             0.004266106057912111, 
             0.001576284528709948, -0.00042816338827833533`, 
             0.013113528490066528`, -0.013667658902704716`, 
             0.010914710350334644`, -0.012592541053891182`}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -3}, {4, 
             6}, {-1, -5}, {-2, -6}, {9, 7}, {8, -8}, {-7, -9}, {-4, 
             10}, {-10, -11}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 64, 58, 69, 57, 59, 57, 58}], 
           "NumericalThresholds" -> {-0.6295682489871978, -0.91684952378273, \
-0.3308220654726028, 0.2503384426236153, 0.20304237306118014`, 
            0.35283868014812475`, -0.13210488855838773`, -0.3308230191469192},
            "LeafValues" -> 
           RawArray["Real32",{-0.0160972960293293, 0.012445601634681225`, 
             0.00015580528997816145`, -0.0014913321938365698`, 
             0.011858465149998665`, -0.002141461009159684, \
-0.02298600785434246, 0.010300691239535809`, 0.022540247067809105`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {-2, 3}, {8, 4}, {5, -5}, {7, 
             6}, {-6, -7}, {-4, -8}, {-3, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{68, 68, 65, 56, 63, 63, 63, 61, 66, 66, 66, 
             35, 60, 64, 67}], 
           "NumericalThresholds" -> {-0.021042029373347756`, \
-0.041415886953473084`, -0.10572828352451323`, 
            0.15596465021371844`, -1.0076183676719663`, -0.629568725824356, \
-0.25856061279773707`, -0.513061612844467, -0.1991614997386932, \
-0.19944892823696134`, -0.19741514325141904`, 
            0.03206597827374936, -0.9100268185138701, 
            0.4153705686330796, -0.1694391071796417}, "LeafValues" -> 
           RawArray["Real32",{0.058584753423929214`, -0.031478919088840485`, 
             0.06420345604419708, -0.031249988824129105`, \
-0.030188383534550667`, -0.030273456126451492`, -0.03008025698363781, \
-0.030068976804614067`, -0.030225086957216263`, -0.030091144144535065`, \
-0.030080057680606842`, -0.030038751661777496`, -0.030046451836824417`, \
-0.03004555031657219, -0.03005600906908512, -0.030033482238650322`}], 
           "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -3}, {4, 6}, {-1, 10}, {-2, 
             7}, {-4, 8}, {-6, 13}, {11, 9}, {-9, -10}, {-5, 
             12}, {-7, -12}, {-11, -13}, {-8, 14}, {15, -15}, {-14, -16}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{64, 57, 67, 56, 67, 56, 56, 55, 68, 68, 55}],
            "NumericalThresholds" -> {0.051945621147751815`, 
            0.21800861507654193`, -0.3380467444658279, -0.35659426450729365`, 
            0.4105451703071595, -0.25524775683879847`, -0.409465804696083, \
-0.38877381384372706`, 
            1.86605179309845, -0.5291711390018462, -0.03677585162222385}, 
           "LeafValues" -> 
           RawArray["Real32",{0.048956505954265594`, 
             0.060107018798589706`, -0.03047320619225502, \
-0.030340049415826797`, -0.030383409932255745`, 
             0.05338529124855995, -0.030109688639640808`, \
-0.030076855793595314`, -0.030251074582338333`, -0.030205830931663513`, \
-0.030043892562389374`, -0.030081726610660553`}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {4, 7}, {-1, 6}, {-2, 
             5}, {-5, -6}, {-4, 9}, {-3, 8}, {-8, -9}, {10, -10}, {-7, 
             11}, {-11, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 66, 65, 64, 58, 64, 66, 62, 64, 68}], 
           "NumericalThresholds" -> {
            0.27946138381958013`, -0.0984634719789028, -0.24606103450059888`, 
            0.41537036001682287`, -0.009835639037191866, -0.6034907400608062, \
-0.18415424972772595`, -0.4022012501955032, -0.6034905016422271, \
-0.525403469800949}, "LeafValues" -> 
           RawArray["Real32",{-0.017288006842136383`, -0.0007823088089935482, 
             0.013758507557213306`, 0.018255850300192833`, 
             0.004143234342336655, -0.018589777871966362`, \
-0.013378694653511047`, 0.009313570335507393, -0.009898298420011997, 
             0.011052229441702366`, -0.0015458338893949986`}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -3}, {4, 
             6}, {-1, -5}, {-2, -6}, {7, 9}, {-4, 8}, {-8, -9}, {-7, 
             10}, {-10, -11}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 69, 60, 55, 62, 63, 64, 4}], 
           "NumericalThresholds" -> {-0.6295681297779082, 
            0.5661014318466188, -0.20411685854196546`, -0.03677575476467609, \
-0.40220184624195093`, -0.24996875971555707`, 0.13240607827901843`, 
            1.0000000180025095`*^-35}, "LeafValues" -> 
           RawArray["Real32",{-0.012534450739622116`, 0.01352524384856224, 
             0.014249988831579685`, -0.008111226372420788, \
-0.009850660338997841, 0.016753079369664192`, -0.0003412287915125489, 
             0.019610723480582237`, -0.009091057814657688}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {7, 4}, {5, -5}, {-4, 
             6}, {-6, -7}, {8, -8}, {-2, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{35, 64, 68, 66, 67, 58, 63, 63, 66, 62, 66, 
             60, 60, 63, 61, 67}], 
           "NumericalThresholds" -> {
            0.03206597827374936, -0.6034899055957793, -0.007178284460678696, 
            0.425636500120163, -0.32520350813865656`, -0.23054417222738263`, \
-0.25855948030948633`, -0.8185935616493224, -0.19963497668504712`, 
            
            0.8752751648426057, -0.19782416522502896`, -0.9100273549556731, \
-0.009310938417911528, -0.6295674145221709, -0.513061612844467, 
            0.353294923901558}, "LeafValues" -> 
           RawArray["Real32",{-0.030204152688384056`, -0.031029555946588516`, 
             0.015688715502619743`, -0.031229982152581215`, 
             0.07500660419464111, -0.034249864518642426`, 
             0.10626289248466492`, -0.030105458572506905`, \
-0.030083931982517242`, -0.030065197497606277`, -0.03010580688714981, \
-0.03007011115550995, -0.030049605295062065`, -0.03003663383424282, \
-0.03003089502453804, -0.030050525441765785`, -0.03004218265414238}], 
           "Children" -> 
           RawArray["Integer16",{{2, 8}, {9, 3}, {4, -4}, {5, -5}, {6, 
             7}, {-3, -7}, {-6, -8}, {-2, 11}, {-1, 10}, {13, -11}, {-9, 
             12}, {-12, 14}, {-10, 15}, {-13, 16}, {-14, -16}, {-15, -17}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 61, 66, 68, 65, 56, 58, 55, 60, 67, 61, 
             68, 65, 60, 59}], 
           "NumericalThresholds" -> {
            0.21800861507654193`, -0.5130616724491118, -0.19715302437543866`, 
            1.86605179309845, -0.8721500933170317, -0.35659500956535334`, \
-0.009835074655711649, -0.03677574731409549, -0.9188081324100493, \
-0.3380467444658279, 
            0.05358554981648923, -0.5293045639991759, -0.3996447771787643, \
-0.009311229456216095, -0.02356522716581821}, "LeafValues" -> 
           RawArray["Real32",{-0.03020342066884041, -0.030282434076070786`, 
             0.07191538065671921, 0.04252655431628227, 
             0.06205148994922638, -0.032079774886369705`, \
-0.030260836705565453`, -0.030395114794373512`, -0.030328601598739624`, \
-0.03008217178285122, -0.030103761702775955`, -0.030131574720144272`, \
-0.030065884813666344`, -0.030028371140360832`, -0.030039934441447258`, \
-0.030049074441194534`}], "Children" -> 
           RawArray["Integer16",{{2, 7}, {8, 3}, {-3, 4}, {5, -5}, {-4, 
             6}, {-6, -7}, {9, -8}, {10, -9}, {-2, 11}, {-1, 12}, {
             13, -12}, {-11, 14}, {-10, 15}, {-13, -15}, {-14, -16}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 55, 57, 55, 58, 69, 60, 59, 65, 57, 
             12}], "NumericalThresholds" -> {0.36726598441600805`, 
            0.20304237306118014`, -0.3887741416692733, -0.13210488855838773`, \
-0.25581888854503626`, -0.0753631331026554, -0.22862268984317777`, 
            0.09353549405932428, 0.3675502091646195, -0.10572833195328711`, 
            0.23826786130666736`, 0.01746174227446318}, "LeafValues" -> 
           RawArray["Real32",{-0.009035967290401459, -0.009362176060676575, 
             0.008850895799696445, 0.020775124430656433`, 
             0.0006103566847741604, -0.02387908101081848, 
             0.020486878231167793`, 0.0006247652927413583, 
             0.00011042440019082278`, 
             0.008386538363993168, -0.0016386202769353986`, \
-0.004996222443878651, -0.0244150273501873}], "Children" -> 
           RawArray["Integer16",{{2, 8}, {4, 3}, {11, -4}, {6, 5}, {-5, -6}, {
             9, 7}, {-7, -8}, {12, -9}, {-1, 
             10}, {-10, -11}, {-3, -12}, {-2, -13}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 55, 57, 57, 55, 61, 58, 67, 60, 69, 
             57}], "NumericalThresholds" -> {0.36726598441600805`, 
            0.21800762414932254`, -0.3887741416692733, -0.13210488855838773`, \
-0.4988738149404525, -0.25581888854503626`, -0.5130625069141387, \
-0.2305454388260841, -0.23175803571939466`, -0.009310305584222077, \
-0.17931485176086423`, 0.23826786130666736`}, "LeafValues" -> 
           RawArray["Real32",{
             0.013185366988182068`, -0.0037066845688968897`, \
-0.008473298512399197, -0.02336413785815239, 
             0.00014449826267082244`, -0.011035468429327011`, 
             0.02095210924744606, -0.016038548201322556`, 
             0.0003445338224992156, 0.006255343556404114, 
             0.0001793256087694317, 0.021523812785744667`, 
             0.005701196379959583}], "Children" -> 
           RawArray["Integer16",{{2, 9}, {4, 3}, {12, -4}, {5, 6}, {
             7, -6}, {-5, -7}, {10, 8}, {-8, -9}, {-2, 
             11}, {-1, -11}, {-10, -12}, {-3, -13}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{35, 61, 68, 68, 61, 63, 63, 65, 66, 64, 66, 
             60, 62, 63, 69, 67, 57}], 
           "NumericalThresholds" -> {
            0.03206597827374936, -0.513061612844467, -0.021042029373347756`, \
-0.041415886953473084`, -0.5130614936351775, -1.0076183676719663`, \
-0.8185935616493224, -0.10572719946503638`, -0.19741514325141904`, 
            0.13611683994531634`, -0.19782416522502896`, -0.9100273549556731, 
            0.8752754032611848, -0.6295674145221709, -0.24718905240297315`, 
            0.353294923901558, -0.4988748282194137}, "LeafValues" -> 
           RawArray["Real32",{-0.03013073280453682, -0.030999045819044113`, 
             0.08336848020553589, -0.03182239830493927, 
             0.05912632495164871, -0.030131729319691658`, \
-0.03004850633442402, -0.030081333592534065`, -0.030687611550092697`, \
-0.030047887936234474`, -0.030133439227938652`, -0.030068112537264824`, \
-0.03004792146384716, -0.030067771673202515`, -0.0300298985093832, \
-0.03003726154565811, -0.030040835961699486`, -0.030031515285372734`}], 
           "Children" -> 
           RawArray["Integer16",{{2, 7}, {9, 3}, {4, 6}, {5, -5}, {-3, 
             8}, {-4, 10}, {-2, 11}, {-6, -9}, {-1, 13}, {-7, -11}, {-8, 
             12}, {-12, 14}, {15, -14}, {-13, 16}, {-10, 
             17}, {-15, -17}, {-16, -18}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 56, 60, 55, 68, 58, 60, 61, 67, 61, 65, 
             60}], "NumericalThresholds" -> {
            0.21800861507654193`, -0.35659426450729365`, \
-0.009311229456216095, -0.03677634708583354, 
            1.86605179309845, -0.009835074655711649, -0.9188081324100493, \
-1.0000000180025095`*^-35, -0.3380467444658279, 
            0.05358554981648923, -0.3996447771787643, 
            1.0000000180025095`*^-35}, "LeafValues" -> 
           RawArray["Real32",{0.04597831517457962, -0.030275855213403702`, 
             0.07610674202442169, -0.030200431123375893`, 
             0.0012486338382586837`, -0.030533092096447945`, \
-0.030379347503185272`, -0.030079614371061325`, -0.030191076919436455`, \
-0.030053047463297844`, -0.030128421261906624`, -0.0300276018679142, \
-0.030047554522752762`}], "Children" -> 
           RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 5}, {-3, -5}, {8, -6}, {
             7, -7}, {-2, 10}, {9, -9}, {-4, -10}, {11, -11}, {-8, 
             12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 64, 58, 64, 57, 58, 56, 57, 59, 24, 65}],
            "NumericalThresholds" -> {
            0.27946138381958013`, -0.047500681132078164`, \
-0.07536391913890837, 0.13240607827901843`, 
            0.16948024928569796`, -0.009834498167037962, 0.5187081396579744, 
            0.23826720565557483`, 0.36755006015300756`, 
            0.06381659768521787, -0.10572851821780203`}, "LeafValues" -> 
           RawArray[
             "Real32",{-0.01606404036283493, -0.01808970980346203, \
-0.00030838814564049244`, 0.015597477555274963`, -0.011714219115674496`, 
             0.009325781837105751, -0.010349598713219166`, \
-0.0004238273249939084, 0.00015202803479041904`, 0.011067145504057407`, 
             0.018776092678308487`, -0.0010648500174283981`}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {-2, -3}, {4, 5}, {8, -5}, {7, 
             6}, {-6, -7}, {-4, -8}, {9, 10}, {-1, 
             11}, {-9, -11}, {-10, -12}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 68, 67, 69, 60, 11, 65, 63, 67, 65}], 
           "NumericalThresholds" -> {-0.6295681297779082, 
            0.42628329992294317`, -0.0966806299984455, -0.2263475731015205, 
            0.12799382954835894`, 
            1.0000000180025095`*^-35, -0.10572833195328711`, \
-0.24996861070394513`, -0.32869362831115717`, -0.10572719201445578`}, 
           "LeafValues" -> 
           RawArray[
             "Real32",{-0.012142387218773365`, -0.017069822177290916`, \
-0.0021990921813994646`, 0.0021115720737725496`, 
             0.022123582661151886`, -0.013358711265027523`, 
             0.012001934461295605`, 
             0.016222963109612465`, -0.00005994477396598086, \
-0.001294359564781189, 0.000877828395459801}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {5, 3}, {-3, 4}, {-4, -5}, {6, 
             10}, {7, -7}, {9, 8}, {-8, -9}, {-2, -10}, {-6, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{35, 61, 68, 68, 61, 63, 63, 63, 66, 64, 66, 
             60, 62, 63, 69, 67, 57}], 
           "NumericalThresholds" -> {
            0.03206597827374936, -0.513061612844467, -0.021042029373347756`, \
-0.041415886953473084`, -0.5130615532398223, -1.0076183676719663`, \
-0.8185935616493224, -0.24996823817491529`, -0.19741514325141904`, 
            0.13611683994531634`, -0.19782416522502896`, -0.9100273549556731, 
            0.8752754032611848, -0.6295674145221709, -0.24718905240297315`, 
            0.353294923901558, -0.4988748282194137}, "LeafValues" -> 
           RawArray["Real32",{-0.030127378180623055`, -0.03097892925143242, 
             0.1107143983244896, -0.03178342804312706, 
             0.05607545003294945, -0.030667196959257126`, \
-0.030046913772821426`, -0.030079204589128494`, -0.030153445899486542`, \
-0.030046580359339714`, -0.030130790546536446`, -0.030066249892115593`, \
-0.030046673491597176`, -0.030065985396504402`, -0.030029024928808212`, \
-0.030036158859729767`, -0.030039669945836067`, -0.030030611902475357`}], 
           "Children" -> 
           RawArray["Integer16",{{2, 7}, {9, 3}, {4, 6}, {5, -5}, {-3, 
             8}, {-4, 10}, {-2, 11}, {-6, -9}, {-1, 13}, {-7, -11}, {-8, 
             12}, {-12, 14}, {15, -14}, {-13, 16}, {-10, 
             17}, {-15, -17}, {-16, -18}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 61, 66, 64, 56, 58, 56, 60, 67, 64, 61, 
             68, 65, 60, 59}], 
           "NumericalThresholds" -> {
            0.21800861507654193`, -0.5130616724491118, -0.20005169510841367`, 
            0.13240634649991992`, -0.25524775683879847`, \
-0.009835074655711649, -0.1441973969340324, -0.9188081324100493, \
-0.3380467444658279, -0.5920875966548919, 
            0.05358554981648923, -0.5293045639991759, -0.3996447771787643, \
-0.009311229456216095, -0.02356522716581821}, "LeafValues" -> 
           RawArray["Real32",{-0.030334630981087685`, -0.03026520274579525, 
             0.0835106149315834, -0.03077283874154091, 
             0.03133649751543999, -0.030069313943386078`, \
-0.030369743704795837`, -0.030193425714969635`, -0.03007747232913971, \
-0.030099239200353622`, -0.030166735872626305`, -0.030124684795737267`, \
-0.03006795048713684, -0.030026720836758614`, -0.030038021504878998`, \
-0.0300461258739233}], "Children" -> 
           RawArray["Integer16",{{2, 6}, {7, 3}, {-3, 4}, {5, -5}, {-4, 10}, {
             8, -7}, {-1, 9}, {-2, 11}, {-8, 12}, {-6, -11}, {13, -12}, {-10, 
             14}, {-9, 15}, {-13, -15}, {-14, -16}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 58, 57, 55, 60, 57, 62, 61, 58, 58}],
            "NumericalThresholds" -> {0.36726598441600805`, 
            0.20304237306118014`, -0.24031142145395276`, \
-0.13210488855838773`, -0.25581888854503626`, -0.9100263416767119, \
-0.4988738149404525, -0.0609738565981388, -0.513062685728073, \
-0.2305454686284065, -0.23054461926221845`}, "LeafValues" -> 
           RawArray[
             "Real32",{-0.015224470756947994`, -0.018425000831484795`, \
-0.00036441738484427333`, 0.016711238771677017`, 
             0.0007151095196604729, -0.022917835041880608`, \
-0.00954864826053381, 0.009847805835306644, 0.007184890098869801, 
             0.012231116183102131`, -0.00041011988651007414`, \
-0.0013134317705407739`}], "Children" -> 
           RawArray["Integer16",{{2, 6}, {4, 3}, {-3, -4}, {7, 
             5}, {-5, -6}, {-2, 8}, {9, -8}, {-7, -9}, {11, 
             10}, {-10, -11}, {-1, -12}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 55, 68, 68, 64, 63, 69, 67, 60, 57}],
            "NumericalThresholds" -> {0.36726598441600805`, 
            0.21800762414932254`, -0.3887741416692733, -0.03129779733717441, \
-0.3743704110383987, -0.6034906804561614, -0.24996835738420484`, \
-0.22862268984317777`, -0.23175803571939466`, 0.09353566542267801, 
            0.23826786130666736`}, "LeafValues" -> 
           RawArray[
             "Real32",{-0.00980681274086237, -0.0036966619081795216`, \
-0.008000975474715233, -0.02221819758415222, -0.0018996166763827205`, \
-0.014565017074346542`, 0.010426969267427921`, -0.00027634858270175755`, 
             0.015417585149407387`, 0.01930380053818226, 0.004973902367055416,
              0.005412247963249683}], "Children" -> 
           RawArray["Integer16",{{2, 9}, {4, 3}, {11, -4}, {5, 8}, {
             6, -6}, {-1, 7}, {-7, -8}, {-5, -9}, {-2, 
             10}, {-10, -11}, {-3, -12}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{35, 64, 68, 66, 67, 58, 63, 63, 66, 62, 66, 
             60, 60, 63, 61, 67}], 
           "NumericalThresholds" -> {
            0.03206597827374936, -0.6034899055957793, -0.007178284460678696, 
            0.425636500120163, -0.32520350813865656`, -0.23054415732622144`, \
-0.2585605233907699, -0.8185935616493224, -0.19963497668504712`, 
            0.8752751648426057, -0.19782416522502896`, -0.9100273549556731, \
-0.009310938417911528, -0.6295675337314605, -0.513061612844467, 
            0.353294923901558}, "LeafValues" -> 
           RawArray["Real32",{-0.030213696882128716`, -0.030942538753151894`, 
             0.013301576487720013`, -0.031159350648522377`, 
             0.06672409176826477, -0.03515120595693588, 
             0.08851402252912521, -0.030100950971245766`, \
-0.030076947063207626`, -0.030061978846788406`, -0.03010127879679203, \
-0.030064329504966736`, -0.030046436935663223`, -0.030033456161618233`, \
-0.03002808429300785, -0.030048668384552002`, -0.0300384983420372}], 
           "Children" -> 
           RawArray["Integer16",{{2, 8}, {9, 3}, {4, -4}, {5, -5}, {6, 
             7}, {-3, -7}, {-6, -8}, {-2, 11}, {-1, 10}, {13, -11}, {-9, 
             12}, {-12, 14}, {-10, 15}, {-13, 16}, {-14, -16}, {-15, -17}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{56, 61, 57, 60, 56, 69, 68, 55, 56, 67, 55, 
             61, 68, 60, 68, 64}], 
           "NumericalThresholds" -> {
            0.15596566349267962`, -0.5130616724491118, \
-0.059014666825532906`, -0.009311229456216095, -0.48675483465194697`, \
-0.22862268984317777`, 
            1.86605179309845, -0.03677666001021861, -0.25524775683879847`, \
-0.3380467444658279, -0.03677695244550704, 
            1.0000000180025095`*^-35, -0.5289332270622252, \
-0.009311229456216095, -0.5140972733497619, 0.13240581750869754`}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.03029847890138626, -0.030063830316066742`, 
             0.08359207212924957, 0.02054496854543686, 
             0.04939000681042671, -0.030123567208647728`, \
-0.030539190396666527`, -0.030445769429206848`, -0.030388422310352325`, \
-0.030181927606463432`, -0.030094273388385773`, -0.03016294166445732, \
-0.03008914925158024, -0.030073385685682297`, -0.030037283897399902`, \
-0.030030345544219017`, -0.030054062604904175`}], "Children" -> 
           RawArray["Integer16",{{2, 7}, {9, 3}, {4, 6}, {-3, 5}, {-5, 
             8}, {-4, -7}, {11, -8}, {-6, -9}, {-1, 10}, {-10, 13}, {
             12, -12}, {15, -13}, {-11, 14}, {-14, -15}, {-2, 
             16}, {-16, -17}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 67, 66, 65, 62, 35, 67, 63, 63, 56}], 
           "NumericalThresholds" -> {0.27385891973972326`, 
            0.5014521181583406, -0.12605434656143186`, -0.24606103450059888`, \
-0.44816149771213526`, 
            
            0.03206597827374936, -0.2704524844884872, -0.24996861070394513`, \
-0.24996710568666455`, 0.3277754187583924}, "LeafValues" -> 
           RawArray["Real32",{0.0002952539944089949, -0.020782150328159332`, 
             0.000045996494009159505`, 
             0.010386561043560505`, -0.011531383730471134`, \
-0.018057649955153465`, 0.01789814420044422, 0.00700211338698864, 
             0.0034852016251534224`, -0.005764129105955362, \
-0.004319019615650177}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {5, 
             6}, {-1, -6}, {8, 7}, {-7, 10}, {-5, 9}, {-9, -10}, {-8, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 69, 58, 64, 57, 59, 64, 69}], 
           "NumericalThresholds" -> {-0.6295681297779082, 
            0.5661014318466188, -0.3308220654726028, -0.9168494641780852, 
            0.20304237306118014`, 
            0.35283868014812475`, -0.04750095307826995, -0.2459611669182777}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.011557183228433132`, -0.000707348168361932, 
             0.013704431243240833`, 
             0.011131429113447666`, -0.004698106087744236, \
-0.00226383819244802, -0.021549252793192863`, 0.023936470970511436`, 
             0.0029316821601241827`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {7, 4}, {-4, 5}, {8, 
             6}, {-6, -7}, {-2, -8}, {-5, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{35, 61, 68, 68, 61, 63, 63, 63, 66, 64, 66, 
             60, 62, 63, 69, 67, 57}], 
           "NumericalThresholds" -> {
            0.03206597827374936, -0.513061612844467, -0.021042029373347756`, \
-0.041415886953473084`, -0.5130615532398223, -1.0076183676719663`, \
-0.8185935616493224, -0.2499682083725929, -0.19741514325141904`, 
            0.13611735403537753`, -0.19782416522502896`, -0.9100273549556731, 
            0.8752754032611848, -0.6295675337314605, -0.2470230385661125, 
            0.353294923901558, -0.4988748282194137}, "LeafValues" -> 
           RawArray["Real32",{-0.030126605182886124`, -0.03091946616768837, 
             0.09443584829568863, -0.03170199319720268, 
             0.051991790533065796`, -0.030623599886894226`, \
-0.030043991282582283`, -0.030074583366513252`, -0.03014429472386837, \
-0.0300446767359972, -0.030124809592962265`, -0.03006243333220482, \
-0.030045147985219955`, -0.030065692961215973`, -0.0300272386521101, \
-0.030035359784960747`, -0.03003751114010811, -0.030029330402612686`}], 
           "Children" -> 
           RawArray["Integer16",{{2, 7}, {9, 3}, {4, 6}, {5, -5}, {-3, 
             8}, {-4, 10}, {-2, 11}, {-6, -9}, {-1, 13}, {-7, -11}, {-8, 
             12}, {-12, 14}, {15, -14}, {-13, 16}, {-10, 
             17}, {-15, -17}, {-16, -18}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 61, 66, 64, 56, 58, 55, 60, 67, 64, 61, 
             68, 65, 60, 59}], 
           "NumericalThresholds" -> {
            0.21800861507654193`, -0.5130616724491118, -0.20005169510841367`, 
            0.13240634649991992`, -0.25524775683879847`, \
-0.009835074655711649, -0.03677574731409549, -0.9188081324100493, \
-0.3380467444658279, -0.5920875966548919, 
            0.05358554981648923, -0.5293045639991759, -0.3996447771787643, \
-0.009311229456216095, -0.02356522716581821}, "LeafValues" -> 
           RawArray["Real32",{-0.0301826149225235, -0.030252588912844658`, 
             0.07463977485895157, -0.030746541917324066`, 
             0.028803342953324318`, -0.03006765991449356, \
-0.030352283269166946`, -0.030306095257401466`, -0.030072959139943123`, \
-0.030093764886260033`, -0.03015710785984993, -0.03011925332248211, \
-0.030063822865486145`, -0.03002508170902729, -0.030035363510251045`, \
-0.03004387393593788}], "Children" -> 
           RawArray["Integer16",{{2, 6}, {7, 3}, {-3, 4}, {5, -5}, {-4, 10}, {
             8, -7}, {9, -8}, {-2, 11}, {-1, 12}, {-6, -11}, {13, -12}, {-10, 
             14}, {-9, 15}, {-13, -15}, {-14, -16}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{67, 58, 66, 65, 63, 60, 65, 66, 58, 65, 57}],
            "NumericalThresholds" -> {
            0.27946138381958013`, -0.009835639037191866, -0.131475456058979, \
-0.24606103450059888`, -0.2585592716932296, -0.009309822693467138, \
-0.10572734847664832`, -0.1899178400635719, -0.23054396361112592`, \
-0.10572833195328711`, 0.20304237306118014`}, "LeafValues" -> 
           RawArray["Real32",{0.001224570907652378, 
             0.00014772047870792449`, -0.01783471368253231, 
             0.009253453463315964, 0.005230830982327461, -0.01840006373822689,
              0.018914274871349335`, -0.010154347866773605`, 
             0.001161868334747851, 
             0.009138956665992737, -0.006876541767269373, 
             0.005975349806249142}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {5, 
             6}, {-1, -6}, {9, 7}, {8, 11}, {-7, -9}, {
             10, -10}, {-5, -11}, {-8, -12}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{63, 69, 60, 63, 64, 64, 4, 64, 59, 58}], 
           "NumericalThresholds" -> {-0.6295681297779082, 
            0.5661014318466188, -0.009309921879321335, -0.24996861070394513`, \
-0.9168494641780852, -0.603489190340042, 
            1.0000000180025095`*^-35, -0.6034904420375823, \
-0.02356647979468107, -0.23054396361112592`}, "LeafValues" -> 
           RawArray["Real32",{-0.011115613393485546`, 0.016377542167901993`, 
             0.013356326147913933`, 0.009512682445347309, 
             0.012393161654472351`, -0.003369320649653673, \
-0.005713930353522301, 0.008994746953248978, -0.016882389783859253`, 
             0.0013333427486941218`, -0.014090687036514282`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, 9}, {-4, 6}, {
             8, 7}, {-7, -8}, {-6, -9}, {-5, 10}, {-10, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{35, 61, 68, 68, 61, 63, 63, 63, 66, 64, 66, 
             62, 60, 63, 69, 67, 57}], 
           "NumericalThresholds" -> {
            0.03206597827374936, -0.513061612844467, -0.021042029373347756`, \
-0.041415886953473084`, -0.5130615532398223, -1.0076183676719663`, \
-0.8185935616493224, -0.24996823817491529`, -0.19741514325141904`, 
            0.13611735403537753`, -0.19782416522502896`, 
            0.8752754032611848, -0.9100273549556731, -0.6295674145221709, \
-0.2470230385661125, 0.353294923901558, -0.4988748282194137}, "LeafValues" -> 
           RawArray["Real32",{-0.030122889205813408`, -0.030898667871952057`, 
             0.08585942536592484, -0.03165951371192932, 
             0.0496353879570961, -0.030622325837612152`, \
-0.03004254586994648, -0.030071932822465897`, -0.030144263058900833`, \
-0.030043363571166992`, -0.0301218219101429, -0.03006034903228283, \
-0.030063727870583534`, -0.030042970553040504`, -0.030026495456695557`, \
-0.030034346505999565`, -0.030036495998501778`, -0.030028490349650383`}], 
           "Children" -> 
           RawArray["Integer16",{{2, 7}, {9, 3}, {4, 6}, {5, -5}, {-3, 
             8}, {-4, 10}, {-2, 11}, {-6, -9}, {-1, 12}, {-7, -11}, {-8, 
             13}, {15, -13}, {-12, 14}, {-14, 16}, {-10, 
             17}, {-15, -17}, {-16, -18}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{56, 61, 57, 60, 56, 60, 68, 55, 56, 67, 55, 
             61, 68, 60, 57, 63}], 
           "NumericalThresholds" -> {
            0.15596566349267962`, -0.5130616724491118, \
-0.059014666825532906`, -0.009311229456216095, -0.48675483465194697`, 
            0.17470937967300418`, 
            1.86605179309845, -0.03677666001021861, -0.25524775683879847`, \
-0.3380467444658279, -0.03677695244550704, 
            0.05358374863862992, -0.5289332270622252, -0.009311229456216095, 
            0.22246871143579486`, -0.24996706098318097`}, "LeafValues" -> 
           RawArray["Real32",{-0.030276795849204063`, -0.03005187027156353, 
             0.07449546456336975, -0.03047826699912548, 
             0.04584950953722, -0.030123675242066383`, 
             
             0.020583871752023697`, -0.030443158000707626`, \
-0.03038943000137806, -0.030171306803822517`, -0.03008890338242054, \
-0.03015761822462082, -0.0300887580960989, -0.030068805441260338`, \
-0.030035100877285004`, -0.030039925128221512`, -0.03002634085714817}], 
           "Children" -> 
           RawArray["Integer16",{{2, 7}, {9, 3}, {4, 6}, {-3, 5}, {-5, 
             8}, {-4, -7}, {11, -8}, {-6, -9}, {-1, 10}, {-10, 13}, {
             12, -12}, {15, -13}, {-11, 14}, {-14, -15}, {-2, 
             16}, {-16, -17}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 55, 67, 60, 55, 56, 58, 65, 12}], 
           "NumericalThresholds" -> {0.36726598441600805`, 
            0.2180084437131882, -0.3887741416692733, 0.27385891973972326`, 
            0.09353549405932428, -0.26989696919918055`, 
            0.155965693295002, -0.07536391913890837, -0.24605972319841382`, 
            0.01746174227446318}, "LeafValues" -> 
           RawArray["Real32",{
             0.010598236694931984`, -0.00838643778115511, \
-0.005338671151548624, 0.022954067215323448`, -0.012751014903187752`, 
             0.00036469113547354937`, -0.00041080894879996777`, \
-0.012585297226905823`, 0.011492018587887287`, 
             0.007735707331448793, -0.02356836386024952}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {4, 3}, {9, -4}, {6, -5}, {
             10, -6}, {-1, 7}, {8, -8}, {-7, -9}, {-3, -10}, {-2, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{57, 57, 55, 57, 57, 55, 61, 55, 67, 69, 57, 
             68}], "NumericalThresholds" -> {0.36726598441600805`, 
            0.21800762414932254`, -0.3887741416692733, -0.13210488855838773`, \
-0.49887372553348536`, -0.25581888854503626`, -0.5130625069141387, \
-0.036776391789317124`, -0.23175803571939466`, -0.17931485176086423`, 
            0.23826786130666736`, -0.5226300954818724}, "LeafValues" -> 
           RawArray["Real32",{
             0.0133674256503582, -0.003757208352908492, \
-0.007404666393995285, -0.02107659913599491, 
             0.00011102720600320026`, -0.012250366620719433`, 
             0.019585570320487022`, 
             0.0016120134387165308`, -0.010541525669395924`, 
             0.005544296465814114, 0.02035471796989441, 0.005401209928095341, 
             0.0024227325338870287`}], "Children" -> 
           RawArray["Integer16",{{2, 9}, {4, 3}, {11, -4}, {5, 6}, {
             7, -6}, {-5, -7}, {12, 8}, {-8, -9}, {-2, 
             10}, {-10, -11}, {-3, -12}, {-1, -13}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0|>]}, "ClassNumber" -> 4, "IterationsNumber" -> 50, "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|"(f6(f1f2)(f3f4f5f7))" -> <|"Weight" -> CompressedData["

1:eJxTTMoPSmVkYGBwBeIM/YV7W75Nsh+lhwbtJh5bctH1ONVpBjD4gJMGANGj
EGk=
               "], "Type" -> "NumericalVector"|>|>, 
          "Output" -> <|
           "(f6(f1f2)(f3f4f5f7))" -> <|
             "Type" -> "NumericalVector", "Weight" -> 6.999999999999998|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "DensifyNumericalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f6(f1f2)(f3f4f5f7))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGBwBeIM/YV7W75Nsh+lhwbtJh5bctH1ONVpBjD4gJMGANGj
EGk=
                   "], "Type" -> "NumericalVector"|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 8857647472391453893, 
              "Output" -> <|
               "(f6(f1f2)(f3f4f5f7))" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 
                  6.999999999999998|>|>|>], 
            MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|
               "Type" -> "NumericalVector", "Weight" -> 6.999999999999998|>, 
              "Key" -> "(f6(f1f2)(f3f4f5f7))", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
       "GradientBoostedTrees", "PostProcessor" -> 
       MachineLearning`MLProcessor["Identity"], 
       "Options" -> <|
        "BoostingMethod" -> <|"Value" -> "Gradient", "Options" -> <||>|>, 
         MaxTrainingRounds -> <|"Value" -> 50, "Options" -> <||>|>, 
         "LeavesNumber" -> <|"Value" -> 250, "Options" -> <||>|>, 
         "LearningRate" -> <|"Value" -> 0.04, "Options" -> <||>|>, 
         ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
         "MaxBinNumber" -> <|"Value" -> 255, "Options" -> <||>|>, 
         "ThreadNumber" -> <|"Value" -> 8, "Options" -> <||>|>, 
         "MaxDepth" -> <|"Value" -> 6, "Options" -> <||>|>, 
         "LeafSize" -> <|"Value" -> 90, "Options" -> <||>|>, 
         "FeatureFraction" -> <|"Value" -> 1, "Options" -> <||>|>, 
         "BaggingFraction" -> <|"Value" -> 1, "Options" -> <||>|>, 
         "BaggingFrequency" -> <|"Value" -> 0, "Options" -> <||>|>, 
         "MinGainToSplit" -> <|"Value" -> 0, "Options" -> <||>|>, 
         "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
         "L2Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
         "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>|>|>, 
     "TrainingInformation" -> <|
      "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
       Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
       "PreprocessingTime" -> 0.282757`5.9029583587247405, "LossName" -> 
       "MeanCrossEntropy", "BestModelInformation" -> 
       Dataset[<|
         "MeanCrossEntropy" -> 
          Around[0.6046844687995591, 0.03189080306164598], "Accuracy" -> 
          Around[0.6940183528789351, 0.03236921531227903], "EvaluationTime" -> 
          0.00029726300545832105`, "TestSize" -> 400, "ModelMemory" -> 439168,
           "ModelUtility" -> -0.2007362477136022, "TrainingSize" -> 1834, 
          "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 4704456, 
          "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
            Around[0.6046844687995591, 0.022550203102374582`]}, 
          "AccuracyHistory" -> {
            Around[0.6940183528789351, 0.022888491648999927`]}, 
          "Configuration" -> {
           "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
            MaxTrainingRounds -> 50, "LeavesNumber" -> 250, "LearningRate" -> 
            0.04, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
            "ThreadNumber" -> 8, "MaxDepth" -> 6, "LeafSize" -> 90, 
            "FeatureFraction" -> 1, "BaggingFraction" -> 1, 
            "BaggingFrequency" -> 0, "MinGainToSplit" -> 0, 
            "L1Regularization" -> 0, "L2Regularization" -> 0, "LossFunction" -> 
            Automatic}|>, 
         TypeSystem`Struct[{
          "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
           "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
           "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
           "AccuracyHistory", "Configuration"}, {
          TypeSystem`AnyType, TypeSystem`AnyType, 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Vector[TypeSystem`AnyType, 17]}], <||>], 
       "Configurations" -> 
       Dataset[<|<|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 110|>, 
              "LearningRate" -> <|"Value" -> 0.2|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 7|>, 
              "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.8345367847002391, 0.01750840298278031], "Accuracy" -> 
               Around[0.38115312728723005`, 0.06851221220205125], 
               "EvaluationTime" -> 0.0005011872336272722, "TestSize" -> 100, 
               "ModelMemory" -> 26184, "ModelUtility" -> -0.5165048399971447, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.03162277660168379, 
               "TrainingMemory" -> 106000, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.8345367847002391, 0.012380310476870732`]}, 
               "AccuracyHistory" -> {
                 Around[0.38115312728723005`, 0.04844544984216216]}|>, <|
              "MeanCrossEntropy" -> 
               Around[2.140028036610683, 0.371618564027554], "Accuracy" -> 
               Around[0.5949654970315852, 0.04884493716896793], 
               "EvaluationTime" -> 0.000142190930212764, "TestSize" -> 200, 
               "ModelMemory" -> 314920, 
               "ModelUtility" -> -1.4882226825764313`, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
               1199208, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[2.140028036610683, 0.2627740066386906]}, 
               "AccuracyHistory" -> {
                 Around[0.5949654970315852, 0.034538586298808065`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.000142190930212764, "MeanCrossEntropy" -> 
              Around[2.140028036610683, 0.371618564027554], "ModelMemory" -> 
              314920, "TrainingMemory" -> 1199208, "TrainingTime" -> 
              5.78886647762164|>, "Index" -> 1|>, <|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 250|>, 
              "LearningRate" -> <|"Value" -> 0.04|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 90|>,
               "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.8325207701515268, 0.012427924763523881`], "Accuracy" -> 
               Around[0.3464129816786372, 0.0384647252259898], 
               "EvaluationTime" -> 0.00003981071705534969, "TestSize" -> 300, 
               "ModelMemory" -> 26184, "ModelUtility" -> -0.5128797136083173, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.00630957344480193, 
               "TrainingMemory" -> 87848, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.8325207701515268, 0.008787869876363956]}, 
               "AccuracyHistory" -> {
                 Around[0.3464129816786372, 0.027198668043774642`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.7021634417728769, 0.0077212458883845845`], "Accuracy" -> 
               Around[0.6492390576783281, 0.038624766483147166`], 
               "EvaluationTime" -> 0.000043246719157808864`, "TestSize" -> 
               300, "ModelMemory" -> 26184, 
               "ModelUtility" -> -0.3418034395349808, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
               204176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.7021634417728769, 0.005459745326885488]}, 
               "AccuracyHistory" -> {
                 Around[0.6492390576783281, 0.027311834301980236`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.6657967736847902, 0.027498908833926177`], "Accuracy" -> 
               Around[0.6531584616818203, 0.03867470930764361], 
               "EvaluationTime" -> 0.00011726169411961113`, "TestSize" -> 300,
                "ModelMemory" -> 373504, 
               "ModelUtility" -> -0.2947323218437581, "TrainingSize" -> 300, 
               "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
               1530328, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.6657967736847902, 0.019444664911699855`]}, 
               "AccuracyHistory" -> {
                 Around[0.6531584616818203, 0.02734714921185328]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.6046844687995591, 0.03189080306164598], "Accuracy" -> 
               Around[0.6940183528789351, 0.03236921531227903], 
               "EvaluationTime" -> 0.00029726300545832105`, "TestSize" -> 400,
                "ModelMemory" -> 439168, 
               "ModelUtility" -> -0.2007362477136022, "TrainingSize" -> 1834, 
               "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
               4704456, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.6046844687995591, 0.022550203102374582`]}, 
               "AccuracyHistory" -> {
                 Around[0.6940183528789351, 0.022888491648999927`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00029726300545832105`, "MeanCrossEntropy" -> 
              Around[0.6046844687995591, 0.03189080306164598], "ModelMemory" -> 
              439168, "TrainingMemory" -> 4704456, "TrainingTime" -> 
              0.6326569777379907|>, "Index" -> 2|>, <|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 13|>, 
              "LearningRate" -> <|"Value" -> 0.01|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 15|>,
               "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.8344765139750193, 0.011332717113614502`], "Accuracy" -> 
               Around[0.35930527356571007`, 0.03361268774348175], 
               "EvaluationTime" -> 0.000037763731941933215`, "TestSize" -> 
               400, "ModelMemory" -> 26184, 
               "ModelUtility" -> -0.5149574187886024, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
               87768, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.8344765139750193, 0.008013441120305652]}, 
               "AccuracyHistory" -> {
                 Around[0.35930527356571007`, 0.023767759437321897`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.7364123466650455, 0.03821939101554543], "Accuracy" -> 
               Around[0.5198291914586299, 0.049796459623624514`], 
               "EvaluationTime" -> 0.0001, "TestSize" -> 200, "ModelMemory" -> 
               314960, "ModelUtility" -> -0.39762427701147884`, 
               "TrainingSize" -> 60, "TrainingTime" -> 0.05011872336272722, 
               "TrainingMemory" -> 1000856, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.7364123466650455, 0.02702519055991238]}, 
               "AccuracyHistory" -> {
                 Around[0.5198291914586299, 0.03521141427894701]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.657224530055194, 0.02705378634371448], "Accuracy" -> 
               Around[0.6706007889849369, 0.03790429903722604], 
               "EvaluationTime" -> 0.00025118864315095795`, "TestSize" -> 300,
                "ModelMemory" -> 421328, "ModelUtility" -> -0.281757335187258,
                "TrainingSize" -> 300, "TrainingTime" -> 0.3981071705534972, 
               "TrainingMemory" -> 2267752, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.657224530055194, 0.01912991578041252]}, 
               "AccuracyHistory" -> {
                 Around[0.6706007889849369, 0.026802386885345253`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00025118864315095795`, "MeanCrossEntropy" -> 
              Around[0.657224530055194, 0.02705378634371448], "ModelMemory" -> 
              421328, "TrainingMemory" -> 2267752, "TrainingTime" -> 
              3.049482065375962|>, "Index" -> 3|>, <|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 6|>, 
              "LearningRate" -> <|"Value" -> 0.1|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 15|>,
               "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.8345367847002391, 0.01750840298278031], "Accuracy" -> 
               Around[0.38115312728723005`, 0.06851221220205125], 
               "EvaluationTime" -> 0.00019952623149688788`, "TestSize" -> 100,
                "ModelMemory" -> 26184, "ModelUtility" -> -0.5165045383361426,
                "TrainingSize" -> 10, "TrainingTime" -> 0.0630957344480193, 
               "TrainingMemory" -> 130328, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.8345367847002391, 0.012380310476870732`]}, 
               "AccuracyHistory" -> {
                 Around[0.38115312728723005`, 0.04844544984216216]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00019952623149688788`, "MeanCrossEntropy" -> 
              Around[0.8345367847002391, 0.01750840298278031], "ModelMemory" -> 
              26184, "TrainingMemory" -> 130328, "TrainingTime" -> 
              1.509249967996622|>, "Index" -> 4|>, <|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 60|>, 
              "LearningRate" -> <|"Value" -> 0.1|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 90|>,
               "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.8325207701515268, 0.012427924763523881`], "Accuracy" -> 
               Around[0.3464129816786372, 0.0384647252259898], 
               "EvaluationTime" -> 0.00003981071705534969, "TestSize" -> 300, 
               "ModelMemory" -> 26184, "ModelUtility" -> -0.5128797136083173, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.00630957344480193, 
               "TrainingMemory" -> 87680, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.8325207701515268, 0.008787869876363956]}, 
               "AccuracyHistory" -> {
                 Around[0.3464129816786372, 0.027198668043774642`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.7021634417728769, 0.0077212458883845845`], "Accuracy" -> 
               Around[0.6492390576783281, 0.038624766483147166`], 
               "EvaluationTime" -> 0.00003981071705534969, "TestSize" -> 300, 
               "ModelMemory" -> 26184, "ModelUtility" -> -0.3418034360989787, 
               "TrainingSize" -> 60, "TrainingTime" -> 0.007943282347242814, 
               "TrainingMemory" -> 204112, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.7021634417728769, 0.005459745326885488]}, 
               "AccuracyHistory" -> {
                 Around[0.6492390576783281, 0.027311834301980236`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.6393630886822188, 0.035687446985667545`], "Accuracy" -> 
               Around[0.6534635670629344, 0.047464978431321525`], 
               "EvaluationTime" -> 0.0001258925411794167, "TestSize" -> 200, 
               "ModelMemory" -> 375904, 
               "ModelUtility" -> -0.25709598187678673`, "TrainingSize" -> 300,
                "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
               1561992, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.6393630886822188, 0.025234835766800936`]}, 
               "AccuracyHistory" -> {
                 Around[0.6534635670629344, 0.033562808117660665`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.0001258925411794167, "MeanCrossEntropy" -> 
              Around[0.6393630886822188, 0.035687446985667545`], 
              "ModelMemory" -> 375904, "TrainingMemory" -> 1561992, 
              "TrainingTime" -> 0.613176344774153|>, "Index" -> 5|>, <|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 25|>, 
              "LearningRate" -> <|"Value" -> 0.1|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 35|>,
               "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.8345367847002391, 0.01750840298278031], "Accuracy" -> 
               Around[0.38115312728723005`, 0.06851221220205125], 
               "EvaluationTime" -> 0.00015848931924611134`, "TestSize" -> 100,
                "ModelMemory" -> 26184, "ModelUtility" -> -0.5165044972992303,
                "TrainingSize" -> 10, "TrainingTime" -> 0.0630957344480193, 
               "TrainingMemory" -> 124968, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.8345367847002391, 0.012380310476870732`]}, 
               "AccuracyHistory" -> {
                 Around[0.38115312728723005`, 0.04844544984216216]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00015848931924611134`, "MeanCrossEntropy" -> 
              Around[0.8345367847002391, 0.01750840298278031], "ModelMemory" -> 
              26184, "TrainingMemory" -> 124968, "TrainingTime" -> 
              1.509249967996622|>, "Index" -> 6|>, <|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 60|>, 
              "LearningRate" -> <|"Value" -> 0.04|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 15|>,
               "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.8325207701515268, 0.012427924763523881`], "Accuracy" -> 
               Around[0.3464129816786372, 0.0384647252259898], 
               "EvaluationTime" -> 0.0000370814035707944, "TestSize" -> 300, 
               "ModelMemory" -> 26184, "ModelUtility" -> -0.5128797108790039, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.00630957344480193, 
               "TrainingMemory" -> 87792, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.8325207701515268, 0.008787869876363956]}, 
               "AccuracyHistory" -> {
                 Around[0.3464129816786372, 0.027198668043774642`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.7695418154836474, 0.059022223611060264`], "Accuracy" -> 
               Around[0.5400717755006896, 0.04955724210732323], 
               "EvaluationTime" -> 0.00011294627058970834`, "TestSize" -> 200,
                "ModelMemory" -> 316528, 
               "ModelUtility" -> -0.44652645852311323`, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.0630957344480193, "TrainingMemory" -> 
               1023384, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.7695418154836474, 0.04173501455608947]}, 
               "AccuracyHistory" -> {
                 Around[0.5400717755006896, 0.03504226195099176]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00011294627058970834`, "MeanCrossEntropy" -> 
              Around[0.7695418154836474, 0.059022223611060264`], 
              "ModelMemory" -> 316528, "TrainingMemory" -> 1023384, 
              "TrainingTime" -> 1.4524638069934046`|>, "Index" -> 7|>, <|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 3|>, 
              "LearningRate" -> <|"Value" -> 0.1|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 35|>,
               "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.7494392458643957, 0.08350565956136755], "Accuracy" -> 
               Around[0.4921726375755127, 0.14685970709834306`], 
               "EvaluationTime" -> 0.00004482649063407055, "TestSize" -> 700, 
               "ModelMemory" -> 26184., 
               "ModelUtility" -> -0.42680579665435936`, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.008402800335848509, "TrainingMemory" -> 
               87669.33333333333, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.8325207701515268, 0.008787869876363956], 
                 Around[0.6663577215772647, 0.02881613411491643]}, 
               "AccuracyHistory" -> {
                 Around[0.3464129816786372, 0.027198668043774642`], 
                 Around[0.6379322934723882, 0.02387175587983893]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.7029975079606907, 0.007631275540467484], "Accuracy" -> 
               Around[0.6350119326535514, 0.03375044563825558], 
               "EvaluationTime" -> 0.000039810717055349695`, "TestSize" -> 
               400, "ModelMemory" -> 26184, 
               "ModelUtility" -> -0.34296243905584733`, "TrainingSize" -> 60, 
               "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
               204176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.7029975079606907, 0.005396126683767593]}, 
               "AccuracyHistory" -> {
                 Around[0.6350119326535514, 0.023865168978878453`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.6550454239624716, 0.03559792839543557], "Accuracy" -> 
               Around[0.6420719394486022, 0.03903109503761105], 
               "EvaluationTime" -> 0.00012812728680850936`, "TestSize" -> 300,
                "ModelMemory" -> 374360, 
               "ModelUtility" -> -0.2810363163962625, "TrainingSize" -> 300, 
               "TrainingTime" -> 0.0630957344480193, "TrainingMemory" -> 
               1548696, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.6550454239624716, 0.025171536564605645`]}, 
               "AccuracyHistory" -> {
                 Around[0.6420719394486022, 0.027599151978231377`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.6104983898586541, 0.02432358283125846], "Accuracy" -> 
               Around[0.7126876096274283, 0.026015742017651687`], 
               "EvaluationTime" -> 0.00018584726074662907`, "TestSize" -> 300,
                "ModelMemory" -> 374360, 
               "ModelUtility" -> -0.2077341004919525, "TrainingSize" -> 1834, 
               "TrainingTime" -> 0.15848931924611134`, "TrainingMemory" -> 
               4159176, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.6104983898586541, 0.02432358283125846]}, 
               "AccuracyHistory" -> {
                 Around[0.7126876096274283, 0.026015742017651687`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00018584726074662907`, "MeanCrossEntropy" -> 
              Around[0.6104983898586541, 0.02432358283125846], "ModelMemory" -> 
              374360, "TrainingMemory" -> 4159176, "TrainingTime" -> 
              0.20647124074592876`|>, "Index" -> 8|>, <|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 13|>, 
              "LearningRate" -> <|"Value" -> 0.02|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 7|>, 
              "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.8325207701515268, 0.012427924763523881`], "Accuracy" -> 
               Around[0.3464129816786372, 0.0384647252259898], 
               "EvaluationTime" -> 0.00003981071705534969, "TestSize" -> 300, 
               "ModelMemory" -> 26184, "ModelUtility" -> -0.5128797136083173, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.01, "TrainingMemory" -> 
               87792, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.8325207701515268, 0.008787869876363956]}, 
               "AccuracyHistory" -> {
                 Around[0.3464129816786372, 0.027198668043774642`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.652721369957131, 0.03399881223269586], "Accuracy" -> 
               Around[0.6844144479419557, 0.037685975648348885`], 
               "EvaluationTime" -> 0.00021663075097077685`, "TestSize" -> 300,
                "ModelMemory" -> 431960, 
               "ModelUtility" -> -0.27704904650293916`, "TrainingSize" -> 300,
                "TrainingTime" -> 0.15848931924611134`, "TrainingMemory" -> 
               2410848, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.652721369957131, 0.024040790682027385`]}, 
               "AccuracyHistory" -> {
                 Around[0.6844144479419557, 0.02664800893657859]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.8115263159491859, 0.05220328215695357], "Accuracy" -> 
               Around[0.5499628920645779, 0.0403753565923247], 
               "EvaluationTime" -> 0.0001367581338683149, "TestSize" -> 300, 
               "ModelMemory" -> 335440, "ModelUtility" -> -0.4972126937673893,
                "TrainingSize" -> 60, "TrainingTime" -> 0.1, "TrainingMemory" -> 
               1297992, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.8115263159491859, 0.03691329481337657]}, 
               "AccuracyHistory" -> {
                 Around[0.5499628920645779, 0.028549688439257766`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.0001367581338683149, "MeanCrossEntropy" -> 
              Around[0.8115263159491859, 0.05220328215695357], "ModelMemory" -> 
              335440, "TrainingMemory" -> 1297992, "TrainingTime" -> 2.302|>, 
            "Index" -> 9|>, <|
           "Value" -> "GradientBoostedTrees", 
            "Options" -> <|
             "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
              MaxTrainingRounds -> <|"Value" -> 50|>, 
              "LeavesNumber" -> <|"Value" -> 13|>, 
              "LearningRate" -> <|"Value" -> 0.2|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "MaxBinNumber" -> <|"Value" -> 255|>, 
              "ThreadNumber" -> <|"Value" -> 8|>, 
              "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 35|>,
               "FeatureFraction" -> <|"Value" -> 1|>, 
              "BaggingFraction" -> <|"Value" -> 1|>, 
              "BaggingFrequency" -> <|"Value" -> 0|>, 
              "MinGainToSplit" -> <|"Value" -> 0|>, 
              "L1Regularization" -> <|"Value" -> 0|>, 
              "L2Regularization" -> <|"Value" -> 0|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.8345367847002391, 0.01750840298278031], "Accuracy" -> 
               Around[0.38115312728723005`, 0.06851221220205125], 
               "EvaluationTime" -> 0.00019952623149688788`, "TestSize" -> 100,
                "ModelMemory" -> 26184, "ModelUtility" -> -0.5165045383361426,
                "TrainingSize" -> 10, "TrainingTime" -> 0.0630957344480193, 
               "TrainingMemory" -> 187912, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.8345367847002391, 0.012380310476870732`]}, 
               "AccuracyHistory" -> {
                 Around[0.38115312728723005`, 0.04844544984216216]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00019952623149688788`, "MeanCrossEntropy" -> 
              Around[0.8345367847002391, 0.01750840298278031], "ModelMemory" -> 
              26184, "TrainingMemory" -> 187912, "TrainingTime" -> 
              1.509249967996622|>, "Index" -> 10|>|>, 
         TypeSystem`Assoc[
          TypeSystem`Struct[{"Value", "Options"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["GradientBoostedTrees"]], 
            TypeSystem`Assoc[TypeSystem`AnyType, 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 16]}], 
          
          TypeSystem`Struct[{
           "Experiments", "PredictedPerformances", "Index"}, {
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
               "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory",
                "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
             TypeSystem`AnyLength], 
            
            TypeSystem`Struct[{
             "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
              "TrainingMemory", "TrainingTime"}, {
              TypeSystem`Atom[Real], TypeSystem`AnyType, 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real]}], 
            TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 2292,
        "PreprocessorEvaluationTime" -> 2.1328125*^-6, "PreprocessorMemory" -> 
       181840, "InputDimension" -> 69, "OutputDimension" -> 1, 
       "BaselineLogProbability" -> -0.70024056722671, "VariableBudget" -> 
       True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
       False, "NaturalStop" -> True, "AbortStop" -> False, 
       "LastReportingTime" -> 3.879421301772293`16.341341935323413*^9, 
       "RoundPartitioning" -> 
       Dataset[{<|
          "TrainingSizes" -> 10, "TimeBudgets" -> 0.39520641660248007`, 
           "ElapsedTimes" -> 0.502565, "ExperimentCounts" -> 11|>, <|
          "TrainingSizes" -> 60, "TimeBudgets" -> 0.5645805951464, 
           "ElapsedTimes" -> 0.747757, "ExperimentCounts" -> 7|>, <|
          "TrainingSizes" -> 300, "TimeBudgets" -> 0.8065437073519999, 
           "ElapsedTimes" -> 1.152548, "ExperimentCounts" -> 5|>, <|
          "TrainingSizes" -> 1834, "TimeBudgets" -> 1.1522052962171427`, 
           "ElapsedTimes" -> 0.951419, "ExperimentCounts" -> 2|>}, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
            "ExperimentCounts"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
     None, "Log" -> <|
      "Example" -> 
       MachineLearning`MLDataset[<|
         "f1" -> <|
           "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"UNITED KINGDOM"},
             "ID" -> 6873582013879478265|>, 
          "f2" -> <|
           "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"Financials"}, 
            "ID" -> 7971373608825966019|>, 
          "f3" -> <|
           "Type" -> "Numerical", "Weight" -> 1, 
            "Values" -> {0.4051568490028274}, "ID" -> 3393134348820751293|>, 
          "f4" -> <|
           "Type" -> "Numerical", "Weight" -> 1, 
            "Values" -> {7.173747390485207}, "ID" -> 3828733207173156760|>, 
          "f5" -> <|
           "Type" -> "Numerical", "Weight" -> 1, 
            "Values" -> {28.34708907560874}, "ID" -> 4487409260182963336|>, 
          "f6" -> <|
           "Type" -> "Text", "Weight" -> 1, "Values" -> {"Estimated data"}, 
            "ID" -> 386652190722912716|>, 
          "f7" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {66.0991}, "ID" -> 
            6944730188686709292|>|>, <|
         "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0,
           "RawExample" -> False|>], "TrainingTime" -> 4.088666, 
       "MaxTrainingMemory" -> 7417976, "DataMemory" -> 3595256, 
       "FunctionMemory" -> 831088, "LanguageVersion" -> {13.1, 0}, "Date" -> 
       DateObject[{2022, 12, 7, 17, 1, 42.17922`8.377673521983374}, "Instant",
          "Gregorian", 1.], "ProcessorCount" -> 8, "ProcessorType" -> "ARM64",
        "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
       "Evaluations" -> {}|>|>]]]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, 3.87880702612108*^9, 
   3.8788116206807327`*^9, 3.8791491067640038`*^9, 3.879160983834428*^9, {
   3.8793254697452908`*^9, 3.8793254742039957`*^9}, 3.879333006457473*^9, 
   3.879354672716642*^9, 3.879417702810669*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"3a35db6f-462c-4bbd-b850-fa89b5fb577a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"cm", " ", "=", 
    RowBox[{"ClassifierMeasurements", "[", 
     RowBox[{"cRisk", ",", "testset"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Test", " ", "our", " ", "classifier", " ", "on", " ", "the", " ", "test", 
    " ", "set"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<The accuracy is: \>\"", ",", 
    RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}], " ", "]"}], 
  RowBox[{"(*", 
   RowBox[{
   "Plot", " ", "the", " ", "accuracy", " ", "of", " ", "our", " ", "model"}],
    "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"AccuracyAss", " ", "=", " ", 
   RowBox[{"Append", "[", 
    RowBox[{"AccuracyAss", ",", " ", 
     RowBox[{"\"\<GradientBoostedTrees\>\"", "->", 
      RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Plot", " ", "the", " ", "Confusion", " ", "Matrix"}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.878619179671941*^9, 3.8786191833045883`*^9}, {
   3.8786192222213593`*^9, 3.878619249704307*^9}, {3.878619342065884*^9, 
   3.878619346687873*^9}, {3.878619378625424*^9, 3.8786193862338676`*^9}, 
   3.878805729554159*^9, 3.878805819596631*^9, {3.878806143346759*^9, 
   3.878806195391272*^9}, {3.878806763106118*^9, 3.878806811062291*^9}, {
   3.878806841172628*^9, 3.878806863962813*^9}, 3.878807029491864*^9},
 CellLabel->
  "In[520]:=",ExpressionUUID->"c6d61c84-957f-4aed-afc0-70d0ed8abe2a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"The accuracy is: \"\>", "\[InvisibleSpace]", 
   "0.6129943502824858`"}],
  SequenceForm["The accuracy is: ", 0.6129943502824858],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.878806864557898*^9, 3.878807030054336*^9, 3.878811626606648*^9, 
   3.8791491165506783`*^9, 3.879325480837057*^9, 3.879333009340701*^9, {
   3.8793546790656643`*^9, 3.879354690713406*^9}},
 CellLabel->
  "During evaluation of \
In[520]:=",ExpressionUUID->"eba7d79d-1c61-4125-b540-85c69a223950"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBghWIQGwI+2BNLe9dc7Fwq8c7eI3vm3G0z3thvaLwfb5L0
nGj95NLdzNPdP4q+sZ+vHbFqQtATewOr5X75okdobi+Mflglss794S17BhRA
O/ta+Dcsv/z3jX1yx+qj8z1e2EtPe3NDef5NmvuTWvELAID8f2w=
   "], {{0, 0}, {5, 5}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.002824858757062147`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "B", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.002824858757062147}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["56", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "56", "\" examples of \"", "\"C\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.15819209039548024`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{56, " examples of ", "C", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.15819209039548024`}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["217", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "217", "\" examples of \"", "\"D\"", "\" correctly classified\""},
             "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.6129943502824858`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7600700525394046`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{217, " examples of ", "D", " correctly classified"}], 
         Row[{"Precision = ", 0.6129943502824858}], 
         Row[{"Recall = ", 1.}], 
         Row[{"FScore = ", 0.7600700525394046}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["79", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "79", "\" examples of \"", "\"E\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.2231638418079096`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{79, " examples of ", "E", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.2231638418079096}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.002824858757062147`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "A", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.002824858757062147}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 4.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" of class \"", "\"B\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " of class ", "B"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 3.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "56", "\" example\"", "\"s\"", "\" of class \"", "\"C\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{56, " example", "s", " of class ", "C"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "217", "\" example\"", "\"s\"", "\" of class \"", "\"D\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{217, " example", "s", " of class ", "D"}], 
        Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "79", "\" example\"", "\"s\"", "\" of class \"", "\"E\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{79, " example", "s", " of class ", "E"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" of class \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " of class ", "A"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"B\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "B"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"C\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "C"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "354", "\" example\"", "\"s\"", "\" classified as \"", "\"D\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.6129943502824858`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{354, " example", "s", " classified as ", "D"}], 
        Row[{"Precision = ", 0.6129943502824858}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"E\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "E"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "A"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{4.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 0.], TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 0.], TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 0.], TraditionalForm]}}, {{4.5, 
       FormBox["1", TraditionalForm]}, {3.5, 
       FormBox["56", TraditionalForm]}, {2.5, 
       FormBox["217", TraditionalForm]}, {1.5, 
       FormBox["79", TraditionalForm]}, {0.5, 
       FormBox["1", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["354", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->13,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->228.,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{
  3.878619184460875*^9, 3.878619347255011*^9, 3.878619387156837*^9, 
   3.878715848704851*^9, {3.878715890521706*^9, 3.8787158953838463`*^9}, {
   3.878805538696899*^9, 3.878805553604134*^9}, 3.878806818221781*^9, 
   3.878806864604879*^9, 3.878807030098374*^9, 3.878811626649159*^9, 
   3.879149116601046*^9, 3.879325480880714*^9, 3.87933300938109*^9, {
   3.879354679107339*^9, 3.879354690758295*^9}},
 CellLabel->
  "Out[523]=",ExpressionUUID->"087b0d5b-b83e-4608-8d7d-f49d3ad52d0a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["RandomForest", "Subsubsection",
 CellChangeTimes->{{3.878805416699134*^9, 3.878805417721744*^9}, {
  3.878807059832753*^9, 3.8788070612150183`*^9}, {3.878807108181322*^9, 
  3.8788071113366137`*^9}},ExpressionUUID->"af039915-bf9f-4d39-af0a-\
2865838c6fc3"],

Cell["\<\
Train a classifier using Breiman\[Dash]Cutler ensembles of decision trees\
\>", "Text",
 CellChangeTimes->{{3.878805704170437*^9, 3.8788057223306637`*^9}, {
   3.878805766632689*^9, 3.87880578974465*^9}, 3.8788070565323973`*^9, 
   3.8788070963390427`*^9},ExpressionUUID->"accec003-1c7f-4fff-8f86-\
6d6171f252b3"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cRisk", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainingset", "->", "\"\<Ratings\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<RandomForest\>\""}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Information", "[", "cRisk", "]"}]}], "Input",
 CellChangeTimes->{{3.8786185865414057`*^9, 3.878618597824006*^9}, {
   3.878618646892776*^9, 3.878618648994371*^9}, {3.878618877270843*^9, 
   3.878618880432907*^9}, {3.878618998083866*^9, 3.878619004451974*^9}, {
   3.8786191510115213`*^9, 3.878619159945651*^9}, {3.8786192237272882`*^9, 
   3.878619223941098*^9}, 3.8788070698448772`*^9, 3.878807113159953*^9},
 CellLabel->
  "In[524]:=",ExpressionUUID->"6853ef91-287f-4ced-be7c-af92b49c909c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Text\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Nominal", "Numerical", "Numerical", "Numerical", 
                    "Text", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"B\"", "\"C\"", "\"D\"", "\"E\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Text\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Nominal", "Numerical", "Numerical", "Numerical", 
                    "Text", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"B\"", "\"C\"", "\"D\"", "\"E\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1414", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 1414, "ClassNumber" -> 4, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "GICS Sector Name" -> <|"Type" -> "Nominal"|>, 
           "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Disclosure" -> <|"Type" -> "Text"|>, 
           "Revenue (USD mn)" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|
               "FeatureNames" -> {
                 "GICS Sector Name", 
                  "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                  "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                  "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                  "Carbon Disclosure", "Revenue (USD mn)"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 6|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Nominal", "Numerical", "Numerical", "Numerical", "Text", 
                  "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|"(f1f5(f2f3f4f6))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+JZM0HgpD0hOkWRO/KE07RRmk40Axh8wEkDAI1Pnak=

              "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 1414, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Text"|>, 
                    "f6" -> <|"Type" -> "Numerical"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4209554619632865690|>], 
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 3407689957052572250|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 6386559724484824442|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>, <|"" -> 1|>}, 
                    "MissingCode" -> Indeterminate, "Version" -> {13.1, 0}, 
                    "ID" -> 6398143214224852052, 
                    "Output" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {195.3790406242356, 61.646977913209476`, 
                    190.01452218184144`, 2221.139431539642}, 
                    "StandardDeviation" -> {1024.181623136537, 
                    293.22971478478104`, 196.3462516724107, 
                    8256.563224223488}, 
                    "Output" -> <|
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 5272605604417048922|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {11, 1}|>|>, 
                    "Boundaries" -> {{-0.5, -0.40909090909090906`, \
-0.3181818181818182, -0.2272727272727273, -0.13636363636363635`, \
-0.04545454545454547, 0.045454545454545414`, 0.13636363636363635`, 
                    0.2272727272727273, 0.31818181818181823`, 
                    0.40909090909090906`, 0.5}, {-0.5, 0.5}}, 
                    "Version" -> {13.1, 0}, "ID" -> 6197818036640951475, 
                    "Output" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>, 
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Spans" -> {
                    Span[1, 2], 
                    Span[3, 6]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {13.1, 0}, "ID" -> 
                    8353511239162088478|>]}, "Invertibility" -> "Approximate",
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{-0.016529304250428277`, \
-0.003977987447750752, -0.012477440984088895`, -0.04545168631433546, \
-0.040285349722368934`, 0.9979311128491188}, {
                   0.01596574457173288, -0.006708263073187452, \
-0.00040598392451674106`, -0.014556730175053777`, -0.9989129253090748, \
-0.04075535107125976}, {-0.6653732185251798, 0.1124523798151379, 
                   0.11146524296590558`, -0.7282974622862278, 
                   0.0009043213447041751, -0.042313479935505466`}, \
{-0.4525941812355412, 0.18835870882694628`, -0.811184280639024, 
                   0.31857507990246814`, -0.012693627641696917`, \
-0.0028908558170766944`}, {-0.5865457203965476, -0.1266413177930213, 
                   0.5322936369719147, 
                   0.5964308669513955, -0.018364869771830078`, 
                   0.022858938234849496`}, {0.08872982681677569, 
                   0.9673554726846854, 0.21462337975498835`, 
                   0.10042505493141408`, -0.007130485725141593, 
                   0.012295392549469028`}}, 
                  "Precisions" -> {0.7412798880639702, 0.9964373275433729, 
                   1.0673796022522453`, 1.3993993968464005`, 
                   12.201704677895991`, 16.393220731846185`}, 
                  "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, 
                    "Mean" -> {0.011739285984329209`, -0.006302120975041767, 
                    0.00004772992030729378, 0.00009223757588118813, 
                    0.00010485167865102885`, 0.00022815565912183614`}, 
                    "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4890335152835729504|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6.|>,
                     "Key" -> "((f1f5)(f2f3f4f6))", "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, 
                    "Mean" -> {0.0117392859843292, -0.006302120975041762, 
                    0.0000477299203073033, 0.00009223757588118716, 
                    0.00010485167865105884`, 0.00022815565912184035`}, 
                    "StandardDeviation" -> {0.2507752898157967, 
                    0.287088148869262, 1.0003557397467897`, 1.000479951290525,
                     0.9999589168221408, 1.000059389178472}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 6, 
                    "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    2255176406760574746|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, 
                   "Mean" -> {0.0117392859843292, -0.006302120975041762, 
                    0.0000477299203073033, 0.00009223757588118716, 
                    0.00010485167865105884`, 0.00022815565912184035`}, 
                   "StandardDeviation" -> {0.2507752898157967, 
                    0.287088148869262, 1.0003557397467897`, 1.000479951290525,
                     0.9999589168221408, 1.000059389178472}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 6, 
                   "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   2255176406760574746|>], "InputDimension" -> 0, 
                "OutputDimension" -> 6, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"Materials"}, "ID" -> 6891347935690616595|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {20.857}, "ID" -> 7118546871732690271|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {24.308}, "ID" -> 1379309737266346865|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {227.299}, "ID" -> 837637490153197528|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 3439309116171360036|>, 
                    "f6" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {106.653196777609}, "ID" -> 
                    6782593871927012987|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.056006, "MaxTrainingMemory" -> 746208, 
                  "DataMemory" -> 281808, "FunctionMemory" -> 77680, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 12, 6, 23, 31, 34.327113`8.288212259545949}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, 
                  "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-6.55632279314249, -6.55632279314249, \
-6.315785215489547, -6.162522934782237, -6.1398787535563875`, \
-6.126269610777768, -5.9899705977166935`, -5.796356546713496, \
-5.78340630206846, -5.713199421330183, -5.524175855523637}, 
                   "LeftBoundary" -> -6.315785215489547, "LeftScale" -> 
                   0.12026878882647152`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[36.064732818660545`, 0.5889388483539343], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 5495059474424677337|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f2f3f4f6)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                 "Version" -> {13.1, 0}, "ID" -> 1126745677642804853|>], 
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Version" -> {13.1, 0}, "ID" -> 6097991814255900671|>]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f2f3f4f6)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Mean" -> {195.3790406242356, 61.646977913209476`, 
              190.01452218184144`, 2221.139431539642}, 
             "StandardDeviation" -> {1024.181623136537, 293.22971478478104`, 
              196.3462516724107, 8256.563224223488}, 
             "Output" -> <|
              "(f2f3f4f6)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 5442548032159666094|>], 
           MachineLearning`MLProcessor[
           "ToLowerCase", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 3704118531076445188, 
             "Output" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "RemoveDiacritics", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 2201451281876833381, 
             "Output" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
               "f5" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Index" -> {<|
                   "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>}, 
                 "Output" -> <|
                  "f1" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> CompressedData["
1:eJxTTMoPSmVmYGBgBGIeIGZlwAAN+PgP1e7vB1IHGqqv2QPpBMkbO0D8BXF3
9oL4Dt+ZXoDoB/U1l8DiZ42ug9WbrZwLohWedD8C0Q4WlUdA6hquN9eA+A9u
OB0Am3d22Umw+k7x9yA+w0aV52DzziU8A8tf//4QbM7Bfw5g/T8FT4PF83/d
AdOfvpwB0Qesbj0GqWtInXUKbN7j/5dB4gsWqj8Eu/PQ31sg8YTKFcvA9vu9
fgzWfzT6Klj9bEWwuxN8ImaB7Vv++xBY/qTJebB7jEog9smI3wHrZ993FOze
3mdXwPYWaT4D6zeLOgzWr/J3N9hdV2RegfW/T98KVufQtwQcHquvXAOr282+
DSzuHHAUrF9X4wBYntUQ7K6EXU5NYHmPVRvB/kjMuQSiFX7UQsL1uhc4PBTW
HjsMtm+yw/P9ADP/nVs=
                  "], "Version" -> {13.1, 0}, "ID" -> 436404844719395216|>], 
               MachineLearning`MLProcessor[
               "Sequence", <|
                "Input" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f5" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Processors" -> {
                   MachineLearning`MLProcessor[
                   "TextToNominalSequence", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {13.1, 0}, "ID" -> 1494710476529535751, 
                    "Output" -> <|
                    "f5" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                   MachineLearning`MLProcessor[
                   "NominalSequenceToTFIDFVector", <|
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f5" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> CompressedData["
1:eJw1lMmNHEcQRedAC0Q6IAMkxL6YMIBONIEHAjzpQPkPvaqswmAajYjMH/GX
7D9//Pv9598fHx+/v/Dxz6/f/31+48tfq5ZqtlObuTmrehqzJq3SttarI5Hy
NFLTt0tbuZXm1U9DsyT6Oh6zpV51Gj2Z3ZKWmdPrE/o2bLyYrhLFIC6eRq6I
erdppU+N7ttILQ+p2hkZz/JnRjDV2Gbb1zk1740oUD1Xu3xYgiNPI9hDbYUJ
3su8B4pjFhrd9FO1rONtmCoE0tFJlqUe5l7SsqAoly41O59GhGtKO1vNpaE/
w50dZcRjmivcf9W1lGWlDll64NrbUOzxipnJQtF2Ow2tiUIjbOwtkX6Za0Yo
Cl4ULLBs4vPrEbG7+qKsY4bK9fkHdQsMgrlentTG2l2OuFYcWEhHl0H6Lida
uqn4XPrWnDIMERxWh7BY3uVNCc4anxNsGnKvogoymJIT49DIPfUsHMyC9Ehf
5r11tpaFSxb6mZC9u16tAU3gxbFUzO46iiBjJEFL499l7rrbdDjUSY1IrD/4
DlewBK3INT6Yn3p2BfpBE5CyIdpfbxFYBb/LEjhO9Jl7i1UZ/F3ZaEacujrJ
gVdu3d8evtDlbXQVA+qaEwcfy69HyFvbRSf8PXzJC2kj/OqM4HnYsbYu24bb
0QENI4yn3shLDjbQYnkmefQnYO5O2JEtROGcp95+PXmAXasKpc55fh4GBQrF
SObIu8/yeALjQQIxIDb/A7nYyuk=
                    "], "Values" -> None, "DefaultValue" -> -1, 
                    "HashFunction" -> 
                    Function[{
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {13.1, 0}|>], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJxTTMoPSmVkYGDQA+LbOV8TL6mwOBw7IXtlt7CwwxbBphMcRQwOqRteRSf4
sTmsOeD/Yv01AQeWGe1G7iyycPF1vPubIlI5HO5cfCdz9KCQQ5dapabS3f/2
MPWPGe/VOXn+s4fpg9ljs+zsl6UcgnD9MD7MXJh6dPqPVVvx3HMMcH7NVut+
3jSEO1gWxq+amceIIS9q164wfz0jnA/zJwMENEzYtWkV15Rl9l6+IXk/zNjg
7nmpqDPn/CEGDP+jhwPM3MteV9rLFp+zh7lnh0nPFrMpYnB5mD4AXlSO/w==

                    "], "Version" -> {13.1, 0}, "ID" -> 6967355064030955657, 
                    "Output" -> <|
                    "f5" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                 "Invertibility" -> "Impossible", "StructurePreserving" -> 
                 True, "Missing" -> "Forbidden"|>]}, "Invertibility" -> 
             "Impossible", "StructurePreserving" -> True, "Missing" -> 
             "Forbidden"|>], 
           MachineLearning`MLProcessor[
           "MergeVectors", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
               "f5" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f2f3f4f6)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Spans" -> {
               Span[1, 5], 
               Span[6, 51], 
               Span[52, 55]}, "Wrappers" -> {Identity, SparseArray, Identity},
              "Output" -> <|
              "(f1f5(f2f3f4f6))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+JZM0HgpD0hOkWRO/KE07RRmk40Axh8wEkDAI1Pnak=

                  "], "Type" -> "NumericalVector"|>|>, "Version" -> {13.1, 0},
              "ID" -> 3066956983799749125|>]}, "Invertibility" -> 
         "Impossible", "StructurePreserving" -> True, "Missing" -> 
         "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|"B" -> 1, "C" -> 2, "D" -> 3, "E" -> 4|>}, 
             "MissingCode" -> 0, "Version" -> {13.1, 0}, "ID" -> 
             3368851722935717418, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {4}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "B" -> 0.004231311706629055, "C" -> 0.1607898448519041, "D" -> 
        0.6036671368124118, "E" -> 0.231311706629055|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Ratings", 
          "Order" -> {
           "GICS Sector Name", 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
            "Carbon Disclosure", "Revenue (USD mn)", "Ratings"}|>], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {4, 5}, 0., {
      1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 1, 3, 5, 52, 27, 38, 54, 28, 1, 52, 55, 20,
             4, 52, 55, 55, 5, 5, 54, 35, 4, 4, 55, 4, 53, 55, 53, 5, 4, 55, 
            4, 5, 3, 54, 3, 47, 3, 4, 52, 9, 4, 55, 3, 53, 4, 3, 54, 1, 17, 
            52, 53, 3, 8, 5, 52, 1, 3, 35, 52, 52, 3, 31, 2, 41, 52, 54, 38, 
            53, 5, 3, 46, 5, 2, 27, 38, 38, 53, 5, 3, 15, 31, 10, 4, 2, 54, 
            52, 55, 53, 31, 8, 53, 54, 10, 55}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJw1kntM0gEQx4k0cW5lLSdZU2xTf73V1MhHx8oMyxJrpZYzqPmYW9mWBWkq
tTSnZs7SsKljUopWvlZKqR0sMDJFykzKV2kRRflI3TBf/fjDP+6Pu33v8727
nfOZxKMxyygUymkyhIldEyn9TcA6cSBIw9VDfMtf2RuvLhCfX+NuohqA5eqS
Z5GkRIYeeeV2cmCq24fTMoTgvn7dz77cXyhYs7z8lgGBHsbNGHAdQjFfTpU0
qFB8POrTwI9UlD70tY336AbmlgDdSM4wZmXydvNfqbFO96l+22kV2i707Nc9
7UTG6JVv2+ebwXCnuNTJvh91iy76NLdR4JR1DAZZ1QLh58TKsR8DUdJEg5kT
QX3k627zDrX51Q4+Sf3AjtryeCpDhnVqlyHHOQ2yWJeo6+8WIXtP6NYNJI/h
l9qwk9TJDmXcb96sRZNk+aAHmWv9fp90IH0ZXmNNFzbpcXxwII3w/wPCdE3y
RTKXLVQJQpQSMIV/vnnYOAKCEA9vs/8FZYRuQ7AKaQ6Tscn6GmBfC6zwJHnS
p/+spac60CC5semarA9Y97pnFJlK/BLcqB4m+0x5TTlHSE5WBfVxcYkR2G9j
iJmpDpCmUMtotgoQFSeUGhOmgcnTR+4YKEB14UdLDqknnC7T7NQVQC8LjTTv
ozZOOHaXtCHNM/ow5aUKspoDNeb5lu6lzTQ6rkpuQ/f8xfc+r1Wo9r5P5+Q9
QBptO3XaRQoiubR1KO4ZiqNHVszuqgQa1YL+R7IAWTVu6dy4r0Bxax+bDQoF
tn/UvDxYgQL7elGLVSOyK/m6fSRnySd+pl7SRNaFVXXCngcfkHvswOLB1CoQ
0tsszmbGAnHPwDE5hgHF9wnDMrsdxYaadYTrN6BL+YT5voKemnNTcy9AFDZc
+zuxGoiHzgWlvQpgtfI2vt17HZk+a193efZiXeBqm+zKQRSqOLFFPPJ/fq2c
le/vQlvrCfufk2+QGTm+t1DQALSCqepwXScQh3YGOHOUoP2u4V993odL3PyI
XONtaw3+B9jfj7E=
           "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9llb1XVoQoIyNkldUw+5KVdLkLP3H3cef8N/YqskWIUrL3
yt6yySbPxw/v3b17UYtXBJaEASvDQwrkrU4OBvPWZEaEIm35qvyl+cH4hGX/
fm6IsP/Uoz4NmMo0GtIIHUc41/3jNeuMoDFXbUJTfnvFZjSnBZcdwlBa0orW
XLINbfnlRX/ajl5csD0d6Mh5f3jO73aiM2eNpAvf7Eo3zvjV03anyh5E0ZNT
frHSz1YYzUlr7U0f+hJDuZ8cSD/K/Gh/YjnhB+MYwHHfW+o7BzGYY8Zz1Lce
8Y0lDuOwwzlkAsWO4KCvHckrR5HIaMZwwLHst8Z9vnSv40kimT1OYLcv3OVE
ipzETp87mWdO4akpPDGVNHb42HQeWehDp5PNQh44g5nM4r4F3jODAJncdTZz
2G4W27zjVucyj/lssdoF3Hazt9zkTTeawwYXsd5c1nnDtf4FknrI7A==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 3, 3, 3, 3, 3, 4, 2, 3, 2, 4, 4, 3, 
            3, 2, 2, 4, 2, 3, 3, 3, 3, 4, 3, 3, 4, 2, 2, 3, 4, 4, 3, 3, 4, 4, 
            2, 4, 2, 3, 3, 4, 2, 2, 4, 3, 3, 3, 4, 2, 3, 4, 3, 3, 3, 3, 3, 4, 
            3, 2, 4, 4, 3, 2, 3, 4, 3, 4, 3, 3, 4, 3, 2, 3, 3, 3, 3, 4, 2, 2, 
            3, 3, 4, 3, 3, 3, 3, 2, 3, 3, 2, 3, 2, 2, 4, 3, 3}], "RootIndex" -> 
          1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 5, 2, 10, 55, 54, 2, 54, 52, 34, 4, 52, 6, 
            1, 53, 15, 1, 3, 2, 53, 52, 54, 19, 53, 53, 2, 34, 2, 55, 4, 54, 
            55, 31, 54, 54, 4, 54, 54, 15, 53, 1, 3, 48, 3, 3, 1, 53, 42, 22, 
            1, 3, 54, 5, 53, 38, 53, 48, 52, 1, 52, 4, 52, 5, 52, 2, 55, 1, 
            54, 53, 52, 54, 52, 4, 6, 17, 53, 52, 1, 2, 2, 1, 2, 55, 1, 4, 5, 
            53, 53, 52, 2, 52, 31, 52, 53, 5, 41, 13, 22, 55, 54, 5, 15, 4, 
            47, 52, 54, 4, 19, 53, 5, 54, 54, 5, 13, 6, 31, 54, 1, 54, 54, 54,
             55, 1, 52, 55, 54, 38, 3}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJw9kltQUwcQhqlgjUA10FbDgCI6ICpTw7TSAA+b4qUgDhOwjkFsKZ1QQ225
FKZgI3BsRQ5EkIoMmQg2MyCeAJqIyCUBNiUhhsgl3FJAFEgDCZRyaaumtTjN
Czzsw+7O7n7z/+vzRUpM4hsODg6EPejFBVXp+RTQde7TLzdYwXon7QYhMIKh
tOg5WdAKtrjN4gtgQHpOpEJxZQoleiflPVcjtrCCPJpgHlOTb5X6Vv4DOs6+
VXKwFkqOF22RadXAPvEktO7qI7QSlPg97kOgfZ6yzaWjCzgK1V7f9yvQej2R
dmkfBSUxmxOe+U0i0dN6yClwBA1lX03HUzUoedqwUjTWjaO8yLPBy1pUealn
okLn1veJ6rtjs3t1yD5DZgpTu5H289fJxbPDuMbB4EnMBfacRb/d+kv8LDB8
XnmZhSYk4mc9M9GCfNex6KU8A4qiTbKFlFogDrunPZkzI2uX8Ej1pAkZK4K3
H8WNoH991EnGyjSqwjS/hi6a1rkl8TebxIKbyJn7xNi5Oo7yOKf2BLEeR/dI
q/tyG4DDjPiyD3qhZU/zxqHjj8GaQjGHveaBu8MvkbEgQqpor+rHk81A3Q6h
8wOHgKr2ynW068P1z9P1fdAPo7mB8rZNO9lsj+cyz+0TqPP4ruCWQov83yso
SfElkGfwFnom5Ov3uL6NEfMTbcAaT27IvTiIRNp5JxnZidYtakdy+xJwZpK8
jxa2I/e0dxhc0AD5bcs25ogG+ZcHIrt3dyCt7tRMT7QBw/P/LXW2c7Cic8KE
nUbkDF0UgagDVYLrdx+80CJr65/+piAlLlf7kjH3tSj5NNjMzJiANV/4HxlX
ZC5yUCmuBeysaEUyzSXJrUaLy+niXR9zxWgYHuy/+6oTGBziciFbj/5uztfS
7HW5ZXC/LUmJfONyqD6jFx2OlNCj7XVbRt6h1+xx0H3IOei5qoQSwdPFKHGD
vV8ZsDu8Ca3K7830QhUyAlQ/zZ17iBIlo1zzjRYNG/OqcvLb7Tx33r0y04jk
O1vvjzd3oq2CSI2rGENO7X4v3nkprOm35kNqvs7inPkYSW+aiBmrRYKmm6Dp
W1G1rF1K5OkhVWtbUiTUQ8tradYJTRXQLVKdu1GDXMGxhOAyC4y6vmh89kfX
+p9SQV1mWW8p2kihunFTE3IPlEllVdNAvLz692dUG2aVmR0n/xtY51ibY97r
OBherYapUz8kSNMnMcv1cMSI/X/Cfd68EfSXBUURsX4h535D1lzI4oYDFghv
MtW0Ha3DrB1cdbZdt5YB9mnPGTWOsrIrJ3MMSJRlJI71ziKjXFGe99ZZ8O/n
TQW5KeB/86Eozg==
           "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO+NcKMkBKSUSYp0l8AkR7MhCkgMGZ0fHcoISenuTklJ6TQI
pbu7u0WOyY+79+5daJP2Ec2CgE7BsYqI6hYWCET1iAyJjfB2naObRwfyFW7x
/4+JJeg9cYhLPHqww/h8gHYjmBDe2oUEJCQ3203ENj8kKf+ZmCRs9Y1bTEZy
cvAF/5qCbGTnI1Ly2lS8crMvTc3HbDINaXnhRtORngz8ZkZC+YQNPvdTnrne
p35GJtb5xLVmJguPzcoj1/jQ1T7wV+/7Ofdc5V1zcseV5mKFt11uHvKSj/wE
WGYBlhpFEwpSiML8Yn2+owhFueUSi7HY4iyyBAu9aUm+pBSlWWAktSlDGF9R
lhvOtxzlqUFNrluBcCpzzYpUYp5XnesVq1CVOV52ttWY5SWrc9GZ1mKGF5xu
BNM871S/pg7nrMc3TPGsk/2WSZ6xLqed6CkneNIGNGK8DRnnCcd63MYcc4zf
05R2jDaaZhx1lM1pQUtaccSRHnaErWnDIYd70J9tyzD/cah/254ODPGAHdnv
YDsxyM4MdJ8/udeu/OUA/7Q7f9jfnvSzF735gb7+bgx7/JHd9mGXMe60j+8A
iaQK2g==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 4, 
            4, 2, 3, 4, 4, 3, 4, 3, 3, 3, 3, 4, 3, 2, 4, 3, 3, 4, 3, 4, 3, 4, 
            4, 4, 2, 3, 2, 2, 3, 3, 4, 1, 2, 3, 3, 4, 3, 2, 2, 4, 2, 3, 4, 2, 
            3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 3, 3, 3, 3, 
            4, 3, 2, 2, 3, 4, 3, 3, 4, 3, 3, 2, 3, 2, 2, 3, 2, 2, 3, 3, 3, 4, 
            4, 3, 4, 2, 3, 4, 2, 4, 3, 3, 3, 2, 4, 4, 3, 4, 3, 3, 4, 3, 4, 4, 
            2, 4, 4, 3, 4, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{40, 5, 1, 5, 27, 27, 52, 52, 21, 4, 1, 54, 33,
             52, 33, 54, 52, 3, 3, 3, 5, 7, 54, 55, 55, 2, 2, 52, 30, 52, 55, 
            55, 40, 54, 3, 39, 17, 3, 53, 52, 2, 30, 55, 1, 54, 54, 54, 53, 4,
             55, 4, 55, 55, 52, 55, 5, 13, 52, 3, 9, 5, 5, 52, 1, 34, 55, 2, 
            55, 4, 55, 5, 52, 3, 4, 55, 5, 46, 1, 33, 5, 3, 54, 53, 43, 52, 2,
             4, 27, 52, 55, 55, 22, 2, 55, 53, 53, 54, 53, 54, 12, 3, 5, 19, 
            52, 3, 29, 54, 48, 22, 30, 5, 52, 54, 55, 52, 5, 2, 53, 35, 1, 47,
             3, 54, 10, 8, 5, 55, 54, 52}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJxFkn9Q02Ucx6fIRuflrSmwBDnIJJQ6x6/LuLNnJNkCiVEga5GuJFk5EG5F
o2OAFjgVcCcHN1C4pZt85yW/GrI65DNiv2SOfRGEgdycgGzAJQYJBMn68sfo
j+ePz3PPPa/P+0fIl6c//moTiUQ6QxweR/yHyPcx4nPrU6uZTrCFT1i9u/Qo
eMY3PdB/DFjkWkahqBNRG+wpQp0WyckHl0qdRtDk7IlbPmYC226Voq+4DdEr
A2sjvh1DnKK/iyM4daARfO9XtNQD7IZ79sOUZsTKGeTGH9dtzNKneKB16AHg
VcMaUaIO6EzzYl+0FWFD4ry0SgUwPrxdJ9w7BfIcGmN5swvJ1NgpTvbvSPpv
5WL0Vj+mVBSpfDUbB/5a5/vZSTpwpGUPzma1g2Nr8uwbYVrgDWGPttf8v1+Y
ua6sJ+ouaFgZ117KNIB8Leiz7BIrMPxKpmkLFsTWeKms9hnAxJvE69zctaQn
LxuaEH7aqUNLNxB1//PC9XvXPzVXdy91gOwsxX9+Xg/Lme4CBsHzcLRkdsNv
n1pBmpy2upnw8UDrMcOLV6aBdPQZ2WydBvwt3Hh9oQuop1a63M0mkK4+X3ub
2wOyubjg3iwc8NgUJ/7eWWCHBtTHMczAyp/BygP6QBPaYxeouoE3WoiPBVuA
Gu8lT7jZijxcZqeJw4gi9JaF3qfZNOCzc+HkD1NNiJq5JbX5dSeylc/alwgf
JdwOWoreBCXtLR2DgTOIOkXDKCUYovLvGKf/UgPvPPjHjk6AK4/s+2tVO7Bh
fOekewAxJWTXvn1awL9uPLz+X7DhSgj/ihbhFY+Vgt4usGXoFRf85xAJ4Kd7
QQqQZJjj13mevE2rkS1nCu9v5K+9c2jXL5TbIHqnzDdpdgLhNV2qGIsTWg7c
TBi91AMimte1Chcgqh0L3zGiB473d1xr5DDQvQ+dfHJxHHiffOBOEKuQdk/Z
dCnFCLlH/rws3NELrOq7jd3H+wFTxlL5EQOIVJpV8YjSCz51iV5BLyxgO6eI
efeqATGm0IngJivKDaiSqlMtSGYPpQw04Yj9ZoFzu/Eh8vj3bG9+vIXopcm8
TdFC7Os4WtRMHyH6fqm6rTh5BmGT6QeTiL56dNE7GJKSW46NXDx7eGaZMD8K
FegQSfrA4aUygFp+cS4rfgtTErBLeaNzBJk+arvA3a+DXOHD9FjinUY6Wd5P
6Gb9rP7xxJh+g8NUCiyFhJ+aNZXoiO460mRY3J+r6kEiCLCF97dBmDLkcv1w
NyK99gW2KGhF+Dc+tXkrY4i9bf7W03M4LI+vNMZ0ED2MjU5sn9LDf0XtKps=

           "], "Children" -> CompressedData["
1:eJwdiVV0EAQAAO+NDklJpUGQRkpJ6VRgQ7oGDBBww20wRk/p7kY6BaW7G6Sl
UWlQuhuO4cfde/cuW+uwwHYBQETCWAUGR1UIDw+ODkoUGzVCI0Pah4QXKdHh
w4+JJeB/4qBxeecu4xGfBOw0NR+TkES8dYeJ2W4StpmUj0hGclKx1RRsMSWb
feMmX7vRV24wDWl5aS/SkZ5vWW8G1vnCb8jIJ3xKJsrzNZnJQmnW+tys5CQX
2chODtb4zNU+dZWfsdJSrPCJucnD5+QlH0X4gvws97G/+8gCFKQQDy3MA3/z
vsu8Z1Hu+iXFWGpxfrUEJbnjEm+72K9Y5C0X+p8LLMN8yzLPfy3HTedagYpU
ozqVmGNlZnvDWVZhplX5xevOsAY1ueZ0r1qL2kzzilO97BQvOdk61KUegbSk
FUHU56LN+Y4GNGKS/zjRv23IX06wMU24YFPOO95zNuOs4zxjC0471mBaE8oY
T9mGk3aiLSG0Y7TtGeWfjrQDI/ye4Z6wI8cd5jE78wNDPeoQw+jCjwz2iIMM
Z6ARDDCS/nalG4eN4pA/252fjKYHfxjjQXtywH72pg/77cs++7rXfuwxht32
8T29ZwzZ
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 4, 3, 3, 2, 3, 4, 2, 2, 3, 4, 3, 3, 
            3, 3, 4, 2, 3, 2, 4, 2, 3, 3, 4, 3, 4, 3, 3, 4, 3, 3, 4, 3, 3, 2, 
            3, 4, 4, 2, 3, 4, 3, 3, 3, 2, 2, 4, 3, 4, 3, 4, 4, 3, 3, 2, 2, 3, 
            4, 3, 2, 2, 3, 2, 1, 3, 3, 4, 2, 2, 3, 4, 4, 4, 3, 3, 4, 3, 3, 2, 
            2, 3, 2, 3, 2, 4, 2, 2, 4, 3, 2, 3, 3, 2, 3, 3, 3, 4, 2, 3, 3, 4, 
            2, 2, 3, 3, 4, 3, 3, 3, 4, 4, 3, 3, 4, 3, 3, 4, 3, 3, 4, 2, 4, 4, 
            3, 3, 3, 3, 4, 2, 3}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{50, 15, 52, 5, 52, 55, 52, 17, 1, 31, 1, 54, 
            5, 30, 55, 55, 4, 52, 54, 54, 4, 38, 54, 4, 2, 30, 3, 1, 17, 47, 
            3, 52, 5, 4, 41, 54, 55, 4, 3, 53, 54, 54, 55, 53, 3, 54, 3, 2, 
            54, 55, 48, 54, 52, 52, 55, 8, 4, 4, 4, 52, 53, 53, 54, 1, 55, 54,
             15, 2, 21, 53, 30, 53, 1, 38, 17, 1, 2, 55, 53, 7, 5, 52, 16, 19,
             3, 8, 17, 1, 2, 4, 55, 52, 2, 5, 4, 5, 4, 52, 3, 1}], 
          "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9kn1QywEYx2dyNZ2MXHWWbOe4Ell5uUk8i8PORXnd77hll1JeUk7HukjT
5UKYHKJaO1K/lLaLuqX0rLa2rnY2USak1prMS3OULho/f+iP56/nuef5fr+f
hxOXsiNhCo1Gi6cqRm7s3eSuBMLzxoz5Iybgnh6K8Kc/QsWx2dwx+hDIKuNO
bs0wIJvr/DhSlIeq854Dth065MlDhDPFz4BYKTR1+TuAzVpv8IpvBkGHj/bM
6U6M8Tpg3bzyBZpPHa9eka4Dy4KK0mdna8DZ+ZoRNaMSxSOx3MxVZnSe6XfZ
LlmRtzM6+eoDPfIfH366rNOG7IWOR8ogOxLfv7gPUP2kT0Wk4ooUFH8KlaIS
O/YlT09o2deFzMZvn1PIMvy/XzwckDPPosZU76wlUkoHmUGXezCbQe2qkETp
7oH69m31uLgPJdl/Mi0sA+bG67c41jQDU/qTFfheDk4RU16l1gCxJDu+keFA
9g9NaXi3DtnHp/QYk7Ugi/xd6FZRjAJj+omUXT1QkBu5mnWkH/mc/GzDIgeQ
yqJDtQwdSp64JV7MqUe/jLtGor0JFZ6PM4URHaD4MOqTRvkaE20vMIW9wsCt
6+ami58D+WaVbWJ/x6QPSXj5/Fb5LZA0vTfVhzagebF7v+yhFrNkatq7mFa0
YOAbq5MEhY5VXvWyGzX1g+28vVrkpzplF3yHITVUZbUHaZFWdHPOKYJE85bL
43mMGiw4uNF/aXA78sI6vV9S3HKvC3Yl0Q2Yp4+qc32dwx/KT/CQBpHAu2CT
uhJrkfY0v8swqAKafXCcH9s3yVHjVx3S8Pw+kmuvjTZP9EzySYrs/qb0VEHb
tsS7QuIO8sM/QPWvFsgNCR4bvdaOKqfvVHOrBiyVjGxgmsA5lX6QdlKKWckc
S22DHmN6RClt5xD69mQq/V5TPFneP6I/DcBQbE6pT5IGBBt8a3p3t4LYMuu6
xwkqp2iR0EjlaE6rTlie9hYEddayxo2V6Ndyy82+tg3bJpYufkjdz7oiWhDg
+xYJglsSSs2xXeE3ijmvKH3Lhv/9X8HR+rBpx/SoPl9Yt4GjwtTeXjKCyvkv
rKytOw==
           "], "Children" -> CompressedData["
1:eJwdkedXDQAAR+8po+y9RfYmI5uyKiteRrYX4RPnPM5x/C3ZsldWCMneZO+9
Za+MuJ4+3N859/w+3tiMBYE5EcDCqPAEgosTQ6HgkrTosKTMX5Q5NzMUFz/v
/z87TEQpkZShLFO4ZDkuqhcsTxTRVGAMY6lIJVpz3spU4a/nrEo1YmhCdc76
x4bUoCYl1qI2dfjtGX9Zlwacth6nrM9Jf3rCHx632EZ8tzHfPGZTjvrVFsTS
jC8257NH/GSBLTlsK/L96CHb0JZ2tOeDyXSgI0MYSic6k8hBuxDHe3vyzq70
IJ5uHLA7eb51v0Xu84177UVv+pDraxN4ZV/6sceX9mcAux3ILl+40+fucBA5
Dma7z9zmU4fxxK0+NolHbjGF4Tx0BA9MZSSbHcUmR7PR+27wnusNsM67rjWN
cYwn2ztOZgJrvO1E0lntJFZ5y5XedIVTmcYNp3Pd5V5zBjNZ5lWDXDGDWeEa
l11qoVn+A0X60uc=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 2, 3, 
            2, 3, 2, 1, 3, 2, 3, 3, 3, 4, 4, 4, 2, 3, 3, 3, 3, 2, 3, 4, 2, 3, 
            4, 4, 3, 3, 4, 3, 3, 3, 2, 3, 3, 3, 4, 3, 2, 2, 4, 2, 1, 4, 3, 4, 
            4, 4, 3, 3, 3, 3, 2, 3, 3, 4, 4, 4, 3, 4, 3, 4, 4, 4, 2, 4, 2, 2, 
            3, 4, 3, 4, 3, 3, 3, 4, 4, 3, 4, 3, 4, 2, 3, 2, 3, 3, 2, 4, 4, 
            3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{55, 55, 3, 41, 1, 55, 4, 55, 27, 33, 3, 1, 5, 
            1, 53, 4, 52, 52, 8, 53, 15, 55, 31, 53, 2, 49, 20, 3, 34, 8, 55, 
            52, 47, 55, 53, 2, 2, 45, 5, 3, 55, 1, 54, 17, 52, 1, 55, 5, 12, 
            5, 5, 54, 15, 1, 53, 53, 39, 52, 3, 52, 54, 3, 40, 54, 2, 1, 54, 
            55, 52, 54, 52, 53, 5, 17, 2, 2, 2, 4, 54, 53, 2, 38, 53, 4, 3, 3,
             53, 1, 2, 2, 55, 2, 2, 52, 55, 30, 55, 5, 4, 4, 4, 47, 5, 4, 5, 
            53, 54, 5, 55, 3, 54, 55, 55, 1, 53, 2, 3, 31, 29, 53, 55, 53, 1, 
            52, 54, 38, 54, 54, 4, 45, 52, 55, 55, 55, 7, 4, 54, 4, 55, 12, 1,
             31, 5, 15, 23, 53, 52, 27, 10}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJw9k2tQU1cUhUNrIaV1eBa0CESkQqpoFIULAU7Q1qbVSsBpAR+ggMj4CqBI
Wq0JMig+YCLiFBAkGEgDdCRaWtKi7AgELo9ggPAUNQSIibExJXQaRaTXH/Dj
zJ45Z83as7+z9soEdtRBKxKJdJ04umUHo919zoPyY09bY7ACmOHsTJWoA1Ij
1N/8lHQPCTaBIiCmBMg1/xky2D1Asl7uhe8ZAHKKlc4/vweKnhntlAlSxLrZ
/WSbTR1i0Vz7y7mNSJpzmKda8RzxVNC2r3QExDtEs7K5UVh2M7pZVS4DnfPb
uD0djeC7LT2vVooDfuTJCfd0OQyD7yONSYxMWFd04LV20BUcJGdRxYgxXyJ5
mKCEokhN3Qt2DWLuXfPrTI4USFqKk3i2GQmuN7gmUuRIXBVsn7KhH+G1r2Sp
VC3gLOpcbl8NWvAVB7wVeCiVoK73L/2ktw2kb6s5O1qFiH/88JUfXHqBUZrv
oKr5EySJVruEhC/HbXQ9X6sC8qfm5B+1txHLQR+pNLYg9ZHY0BOEv/3zJfNT
egWw/sLWcM/0AW0yHNvrNQz40Y5VQa8rEZ5ZqDiQeQ9Spq0rtwu7AXNqT4fN
BLfcq/R1c41owZfMpGpSBy4gjkdsR063EvYPVDBcW1Xgq7LWjnUAsvzbZAkl
/sFU4HDG5+g0Klpf5RKWVoB4v5wL0RQTvAXe41u2XUW8PNuIyOoy2K8PGc/8
DgdleLBbq98U8MyWk1uJe5oLT+9oVqBlnWfdqiafAfnGhcC1vjJQXr5R8SVL
DjG1fnTPlc8BC3EuyT7eBrwwrl39sBw4p9iPPsvWg25odntDpxykZTtXn+Y1
Q8zFF6/cXccgJXzwn7qPJGjYLvZQvFgEtJdpYz0bhyBVF3T6FsFRZ+S/10Lk
JkY17+GQMQWcD0q2xrvLgWUp7z9E6MWYwc9Yz0O5acKkrA1y0OUHJW06OYZY
u7+owTc9RJxGbDLCMIFill7lan0agFZIp50ieKirP6TYCGsQJX5VrxdRSYb8
rzYndgHLGMZVEv1ZhqrfuoiqfhNWRa0nfKM2Ok+iXCDdLxhon5KgovvZppPv
A4j71O0VPuNo/9EB1Tqirxjr0YfubgGp+FbcRdeXaCEngrnohuXEvBjXMyWM
eLeU9j++a/MH8PNEHm2Pm0DqmIBTl4wiU/GkyI3Q6dqDZqisbhBMqZIUxBzM
tRI/p+khwFiFFwb7WkE2Vss0eHUCMzn+6/n0uwiT5pTvWCtDpsqEWProBEhE
T6+8yzEWa9pynXN3cc98lyTnmGjNIO0K7A+zbwP+TFlnnAMOlgDHrOmZbkR+
7f23WdkCamvjsabGScDwTs3ZHB7yTnxS6EixZciMEd/TzXpgCm//rJnvX8wh
ZbX/HcbNYWRijwXu3PU72Nfu3gLnJbDihJOOE+DA4Edu/vbayANkn+ez7zLB
JYR+zjxo68bAbllnTF3WQFGdf/ExG+Win2ziRpRiYgQt7C25Iu3iOy4U/NIb
8bhkUSf4nLmUbpEhvv7AhqfcDuA/bZ+2e3gH+VatLCgbeoD+BxWigpg=
           "], "Children" -> CompressedData["
1:eJwdiXeYFwIAQN93obtE2bJyGZHEGWdFjoZDxV1FpbjLDbfvd3vfdXtvSqLs
jKQotCiVVcqeZW+FKAqvqz/e+773vdDY9Kj4ICAruEdRMXkRgUBMQXRIT0Sm
ZcclxAXCwhP3/+4egg7Qi4M4mBpqOYTehHMJwYRwERfTh0M5jVX25TB0pYfT
j/9dYX+O4D9DOZKjOI7jOZpjOJbl/utL7vVF9/iC/7jMAZzA3y71RJ73JJ7z
ZE5hIEvc7anscrF/+ax/OoidLvJ0zuBMBnMOQzmLZ/zDhf7u2QzhaX/zKXd4
LsN40u0+4a+exy+eTxgLvIDHvZDH/NlH/clH/NGHvZSHvJ07uIzLuYLhTONB
r+QqfnAKI5jvGK7jauYZwTVcy0i+9wG/cxTfOppvvN+vnetX3mck1/OlNzCR
Od7IWL5wHBO41/HMdps3cTOzjOIetxrN597tZ3b7qZO4hS5vpdPJdPiJ7U6l
zY+9jY9s9UOn84EtxtDs+zYZywzuJI4KGo0ngSKKec9EUkjlLhpMot5k6nzX
WtOoMUAW6VT7jhlkUuUWK93sTLOp8G1zyKXcPMrMp9QCStxkIRsttoRS3rLI
Ny3jDct53UJfs8CZ5FtJnlVUs8Fc15vjOrOtI8t6AjaQ6as20kQzLWTYTrqt
pLnWNtaYagcpdpLsK3bxst2sNsl9RmY0xQ==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 4, 2, 4, 4, 2, 4, 3, 3, 3, 4, 2, 2, 
            2, 3, 3, 3, 2, 4, 3, 3, 2, 4, 3, 2, 3, 4, 3, 4, 4, 3, 2, 4, 3, 3, 
            4, 3, 4, 2, 2, 3, 2, 4, 2, 3, 2, 3, 3, 2, 3, 3, 3, 3, 4, 2, 3, 2, 
            3, 3, 3, 2, 3, 2, 3, 3, 4, 4, 3, 3, 3, 4, 3, 3, 3, 2, 4, 4, 4, 3, 
            4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 2, 3, 4, 1, 3, 3, 3, 4, 3, 4, 3, 
            2, 2, 3, 1, 2, 3, 3, 4, 4, 3, 2, 4, 2, 4, 2, 3, 4, 3, 4, 2, 2, 2, 
            3, 4, 4, 2, 3, 3, 3, 3, 3, 3, 4, 4, 2, 3, 3, 2, 3, 4, 2, 4, 3, 2, 
            3, 3, 3, 4, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{48, 55, 40, 3, 19, 2, 54, 53, 47, 41, 15, 17, 
            54, 52, 3, 4, 52, 1, 5, 31, 3, 53, 2, 6, 5, 17, 12, 10, 3, 3, 53, 
            5, 52, 52, 25, 52, 53, 55, 1, 4, 45, 2, 3, 54, 53, 53, 55, 29, 19,
             2, 55, 55, 2, 15, 53, 52, 52, 2, 27, 52, 5, 52, 55, 54, 3, 40, 3,
             2, 55, 3, 22, 2, 5, 4, 3, 54, 3}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJwBdQKK/SFib1JlAQAAAE0AAABo8B09y7LBP7BWB6zka7m/wNh9B0fgvz9I
zInNzTTPP+BrE6WjGMQ/CJ03buRntb/o9o4rvTrgv/jcvsWwuci/uP6peEzE
oz+YwVX/jcKxP7BDTWr2EaY/KEVYcg2guj844l4go/zov5DUShbrj8i/cDT8
hESOpL8AVL9XQOPNP8B40hwvG8m/eANbzAi+xT9gmMvcuwe2v+ARyCiL4cM/
4NQWtFly17+oH7JCUevEv3A//nTPMte/6O7wjI9hzD+os+S3Gxfcv2hB1vGv
C7A/EI6Jo3OHqD8opSGSndfBP4gWwPzPNM8/iHtRjoG42z/wOiKgLSzFv8g8
6EyaIde/GHY0u7joxb+4PJLb473Fv3gSA6KN6L8/qBc1yOiQxb9oHkGvMLbq
PzgrDOEXt86/WPOILMb92r/gn4CgxFvVvwga82Z65q4/0NKJzKn7wj+Qk4UI
T+vjP3hlLoRtrdy/0F7lkpUhyL+YauKg/dDHv7gfDtwzVNI/UJ7M3kYHrz/g
Vn6vGNmyPxBJWtWtDNa/yGtANXcLsL9Y6VN26xywv9gHE5ug+8I/sIyBcZHz
wT84K0OjSzGqv7hV74okpMW/QAS2D1QSxr9Yq9w4oPvCP9B7liBVSKc/CLkv
zbsh5j/I5NateHWBv2CGTZzLvu4/MEMN8Mjrq7846TruAivnP9AQq7WYj7G/
qKU6EGgx0z9wy08QxDTPP2CRKPIoKMC/YIVy1CsL9j9o0DKmTevjP6ilOhBo
MdM/2EuB5M0y178gryqrHRfcv3hxleZhfrS/0FQ5jwT+0j+Abhh+CA/ev1AA
jmRWcte/IvxKqQ==
           "], "Children" -> CompressedData["
1:eJwdiWlTDQAAAHcKXZJQuZJyJbocObokpYf3Jb+gZopPmXmaafwtJRHlFqJy
hEQiR65cUUnbqw+7MzubXnuquj4COB0dVnVNU1koVHPmeEw4Ag2NdSfqQvkF
J+d+MEzEPJEsYCFHGHQRUWTzwmhiWMkqYolDB1zMc5eQQDzPnPGpS+l3Gcv5
byLTPvGfK5gymSQeO+kjJ0zhrw9dTZ9/3MIa1pLKOjbR67hp/HYD60nnlz3+
NIMfPnAj9/1ut5u555h3/WYmW8niq3fcRpfbue0Xb/nZHD6ZSx757GAnZdx0
F7sZ9QAfLWAvN9zDdT94zX3s571XLeSKRXRaTAnvLGXEDt962Tde8iDlHKLd
CioZ9qKHuWCANqs472tbHfKcR2nxGM2+MshLzzoL6y6k/g==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 3, 2, 2, 3, 4, 2, 3, 2, 2, 4, 4, 
            3, 2, 3, 3, 2, 4, 4, 3, 4, 4, 4, 3, 3, 3, 2, 3, 3, 3, 4, 3, 2, 4, 
            2, 3, 3, 2, 3, 3, 3, 4, 3, 2, 2, 4, 3, 2, 3, 3, 4, 4, 2, 4, 4, 1, 
            3, 4, 3, 3, 2, 1, 2, 3, 3, 3, 4, 4, 3, 3, 4, 4, 4, 3, 3, 4, 3}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{55, 27, 4, 49, 52, 22, 3, 1, 55, 15, 39, 55, 
            55, 4, 19, 39, 4, 2, 55, 2, 55, 5, 38, 53, 3, 52, 55, 52, 54, 4, 
            4, 1, 4, 53, 53, 4, 52, 54, 2, 4, 53, 4, 55, 31, 34, 1, 4, 5, 52, 
            52, 17, 52, 8, 55, 54, 54, 30, 31, 29, 34, 38, 5, 54, 10, 38, 4, 
            53, 53, 6, 2, 3, 46, 55, 17, 27, 50, 2, 53, 53, 3}], 
          "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJwBjQJy/SFib1JlAQAAAFAAAAC4XqUrO83Av9B7liBVSKc/CIbKfsRb1b+g
lbcXYyDFP2zPDBfxpQBAqKU6EGgx0z8QRW1TcSnmv6BmMUriJt+/EI5fdhEV
zr9YC5UNH/XPP3D+TeUNxq4/GNNXrcWm0b+QQuOa+7bQv5hQudQ4GNa/cK6c
P3i1wT9w/k3lDcauP/j+I7NifrS/2EtTPvJntb8Qy3RxqxPRv/CkYlk72uO/
+MJtpeBS0L+AaX4h9wLoPzjIyuJ+hYA/0PXgmarCyL/oUh3zxDTPP1gmnPhp
rrw/ANoFhUR80L/QVk6bBNbGv7B0TgfTpqo/WFNNfcZb1b8YW8IH5oviv5CN
EG3fJt+/WFgwnzF03D9Iis+JAMWUvwAkGWPjsIE/ONj8uosX7z+Q5wJTVSTn
P/A4hQhW+fU/gPBt9O5ntb8geTpjWUKCv9jTH48iB9A/eJZZiW/E0D+oJTXP
C3/Ev+ARyCiL4cM/yFAp/YjSqj94kZaYCr7FP6gbvO1VfrS/wOYw5yT9uz8A
t3kKO+TTP0gIjNpi1se/8PiIfPE2vj/oqF8rGCG+vwAiYaj2bLE/wHcOMssn
zz+APV/Eha8AQCxUzZnnYgdA2COppM5/sj+YUeKv7G+qP1CezN5GB68/EOYS
qAeAqD+QS5xHHiJ9P4g+JamaIde/2Huk2nqx1z8opSGSndfBP2jrnKigjoE/
0Mgs6zb23b9w4JBy8YK/v9hsCqGaW5y/4FZ+rxjZsj/YX7g5j+bUv4CanwNQ
6+M/UJ7M3kYHrz8wij2p7eu/v1ic7ZbgFck/kN/H8g/PsT9QnszeRgevP9iL
rJuM5tS/ACW9V4b0u794gKGXs9q5v0DR1+y5yLI/iQhUyQ==
           "], "Children" -> CompressedData["
1:eJwdielSDgAAAHdCOiVEolJCRBTlphBF0dQT1EzqV2a+mmk8FSqVI7nlTqRE
jgiVMyoK6+PH7szOplQeKzsaAtSFBVVW0ZAfCFQcLw8PRlFtfVV1VSArt+bf
Lw0S8p8ZzGQWuWwmlGem89TZ9KthhBNBJE+Mos8/9vrbaOYQw1xiWcBj59Hj
Lx85n4dO2+2UcSxkEfE8MIlkfrqYBJawlC5/eN9JE5nwnuMu47tpfDOFVO46
5nK+escV3PaLK1nFLT9709WsIYO1fHIj6+g0ixt+NJP1XHcD1/zgVbO54qiX
3UQOI15y2ItuYSt72cc2Oszjgttpdwfn3ck537uLd+7mrWfN54x7aHPIVgvY
zxtbPMBpX1tEIc0O2uQrD3KIRosp4TBHeGkpLzzlc0864An/AtP3qvs=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 4, 3, 3, 2, 3, 3, 4, 2, 4, 3, 2, 
            3, 2, 3, 3, 3, 3, 4, 4, 4, 2, 4, 1, 3, 4, 3, 2, 3, 2, 2, 2, 2, 3, 
            2, 2, 3, 3, 2, 3, 4, 3, 3, 2, 4, 2, 2, 4, 4, 3, 3, 4, 3, 3, 4, 3, 
            4, 2, 3, 3, 4, 1, 3, 2, 3, 3, 3, 3, 3, 3, 4, 4, 2, 3, 2, 3, 3, 3, 
            3, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 8, 1, 53, 53, 55, 4, 1, 55, 35, 9, 5, 53, 
            15, 53, 2, 52, 52, 1, 55, 55, 38, 53, 55, 2, 3, 52, 53, 54, 5, 53,
             53, 53, 1, 52, 4, 52, 54, 53, 53, 1, 4, 54, 55, 4, 55, 1, 54, 52,
             52, 55, 54, 53, 54, 1, 15, 1, 34, 55, 53, 2, 5, 3, 39, 54, 4, 5, 
            5, 48, 53, 16, 5, 5, 5, 38, 54, 52, 1, 53, 13, 4, 4, 2, 1, 55, 55,
             5, 5, 55, 46, 48, 53, 46, 50, 19, 5, 55, 38, 54, 1, 10, 38, 4, 
            55, 54, 54, 3, 5, 55, 55, 4, 53, 53, 4, 55, 3, 19, 34, 22, 53, 5, 
            53, 55}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJxFUn1Q0ncYB61kVovQktPpcOWpy6t1t/P13JfumuJZif3RWMtCa8ou37rb
6pR5gtjG0hnTu82pJUvruFQgtYQZPpAgP98GyUuGmyEJMbwSX9pYHbpff7j9
8dxzzz+fz/N5iS4oO/45kUAgcPExXrog/bBCi+LevUjahd1Cak98bc3XU+C2
9ZS89aIX2I2fvXqd0AnJp0oFEZUPgVoyc7rHbAUyzFXp/DbgxNfGCApHgHl9
YjYjSIZI4SuFlS4pkhCupEeF/Q4Sx7gtePYeyOv5F35Y0SBWdeCrpPwhYO6f
/fXvKgdQEwMOPPzjAbCtkichP2JgTKX4A4Z0KHQHy5ewO5DO2fY4d/GyEUTZ
bZlR71UhRuATRUX8CJBT9de2H54AsuWr0gbJLfBSOpr4ihkUt63WlzapB6N/
6H1DMAbi8xGWoJ3PoNy2ZTwc/wfL+cdWEq4HqqBprL5aD4qUkOmfafdB5LoO
WlyPZGg29NzZEaC7Xkx04ToJGfzYQuEweLW5fsduOaix1VXPsgrUm5NGsX06
EBVP1fFwv3z0k96Uk8OgZhRX1BgtIP5ok6iRaQCszNzwjGSADzL6xE/pk2Cc
XuAM4zxuPYnXPWoCe4qDJFwagekseTRPNQzCv4pqWxcnka9IpOATncDaUxc5
YDwKm3pNj3ZVEumEQ9mV5nc8aMNP2idnDlrwm+yiSIJ4EqT+Jqyu7LkOGLaI
up0DP0HzjS6iq+guMMz9jT1B94DnWP40raETyteOOrePSBEjirD1l5pFxNZI
K5KoVhAd2zrxJjeWiGM81fYYON7I9PFeDaIzmnIpWTOIacsrw2oAyYt3JOz1
DyIS90v2fJoGsa8OlrZGPwJagSztweVzSHEn2zQosENzW6Iz2KyF5CydjMJq
Aerb7YnHVtRoA5d5dVWVhPtGvq0IeMPPbl8pLMLztDtRpgD3VbHuVe67ZEdx
vZED9vxBoK3KNvsC3Mh9glvwEt8Kysf6nkzjf/0jqBoteqccJS/EREy2/9/L
jW0/H3Kzg6pF9PzfznTEziGGS9bVWdMNhNixxdcZOYge+cVkaJ8GykN4CXyc
39j0/Uvhd0q0octb/+26c92E3HmdazFcA9ivbCklzv8J4j31RXnhHsDmwzz5
LWPgWwo7K8bx1d47/VyHAUi6azPrugkgHVbOO+oc4Jteer5WPQrNFutcQ4wM
FJZ02lMcl3Tk9KEDaRhwFlbuN9PGwM2TtOxn3UUYM94vnLqNJDdTyZyDJjQt
KFSekCpB3m3NuYHz+FTlF/uO9IOwVRY/t+xF/wIz5hw0
           "], "Children" -> CompressedData["
1:eJwdkFOQEAAABXfyZdu2bZt32Vdd5uX6zbZt27Zt27Zru/rYN7Pz/jZNq26B
bcMBPaOETWBw3zKhocH9gwLCpErXXiHtQkLzFGz/7x8YRrj/hCcCEalLPSIR
mQpURKOQnwIEEJVoHDA6+/3jPmMQk1jsNS57jE0cfrvbX+4yHvH5aQISstMf
7vC7iUhMEpKSjDSk5Zvb/WpyvpiCz6bkk6lIzTY/utV0pOeDOXlvBt6Zg4xk
IjNZyM4Ws5KNt272jZt87UZfucGXrveFuXhubp6Zh6fmJR/rfOJaH1uQwhSh
EGt85GqLssqSrLQYK3xocUqw3AcusxRLvW9pyrDEsiz2nuW4a3nuuMhKVKYq
1ajCQm+7wFvOtzo1qE0dblqTWszzhnO97hyvGUgQs73qLK840/rMsDktaMB0
G9KIyzbmks1owjSbMtWLTvGCk21JcFj/SbaiNf2Z6Hnb0IvenDOEtkzwrO1o
Twc60okzjve0nTllV7owzpOO9YTdOG53jtmDUMbYk9EedZRHHGkfRtiX4fZj
mIcd6gCGeMjBHnSQfwFkmQDf
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 4, 3, 2, 3, 3, 3, 3, 2, 3, 3, 2, 3, 
            3, 2, 3, 4, 2, 3, 3, 4, 3, 2, 3, 4, 3, 2, 3, 4, 3, 4, 4, 2, 3, 4, 
            3, 2, 4, 3, 2, 2, 2, 4, 2, 3, 4, 3, 3, 4, 2, 4, 3, 3, 3, 3, 3, 4, 
            3, 3, 3, 4, 2, 3, 4, 4, 2, 3, 3, 4, 4, 3, 3, 2, 2, 3, 3, 3, 2, 3, 
            3, 4, 2, 4, 2, 3, 3, 2, 2, 3, 3, 3, 3, 3, 2, 4, 4, 3, 2, 4, 3, 3, 
            4, 3, 3, 3, 3, 3, 2, 3, 3, 4, 3, 4, 3, 2, 4, 3, 3, 3, 3, 3, 4, 3, 
            3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 52, 2, 2, 4, 2, 39, 2, 53, 3, 9, 45, 27, 
            52, 1, 38, 27, 15, 4, 3, 14, 1, 52, 55, 38, 3, 55, 15, 4, 1, 54, 
            4, 41, 5, 53, 4, 52, 38, 54, 10, 52, 4, 2, 4, 34, 53, 53, 1, 5, 
            54, 55, 5, 3, 50, 5, 3, 5, 1, 8, 8, 47, 54, 5, 5, 31, 33, 52, 3, 
            1, 31, 16, 53, 30, 13, 31, 2, 4, 54, 54, 33, 3, 53, 38, 1, 38, 54,
             52, 19, 3, 52, 38, 4, 53, 55, 5, 54, 4, 52, 53, 55, 21, 53}], 
          "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9UmtMkgEUxaXJKohaT8yF5VpmNkxbPtKL1IytbKyHsdaDnDrKTEpLLGdK
kljDms7mD3Ms3QRtgmZFaV5EeWRmZIWpKwlf37RSy5KlYp8/7Mfd3T07u/fc
s+MTl3I4wY1CoSSSxV4G297s7EIip8Np225CIsBXeHfoAzqZhtUdJM4qpqU5
7jhQWDlxfk9PP4pdMYM0Uw0wrhyShpGzc1jku2bCjMLBhOKz6gdIZf5KvDZU
Awudk590+YmiCYRLkjzcjpuRXc90fZ9sB/7HRN/ws0K412f+ufxtLRCFCdQc
PxWwtrqtrDK1gHh8vSbVbwidhUeTzx2wA/Ey0ubZZATOG6NMJNPjuMiavqte
j6w4TbhBFg/Cpovuu8n7DIpthyCtBVmW2zOqr1pgcNP6B0j9lumd2pzMTmTU
JMYF7utCnkwumMdLmo/NKQy1IA9ld4VmtAJf2r9/+J0R5ZlWHvtEC1Jzj8KL
W0YUjZaqlAU5QESXhmat+gPWIsVvef5zEGi4eeqrRtRd3KUNIvkSavojBekf
lVPTVs2VooXvNyvvrIJxg7/KNTIJzhSq1LHUjCVux6W2DSOw7j0tTO/5FLV3
1cwzlwbQORaLz/5qUUnPXFHqQ+qM3BvNH+0Hfln7l2hPDeg7D9D8ZxtAdXO7
JIbERfYLBT7kzC4iNi0m/dFNR9BVvQ0g+Va8ijvSCDqXWnKwtRwYzGk/ccwr
pATpKGySz6J/N2yZ35PBexwe1fx/v7g8KkrTaEJxrEQIBRWo3No22jrbgywv
rpkeT/J6TqVYpAjWtutdW7or8dNmdUXHjToQjXtHvK5rBquHrDwr7yUov9yO
mM8RJTcuqpf0IURRFvTwfi9aar95Nc4QuHBPe72ZsyjwIyoZ1d0ndSYMsbQ5
smTZYFmrKufyjbiQE22fgFcbb0X+k9gjSz8b0R6bpVnXXQfEXIS2PfgtEP42
qjfdgKqQ0YAf9dnA61mygeV4DdSBXBfnqgF5ywNO0T3eIYW2MbnOdxiImdM2
QR+BHHtJd/7aMZA/ck+dyjNhtrTw84RJj/bAE6Kp89b//9nZSetZZcH4D9KA
spM=
           "], "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwO4uBMVWDOzAQgzUQ+w69E6fdOZ0xvFT7O5ALFSwu7C7
u7tzPX3YndnZ+OwZgXAMMDM2qkBwdmokEpyTGReN9OmzQlNDkeSUaf9+OErM
f4pQlGJUpgrFKbQ8FShBLHrGOEryx1KUpgy/PW1ZTvnLk5bjhD897g8rUolj
fveo3zziV6uSxGGrUZ0a1KQhh/xiLT570NrUoS4H/GQ89ajPR/f7wX02YK8J
7PG9ibyzwEbk+9bdNqYJTdnlG0M0ozktaMkABtKKnbYmmdfm2Ya2vDKddrTn
pTtMoQNd6MoLt9uRbXZiq53Z4nNz7UZ3nrnZHvSkH2mkkuNTN9mLjfamD0/c
4GP78sj1PrQ/D1znfdd6zzUOYrVZjOCug8lglUMYyjAC3HGlmazwtsu95XBu
usyRjOKGSx3NGMYyjusu8ZqLvep4rrjICUzkspMIks0lF3rRBV5wMuedwjnn
G2aeZ53rX/b71uU=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 3, 3, 3, 3, 3, 4, 2, 3, 3, 4, 3, 2, 
            3, 3, 2, 3, 2, 2, 2, 4, 4, 3, 2, 3, 3, 3, 4, 3, 2, 3, 4, 4, 3, 3, 
            3, 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3, 3, 4, 4, 3, 4, 2, 
            4, 3, 2, 2, 2, 2, 2, 3, 3, 4, 3, 3, 2, 3, 4, 4, 3, 4, 4, 4, 3, 3, 
            4, 2, 4, 3, 4, 3, 2, 3, 3, 4, 3, 3, 4, 4, 3, 3, 3, 3, 4, 3, 4, 4, 
            2, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{53, 31, 55, 8, 2, 53, 4, 1, 4, 54, 30, 34, 16,
             55, 7, 54, 3, 53, 2, 3, 41, 15, 12, 52, 1, 34, 5, 55, 54, 52, 53,
             4, 54, 55, 52, 52, 54, 55, 20, 52, 53, 52, 35, 4, 1, 53, 55, 55, 
            33, 53, 53, 52, 53, 54, 52, 38, 41, 10, 54, 3, 15, 53, 4, 2, 46, 
            30, 53, 3, 4, 35, 52, 42, 3, 54, 54, 55, 52, 3, 4, 53, 2, 52, 53, 
            2, 53, 42, 54, 54, 40, 1, 52, 4, 27, 52, 19, 3, 55, 1, 52, 3, 17, 
            52, 1, 2, 55, 55, 41, 53, 55, 52, 55, 54, 1, 15, 52, 5, 55, 53, 
            47, 30, 1, 55, 6, 15, 53, 10, 55, 52, 54, 54, 4, 5, 4, 54, 4, 1, 
            1, 2, 54, 53, 2}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJw9k30w1AkYx5dj7B2yZQ7jcqEZKp0o7pziWU5I9lqk6OVaLrUyjpxqRxm/
cte4yoyTqw29jdtawi6i3Wvy7GJf2m21Uvy8nF1LWpVa3J2u4u73j/54/nnm
O8/3M8/zfbzScxIzrGg0WilVvL0Lts7jauQnmEQvc+qgLOt67/ELciRx1ZDJ
IgT+NufGeoc+1FtV5Mze1CCtVTJjH0qC+OiGqwYfA/LvXWrJC9KiJ/626czH
ZiRX1v7eXdQMlpnzhTV/3wNhqa+sOOkOWFhhASjtwLKEYNb5ATno5f4DQ7O9
yC8fGUyr1CDjG+/gzN3NGOAAa3Tr+9EtLZ3gUn2a/bKWKx6dwJ2ubJmeVwHd
ffZAwUQjlAxMOWlr1Mi81RtHb1eAmr16vuQRxe+3cMJ1/i4Qh7usVzTpkSOa
3OQhHEPOnuss72olprwuPO9BdCAvKYkM3tWJngv1dfxDZmQe6Nu8Jf8hEtdc
2Z8lKLAk/9DsjmdKVG+J+dlvqwrZXmsbxL4qFApCGdzAXiDsxkXJO+Ro9GUx
vkqWIhFe5HSbVCD7yoORaDsR6NeeKAyl5tPdp7dFsBVIjqb73DeXIy9O+ue/
NRpUO5y1bvLRfdC/cda+MruWY6z+O2NQUj2SPlfnHM91YkDkze1HLi1jWpa0
Sw3dJBD6o4Zflt7H2GtfONmqvweZS5Yjk9cOqwRe5Zf75UAf+yP3bvY4vtGn
KjjU/jzVZ94LR8UgseeEdO9uR37clxLTWRMyGnV17w+2fvDnWjzCtM1yIAov
5BUMm4C7i5RG115GIjEt/SmlX9TJMmtTek6pkHa7w9UnSwtEiH8c+8UYMETr
AnM3zgD74tI1N6pHwW0vzcbBtge5y0vzwpK6MFekb9MEPQTjkTROYP4wiDfE
PI+rrkGGvtzzLcUR+87F9/gxJQZs/SRGDkrkzEVfrBDeQHVG0cDOFhku5khY
Ecz4lNQh9y+Bw7iXEQNciMllszp4I4hyyE6pRItTNu/XbgXK0vD0OsqnzKCa
cXrYBJb3L8L3+ynRTAgr/VNaISVDOnlSMgRuF1qCDJpuJBQNXn3Ln4O4dvil
Tesd5O96MXhQ047ciL5pkb0YSI35+j8bqbw0eMs2Uz5CTuOKdxR3SFXe+lW6
biwJmmeRYuqP5Mn/lXY0QW6eVe4DPwGSUY9Kewp0yCnW/pQ8KESe1ehx1tda
JKeKT/YPvQWLlbVFNzYAi3eiTxQ8iJoyAW82njtnbYaQ1NU5+77VI3PJ6ZY+
mycgWajlxXfVAO1e+RPVUzHwj71rYFE85j3pMysZj8GY5SyocesCmUX5OmO/
Bnj7lIrAzi5czAcHMz/fOVAF9Iw2F7RVYe5CrVt8rBHJxL3nHD+yYUoi7myv
f9yHIT9U1rm7DiP9fuWtHuEEMF7FV6jyDMiM+TE7O/IUut0lwhXzg0i8PJy6
pUqCjNAYvZ76W1JpF20KHkGGVPCsrVONxjSS1Rspg/8BAOJiGg==
           "], "Children" -> CompressedData["
1:eJwdkmeYDwQAh9/nrEMkI4rKlRkpKauSQ3Eyj8pK7nLIzP+O23eO4+64y5a9
yy57ZVZkVPYuI7NQaFtvVx/e3/O8z+/rGxI5ILxHEBAdnDvhEbGhgUBEfLuC
uRLWPyaqZ1SgZu1e//05uQT9Tx7yko8HKEJ+tlmQQhQgGN3qfbd4z83etTB3
3GRRPjeWOB6kGA+x0dtusDglKEkpalOHhynN06y3DOv8x7U+wqP87RrLstpy
PMZfrvJxnqA8K/3TJwlhhX+43KeowO9+5m9WpBKVqcKnVmWZt1zqTZdYjeo8
w2Jr8jw1eJYbLvI5FvqrC6zFJ/7iC1z3Y6/5Iledb13q8bMN+cn6XHGeLzHX
l3mFy86xAbN9lVlecqahNKIxM3ydpjRhuq8xzYtOtRlhXHAQzZliDJN9gxa0
pBXn/YDWtKE3H9mWcCJ5jx9txzknedb2vMlbvM1EOzDBM463I53ozDi78i5d
GOs7jPG0o+1GBD/4od+b4ymz7c4oTzrSE0bRgyyP25Nj9uKo73PETPvQl35k
eNgR9mcAhxzuQdM94EACDDOaoe43zX0O8TsH862pxpPAN6aYSBLpDCeZFIaS
7F5TSSPJISS6xwR3G+8w4txlrCPI4GsHu9NBZpLFDkfylaP40hizc4v5wmi3
G/BfRc0kzQ==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 3, 4, 2, 3, 3, 4, 3, 3, 3, 3, 4, 4, 
            3, 4, 4, 3, 4, 4, 4, 2, 2, 4, 4, 2, 4, 3, 3, 2, 4, 3, 4, 2, 3, 4, 
            3, 2, 2, 4, 4, 4, 2, 2, 2, 4, 3, 3, 3, 3, 4, 4, 4, 3, 2, 3, 4, 3, 
            2, 2, 4, 4, 3, 4, 3, 3, 3, 3, 2, 2, 4, 2, 3, 2, 4, 4, 3, 3, 3, 3, 
            3, 2, 2, 3, 3, 4, 2, 3, 3, 3, 3, 3, 4, 2, 3, 3, 3, 2, 3, 4, 1, 3, 
            3, 2, 4, 3, 3, 3, 3, 3, 4, 3, 2, 3, 3, 4, 3, 4, 3, 3, 3, 2, 4, 3, 
            4, 4, 3, 3, 2, 1, 2, 4, 2, 3, 4, 4, 2, 3, 4, 3, 3, 2, 3}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{54, 48, 15, 2, 17, 19, 38, 2, 1, 3, 5, 4, 3, 
            2, 1, 3, 55, 53, 22, 19, 54, 6, 48, 55, 4, 2, 40, 5, 2, 3, 36, 46,
             7, 4, 55, 55, 45, 16, 52, 1, 13, 2, 5, 30, 4, 1, 55, 8, 2, 53, 
            53, 53, 1, 53, 54, 55, 54, 17, 14, 53, 2, 54, 55, 2, 52, 38, 3, 
            55, 4, 9, 38, 2, 52, 55, 55, 53, 55, 1, 54, 19, 2, 55, 1, 1, 5, 
            34, 53, 10, 4, 2, 31, 55, 54}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJxFkWlIkwEcxl8tjzRjlZYJlZWRGmQrc2rHf1LYOsSREaIda1EOzA4LMpVS
PNKxpVnmoJqTab0m6ppZ1tL/tF05r+Y8WpuJ6essCk3EFyVsX6oPz8ff88Dv
2cC/fOy8E0EQpxxh1Icwr+z+BZyKYxMN1RoINLtS1g8IPZCsFFJm7Lk8roHZ
pzCcvLJK7qsBNrWdt2pXNthzk+Jql/ZjT9gjcXamCRkhM5nXgiiUNagSI29q
QO1y52oqfwAl53o7g6ufoDv17dAey1dknzgY3cWjQMJ0E34+bAQ6hD+6N6ET
ichafxdhO5JVkQwBs/ffnuLAck/hsyG0/5wUFZ3tgMFN1ZVdt5XA5p6urtvx
Ef0r1seEXbdC2ikvz6Xy5/CXb6J7fRUB4zB4tvx1TkY/cPbtj+Z+/wqDNUty
gNENXGnHULRbPUheksnxKW9BPd+4Z5ejhzchPretRY3cAc91/o+NyLhbKL92
hwRSvEWdE/caFAIWwWINAh3Bm/1hMiHRXNKnH1NAPK9Wnlgkg3D+jYVZZzsI
JtfuNSpbgVzp7KFP7EPeQmqE9rcF6Wxvj3WH32MxKy4qRVcHirl8yWxSI3KU
oub0DBsQECXVyXUYaCly5XLUqFiWexwdHGfDhHf2iAaaVvANQYstwOFcjEoX
GZG4180rNY4BmeEsdWe0Au3l/anVroPhgI35KUNanGzTrn6o0qM9dmzBOjSK
BREsZWepFgVHX7UXstsxK2A+1PZCh75lb8vyvE5CFt+sbg3tBslmv7npNTIo
/jI1wHR4cfebvpBO1UG4oX3kVl4W0EZZXs18G9AeCQvzKg0yOskEma8G08SL
rgaHvMMm2+jWjikNBnpNkTUvutD9OTO/zWCGeFH9/p0lw///pOUlx02NSMaa
Fvv4NCDXzA0tzc1EIsaFJX1XjIbPqkcqt1fIoFaQblkkGC7FuMaWi7Dnvnim
oPANpDlZ/UlzPwpayG7K4ZGw3T9SEKuApoQDaTsf6EFWeSbyqcyT/Qczg4gT

           "], "Children" -> CompressedData["
1:eJwdiedTDwAAQN9ltexNRdlbJKOkqMisX0ZGH3IXPnH34875d4yMrJC9yp7J
XsnO3qMiz48P7929e/FLVwWWhQGrw0MKFK3NCAaL1uVHhCJn5Zri5cXBxOQV
/35hiLD/NKM5d8znti1oSSvC6U4PIoikAx3RKP7Ymmhu2eRN29CW396wHddt
T7W/vGajnehClQ12pt6rduWKP+3GDy/bkxhmc8lYLvrdWcRxwV70Jp7zzuSc
CZy1D33pR39ymM4ABjKFMw5iMJM57RCG8s1TDqPSr6YxnBF8cSQppJJIhaMY
zWdP+skkxpDMR8cygROOYzwfPO57j/nOo771iG+cyGsP+8pJpHPIOjN46UFf
eMBMsshmv1Mp97n7nMZen7nHp5b5xBk8dre17vKRO53DDnPJo8btPjTAA0ud
yzzms80CFrKArd53i4vYbCElLmaTS9joPTd41/X+BTa9xO4=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 3, 2, 4, 3, 4, 3, 3, 4, 4, 3, 4, 3, 
            2, 3, 4, 3, 2, 2, 4, 3, 2, 3, 4, 2, 3, 3, 3, 3, 2, 4, 3, 2, 4, 2, 
            3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 4, 2, 3, 3, 3, 3, 4, 3, 2, 3, 4, 4, 
            3, 2, 4, 3, 4, 2, 1, 2, 3, 2, 3, 2, 4, 1, 3, 3, 3, 3, 3, 3, 2, 4, 
            4, 2, 3, 2, 4, 4, 4, 4, 4, 2, 3, 2, 3, 2, 4}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{36, 53, 48, 5, 54, 40, 55, 4, 53, 5, 34, 5, 
            19, 55, 42, 2, 54, 15, 50, 55, 4, 5, 52, 41, 41, 4, 4, 50, 38, 55,
             1, 31, 4, 27, 53, 55, 5, 4, 38, 33, 55, 1, 5, 53, 2, 55, 4, 52, 
            3, 47, 54, 55, 55, 55, 20, 48, 35, 55, 52, 49, 4, 1, 33, 53, 53, 
            41, 55, 3, 22, 55, 52, 29, 40, 54, 2, 23, 39, 54, 53, 4, 4, 53, 2,
             2, 55, 5, 55, 53, 5, 47, 2, 55, 4, 52, 17, 52, 5, 5, 6, 2, 54, 
            53, 52, 30, 34, 53, 4, 27, 1, 20, 3, 2, 54}], 
          "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9k21MU2cUxzu32YtMdwcTJ/hSQ5Y182UQWEBQzyUqwWyaQtRdISpsjHZZ
lCo6CwGtMHDzjQpMFLXeDGW3sBVQEcZkB1oKxba0iJSOFETNSp2onQykoLLL
h8uHJyd58s/vnPM/5yz7Mj3h6zcEAsE+7jmqfPKAtEKNzlu6NK8DHcGaK51H
rgEVfK/nxSw3eCLzie3eUUimc3SK+fchpHfCmEjYUCDzK1ibqEfVvPX1yx2I
7KmT8rDMVpAHqRPiNL+DSFqS1yi8iW4lW7aKroO4IxOL2vUmlPTtTDfmIoii
NX672QpsFi2p2lb7H6jONCm/GbsFErV5IFZYDWKi2DK0yYySBwdLWpJ60LO4
r3+a5znsHLre3oaSyo8XpX6rAT4q85MUER/YkXhnQvrbXTvyHNnjiyxz+ii4
X5JT+UE2ZDtT1ra96sNz8Q+qh9MrgS48n1nJ6Un1QHxGazMwq37Wdnbpcdyb
fCZ0+DZ6nv8wilzeSOf41nauDp7H8wVRb91Jiy9HW623q5XjihN2RJs4vfJJ
UkxBaTayPcFZha67SPqGpUzFmlHwcsO2h5QNlc66mJoIAzIBA8u/01zChtca
xeet5SCJXar9ItQKovQ33ys6bUVjWbWdOmpC9+Eh/WigFdmrUaQstBv4OfF1
kKYD+6r8u7B5x8pU//UdyPxUv+ArkQGo9xV611Q3iLc8u+/7p2FGT1iajKWf
zqfoZznFi5U6ZHY9nD0Z8QuIz6sLafNxJNISReZwK/D5khnp6uyz/eBRiG1v
W4wz/oYEKB/5jVhAsfDD3Z3rHmHksbN4guuXCBxJy3JpQf56899z27RACv1L
/D9pQdnTXm+HtwlpOuRy6AEnqNR794dxe0QX5d4gsq5i3OabmeykDsaFKnc5
Fwe3z5EVfWZFJtOZtmSBEwdPqFpydY0oqbojC3lcixSz/3Yg98/7J6aOGab9
dkhX5xxKsSB7cOLQdP/J4cOqwR+NKIux/1vtWwMN4ZvqVMv0KG9qcBRTQ2hz
aANWvvoD+H2Vj/yVMXmhAOgVeam3fP7Bmus7DRujngJZr7WO/to4cyeky48V
KlmgWnrnjvkw6N7zUUb0WD+q7rU/f9daCxLCVebzffbM3ERCwcLuig6MM2VU
uKV1uCY6d8Q+J4j6H0495dg=
           "], "Children" -> CompressedData["
1:eJwdidVOEAAAAG9YYHcXdisGdmBjC3aDEhYIujl/wlbs7u7u7u7u7u4Tfbjb
bhccnRgRGwCMDExVRNTosOTkqDGRQakRnjAqJi4mOSQ0/t9PSiXgP2dNQ1r0
jOk4bXoyEEgQ8QwmI5n44ykzk4X6NCAr2ajNSbOTg8qcMCe5KMZxc3PMIhw1
D3nJxxF/e9j8FKAghyzEQX95wJ8W5of7/W5RvrnPrxYnmBJ8sSSV2GspSvPZ
MpRjj2XZ7Sd3WZ6dVmCHH63IB7f73m1WoSrV2Gp1thjCZt+5ybfWoCYbfWMt
Qtnga9dbh3XWZa31WOMrV9uQRgxilY1ZaRPCeOkKm7LcXvSmGc1pQUteuMxW
LLUnS2xNOG1YbFsW+dyFtqM9HVhgRzrxzPk+tTNP7EEEkTx2nl3oSjfm+sju
PHSOD5ztfWd5z5netQ/9GcAd+3LbftxyhlFM96YDuWE0153mNVOMIZarTjWO
KV5xskOY5FAmetkJXnIYwxlvAolcdJwXHMF5kzjnWP8CFQ3s2g==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 2, 4, 3, 3, 3, 4, 4, 2, 3, 2, 3, 4, 
            3, 4, 2, 4, 2, 3, 3, 4, 3, 3, 3, 3, 3, 4, 2, 2, 4, 2, 3, 3, 3, 3, 
            4, 4, 2, 3, 3, 3, 3, 3, 2, 3, 4, 3, 3, 4, 3, 2, 4, 2, 3, 2, 2, 3, 
            4, 3, 3, 4, 3, 3, 3, 4, 2, 3, 1, 4, 4, 3, 3, 3, 4, 3, 2, 4, 3, 4, 
            3, 3, 3, 3, 2, 2, 3, 4, 2, 3, 3, 3, 3, 4, 3, 2, 2, 3, 3, 2, 4, 3, 
            3, 3, 2, 3, 3, 4, 1, 2, 3, 4, 3, 3, 4}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{30, 4, 2, 54, 3, 52, 4, 53, 21, 47, 55, 54, 
            54, 55, 9, 53, 47, 14, 52, 5, 54, 35, 54, 54, 34, 47, 31, 1, 3, 
            55, 54, 55, 55, 52, 2, 2, 47, 53, 1, 53, 53, 4, 54, 54, 55, 5, 54,
             31, 36, 55, 54, 31, 55, 10, 17, 52, 52, 1, 41, 1, 54, 4, 53, 53, 
            55, 53, 14, 1, 53, 53, 55, 55, 54, 47, 1, 41, 55, 52, 3, 5, 3, 15,
             54, 5, 19, 5, 1, 9, 23, 4, 4, 54, 53, 52, 41, 1, 2, 46, 54, 34, 
            52, 3, 8, 4, 54, 53, 3, 4, 54, 3, 54, 8, 9, 53, 2, 1, 55, 3, 5, 
            47, 55}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJxFkmtM02cUxv/KsKDgGhKRQcEWE1b5AEhgEMNyCi7QTF2BkNggAjolxTFh
BrbSXeiWVBgiEAwXG8fAgfyBlJbCtspWDlB7QygXYS3CoBDoSgPIIk46EFaT
UT+8OXlzcp78znMexuXc5Kv7CIIodDx2Y/JyV+sjyBw98upUqgqZ3qcjUskH
mCdKaslM3wDdjzVD8eVNmLjRTqg5KiSsHt8v3VpAVsLH8giRGgll1aR2SQaK
nVb+2Uc/gUKkn41kD+N6SgWtMG4KfH4NKxFKzEBoi33vumjQzfd5lsDSAQpx
92A8vJlbDzi29lngJBBjknBNSC/23atR/kb5BcNCRZbxv5WYWD80G0+RQsN8
wUvWp0vI6jguv1DehVSLF0kRkk4dul+c9vCVfggruRb79VfjGK0f1oQ6+Enb
S92N2wbMM0zXEqemgGy+OC648QoaPvKS8HJbkDxySMCImwN+6b78Csf+rAOp
TwzhRtzT5Rol+NcXamQJWtKKHLqsb6XxPT5qFPp1SOp3G5B3q7pz0eFL33dP
r52+cB7oH4hSUx6rgGqnlCTELoLwxG6BxHYfoi8zlIm+RqhLWpCu5LZBZVLk
uTtT/SBUWH22CodwM83Y1tSEuNdnV+tb+jPGkNnMqPrB2A9152MqTMMa6Ov6
svq++wrIeFFEVJQJuLTHzEmaDRLbgmlXPmkF7nEZU+jgrLtbcGIreA10je+f
fM3HZXA+P3gTUdjj2Zu9qMbNlLWHdnoZWjky102TGPfukLf61MODK0Y364Cl
mD0B5pxYZTZHg0R4/mG5++9oLcuqHUzUoZurIdjfe97pf8nC4MH5oDnkpRiy
pPxu4D707u6yjmL0zju01WM65J4syPA3KVCRLCgOODqD5jJoH4kYAbqudJuc
lwH/X1tQ3fYE5L39DcXP0bcKSXEI92eg1lz38nf8FTFzxPXXXP/naK8Skttv
hebPQOZKgl/zizEIy+A1/rlhgoa02v13XuhQeIYP+wdUuOePSaIMofaqgZej
vVpumXDmq1JeZXg2O+PMFcnY3Ul21SLb4GJPFw8iEXiJ/CenE/qCPEcsu09g
1LD8rv2iFX3A+73IQ1qkBnsGjj/Q42hoVHTp0Wewnv7H9L2pZczLtm+rHXua
VbqiCX8bmpA5vbBOvuGX2le32qvR/KG1vnlrAMgmWpGLg49+qc1dfGAEzc9v
nunRyYE4S6+Maet0+s0O0Es42bPwH6HyAh8=
           "], "Children" -> CompressedData["
1:eJwdiWN3EAAAAO/FZZvLrmXXsrHstlrm4v5Atm3btm3btn2tPty9d+8Cw3qH
dIoG9AuIUkjooOCIiNDIRnGiomav/uGdwyOCinf59yOjiPafk0YnBjE5YTDH
jUVsAohDClKicUnAMf8Yj9/G55dHTUgiEpOEnx4xKYf9YXKSccjvHvSbB0xF
atKRnq/u94tpSMs+P7vXDOyxIrvNSCY+mZmsZCOQXX40Cx/caXZy8N4SvDMn
hQgiF7l5ax7ys8M35uW1+XjldguwzZcW5IVbLcwWi7DZ526yKBstxgafWZyn
rrck6yzFWkuzxjKstiyrLEd5nrjSx1bgkSt86HIrUZkqVGUgy6xGdXrSixrU
pA1tqUVtGtGYOtTlgQ2ox1LvW597LvGui71jQ0JY5G0X2oSm3HKBzZhva+bZ
nBa0ZK43nWMrZnvDWV53pu1oT1dmeM3phhJGBzrSiWmGM9WrTvGKk+3MJLsw
0ctOsBvdueR4ezDOi461N3244Bj7EkE/+nPe0Z5zlAMY6VlHeMbhDmIwpx1m
JEM95RD/AhdR/NI=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 3, 3, 4, 4, 3, 4, 3, 3, 2, 3, 2, 3, 
            3, 4, 3, 3, 3, 2, 4, 2, 3, 4, 2, 3, 3, 4, 3, 3, 3, 2, 3, 4, 3, 2, 
            4, 4, 3, 3, 3, 3, 3, 4, 3, 2, 3, 4, 2, 4, 3, 4, 3, 2, 2, 3, 2, 2, 
            4, 2, 2, 3, 2, 3, 3, 3, 4, 3, 2, 2, 3, 2, 4, 2, 4, 4, 3, 1, 3, 2, 
            4, 3, 4, 3, 3, 3, 4, 4, 4, 2, 2, 3, 3, 2, 3, 3, 3, 3, 4, 3, 2, 3, 
            3, 3, 4, 3, 3, 3, 3, 3, 2, 3, 3, 4, 4, 2, 3, 3, 2, 2, 3, 3, 3}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{53, 48, 55, 3, 2, 4, 35, 55, 6, 52, 12, 54, 5,
             55, 2, 34, 55, 55, 3, 31, 1, 1, 45, 2, 53, 47, 1, 29, 53, 5, 55, 
            36, 53, 3, 54, 5, 3, 4, 53, 12, 33, 52, 53, 39, 38, 55, 5, 41, 2, 
            30, 3, 3, 17, 52, 5, 2, 15, 3, 20, 8, 31, 53, 55, 55, 4, 1, 34, 
            54, 55, 8, 55, 4, 52, 4, 4, 20, 3, 1, 4, 3, 52, 5, 3, 54, 52, 55, 
            52, 53, 53, 54, 30, 55, 52, 31, 38, 5, 3, 16, 2, 3, 54, 4, 50, 8, 
            34, 34, 53, 2, 1, 9, 1, 20, 52, 4, 5, 3, 6, 54, 4}], 
          "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9k29MU1cYh8vMQp1z3hIijKGCS2ZNZMNsIBHkrcuyALOhdRnpXEZwjHI3
DFSMo060BRVwpdjBtoCMiRbjhRkoDmqBwNvyp7STwS0wrcCw9LJSKZtttiHD
UXdJ1n04Ocn5cM7z/n7Pif6o4HBOEIfDKWKX42mKvqO4D0nvtgN3bpmA/32h
u/NkPya0PLdD5GEgtjFPG8M3IrXoIxKPDKDou5HZt4PbQBAkr9hYch/cSury
q5JOUOZYqZDKYSSqLmpPlFMQe7XFGtbqQdFQ5MbIsBm0zC+Ud/vGQZfIi06a
YpBwhVDBSgoIsnf4oa8DRXqX9/z2PozKP5hPvzEGDp6Fr5obAF2n1ndYchl1
lQ3RRN8QcCP+kH7uagVyuKhrv28GyaXUooUoMxr8zfJDg1qg5uLMx07QEOCU
d6Ru7no8jNwi84VtLEdCSrJZrLwKGnGcsOa+CXSlyfTfZcNIfp1x7R2aBnKf
IXTZ8xAlaTGpu9Z6wH7pQ63SMA2aH23ZjMqJKfXNTIRejwGOwDuxY6ffr3ne
iu6fQm8mTfWizC/8dbOZ5fR8SzVWlYBl9XSf9RUaOZM3zqxz1Jree6rubwfu
RItYcMUExu3/xNRN6EFSH36vcLcLo0yutwbYHMiDd31tm3QgeP2TH/K8Qxju
wgf10fdQ+VpyhONNI2Qxe2Z/2zQIhro6w2qWA6nr+wly7wS4My80bSWNUCt2
ti0VtMDK9M7Q+XINijJrii3HadTkf1p5aqsNvT1HGm5O3kX5x6fmqmdpsIh2
r1WMtwDRFv/72qoXsvbVEwUJI8jZeZRaPtYOcuaQO/8ZM3JKOzJWeHcg1hc0
eqmQAYHX5r/B3rOSOyr5IuwRBDiyXogUrc8j42Sc/zlyEWQJV1QHWI+8Binu
qGpCpSgpXq7oxyxrx4PeYD1GZectJbPn5Nm0c1LuLFLCJ5mhZYPI5+kaZUlW
lPtLtzCTA6jZ85cw6PpFrC37Mk1a0YXGXxaCz37gBPvLzU2jiltA+3I/U3NG
0ZLe06TwDCE9FW+rdoxASmPMlmct2WA/2eB+ie1BpvyGN8bmTKl3Gc+9extW
ZnJevPakHyzhx+OErP9etd9p27uIpH8DsZ5ToG878qedXtbfgMf/7ZbM3seq
Dd1ojw9Jn8/tRFKqal2fO+CL4FF1uqJ4/P+e+M7lr85030Yys+TPedYvrsLR
wySawNE7qj7a3ICB/1VrJhhf3SwSUmG7OMwK/wLdaQKd
           "], "Children" -> CompressedData["
1:eJwdkVN3EAAARu9ZXLZt215ebstetS1jW3X6B9m2bdu2bdvWbfVwv3Pu+R5v
zq79QyICgOiEsRMSNiQoKipsaGhgrAT3iwmPDI8qWa7Hv39ILAH/iUNc4pGb
PMTnlDnJRQISEkgikpCUxJxUT/jH4/42GTk4ZnKOmoKU/PKIqUhNGtKSjcOm
45BZOGh6MvDTjGTigD/c73cz8819ZmWvX91jdnb7xV1+dqef3OFHt5uXfHSi
Mx/cZn4KUJBCFGerhdnie4vwzs0WZZNvLcYbN1qCkpRig6Upw2vXW5ZytKM9
r1xneSpQkUpUZ60vXeMLK1OF1VZlldVY6XNXWIMgnrncmtTiqbWpyzKfWIfH
LrUe9QmmAY9cYkMW+9A2NGKRjVnoA5vQlAU2ozkhzLcF87xvKPec611bcsdW
tGaOt51tW2Z5y5nedIYdmO4NO3LdaXZhqv3oTxhd6cYUuzPZa04ynIleNYJI
etCTCfZivFccZ2/Getk+XLIvFx3jAEYbRTQDGeUFR3reGM45iLOOcHBs2TMO
97TD/AsAIPjU
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 4, 2, 3, 3, 3, 3, 2, 2, 3, 3, 3, 
            4, 2, 4, 3, 2, 3, 4, 3, 2, 3, 2, 4, 3, 3, 2, 3, 2, 4, 4, 4, 3, 4, 
            2, 3, 4, 4, 2, 2, 3, 2, 3, 3, 4, 4, 2, 3, 3, 2, 2, 3, 4, 3, 3, 4, 
            3, 2, 2, 2, 4, 3, 3, 4, 3, 3, 3, 4, 2, 4, 3, 3, 3, 3, 2, 3, 3, 2, 
            4, 2, 4, 3, 2, 3, 3, 4, 3, 3, 3, 3, 4, 4, 3, 1, 3, 4, 2, 3, 4, 3, 
            4, 1, 4, 4, 2, 2, 3, 4, 4, 3, 3, 3, 3, 4, 3, 3, 2, 3, 3}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 27, 1, 15, 53, 39, 22, 5, 54, 28, 3, 3, 54,
             55, 16, 52, 1, 1, 52, 4, 36, 54, 53, 50, 53, 53, 55, 4, 53, 4, 4,
             5, 3, 1, 54, 4, 53, 5, 31, 2, 4, 4, 52, 5, 6, 4, 15, 3, 30, 5, 4,
             48, 31, 3}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJwBvQFC/iFib1JlAQAAADYAAACAb8/xe9y3PyDmv2GiFcA/kGjgZ31ZyT+g
3RQMD3jHP7D46KdXQMm/cP5N5Q3Grj+opToQaDHTP6iYl0yhJ+E/qFoFH0Nw
6r94EgOijei/PwDsT81usaG/2MkpSVDr4z9I01inhAD2P9hUPaI0x8a/qI0n
wINTtz+AOJKTmI+1vyiXFAzkJt+/iJHEfNYc6j9oqkelZhnJv/DkEtri/9M/
mLSoa1htuj+4PRMh9Y7pv4izYQ8gk8e/UJ7M3kYHrz9ozh+ie5Oav9AacfTj
Wpc/sCXZpfT30L+gnlD5xFvVvygesTEEx8C/uKsbDm7cvT/g3XxQOfbdv2hP
C2BEqrE/KETorGSxob+4wSFxBiLEv6jjm88mhNk/QF8DkS1Dgr/YEJUNs631
P4BbCb83ecQ/mFHir+xvqj+YEjTsrAzWv+hPkDtifrS/wM26n8db1b94kmiv
YMi0v5iIJveeIde/6IComi5YtT+4OEoVxFvVv3jVrm30/Lo/GKh3KHMp5r/Y
I6mkzn+yPwAzt/ky/bs/sHC9IKb10T/YI6mkzn+yPyAbQscOZME/sIyi8va9
v79mPufy
           "], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -26}, {36, 37}, {5, -27}, {6, 
            7}, {8, -28}, {10, 11}, {-1, 9}, {-2, -29}, {12, -30}, {
            35, -31}, {13, 14}, {15, 16}, {-3, -32}, {17, -33}, {-4, 33}, {-5,
             18}, {19, -34}, {20, 21}, {22, 23}, {
            24, -35}, {-6, -36}, {-7, -37}, {25, 26}, {27, -38}, {
            28, -39}, {-8, -40}, {29, 30}, {-9, 31}, {
            32, -41}, {-10, -42}, {-11, -43}, {-12, 
            34}, {-13, -44}, {-14, -45}, {38, 39}, {53, -46}, {40, -47}, {51, 
            52}, {-15, 41}, {42, -48}, {43, 44}, {45, -49}, {-16, 
            46}, {-17, -50}, {47, 48}, {-18, -51}, {-19, 49}, {-20, 
            50}, {-21, -52}, {-22, -53}, {-23, -54}, {-24, 54}, {-25, -55}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 4, 3, 3, 4, 2, 2, 4, 2, 3, 3, 4, 
            4, 3, 3, 4, 4, 4, 2, 3, 3, 3, 3, 3, 2, 4, 3, 3, 3, 3, 2, 2, 3, 3, 
            4, 4, 3, 3, 3, 2, 4, 3, 3, 3, 2, 2, 2, 2, 2, 4, 4, 4, 3, 2}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 2, 33, 39, 53, 53, 54, 48, 52, 40, 5, 5, 
            53, 55, 38, 13, 5, 52, 53, 4, 52, 54, 5, 46, 13, 7, 2, 4, 19, 52, 
            27, 55, 54, 53, 55, 5, 52, 53, 54, 19, 8, 38, 48, 4, 2, 55, 54, 3,
             53, 41, 15, 1, 52, 5, 2, 55, 5, 1, 15, 52, 4, 2, 3, 32, 54, 4, 5,
             1, 54, 3, 2, 4, 52, 52, 1, 4, 6, 53, 5, 16, 52, 4, 4, 53, 55, 55,
             52, 15, 1, 5, 4, 55, 53, 4, 38, 54, 55, 53, 4, 54, 31, 52, 21, 
            53, 41, 1, 48, 1, 1, 5, 53, 53, 54, 15, 5, 4, 15, 3, 55, 2, 55, 
            54, 15, 53, 55}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJw9kX9Q03UYx4ddRu081o/LcXQ5kBOi4CYNgwk+OyicFYZy6cx2hwQE8Vuo
gMRGCwqQOeSMDbzawtEXSpgM2fjV8xUY+9qA7eSnhDIa2AgvqaM5DpC+/AF/
fO7zz/t5P+/n/fJOyDqe5MZgMIroZ1XGT5uDJ9A21nwobMqOsd8P3ot+qgWy
H8fM7xpoBluCrqD1ComsDs2f7X0UioRRj10lf+Hk3sarw1+2AiMjq1y8y4iE
hs9K2T8CWs/zKW8U9IMiMeg3oP8U5yj3s3kSqXcPH5Ul1GHK4hVCJSuGrfns
zHOvhdM6xusxcTrxAIam7onk3O9D/88bjs1V/IGOnWEwltGHlO4CbykqD2M3
+vZt+m7l3PJRtBFpooxOYDBzx4fpe/xNeC+bZ0aHhKgNEt0AQdnK/ma1EeUz
pn89LNdBlOm3w6twEJdCS9xPrPwHZLQm53h4FzpCwuPEqxbkLLc86drhACq5
JuSZhyZkGSzmy0cpJIcilDW5C2hLe15Tz6Zz+5whnOnX4duYDU/lno+287Cs
vvaQvGmQv//2g7T3yoAR4ee7U+cmmJTcrHpB9BOGfqIeGeJZwKUUHnPx+zG2
KeClxLRGsPFTfULKEYQb19ae/tUIrqjbTLHShEKvqEfB610g0rBLy+6Pojz3
alV7uQXl6uA8r93TyJ1bVBjXp9BxKcm9+BUCyIDq5eWJfiTn8uJMp8fQtlc/
8THRgBQERhYbfof85574sdKxucdLXTpcD+xkb/MBOi83nGnwo/dQTQv1C3fa
gKzL2PjUTIGIV5pqbbiF+UUPYppWe4HwmToQ4byLEt3P77AjjJhyMWxEFjOA
S7m1nMOiWmR7vjXDpf1sJ863sO+0gvWk/lFvRQeq0gs1r9L+RKUfKY3TQ/zB
h50GlQlVaZMrmzlZlTJ3/gd9yG3yLvDQq3HymxuNlk47aD32JUrXb9L8rTLi
w16UV/VIUp3doJWelfbSd2eXCHICaF9hd2QZRfvE99i6v+juRfbuAXlkfhco
Lp0y/zI6jkToYuDfbRJwlT9bKXMbRwH8oP9aZERHnZxTPZ+DSw51OkHrHJUH
e/Knbej+1WxthRbBuhoyVOR9e5uvSmFWG0wkKJYvF3wnboHYQmncJi/y5bVA
5Ug7MKINZzzpHlz2/NQs6Tmab/JY0Ca/I928jkYCDYs4EhCvRznTrq923UIO
Vb5GzGpB4jZz2p/WkaUF/GC6v22eSXWHRun+J6v4xtlIhkD1T9BJ84VBVGVm
hJ1KGED5mszJY74o2NJzm87WHLnbiLHXiqre9KXwf+rxHtg=
           "], "Children" -> CompressedData["
1:eJwdiVV0EAQAAO/RQ+kQ6e6O0d0NGyk5ZGzUgNH1Q3d3d3cjrbSghJJKd3fD
Mfi4e+/eZWjTJahdNKB7nCgFhfQuHxkZ0jc4ICqqR/QIDQuNLBAY/u0PjCLa
d6ITg5hk4KixiE0AcYnDEfWwXzzkD/zITxz0s/FIyh/G53cTkJBPJuKjB0zM
fj+YhPfu853JSM5e37rHFPxMSnb7xl2m4jdTk4a07PS1O0zHdtOzzVduNSOZ
yEwWetKLrGyxNnXIRnZykJO8bPalm8xFbl6Yh+du9JkbzMd681OAghSiPBUo
zDqLs9YiBPLUNRZltcVY5RNX+tgSPLIkpVhhacrw0LI8cLn3Lcc9l3nXilSm
CnesxG2XWpVq3HKJ1VnsTWtSg0XecKG1WOB153vNedalHleda33mGEQwV2xA
IxrTkNn+7yyb0JT2dOAXmvGfoTRnppdtSwtm2JJWXLI1F/2VC4bQhumed5rn
nOq/TrEdk/3HMMKZ5Fkn2pFOdGOCnRnvGcd52gi6MNaujPGUo/3bSLozyh6M
9C9HeNLhnrA3fRjmn/alH0PtzxAHMNjjDuSYg/wK7rkE3Q==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 3, 4, 3, 2, 3, 3, 2, 4, 2, 2, 3, 
            3, 3, 2, 3, 3, 2, 4, 3, 3, 3, 3, 4, 3, 3, 4, 4, 2, 3, 3, 4, 3, 4, 
            2, 3, 3, 3, 3, 4, 2, 4, 3, 3, 3, 3, 3, 3, 3, 4, 4, 2, 3, 3, 3, 4, 
            3, 4, 4, 4, 3, 3, 4, 4, 3, 3, 2, 4, 4, 2, 2, 3, 3, 3, 4, 3, 2, 3, 
            3, 4, 3, 2, 3, 2, 3, 3, 4, 4, 3, 2, 4, 4, 4, 2, 3, 3, 4, 4, 2, 4, 
            3, 3, 4, 3, 4, 3, 2, 4, 3, 2, 2, 2, 4, 3, 2, 3, 3, 2, 2, 2, 2, 3, 
            3, 3, 4}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 53, 53, 48, 53, 4, 2, 19, 55, 2, 55, 5, 34,
             55, 4, 9, 2, 5, 54, 53, 3, 31, 52, 5, 54, 55, 52, 54, 3, 54, 54, 
            55, 52, 54, 2, 39, 55, 54, 55, 5, 4, 15, 31, 55, 2, 52, 1, 4, 33, 
            47, 1, 1, 55, 50, 29, 2, 52, 54, 3, 52, 15, 5, 4, 6, 52, 54, 55, 
            54, 52, 55, 15, 27, 2, 53, 52, 54, 2, 3, 53, 17, 35, 52, 29, 52, 
            53, 3, 3, 46, 12, 2, 53, 55, 53, 1, 1, 53, 54, 55, 52, 55, 3, 31, 
            1, 52, 54, 47, 1, 4, 2, 52, 55, 1, 13, 2, 34}], 
          "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9kX9Q03UYx2dl++aNu6GRXylku+TE7NjOFreD2Kfk0F1RglBtwgUuRMIf
7LBsJMUClBmS3ECdlTE3mWzABgj6xQXP2MY2nbElMgJHjc0xSOHI8kamu779
IX889/zzvvf7eT1vpqhs554VFArlEDnupOmkbO8A+pWdEBIS/WA6JZw7n29A
JYtxac6eIYR9/aC4ubkfGsdSE7K2VoM0YW16B80Dvg++MuATPQijNeawlNdB
9kl0c0GbBhTS3uhZ/3WkZJ2Tr39sRIy6Rwuj5WokmArdL33TCbI1kROsXRbA
cnkrw5eNqDD8jHN2bx84eGU6G/UyEHkFV7n5d8CX//Y3g4Fh4KY3vJV1N4DY
+kEW/4IFYac5tqnDNmCbP69rYY6D6bOGok0bfGDi0S8dWPUzlOi2txavuwZt
W46cPXp4HhHQumq/9hwIwhna5PANcBd4/aMVIeAX0URRmAsEO1dmv5bmgC6P
sVs1GAIGzjzdRfKJI+8Go2x6hHeLwnUbXEBxHokJ7hcgClVgHorSgLQmIy2l
woqU6+OnXid5JGP6A38/uooU2X7DvTIdSuyXdb3zkhsUnjNVYZKPfnZbZpTb
DjIm1VVdeRMS7+xqNueNQdaPN37bRjUgIqKVZFrVyDT+w0FqeR7Cgn0N75/4
HWGXvMqOteZl3ZNdsnm7a/r/v/2zcU9dpxOV2G7nEifvokRTTkvStxdA8fSr
KudNGxB+Qayo3IaWLOMd68g+JD0pE8F6P/j2rWlV41bErroYe2jvCBJHtHgm
3wfSlKJW10AH0M/vDuyOHwbxpHWy6Scb4KMfdg5rfgH+PmG/Me4KWkqOrI7Z
bEECe4v9jckAELf+FDw8dg3wo6nt80u9IM6pDbyn/QN8j2Ws9n/NyEcczHNz
XIjRF1e/gAbBXRayorBmmcc9kyFnlDqWOU08Yv6Vagvw09un8YsOwHzHRdwa
Czg40bxh0ueJDov9q/iLGT0Sb3G8qCJz8KIVcq2H1OeLr2xqcgOueyomJ8YB
smdpxpmaSnDkfqx8ubYSZBOpz71gJP1nbxVIVEEgTtb37uC5QUaT5yarjFDY
xHXc1qnBxJljjpB5XOHi1lOSHqS4Jy0vFHwHjB3Pf1+qt0Lhai93zvtwuT8M
eB9Vkf6NQoaY86kXNS44u3ktQ6iNfUZTRVjAd9yeFl/rBHoFd9a60YMoA/Ix
e7AL0Q3HRjrJ+xfvN32pfjCA/gMIJ+3m
           "], "Children" -> CompressedData["
1:eJwdiWNzEAAAQN/FLdtadi0sY3m5LXurIW21ddf1H7Jt27Zt27b92u3De3fv
XlBUQnhMKiApIFnhkaNCExMjR0cEJkdY/Mjo2OjE4JC4lJ9MqhRSk4a0tKAl
6UiPlieAQP5Zjgxk5K/HzMRRS1GazGQhK9koSCGyc8Q/FiAHOfntYX+Zi5/m
Jg95ycchf3jQ7+bnmwf86n6/WJiS7LMIey1KMYLY42dL8MnifHS3H9zle3f6
zjKUZYdv3e4bt/narVagIpWozCsbUIWqvLQewVSjJlt84Wars8nn1uCZGw2h
FrXZ4FPXW4d1PrEuj11rfdb4yNU2pBGNCeWhzXlgE+67yqY0454rvesK77jc
27YigeGEscxbtuambWhLO27YnusutQNL7EgnwlnsABYZQWeu2YVuLLQrC7zq
fLvTg57M84pz7UVvLtuHS/bnon3pxxwvONtIZhnFTM87w4FMN5oYYpnmOaca
xyDOOsXBDOGMQzntZE85jHgmedKJjmCCiYz3hONMYqzHHeN/esvw2A==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 3, 2, 3, 2, 4, 2, 3, 2, 3, 3, 4, 3, 
            3, 3, 3, 3, 3, 2, 4, 4, 4, 3, 2, 2, 3, 3, 2, 3, 4, 3, 3, 2, 3, 4, 
            4, 4, 4, 3, 3, 3, 3, 4, 3, 4, 3, 3, 3, 3, 3, 2, 3, 3, 4, 2, 2, 4, 
            4, 4, 3, 3, 3, 2, 3, 4, 2, 3, 3, 4, 2, 3, 2, 3, 3, 3, 1, 4, 3, 3, 
            3, 3, 4, 3, 4, 3, 4, 2, 4, 2, 2, 3, 2, 3, 2, 2, 3, 3, 3, 3, 3, 2, 
            3, 3, 4, 2, 4, 2, 3, 3, 3, 4, 3, 2, 3, 3, 2}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{55, 55, 1, 48, 54, 52, 53, 54, 12, 21, 46, 27,
             53, 4, 2, 22, 2, 54, 16, 52, 52, 5, 2, 1, 4, 55, 1, 54, 53, 1, 
            55, 53, 4, 5, 4, 53, 2, 3, 55, 4, 53, 6, 34, 4, 53, 54, 54, 5, 1, 
            2, 1, 14, 41, 5, 19, 55, 21, 27, 46, 54, 52, 3, 31, 4, 4, 53, 53, 
            55, 8, 55, 55, 55, 54, 31, 55, 38, 34, 2, 52, 55, 2, 4, 4}], 
          "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJwBpQJa/SFib1JlAQAAAFMAAAAgBw/pUGmPv0BMIYO2jtG/IEVMBHx80r/Y
I6mkzn+yP/hkyoSrAtw/2AR8amaGyb8w/xEfM0X+P0g9Z5k9fNo/EI6Jo3OH
qD9IoVLps6nEP1CezN5GB68/mOfuD9BiuD+wA4ObIUHJvyBlo78xdNw/qCaR
NHPRtr+opToQaDHTP9j1SFgZLOO/MAcnSvDH6b+ojSfAg1O3PwDlm8yRHsi/
aH7ZfCQ4yL9AF3A9+QLoP0jx1e3PMte/OC5a1H980r/IcqPP5Yviv3Cxohe8
Psy/eOeZNHx80r8oSFMaRcbnv2Cpzk2+V7y/sOAbywy+xT+wytyj4W7Qv5Dp
FmuV4MC/aLj4IzBaw78YeDAfswe2vwi7FGs9WsO/wBC6l+IRqz9o1mKaOtrj
v8i9GoVO6+M/8Mbm2j5Ssb/Atq1/5Iviv/hs0v5k38a/6IComi5YtT/IUCn9
iNKqP0gzEK0FlKs/6Oob/JSVmL9QlXWqajrhvxAGO+LUp8S/oLO7Wzp5xD/A
o6XIxP3av+AUw83NMte/OCizlxxFyj/wHh/ucSLVP3BP4Ep9ZLw/uG3XfK0H
tr/gaxOloxjEP5i9g/B0A7+/2COppM5/sj9gU0f/Sn2pP1CezN5GB68/AHXG
g5XB7z9YTRJTpR/Fv1j75MwoqZ2/MK6+L0ikwz8IGjAZBrCRvxhDCViLF+8/
gBlVOx4m8D+gGramJejSP4D6nZLD9ew/KB92CBXIpj/IlRFsP6HGP+AqY8zP
Z9s/UGa1oMoU4z9oyp26pQbjvzCuvi9IpMM/SO67eTfY0j8AJ8rv+0ZPPxDm
EqgHgKg/6BrUIqr7wj+4WUq1M7bFv9iROsXhQgBAwFKYQB1r3L/I1Kab4kDQ
v0AJ+v41dNw/nSVcNw==
           "], "Children" -> CompressedData["
1:eJwdiWlTDQAAAHei9JAjhByJIuQIFaLkrpDe+wXPTOpTZp5mjP/kLpIQORJC
7jNUknJU7iPr6cPuzM6m7tkX3BsD7I+PKhg+UBiJhA+GAtEoqqouryiPZOVU
/v+hKDHDjGAksWxmC/rUOEbx13hWsJIATxzNGMby2CGXk8A4xjOBNB75x4dO
5IGJTGIy903inlO462/bnModpzGdXybz09nMYCY/vO13Z/HNW341hTmk8sVW
53LTz85j0BumM58BF7CM62bQYr8LWcRiMrnmEpbyyWY/etUPXvG9l83ikn02
2esq3nnRbC6YQy6rWUOPhayl0TzO+9ZzruOs62mw23wKOOMG6n3jaTdS5yZO
2eVJt1JrMSV0uo0Ot/PaIl5Z4w5OGOK4L93JLo5ZylHb3U0ZQV54xOce9pmH
/Ac5qLD4
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 2, 3, 3, 4, 2, 4, 3, 2, 3, 3, 2, 3, 
            3, 4, 2, 2, 3, 3, 4, 4, 4, 4, 4, 3, 3, 3, 2, 3, 4, 2, 4, 4, 3, 4, 
            2, 3, 4, 2, 2, 1, 3, 3, 4, 3, 3, 2, 4, 3, 2, 2, 2, 3, 2, 4, 2, 3, 
            2, 3, 3, 3, 3, 2, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 
            3, 4, 3, 4, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{40, 42, 19, 52, 3, 52, 8, 53, 52, 27, 41, 52, 
            54, 53, 27, 46, 54, 54, 4, 4, 47, 52, 3, 17, 46, 52, 54, 4, 27, 
            55, 53, 1, 52, 55, 5, 5, 53, 55, 1, 54, 1, 35, 30, 2, 53, 2, 5, 
            53, 5, 54, 3, 4, 2, 53, 54, 54, 34, 54, 52, 52, 52, 12, 53, 55, 
            52, 55, 9, 53, 31, 4, 52, 54, 3, 52, 55, 3, 4, 4, 52, 52, 2, 53, 
            4, 5, 1, 4, 2, 54, 55, 54, 1, 2, 3, 52, 5, 4, 53, 53, 55, 53, 2, 
            52, 55, 54, 55, 1, 53, 55, 54, 1, 1, 5, 52, 4, 2, 52, 4, 55, 1, 
            39, 47, 1, 54, 53, 54, 30, 55, 1, 5, 4, 53, 52, 53, 1, 53}], 
          "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9k39Q03UYxwcXAhrnxMwReI1LhEVeQxEmAp+ZFjsCGyA/JBuD0kaEW0De
+L2iyyFKcJEg8UtHsBHhsHCQzWdj+24TOBjGz/GbwY5jeIwyWHBAX/6IP54/
Ps8fr8/zfj/vxz2JG3nFhkAg3MCL8VWt348rQ0h821NRECVDvJYqxG9TIulI
2JRPvAY4sUFHqr5rBYZas3fpjg4E3L6V7HEZ0jcHOzqs6KDkxKPL54J1wI4K
2Q7NlaA6lnHPhn8jorloiLXRT4F0OJTc/eUCCJNLXkzl6oBemJLWdvsJYtb0
TL5n/wAJnPZZnTpmgPTDmdVUpQl4FEMSjTQEvHkrVXN6Atq3JPwwtQgxfJ/P
jWXqgOcujDpeXA887rHUmYaOXc600evksk4Dwk9jafOb00iQxEo3Fs3uzmWJ
sw1lmfXgxZpYLHUGIMSf8xPkPAO+1vtobI4WSg4I7d+Xa0G8Wu7jengc2rtV
rzrIOsFyCrDsagA2KSMjab0bqLLSVzLiKqEiOiymfLYDLFb63cqCHPh/jpE3
JPW9+Q+ReC1tJS97CEmb8hKNAbg/Ma6GQtMAEC6vbXpsPkYcEcf2bKAWOL/1
GFzwN+Pa7ChxywQc/raS66gC6b5vPPeU/YwI9GqPOWkAEnSEHiriY0DPuoTZ
HF8EDisIUbiDQDQ5i+0FYmQZLhA9S5wAntpFLkzWgsIscWZJNSCdoQXUxmrB
4bW/r2aZWpA1XJhQaOkEctXa/oveehDcM/S93t2FqFneDY4kDIjFhaL0G2JE
IDVI95/9HagtT95m1KuQOH+0BPtwEPgWl0OXQjTAfjz6z+k/jLDAvxKB+fYh
3ptV5KOtatynzxJS3J4CQW9rp8X7+smD19OShoF0vsgy/M7X0P49M5b8LQZ1
H91/2NWPgS4vJ7B+vQf4Bdj2YJkKFG3nqZ34P4yBXHN81Siw12kw4LaIqP76
jaaBISByGim9J4aB3pxYnU2+idr3nrvYSekHXu9YOSFgFJHAtla1aQDey9HO
9RudqILgk880G5Eg7bmn0gMDpnSrywv3W9omd/4F5zmYN4IjmtVAs28McdzC
gNFqmoxpmkQcJTMr3U4BVu0Rh2J8b4z5jWp0CwPF5k2flEwN8BqOpXqvjkEd
9x5/fK0L+J9HLO3kCee2hT4CYER+nI9RVMB8sO7Zio0hmuh+wp+4DmvgT7Id
PYRPwn1PZqoR6YXZozKoFMQmO/k8nteFmFsX+nB91n5VXPcCBrSDLPaZnXtw
I611OepRRQlFFoznj7cVPu+kaUG79/EX961BnKuuqTsV2WNDt7rLDcvTWuQl
WPr1C9fZ3VzGLZia7xSowEtyrZ0sx7l3/TOLRT0w8i8VC5qqQYoDc6j/uhlV
vJR81W65FTEl6R84dZQB2+9dHyXuK9uJaB90QYP+A9qvRvQ=
           "], "Children" -> CompressedData["
1:eJwdiWeYCAQAQN93yB2SUjZ1LSrUGScZdaW47LuyU3e5QbnT3Ylzdzhu0DIi
K3tU9l5ZEdmzNGxll73Xc/nx3ve97wVHJ0bEBgDJgXmKiOoRlpQUlRoZlBfh
CSkxcTFJIaHx///cPALuk4/8FECX+wAFuesyAwkijNcpRGEeoTh3LEJRHuK2
D3LLpd60GDd8mOsu8ZqLfZTHKEkprlqCKy7ysgu9ZGme4mnKUJZyLPCi8y1P
BR5nnhd8gvPO9ZzBPMkczzrbZ3iW15hlRWZaief4zxk+z3RfIoQX+MHKfG8V
vrMqL/Kv0zzjVKtRndO+Qg2mWJNQTjnZWkzyZWpz0omecILHHW8d6nLMetRn
nP841lf51r8d41FH+wYN6E0f3uQtjtiDhowymRQO24hw3qYxTXiXVjSlGYeM
oDktaMlIDzrCA37jfocbyTD3+Q5/+bWtGWoXPqINbfnTdvxhe353iHvtwHt0
5H0GG8cgPyCK34zmV7/yQzqxxy/dbQy7jGWnXxjP5+6wM9v9zI/pyjYHutUB
JpBIN3JNIsdPyHaLWW62v5vszkY/5Rf7ucFM19uTVPr6s71Io4/p9DaDDNeZ
bl8yWWsWP9mPNfZntWmuspfZpLrSHFaYy4/29B7G8xjT
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 3, 3, 4, 4, 4, 3, 4, 3, 2, 3, 3, 2, 
            4, 2, 3, 3, 4, 2, 3, 3, 2, 2, 3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 2, 3, 
            2, 4, 3, 4, 2, 3, 4, 2, 3, 2, 3, 2, 2, 3, 3, 3, 4, 2, 3, 4, 3, 3, 
            3, 4, 3, 2, 1, 2, 4, 4, 2, 3, 3, 2, 4, 2, 3, 3, 3, 2, 3, 2, 2, 3, 
            3, 3, 2, 3, 4, 3, 2, 2, 2, 2, 3, 4, 3, 4, 4, 3, 4, 3, 2, 3, 3, 2, 
            3, 3, 2, 4, 4, 3, 4, 3, 4, 4, 1, 3, 3, 3, 3, 3, 4, 3, 4, 2, 4, 3, 
            1, 2, 4, 3, 3, 3, 3, 3, 3, 4, 3, 3, 2}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{15, 9, 53, 2, 46, 53, 4, 3, 52, 41, 38, 40, 
            53, 41, 7, 2, 53, 10, 52, 1, 16, 55, 1, 3, 54, 54, 5, 19, 54, 15, 
            55, 55, 2, 3, 1, 2, 3, 55, 55, 53, 54, 2, 52, 55, 1, 41, 17, 52, 
            5, 19, 47, 3, 53, 53, 1, 38, 10, 53, 2, 53, 15, 4, 2, 52, 41, 38, 
            54, 52, 1, 27, 55, 54, 41, 30, 47, 55, 3, 1, 52, 53, 3, 5, 1, 3, 
            52, 52, 5}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJw9UVswlAEY3R4KubQ8oInsTooyZNFENX1ySWJYjPYfsrGRGrFCaKRQRmVm
3YYxBq1s2ZVYRbkMn90Vv+t6kU1CGVkr2dCkcZnWAw/fy5nvO+d859A53MCo
PRQKhaUZQrdY3+KPHKi8p9WJOULIN3D/YKNAFCdedRCuS4FZOTh5UasBFI8q
Zsn1UlTQl5piJzqAlmsd5L8wA6YmYXXZB+eBomv0rtJcBjcXyoV8XibYG2fM
G60MAelpl+pt1YfM2hNmkTEiKG0SxhCxbaAc8sXzzyVAOfOGtvdZP1K5Sj1O
+TCEp6Tbrx3rQ5pd8euF1UFgjodxySyE6d+R2QbBcqTuv8cdNVOBc7evoZ9G
XyxEvg0xAOTf6yUmLmpYM17REVvOgTJDWGZHNINzGyeFlbcIysIo7czjQlAm
99yvL5Ag1avobsj3VZhmfx4cchjDabmqKUBUgSMb8QVLGl3aUYZ6WIO3dFq+
LfbvRGaC9AvDcQS7ls1Dx1T9SNKDooxzZUiM3uDb/phD11BXtlyzzyQcQ1aK
epEyMcUy9+pBcY6+1bZfPntm3/rpGtCu4/m5ekpA3T5lO7IpwbWEANMurfcY
X18Oqc0SaNkSpfp2V8P0AY9vPjwB8qviKnRK/kE+w721lVUOYlOZqnNzHGmc
hrPS7EiwfkkvrBiTQLhyw0quJ4QnzVsXOHl8WEv2Mb/tqMnjViNDoGoHNVdw
mREiQ2ZjVMRmdDPmu5U+DvCW7vaywxcvEBVxDeeBOicijT51o9rL4oqFZz+M
pJXQgi/VAMW0M0tLQSL/0AO2y50p2LmndBSO9s6Kd/0r3IweRiRJkVasMyZ1
koPS3l3HiShDJRApp+Zl6Mwj0ydfkehccCRwu8cMdprVudpGsM9ocPqo+Y84
vJxkED2AipM/r8X96sGWFzaxsKjJVbvKwYP+Ff4Di59nRg==
           "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9FKQplj+ITShoyMgplVUR8ST/nLvykuy93zn9k771HiCiK
7GyyV6WQ59MP7929e4H11cENEUBNdFjByq0FoVDltrKYcBRv3lK1sSqUnbPp
/68IE9FLH/oSid4zin78dRXRxLCCEvozgAwyiaXFHu8axx0HMojBxJNAs39s
8re3HcIthzKMXw5nBI122+BIRjGam04lnTHccCyJJFFvl9cdx3gCTOCn10ym
zimkMZGrTmIynabQYSrtXvGHl/1urd+85Fcv+sULZjGNzy4nm+l8spgZzOSj
551FDnnMZzbn/GAuczjre+cyjzO+87RtnnIBJ13CCReSz1uPW8Ax37iI1y7m
lUd96VKWUcgLj1jEYZ97yGce9KkHbHW/T1zJY/dZymrWsNdH7jHIbstYy0N3
+cBy1rHTCnZ43+3+A5aQuPQ=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 3, 3, 3, 4, 3, 4, 3, 2, 4, 2, 3, 3, 
            3, 3, 3, 3, 3, 4, 3, 2, 3, 2, 3, 2, 4, 3, 3, 3, 3, 4, 3, 2, 3, 4, 
            2, 3, 4, 2, 2, 4, 2, 3, 3, 3, 4, 3, 3, 2, 2, 4, 3, 3, 2, 3, 3, 3, 
            2, 4, 3, 3, 2, 2, 4, 2, 4, 2, 3, 3, 4, 2, 2, 3, 4, 4, 4, 4, 3, 2, 
            3, 3, 2, 3, 4, 3, 3, 2, 3}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 3, 3, 47, 6, 17, 2, 42, 2, 2, 47, 53, 53, 
            21, 1, 6, 4, 53, 4, 55, 52, 52, 3, 48, 41, 54, 9, 1, 2, 13, 21, 
            53, 52, 54, 4, 55, 54, 4, 52, 47, 4, 52, 47, 55, 27, 9, 55, 53, 
            17, 45, 54, 39, 15, 13, 55, 54, 1, 54, 3, 3, 2, 19, 40, 54, 54, 
            15, 55, 3, 17, 3, 54, 52, 52, 53, 3, 4, 4, 53, 4, 5, 2, 52, 34, 
            35}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGAIAeIP/2/yWkcd3l8grOIa1bdk/wzZoJJTJuftd/xbWeFz
ZLH9i3cfevoTz9gH5EWU7Pmx1f7GAhG+T+lb9zNsOSSuln3afof1/E3xK5bt
lzh/Xb0ESMP0LXg3R8zA9dj+ioq4rH1rV9vfUF655Fz9JnsJ+QyhyzKv7F80
rJilF7HVvkLS7vOT7kf7P5iqTTxpdWq/x0G12Y+AfInmLvNruhf3SzD8yFk4
7ej+Fd/sVZeYPrP/USjh6/f6sT3D3klXjz/dYH9ALJvXoWKf/YwPcWn/zj3Z
zyH1Oa3q2Tr7GWoLZOpqLu3f0a6Rd8ro+n6Y/TA6QK+G8cL2jfsXSH9YunH6
8f0eDm8lv0w6Yi/hFuh73PLu/hXPD8zV0ji3X+fGHM8L+SwOCvWy8cejr+5/
wWZpfzX3MNyfHZZ8WiuuXNufcGRzRpjcUbg4x6LWW5LvD+xPCHb/71W70h7m
ro7l6gtfXdy836FK1vHX7qf2GY7XPq7n3gCXT1juU5PJ83B/wT/fp7zH1tkL
SPy4lH5hrX3GB1nb05sO2j8Im3D8/O/z+zcYTH/2+81n+4q5K7a7zt6xX+PO
dcMQyTf2B1Jn211ZdnL/grsbjIs1n+2fcNOHY9nvQ/DwToioPVQh+tC+wpHh
pPGyA/sfvKu7+0Fw9/4Nzr5Z3wSX2T/we86xfNWO/Rae/08XAfWvqGaaxyFw
0P7FQuMZIH7Fk9eugs3n9ldc2qGyS/zAfoH4i6tWKx7a73Dh45UpkkC+a25w
IUjdpuIpJiV37GdkaParOzftd6it/P8l66X9hhMbxc2A4hlOzzQ1/u62V0hz
Tb3jdMB+hX/XTgHJo/sn7OW4nHRmj33AvDP33NjX2wMAgK9nAw==
           "], "Children" -> CompressedData["
1:eJwdj1lTDQAARs9ku1lLiEJKhFKuKIREUXY3f+CaufTEzK2Zxm+ylL2s2bJW
srdYQ8i+Zuu4PJxv5sz3dNK37QptjwOqA7EJhWtLotHw7sr4mFTsrInsiESD
BVX//q0x4v4ziMEMYQELGcowAnSpnQ7YYTz3Hc4IRjKKP+YzmjHkMY8E7jme
CSQylt8m8cu7/nQcP7xjMhPJJodJpDCD26YymX4zmcItv3vTqaQxjXanc8N0
2syg1W+2+NXrfvGaM7lqFlecxWzmcNnPXvKTzc7loh+9YC7n/eA5g5z1vU3O
54zvPO1bT1lAYazrpItYzBsrWUIRfZ5wKct47RaWU8wrj7uCRlfS4EtL6PWY
qyiljKO+cAOrOeIaynluBetYz1oO+8xD9njQpx5wI5vYTL1PrPOx+31kiIfu
84F77XaPfwGYYbL3
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 2, 4, 3, 4, 4, 4, 4, 3, 3, 3, 4, 3, 
            4, 3, 3, 4, 3, 2, 3, 3, 4, 3, 3, 4, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 
            3, 4, 2, 3, 4, 3, 2, 3, 4, 3, 2, 2, 3, 2, 3, 4, 3, 2, 2, 3, 3, 4, 
            3, 4, 2, 3, 3, 1, 2, 3, 3, 4, 2, 4, 4, 4, 4, 3, 3, 3, 2, 4, 3, 4, 
            3, 3, 3, 3, 3, 4}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        
        MachineLearning`DecisionTree[<|"FeatureIndices" -> CompressedData["
1:eJwtj81OAkEQhGtnZxEOGgkhHjwQNRE5IJDMz9mj1/UJ1mTVkyYrCeFReFu/
acmkurv6t+bu/af9cJJ+x5i2O7wMQ3d8m0Bev/f9Zz/s0lcFOwGvqEaPeKeg
EbbBZ1VkPP6WeiSbjGWtqDrV1G/0oMk5WxkSuNJCU63pCLCGnOOVG8+6tmtl
e6MnuxiJ16C2DVFjKlkX8HIjko3asiPAPHZJnA1zNNe8mS7p9dqgdGTzS/qC
6Vpws0z96094b/qD/TWYqmD/y2wrOrzFRV8NVrbFsTnBysw9iv4AoHcbQg==

           "], "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9VG00lGkYHq1zzNZ2UpuPZCNtDDYskzNOdu85ObVktWOrgygTaVnLjNR6
K6xUJ9bHYtgmlSWWmZKGlDFr3S/GzPieanw7SD7mVKyVnZyj2NcPfjw/7vM8
93Vd93Vf59kZwvs+TI9Go92kDiGtD1AGdqNlpntOpbkcWcU1/p+ZDGH469ui
wszLQIsPdlBR9+x1xGSncy+yEnjRd40VqE0S5Tv4Pwa1RygRISpFdeyMzvWC
HDxVQ7WKYAVKt0TTvpLJgE4cDm36MICiDYT3y7QxZBckKN1MezDF3MLrKNmK
hgXDvrFyElhbg0LPWDUi7Y6AaGdOg4g3Z9NK8dHeezGSj46BVOj7+TjVnzXd
H5cX1on+mkHjqfJ25NyzMz8dKQbTAfvILu86lGS83f2U6pMUOWxyEt/Bwtyi
4txhNdDN3p65OFkBnIL24YMGD9dq0s+g5oGmB/nucs32Bw1I7HXhTHs2IqN5
QJcY/wy1RxUTvRtkYLrr1GaN+SsQFmQEG4Y8A363q3ilnt1hMRNj1Q1OFfWO
niVNoOZNyeFd6Rq+k+5SmG1mCSY5NXJmz00Bx8DowkqfZVJ+gNTgCfLtmYIO
Cz22IYcsW/GXuJxFFi82Qkm1bT8WObOFIYc02ewpXNXNGTjBUyUjjP4Qut7x
3BCwJj5+nflehoU/Wh1JXWzAhb/NLrWRJBY63snZ8eEv4PonNBJGL8ApISKi
mdrjqL3NY9bASyx8NN93xH8eOFFFKffPteGqXmlszI2Sqx3IcpwISj1eilz9
h9vl1P6Sop8vGv3Zhuxo3hsJT4nEm7yt+1/VAT83/7AZxcMKir6y/eJTzPLd
6yPobwDDE5fsOpldkDSyzU5MzSPdeiCvlarVJ+v+W9fTjGT/06ZvOM3I3uzs
ojNtwr5d4pLOX6qAkyVSTLBf4gK3qsZYpkDDvMWaK9JB0PawE1v2J+NCgNXN
IlcV8pd8JjYqKsB0eEvi+bJBtHS4dbVpuQ0X3nor8yJykR4/GTcS3rKGu5rn
8Oy4NvqX3Tg7bm171nZyLcer7xgy60dZkxqkZ4tZ+443oXRJTHwrLwZuJtPF
7Ho18CtuA/G4AfqQMTg2KwJaYH3ru3VaWNWjfRNuaU2okOHXqw68pkT/9Pe1
aSb/AKF135OGDUhPfpGfJsG1HDKyjc+7rfDctY+CaSWqr98IbSmuQppH5Hea
/SQId3/NnG8eQfbpGTPnsCgUlrcEJHRQ+Pss2Cu4q/m3LHyi6NaXo9amw9Wt
R4mzcetvpFNzcOt3TCSOKZH7eyQpkKhQok3Vu3WrALUzNdxjJQOgsnZoPvxT
LYaT47+e/qQShILYa8F76lDoXuqns2pDSVrC9OCpkLU80wK9dp7/bQ74+tov
tuXeBzYjR6AvlGO44NOMnvX3kNNy9SM73Rxo5e9+Nlv5RwKdq07mt6LUY7fv
AuWTsOHYckZjJaiYG8+M0rtwgRj6o/IAiUKT8p2XfYYxa0Q5t6mrEpLcyzKP
VGuR7v3vJtJGCbOR19OCQ55T/sTIznqMQsqh5aWT6RJwYm6+PdRfDf8Dc1yM
1Q==
           "], "Children" -> CompressedData["
1:eJwdiXeYDwQAQN93UXepaKd9WtoOidKQUhrGnbSk7nITN363uTt3uD1xs8wm
Cu1SiJStsjcNpV32qp7TH+993/teaFRSeEwQkBrcrPDIzB6BQGR2REhz9E5M
i46NDoR1iTv5m5oJ+p9TaEFLOtGZUzmNs1mgBhPC6fznfFtxBq2Z55l86r9+
4j+exXHn2oaPPeZHnsO5nMf5dORDj3oBF3IRR/zAtlzMjdzEJbzvFVzJYS/l
Mt7zct71kO8YyttexxzbcRVXcw3XMtuDzvKAb7nfN91ne67nBvY607+d4c1M
9xbe8C9f91ZeswOv+qdh/OEr/u7L3kYX7mSat9OV35xqN6b4q3fwi5P92Ul2
5y7u5h4Kmei99CCOeO7jJXtyP3t80QfoxSCe5Scf5HGafIje/GijD9Pgbh/h
Uep9jDr70Jd+1PqDE/ze/nxnOBGMdwDj/NYaB1LtEzzJLp/iaarcaaU7fIbt
VjiY54ih3G0+TyRRbLXMFyg1mhK3OITNFrvJImMpdKNjTWCMwxntUArc4DDW
m28io0wiz2RyTSFAKmmsM8d0Msgim0xGutYRrjHbEWQ5mkxHkkMuGY4inzzS
/cY0vzbVryxgtQHHkOIqx7LSZIsoZoUllFFOKUkuN9EKKllmA0utYokTqGa4
NYzjS8fzhcNc7FBrqeNz61lkgguNt5E4m4j1M2M8AfzDPME=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 3, 4, 2, 3, 4, 3, 4, 4, 2, 3, 3, 2, 
            3, 2, 3, 4, 2, 3, 4, 3, 2, 3, 3, 3, 4, 2, 2, 3, 2, 3, 3, 4, 2, 3, 
            2, 4, 4, 4, 3, 2, 4, 4, 3, 3, 4, 4, 3, 3, 4, 2, 3, 3, 3, 4, 4, 2, 
            3, 3, 2, 3, 4, 3, 4, 3, 4, 3, 3, 3, 2, 3, 1, 4, 4, 2, 3, 3, 4, 2, 
            3, 3, 3, 2, 3, 4, 3, 4, 2, 4, 4, 3, 4, 2, 2, 2, 3, 3, 2, 2, 4, 4, 
            3, 3, 3, 4, 4, 3, 2, 4, 3, 3, 3, 1, 4, 4, 2, 3, 3, 3, 2, 2, 3, 2, 
            4, 4, 3, 4, 3, 4, 4, 3, 3, 3, 3, 3, 4, 3, 3, 4, 3, 2, 3, 2, 3, 3, 
            3, 2, 3, 3, 3, 3, 4, 3, 4}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{14, 55, 30, 4, 52, 19, 3, 52, 5, 21, 52, 4, 
            54, 4, 52, 3, 5, 3, 5, 20, 2, 38, 8, 39, 10, 3, 1, 4, 30, 2, 3, 
            54, 2, 4, 55, 2, 1, 27, 2, 52, 53, 9, 3, 3, 5, 53, 52, 15, 53, 21,
             3, 1, 50, 31, 54, 2, 4, 34, 53, 17, 4, 5, 6, 3, 53, 52, 52, 52, 
            53, 54, 3, 17, 5, 55, 54, 52, 55, 52, 2, 34, 2, 55, 15, 53, 1, 52,
             2, 31, 55, 4, 55, 55, 17, 5, 52, 53, 53, 54, 3, 13, 1, 4, 55, 1, 
            53, 53, 47, 38, 55, 52, 1, 38, 38, 52, 3, 3, 4, 8, 54, 3, 6, 3, 
            54, 4, 27, 55, 8, 54, 4, 3, 29, 52, 53, 2, 1, 5, 26, 54, 6, 55, 
            27}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJw9k2lUlGUUx0eOyghYFHDC4hAkknNMY1EZEbyAHRxRYaAiCkyWkKlIMIwI
owZQQ5FtKCAyHATlBRXeYR3WO8My89aMMjADDbKDIMtRkaXDCZBePsCH58t9
7vP73/vc/7UMjvAJ3cRgMFLosyj46JsvTwyB3/z1OAFbipx8n8mK4lZwcRkL
HEkewfSEbdzj2RRO8IncfX5VwMvstbJLLcSkrLsVuiSFM9etG6rV1aDdWVz4
8Ody0H7x3W2rZxTyawMybD9rQeE+x/7Cm1N0nrNoKVoB6XbVAUePUCiOSjuh
W/wn8s+Jw81X6iFdSxZEscbRYr5sy6LOBBC3HQ15tmoQtvs2po5rkPHu38+X
3L1gJn7BhDfWCJEvT41tl5WCKjNlIelqLXCej6Z8S79nH7oc1202BZK5twXO
bgm4XpfEse/TZJrjcqfc9wKdJ152cEgyn6T76K9Zi6te+CpGV9VgES0ZHrN7
iBZXRcfS1nTfk/1m0NQG6YPy2VfbRSAJMlOm0PEcbvXN1AtSZFgXbfG+WIPM
N+fOxo6XgrDjDGuNz165tEt55y/kmTkwSKsnYLM30YkXVIdsx0AD/V4ZWlDX
lolhEkih/12FaSUyGgVd8jESOPOnMo3of9HurOa2rTxCbp5ywF23DFSPDnYI
hpQQmTXrGeA2CekK4/xnYVVI1XAEhKYbKS5rJamzBNIdNY6nQ54Cz7X7RZk+
CSoDt5779D1R0Kd0/qEVIktvQEyVFDjq1fvN+9uB0RvmmqWqBb+CqLrWuFIU
Gk2T2x/LMUmf9f1ithxzQh+UGD6uQvbgGw2WW9UY6OmU0+dfv8En/+Nqsy3/
QVXXa9uMNa3op1OZudo7AYFxA0ElUS2okmx1t09rR0In26M7sQ3FfNG0fkEJ
GI6/TujyCUgaNKm9u9QMMQ2z9iOJKpwQhDLjWQTMsBWfOGTKMdDj3CUPv1wU
u1KHD+nLMOfg11MC4g7alDa9zylsAb5P0Fde0UoUF3mh3YU+4DRKzgdbtyIV
mend7/AAmRGhJom+92B3Z9uevLU6B70nerzlaDo20tBoUIy7b4muOZ1uQh75
ebXBEzVSy27H48W9G35mj9+zktBzmPHew9xP8106Us/MhywAjxks2Uz7gqFk
/7pjWIKBdTt2cY2kKH5ZHHOytQB40zcIYWo8MC31KvXYLWATVpRHnpSh8GiG
j5r2J99Utjnkylkgk+Oe9gYFA1PBOi+dkaFqZH6UT+sLc8tipPR8DFVWowdo
XcY7QcS/4SIwlRaHsRKeoNbc80OmbdfGXrIX7V2qqHKw+TE2/EiPGicONFdQ
/l247lvC021pde/yBsfpcMJct95bLpHWt343ljfDYlvGZQWtt+43rqJKluor
B7L+2MBAbAVG5mvC1/aBKrBveoXuW1K5qfODIg1ouX/8EmGtAElKyJB10RQO
+f5UZtpTDkPughpRcg2oLmZZfMwpgv8BEYtlnQ==
           "], "Children" -> CompressedData["
1:eJwdiXWYDwYAQN+nbWJymJzO6encdB6mxhxOx/zuOKedjtPd3WaaYdOx2Sx0
m+7ueI4/3vu+971MLbsGtYkBhMaLVlBwePlAIDiiXvzoqNolLKRtSKBA0XYf
flQ0MT6yz5jEIjZ7bUs74hCXeMQnMZ/xCXvU3X7KLhOw03cm5K2JeONvvjYJ
hShMUpLxyuSk51dTsMOXpuSFn5OK7aZmm2n4xed+QVq2mo4tPnOzGcjIUzOR
i9x8ySYzs9EsZOWJG8xGdnKw3pys87FrfeTPPnSND8xDXvLxFfm5b0Hu+ZMF
WO1dV3nHlRZhhWUpR1GW+zXLLEZxSlCSMiy1FEu87WJLs8hbLvSmC7zhfMtT
gYrMsyrVuO43XPNbKlGZKsz1qnO84myrM8sQZlqDmtSiNpedYR3q0prpBlGP
YFpSnwa0YJr/O9XvmGJDJnvJRjRmkk1oyvdM9KITbMZ4mzPOHxjrBcd43ijP
2YqzjvaMozztSE/ZhpOOsD3D7UJXOtCRTgzzhJ057lCPOcQf6cYgBnPUAP/Z
m1DC6M5gIxhkDyINZ6A9GeC/9rcX/fzHvvahL3/bjwEMpD99PGJvI+nlX0b4
pz0dQriHjWIowxhOD/9wNL87gpF095CjOGiYBwx1vwHfA7DWJM0=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 4, 3, 3, 3, 3, 4, 3, 2, 3, 3, 3, 3, 
            2, 2, 4, 3, 2, 4, 3, 4, 3, 3, 4, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 
            3, 3, 2, 1, 3, 2, 4, 3, 3, 3, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 3, 
            3, 4, 2, 4, 3, 4, 3, 4, 4, 3, 2, 2, 2, 4, 4, 3, 4, 4, 3, 4, 4, 2, 
            4, 2, 3, 4, 2, 3, 4, 4, 3, 4, 2, 3, 3, 3, 4, 4, 2, 3, 2, 3, 4, 1, 
            4, 3, 3, 3, 2, 2, 3, 2, 2, 4, 4, 3, 3, 4, 3, 3, 4, 4, 3, 4, 4, 2, 
            4, 3, 4, 3, 2, 3, 3, 4, 4, 3, 4, 3, 3, 3, 3, 3, 3, 2, 3}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 3, 50, 19, 30, 22, 17, 54, 15, 55, 38, 53, 
            55, 1, 50, 4, 13, 21, 1, 52, 52, 2, 5, 4, 13, 1, 38, 2, 54, 1, 55,
             21, 52, 38, 53, 54, 6, 55, 4, 3, 39, 5, 52, 35, 4, 54, 52, 47, 
            52, 54, 27, 52, 3, 54, 45, 53, 54, 3, 5, 21, 54, 15, 52, 1, 5, 55,
             15, 27, 2, 53, 27, 5, 5, 3, 54, 2, 5, 53, 1, 54, 55, 55, 1, 3, 3,
             14, 52, 48, 54, 41, 52, 54, 17, 53, 55, 38, 53, 54, 5, 55, 54, 
            54, 48, 47, 52, 53, 53, 54, 2, 5, 55, 41, 52, 52, 52, 55, 1, 21, 
            27, 3, 3, 17, 20, 6, 53, 5, 54}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJxFk31Q0wUYx4cXg8sQjBNWvA04BVQ4ZlkDhw8ThInI7ZC31OKlE5ea/cjO
Jpc67JaIBGQoO0pe3LCtFCYehCI8Y2ywF+R9OnHKmwwEbo18aU6D1l2jP56/
npfv8/089/jnfJG834FEIp2yBYcU41zo+QeYG9tj80KMyK7qeRTn1AAzJnNx
aXYP6AMlot5TjSCui3Tj0IaAXhWW7prVC+xP2w/+9lyDVFXRa/G4FCzai8ZY
oxI5cz+La0oKQHyP97RLdBMtEmbiJmsl8ta/kTrsPQv2+RSf8b4zNl2O2SdK
29gBrNrkJzckCpD93nR/yFZH8Iljey4qMdopJ4ffoETKR6GelgNNWPOjNcDX
04D6lNur3//KsLwf/fN0Xwb7f33uqlUrLr+SAzdJHUz4D6A52XJrqy3P3ejF
v1GuQXuf22Kk41/1XUipuFXBd9kHnD5V6WurHARPdBVC/hjO8MSVYRlNwG1O
a9Ue7kXisSkg19AGPDdj8geSS0gs7ppy6aqHLGLEMdb/IbBiBoM2V3Qvc6Se
PDw3cW4C9QPHt9PWDQErTxhH3tmNLYsSbqJCCOYITFvY2oXhunjuwvpBLBvt
/tO17zqI48p3bfmuG4OtBwTu+hYcC53fsVEzis7vPs3NN9YDQf518u5qxBnH
YnVK0SxmFH/plF2pQXbktvve//L5z5/ZunagYM0szpzf71wQIgaxnFFWuNSF
Zsa4X0xGJZL03BOXg8ahRrhbzczvxLIf2nifvbgNWbvjlxJOSIAgUoktI5PY
r51fjJDIUTBtcu3PaYHwZ1e2+dh03LTl0eccRjD69EjUkgMT9MxrJF3tIPAS
EoL6Nt1DQZ6A995xBfRTz14JXKFAOu3BPLldCVQozfTO7QFVz1XT16hG8d6D
hW0vNWiJT4v59ptBJBUxApk2vmU/fewRXCJCs6+fKS9AB6qjcz4uzzqX/c3s
pTysoxlQ0JG69L38OrCODO+JzVQgNTN2XUqrFjjMuwsNK6UgfeQd7nFBicSD
sg1OdXeQrtJMnOTzQNAR0FDdykPCa8rDuvIxsl4OpzU7NWPLkdFjz8N6kf72
9kyRnwncDr0ZnsTuRFLbeV33lBTs9xO/gLWizUagVKXLh6tlyDL4BZ6d6gd2
X1TBzjEZcEOEoQM2DjL30RAvGy+elLrGsEENNZ9Mkl99+AtwKz3eKplWYrDW
5Jd0aRpk6qzTV1Ud2FKdZfa5IARqeiZNZ/sHuy795mz2taMNIPt73xyZpkMK
oyc/1F+Kdp/2Px075F4npCggI6kmsUl0B6Jrp94Z1p0BqYUyuCNCDv8ARhca
FA==
           "], "Children" -> CompressedData["
1:eJwdiWeYCAQAQN9n5Eh2Mgpnk1l2yBE629nb4WxOd8c568rOrOxV9t577y2i
7E1G9i77dfx47/ve9wJbhYe0jQdEBsQpJDQ6KCIiNKZO4rgI7hoV1i4sonCx
9u9+bBzx3nPI+CQgIQf9iAN+wH4Tsc8A9pqYJOgePyQpb93tG3eZjOSkICVd
6EoqdtqOHaZmu2nY5sek5RPSUZlvSU8GKrHVjGwxE5l57ae88jNeutksBFKC
kmQlGy8sznOz85+bzEFOcrHRfOQnNxvMw3r/NS+fs85nrrUABSnMFxRijU9d
7RNX+diVfskKi7DcoizzkcV46FIfuMRSfEVZvqY0i71vGe65yLsutBwLDKI8
d5xvBeZ527l+wxwrMttbzvIfZxpMFRrQkJtW5YYzrEZ1alCT69bnmtOtRW1C
+M16/God6vK307zqVK84xctOthGTbMZEL9mYJkywKeO96Dib04KWhHLBsZ63
Fa0Z4zl/sQ0/G0ZbzvqTZxxte0Z52g50pBOn7MxJR3rCER43nL8cbje+I4Jh
9iCaSH40iu786VCPOcSeDLY3fThqDH/YiyMOsi8DPewA+9HfWH7wd7/3f0CX
CNs=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 4, 3, 3, 3, 3, 4, 3, 3, 3, 2, 3, 2, 
            3, 3, 2, 3, 2, 2, 2, 4, 3, 4, 4, 3, 3, 4, 2, 2, 3, 2, 3, 4, 3, 2, 
            4, 2, 3, 4, 4, 2, 3, 2, 3, 2, 3, 3, 4, 3, 4, 4, 4, 3, 3, 3, 4, 3, 
            2, 3, 3, 3, 2, 3, 2, 3, 3, 4, 4, 3, 2, 2, 3, 3, 4, 4, 4, 2, 3, 2, 
            4, 3, 4, 4, 3, 4, 4, 3, 3, 4, 4, 3, 2, 2, 2, 2, 3, 2, 2, 4, 3, 3, 
            4, 3, 1, 3, 4, 2, 3, 3, 4, 3, 3, 3, 2, 3, 4, 3, 3, 2, 3, 3, 3, 2, 
            4, 4, 3, 4, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{36, 34, 3, 3, 22, 38, 55, 2, 14, 5, 46, 52, 
            27, 3, 17, 4, 15, 55, 3, 53, 15, 54, 55, 2, 53, 19, 3, 53, 34, 54,
             47, 53, 1, 3, 55, 3, 55, 53, 9, 1, 53, 2, 2, 5, 54, 3, 35, 13, 
            52, 38, 1, 34, 53, 3, 38, 53, 17, 54, 52, 54, 52, 1, 53, 5, 52, 
            55}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJwBHQLi/SFib1JlAQAAAEIAAADYqwmDPxDPP3AbnlJIqbk/SD5DRlDr4z/Q
A1Ce+mDgv6ilOhBoMdM/SKAtDwXIYz8wKVXm6VN/v0CqrPEo3Lq/+JJUbWlL
4D9owfh4HBfcv1CezN5GB68/MHbHzHXsxb/4Nv4SFSvDP5js23hzKea/SEMX
st5VxT+ApYCjMHTcPyDIivyo4bA/aAzZUe+F0L/g+J/7cinmv4AgLYuIgMK/
KNQG5tzJvz+4qAi6VbbdP3Cd0sDDzMy/0Lkz7Dna478AChLanCCtv+BWfq8Y
2bI/qFNyks00zz/Q2JlaVavIvxDmEqgHgKg/+OG5vFY+8T+4/ql4TMSjPwjS
ink1p64/mH8a71aM3z/IyTMzqn+7P1CtfZFEJMi/KETorGSxob8IFZJ6K67Q
v6iyzKGlBJq/CBrzZnrmrj+gDoc4Ab7FP6CNd2gIE76/CEgFf9NCwD8A4PoR
4Ge1v1jZfQixJOc/EGnFCXhN0b/YHk5TCDHVv1CezN5GB68/AL2S1cflsD+w
EOoAOhHIv2jrnKigjoE/2B3WdjJm0L8Q5hKoB4CoP5BXhBlOw5Y/aBDvXFSO
pL9o65yooI6BP6CjeovqFuA/aEHW8a8LsD+IBzyutg3lv/CMRaj018W/ONw6
jzSQ4L+IbbpXyWW8v9jABNFGm7i/0H5ZV7tu3D/Ih2IyQHnEP3CjQUGvvMa/
WOwaAL1oxb8CNhPW
           "], "Children" -> 
          RawArray["Integer16",{{2, -29}, {3, 4}, {5, 6}, {-1, 61}, {7, 
            8}, {-2, 57}, {9, 10}, {-3, 56}, {11, 12}, {39, 40}, {
            13, -30}, {-4, -31}, {14, -32}, {15, 16}, {17, -33}, {19, -34}, {
            18, -35}, {-5, -36}, {20, 21}, {-6, -37}, {22, 23}, {24, 25}, {37,
             38}, {26, 27}, {-7, 30}, {28, -38}, {
            29, -39}, {-8, -40}, {-9, -41}, {31, 32}, {-10, 33}, {35, 36}, {
            34, -42}, {-11, -43}, {-12, -44}, {-13, -45}, {-14, -46}, {-15, \
-47}, {41, -48}, {42, 43}, {-16, -49}, {44, 45}, {52, -50}, {46, -51}, {
            51, -52}, {47, 48}, {-17, -53}, {49, -54}, {-18, 
            50}, {-19, -55}, {-20, -56}, {53, 54}, {-21, 
            55}, {-22, -57}, {-23, -58}, {-24, -59}, {58, -60}, {-25, 59}, {
            60, -61}, {-26, -62}, {62, 63}, {64, -63}, {-27, -64}, {
            65, -65}, {66, -66}, {-28, -67}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 4, 3, 2, 3, 3, 3, 2, 3, 2, 3, 3, 3, 
            4, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 4, 3, 4, 2, 3, 3, 3, 
            3, 4, 3, 3, 4, 3, 4, 2, 4, 4, 2, 4, 2, 2, 2, 4, 3, 3, 3, 3, 3, 4, 
            3, 3, 2, 2, 1, 4, 1, 4, 4, 3}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{1, 4, 3, 48, 8, 17, 2, 5, 54, 16, 20, 52, 23, 
            54, 4, 54, 55, 54, 34, 54, 3, 2, 55, 40, 39, 17, 4, 1, 45, 52, 3, 
            5, 54, 52, 12, 1, 4, 52, 55, 39, 2, 4, 52, 3, 53, 36, 53, 38, 54, 
            54, 54, 8, 33, 41, 1, 55, 3, 1, 55, 1, 54, 53, 2, 29, 5, 54, 3, 
            38, 54, 53, 27, 41, 53, 5, 53, 2, 1, 52, 31, 5, 53, 2, 45, 52, 55,
             34, 4, 55, 2, 17, 4, 52, 2, 13, 47, 55, 55, 2, 4, 21, 55, 4, 4, 
            8, 53, 50, 3, 15, 3, 3, 40, 52, 16, 52, 52, 17, 55, 53, 52, 47, 4,
             15, 30, 5}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJw9U39Q02UcnkZt3eXxxVKGEg3ZLTj7MTiQKdS7dqLLkL7ZMRAlAQOmrAa1
O7mGhNuZUxTix+WItZtN8TsRGhg1Sv0Mwf1ghJuMMUURWiwYh7c7jFtHQF/+
2P54//nc8z7P+z7P84ktEh8oXkehUKrIgzkd+3JzvweDPcKRInmEjCfO5EkS
vEC51ThqntYj7hnpJ6rtZoR/niu5GehBHNlAmFzqQgzfppzoyEfgb3n7jd/u
TQP+MF9skQEiruzChIkjKLC7dWetwgy0LQslX3k70WS61HvJ2gfxCedvHObJ
wPBuTsy5A/PIsMereSVmCOiD+YnPSnyAeTcS1BoCWa69FZbGmAP9r9kf4nMe
NIP1YvVEGyhaNEti+RAEdcpX9k9vMHUimrh4k1xwHVWyNc8er/F/0Dwnr7of
0qevXKVpqCZgnCJ6aLofQNmbEqeOHQP9+orFqOMTYHGxhEnFphDeEkloefhd
EIrX8z21fwJn481hepYZ3MzRS5Y7QxDUrWw/InckkTwcUf0aLvBS0d7TqB/w
4bgLOKnjP8rq9LQ1wbcfpexvetCHlNt0E7QdJO+citDUnULxTykjWYK/YKad
2lDX/RgYWTPji9YpoGwrJBZFXQhXD03sof6E/PmY+rrBiBSGUd8U6wnYd0c1
afl2qBlj8sJLbUARqmeLyRz94ant2v/sQNQxG56QOKKsQ7I8Oo/sgu2Lw6kD
wM9iajuW7oR4+WDO2ErmyG0sXD1L/RsY0c3ZX5L546MlzLTCAuTnnKYJ/v0H
0b9xRec5zVDw8d7VfSd1yLi5bAO38jYS3tJmZ561wmRye3of9Rco2PJ6TMSO
biBU1pULXidwPtt8aCTah+xjr95+/pwFJiMs8bVT/Qj/8aIo46oTscvLDh/C
rCDsyufVk/ig/5q7Ya1bX7ZCLsvV+hzbEerFTEUDnp7XD5oXxrw+hw0YCVhV
2kMPBPOnW4/VrPVYw6t4s+mkBTTKyOr50h5wx+kuD3/djQwrusrMAS0yEqIj
UsEg6L/zvJMsuQEal+pELanP5soNbPJ+EK8PZ30qX+4D7uBOWRI5p6hfXL7m
dIXyKaDiIwvND0J+KmhRs6Xr3kMYPXC/1N6BlLOxqbbke4jz/qrtC9LXYG/j
uydEmVdMob3hH5RFXfQ+Rdh4ka18wY2UOen17j9MaDL2513HG22AoQzVuKwF
3DmMEo/UGPqH4iCIX6tuQ4FjXYmXfb+H3q1Yqm7uPepE/wM2qQYO
           "], "Children" -> CompressedData["
1:eJwdiUOQEAAAAHeybdu2bXfZXXWZl/HLtm3btm3btrFdPXZndjZliy4BrUMB
3SOEKCCwd8ng4MC+tSKGRMXOPYLaBAXnzNf23x8QQqj/hCYMB9XShCUc4Tng
H/cbgYhEIjKl2GcU9hqdPf42KtHY7S93GYOYxCI2eclHHOLy053+cIfxiE8C
EvLdnCRiu9nITmK2mYSkJCM538zKV1OQitR8MSWf3Woa0vLJLaYjPZnJQgY2
+9FNZmSjH8zEezf4zvW+dZ1vXGsO1vja1b5ylS/NRW5W+sI8PHeF+SlAEZb7
zII8dZlPLERhlvrYJT6yKMVY7EOLU4JFlmShD1zgfedbhrLcsxwVqcRdy3PH
Ctx2nresTF/6UYWqVKM6rQiiBjVpxFwDqMVN63DDOdZmtted5TXrUo+ZXrU+
DWjIFWd42ek2ZpqXbEJTmtGcqV60JRcMpAVTPO9kzznJ1ky0G8G0oS3taM9Z
J3jG8XZgnB3pxGk705WxnrILJx3jCUfbnVEed6Q9GGFPhtuL3hyzD0cd5hGH
2p8hDmCwhx3kIQf6F06NAt4=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 2, 3, 4, 3, 4, 3, 2, 3, 4, 3, 3, 
            4, 3, 3, 3, 3, 3, 3, 4, 2, 3, 4, 3, 2, 2, 3, 4, 4, 3, 3, 3, 4, 4, 
            3, 2, 3, 2, 4, 2, 3, 3, 2, 3, 3, 2, 3, 3, 2, 4, 4, 3, 4, 3, 4, 4, 
            3, 2, 3, 4, 4, 3, 3, 3, 3, 3, 3, 2, 4, 3, 3, 4, 3, 2, 4, 4, 4, 3, 
            3, 2, 4, 4, 3, 3, 2, 3, 3, 4, 3, 3, 3, 4, 4, 4, 4, 2, 4, 3, 4, 3, 
            3, 3, 4, 2, 3, 2, 3, 4, 3, 1, 3, 4, 2, 2, 2, 2, 4, 4, 2, 3, 3, 3, 
            2, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{55, 12, 4, 4, 52, 15, 17, 55, 36, 52, 3, 31, 
            3, 4, 15, 54, 21, 53, 5, 2, 17, 1, 55, 1, 52, 5, 55, 53, 5, 53, 
            55, 52, 53, 54, 4, 2, 31, 2, 3, 4, 4, 4, 2, 55, 48, 53, 15, 53, 
            53, 17, 27, 52, 4, 52, 52, 3, 48, 55, 15, 1, 4, 52, 47, 52, 2, 1, 
            1, 54, 36, 5, 53, 53, 2, 2, 54, 4, 53, 1, 4, 53, 54, 52, 1, 53, 4,
             52, 53, 50, 36, 54, 53, 17, 1, 4, 3, 19, 4, 5, 52, 38, 5, 8, 1, 
            3, 46, 52, 1, 5, 27, 5, 31, 4, 14, 47, 53, 4, 53}], 
          "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9Un1QkwUYX3DKojDSlK0DGWq5XWqDAwU8fDgpmJ0aUzhWcceS0GkfGIgh
QYCra2DO9+jQVYCLj/lOGJuSCRY8TPYFw+3VWLxS6BhKI1EXZ4MTit7+wD+e
f5577vf5RO3L35P3FIvFKmJGMurO/s3Ug6HKqqbCL0lQk7v3jZ/wIOvquoKk
t/uQfnUq56MHFix2tX/4aP4KeHXOZfmnLCArK5B9o6OQEMft+vqmEdIf1l6m
JSYkw8LDCwUTqBJ79FP556H3ku71FG09xm9WxvS940JDyq5D/uc1QEmFxvuE
B2S+iCT7RSNQ941kWasVpdyS+h+CfkTRtvpljphhJD8NaGCHGoHn8J4ZLWpH
oSDVWZBlRTadU2T+ZwRlmjjT2KE2kHKOr489ZgLDHX/NwGkHerfcLM9dYUaF
OiQ7htmLklt6hm6NgVvZsjPphV7kK16jJFwLqteIg3szLqFo68GGWZ0TqJD5
9+4y/t1Lq1ZfY/gXfVCr1k+XkBoUPsq6F8n44VWWFyX6R5Fqjm20Mr5sM6f7
bQmjmGze6EgcGUd3ayF/SQCFou/3THZoTUBEGLojyqzorcljVwpIUBymBc8U
9aBQvHCbS9iQyv/DBDMakO5NW3ijTAvkkQPqtDgzcq7zG+8s/AK+7Lnx7c1m
nC34TEnK+1DN9b87EOsEeq222VF+Edh7cxLlyQPIs1XPk2MGIN7MnAvoMYN7
8pW/tjA9elMv5G7NtGLnv9rinaYmcNOPjYTegqpt7X9q566CULthcClzX3y2
TX9M8i0SP/s/sbfMw2K/qo7AoOo2K8bLd9R4pZ1IRKd0dWXVAXuDY0I5MYS9
2wMtTQwOxcq+0bbJDYbuqsgEhpfHcaUM6K+gdFNjfDCDLzlyLqQq7CEQ8se+
M+YOkOoOqMLtiBV5/eTyr6xoKOGuiur+FaX7zfa19RZMr5X+NDV0AyX2aA9/
XT96JWnTIqIP0xsGb6UG6YFufVoOoU7wjVDaszvuoi33O1q1//KTvwndrJ0s
lZeiaCQ4nOexQ+/U3112Jjf3+ytamjgmoLPNzdWMHvcHpuMvhv2Oit1D/LcK
+1F2r45UKyuhM+Ul8WyAF/iRR9krbRqQeU+e43xeipzAo+eXRLue6Cge31ia
kGrFCoi9ZrhOI0dwiv4fj7htnX7OeQHolw/ONkQNY2edIvPZQTtIMmrj4pl8
fKsjH3y8xgWLvRiWz5ysHbPi4YwogYfpvSL5i5CVwzb8D2SS/Mo=
           "], "Children" -> CompressedData["
1:eJwdiWN3EAAAAO8tbdnWsm0vL7dlb7WWV2t7vf5Ctm3btm3btutafbh7794F
R8aE9Q4AhgYmKCxiWEhsbMTw8KCECB0UFxUdFVu2Up9/Pz6BgP8kIjFJ6EBH
kpKMMMIJJIjiHDE5KSjMYVNySE1DKg76x9T89oBpSUd6MvDLgmQkEz8twA8z
k4X9fnefWcnGN7OTh73mICe5yM1X9/jF3X52l3nZaTD5+OQOP5qfD273vdt8
ZyHeutUiFOWNWyzGZl+7yRKU5JWlKMNGS7PBl663LOUoTwXq04CKrLMSlXnh
WquwxhDqUpVqVGe1tVhlDVb63Jo8c4VPrc0T6/DY5T6yHg9d5gOX2pBGtGKJ
jQnlvottwiLv2YymLPSuC7xjc27bgpbM95bzvGlrbjjXNrTluu1pxxyvOdur
zvKKM+3EDLvSjct25pJduOh0u9ODC04zgkhiGExPejGQQZw3inNOtTdTjGay
fZjkWfvSj4n2ZwBnnOBpx3vKcZ50rEMY4wlHG8sojzuUOEZ6zHiOOsK/bLX0
1g==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 3, 3, 4, 4, 4, 3, 4, 4, 2, 3, 2, 3, 
            3, 3, 2, 3, 3, 4, 3, 4, 3, 3, 3, 3, 2, 2, 3, 4, 3, 4, 3, 3, 4, 4, 
            3, 3, 4, 3, 4, 3, 4, 4, 3, 4, 3, 2, 3, 4, 3, 3, 2, 3, 2, 3, 3, 3, 
            3, 4, 3, 3, 2, 3, 3, 2, 4, 3, 2, 2, 3, 4, 3, 4, 2, 4, 2, 2, 4, 4, 
            3, 3, 4, 4, 4, 3, 3, 2, 3, 3, 4, 3, 3, 4, 4, 2, 3, 3, 2, 3, 3, 3, 
            3, 3, 4, 4, 2, 3, 4, 2, 4, 3, 3, 4, 3, 3, 4, 3, 2}], "RootIndex" -> 
          1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{21, 23, 4, 53, 52, 54, 52, 5, 2, 54, 2, 15, 1,
             3, 2, 19, 1, 55, 55, 4, 53, 15, 55, 52, 52, 52, 4, 19, 53, 53, 
            52, 2, 5, 5, 55, 17, 53, 55, 54, 17, 52, 4, 53, 2, 2, 2, 55, 54, 
            20, 1, 54, 53, 14, 53, 4, 3, 55, 5, 52, 1, 2, 19, 1, 52, 2, 4, 3, 
            2, 53, 5, 3, 53, 5, 53, 53, 15, 53, 52, 6, 53, 20, 52, 1, 23, 3, 
            31, 52, 38, 2}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJw9kn8s1HEYxw+1jh19a1rXpTrt4nI6ZyGhPlhmzeaOOISWhq5ZsWSd/OiO
lUv5seqPm+QssUPcpQkpzx3OfRF9T86QNSk5yWLINT/Wtz/yx7P3H8+e7fV+
vx/HS6nhSRYUCiWGHMq7h0b9tBphxfeq0guUCEuq2n3yfBfgQVzxWede8NZu
pl+t1IM4y40Q3p+F0hnLc5GsGdTKfx/H3DsBygkDb+lyM4ga65+MzfeBCWvD
SpQ1INKVa0Ia+xGVscgPEOgAc7E9PFTTC/6MUAaHrYFJYa6KPtaEcAddYHb2
EMhermxat+EwSegzDPsM0BoRzEgPzAOMzu5vWGkHJl64rvyiRkSl1KuURgA9
HuLldjowSQfNI649wJvzXlqwJLU78VgteWeSKMu40c0Ic6ZN40QbpKUsthD7
e4HOUalNJTgIfk/6F30fBubtgvUDG+1o9KargkGqoDGXH8oygDLLsoKKaZFo
NSoocXYEye7GlTlsdACPY+UV2ToH1NSkPfnCFygtThR1okQHC1zFITzWCNQg
v9hcIw7MfM1O1VonogfGcqtJxcxu8lz3auRfIx6osO8HuRP/l0r6DZTVPpjI
/SOSuGyLHHb4gSTjIWqrM/OIXhHVOazQgNnWfkxr6kG8xzEtfX5doElwbfYl
+zEnugVTa5+CLLGQheVpgaBZn/LJ7Ebi5ebrC8Fa4D2T8uw6dEh2NCWgmPT5
P4/SHHWDILoMZMI/WqJbDzIbpqSO5DOxlx543phA9I7PlEGPD8g787jnv3wE
b5JvmV2aQOKUPXSEzEeZcUegJ/diCWfAka8Ds3WX9UHyD3D51wTmNR3ytogK
CtnRsdUXJg6bdiwfR/S3leYcm1dbHAT7wq5w2hT6758tmrVYky6jUkXKIw+S
jxpxevvq63ZkToouCy1+DvKwKdXP1DqkuVIbbcjTg8CYzPJNuIhGPxVx6kn+
vwghcTE=
           "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9FFEUIkRXKHoXM6JOVZHxl9GPuwk/cfXXn/EOyGpRR9t4j
VLK3UvaueD5+eO/u3UvauC24KQIojgorWLg9EAoV7siLDkf21pKizUWh1PQt
/35BmIj/dKErkaxlHd3ojubxx7tGEc1ve9DpGnoSQyy9SOWOvYmjwzH0oS/D
uG0/4hlKne32J5FbDmAgCdz0l4MZxA1/et0fXnMIV/3uFb952a8OZwRJfPGS
I7noKC742dEkc94UzvnJs350LOMYzwQm8sEzvve0kzjlZKYwlZO+84RtHjeN
Y05jOjNIp9VcZnLUt+Ywi9nModa5zKPFGjOYz1KO2OwCFnHYN2by2gALOWQW
B31ltYtZwkurfOEBl7Hf52bzzOU8tdInruCxFa5kFY8sdzVlPnSfQfb6wD3m
s9v77rLJ9dyzgEY30GCp9e70Lz1/vPI=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 2, 3, 2, 3, 4, 3, 3, 2, 2, 2, 3, 
            4, 3, 4, 2, 2, 3, 4, 2, 4, 3, 3, 3, 3, 4, 3, 3, 4, 4, 3, 3, 3, 4, 
            3, 3, 3, 2, 3, 3, 4, 4, 3, 4, 3, 4, 2, 3, 3, 4, 2, 3, 2, 4, 4, 3, 
            2, 2, 4, 3, 3, 3, 4, 3, 4, 3, 3, 2, 3, 4, 4, 3, 4, 2, 2, 4, 2, 3, 
            2, 2, 4, 4, 3, 3, 3, 3, 3, 3, 1}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 53, 39, 1, 2, 5, 33, 17, 52, 52, 2, 10, 23,
             52, 53, 55, 3, 53, 19, 5, 1, 1, 1, 4, 7, 15, 38, 53, 54, 19, 6, 
            55, 17, 53, 13, 55, 13, 2, 3, 17, 19, 54, 31, 3, 4, 38, 5, 54, 21,
             54, 2, 15, 6, 8, 55, 53, 54, 31, 54, 54, 54, 52, 48, 10, 53, 2, 
            1, 52, 54, 19, 2, 54, 55, 5, 6, 55}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGDwAeINp/KSjkdf3V+wXW1PHfvx/RMCtk/elrvC3iDx0oNp
9y7YTyg0eXLB6Pp+CwXBYNPKI/YB887cc2Nfb38i56Sy5a8l9gnta38/Yz26
/4bHlTOT7h/b76GuqZK4Ytn+C5N7v3Z07rTnkPqcVvVsnf2FB1/n3QDKH/hj
3Odx7dD+jJdv3s242mPfwPc2wf/1Y/sLa6KaP8e8sH/RsGKWXsRW+4ytTYWW
QPsmHNR2122p2V9QepTngdr9/RI3IxjMI2btX2Fx7qVt1OH9N1ZzNtsLnLc/
MSfhbJ/2IfuM13NWLOhrtG/YpJg+o2+TfUUr39qzYg/tH2QLL10scQRu/odp
HY5n4h/YZ1yPTl6pesJeoF56erLUif03lFcuOVe/yd7hzSXbfazn9nssDHq5
eSVQn5scw9rfh+w/GO+bdsbkvP2F/OdH7L8vg5uXcOvdlohDIg4cTQ9ndW/Y
b78joyb3OFCdgCRbT7f4e3uN6S8CfsgF2v8QVGE0+rvb/kBWbe6C/hdw+yJm
+fwqrny1/4WuSkL/syv7FU50/VnxcAPCvY1fRTOe7rU/oSuf05F0eP+KF/9c
L1ybtn/BWwWzXXVAfqXHZmvHg/YrnF8ub4t8sZ8juqrRKPv5fgG5D35JEi/2
B9T2TMldgfCfxlLFSXOvH7R3eLc59dXuE/sfXF1nZ3nr8X4Blqs6H7+csZ/B
mjppptTJ/QfU37zNmfxyP8wdJ6ZNK1gBDAeDLc86bZa92J/A9tg6Z9GR/QHe
m7xexly2fxBWt17i5ib7HfX/dlrynNgPAETySy0=
           "], "Children" -> CompressedData["
1:eJwdkFlTjgEARs9kq2gRKYl82SWVJUTpK1roKr+gZsKVZj5mTL/L0kIRihKl
spOIKErWSHW8XJxn5sxzd0K19dUno4Cz0cFU15wPRyI1DSdiAqk8c67uVF0k
L//0v78qIOo/C1jIIpJZxWJeuYRodMgYXrqUZcTywnmfG8czl/PUOeNJIJFZ
n/jHxybxyBU8dCWDzjhgCqn8tpzVpPHLnayh3y08MJ21rCODzfS5nl43ct8Q
98ykx2k38NO7bqLbH3b53TtuZRvbyeKbt91Bp1/N5osdTnnLz+aQSx672E0x
N510D3vJZ8Ib7qPdAq67nwN88pofbfMgrY57iEKKGPOqHzzMe68YpsUSSjnC
UUYt453NvrXJERutoJJjXPaNl3zt8aDXRYe94F9EsKL/
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 4, 3, 4, 3, 3, 2, 4, 3, 4, 3, 3, 3, 
            1, 3, 3, 3, 2, 3, 3, 3, 4, 3, 4, 3, 2, 3, 4, 3, 3, 3, 4, 3, 4, 4, 
            4, 3, 4, 2, 2, 4, 3, 4, 2, 4, 4, 2, 4, 3, 4, 3, 3, 3, 4, 2, 3, 3, 
            3, 3, 4, 3, 3, 2, 2, 2, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 3, 3}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{13, 7, 39, 55, 54, 2, 3, 30, 55, 52, 1, 17, 
            55, 8, 55, 53, 2, 3, 53, 55, 1, 53, 55, 2, 31, 48, 27, 53, 1, 15, 
            5, 1, 17, 3, 6, 2, 52, 1, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAABIoVLps6nEP5i0qGtYbbo/kFC3k7ZtqD9g
zyufgBmuvxAWDFEpFvI/cABnd8wy17+AV34AT+vjP9gjqaTOf7I/IAcP6VBp
j7/wftzns8fGv1iDOczVHOo/WJztluAVyT+IS7VxCpDJvygfdggVyKY/8AJl
qQbHw79wZd7OQJTLvzA4oQYj3Lq/2IkCQnapnb/ArotvfVbcP4CwIBXcK8k/
gNHi89Qc6j9o4L6jMnveP8CKExFG5FC/ENVmJT+R3b8gG0LHDmTBP9gjqaTO
f7I/OLnqYa1zrz/Qy/hV47G8v6Cc/V4CIsS/eNWubfT8uj+Q6nVjO3nEP7gM
BzaCfNK/aEHW8a8LsD+IiY65yjTPP+BrE6WjGMQ/aGJ4RtNCwD9wFt04ismy
PyB1bDJX+sE/AL6NgDtQxb/4VKCn
           "], "Children" -> 
          RawArray["Integer16",{{2, -18}, {3, 4}, {5, 6}, {-1, -19}, {7, 
            8}, {-2, 39}, {9, 10}, {34, -20}, {11, 12}, {33, -21}, {-3, 13}, {
            16, 17}, {-4, 14}, {15, -22}, {-5, -23}, {-6, 18}, {-7, -24}, {19,
             20}, {21, 22}, {24, 25}, {-8, 23}, {-9, -25}, {-10, -26}, {-11, 
            26}, {29, -27}, {27, -28}, {28, -29}, {-12, -30}, {30, -31}, {
            31, -32}, {32, -33}, {-13, -34}, {-14, -35}, {35, -36}, {
            36, -37}, {37, -38}, {-15, 38}, {-16, -39}, {-17, -40}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 4, 3, 3, 2, 4, 3, 3, 2, 4, 4, 3, 3, 
            3, 2, 3, 3, 2, 3, 2, 2, 2, 3, 4, 3, 3, 2, 3, 3, 3, 3, 4, 3, 4, 3, 
            4, 3, 3, 3, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{55, 31, 15, 36, 3, 5, 14, 3, 5, 6, 30, 3, 54, 
            53, 23, 52, 55, 55, 54, 54, 53, 5, 3, 54, 2, 29, 33, 52, 52, 55, 
            41, 1, 54, 3, 47, 2, 3, 5, 5, 55, 54, 55, 4, 5, 52, 3, 4, 5, 55, 
            54, 1, 17, 1, 1, 54, 55, 53, 52, 55, 4, 52, 1, 53, 2, 4, 30, 54, 
            53, 1, 53, 52, 4, 2, 52, 52, 4, 38, 52, 3, 55, 55, 15, 2, 3, 53, 
            55, 31, 35, 5, 2, 48, 4, 54, 2, 9, 1, 3, 55, 1, 2, 45, 52, 46, 53,
             52, 54, 53, 45, 45, 3, 5, 54, 55, 54, 38, 52, 55, 38, 20, 53, 53,
             4, 21, 2, 47, 54, 50, 2, 31, 2, 30, 55, 31, 52, 53, 3, 3, 38, 54,
             45, 15, 52}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJxNUn9Q03UYniG4A60BKjMBB4YOixygNij8rLzDcQEOK1k7BOSXawiMwQUZ
nWwVKiSgZEMobidjfQGBpZMbIb5LBgwmuJv8WJwpMNgWOBhiSPLj+tYdu/74
3Hv3eX887/M8r09S1vHUDQQCoRR/Y1rO6EzB10AUjVeVyAGpbN1zqSl9qFKB
pbMzfkUEmeR4rr8JGKcGEmr3jiOb967ZbN8hRK84HEgxKIEYenlKgv9bZm3f
lZ26jwy766UD524iYrBAlIP3sUUXY5uu9oGEX/B5wBECg/j6QtpZUzNayrYK
ezqFiPoM/vhYPwDKIteo9xO6oNxl0coWjAA1qdi9iKZBmDQxO8bpJvA7lIYK
hhk0H6g3CvC5TMHWO3NhOmBoDfGNy/cQq+b+4/BNLfZI9nxiq5X3APfAj1GE
PzVgE2rmCpx0wGrY55mSXo/Y33a2D3pOIyqJm/wcWRHz8JFw1owRKdfq8yPV
tQi7XPZuqWkQysXff/of3iGJ0MvjESydfXvVG4+M6EQ9pbUfDEmE0HR9G2IO
PltQhPcDdvSOaapkAhhz/i934nU2TFtV9U0P0Dy2erVvHwHCfOTTg7mPEGs+
hLkDz4+19ok+ND0AQ9yr5d1uU0CkconD+F66LLMavZAhQmwmUb06CqTg5dpP
qpVAvl5tzUuehqUoXtMhYT/IH3vStl/FdStbIJ0Ud8GYVMtZiNRCfm8YHOB0
QuErKaX0Td1AX5xRdOFz+E4NxmFXAHlcayJHfxsoTaJ+I77vum82i4D8ou13
RFtxDpFa28DgdmKLsEAPZFnmRIJPN+jW7m7ZeUYNmJhxbvLfvvM6xyxMBpKX
l/5WDKiBzpuouRXcCRZJyFdBOD5hb9/ccvgxJPF1VHuMd4PFnO1MDByCsaIh
+TZ1MWAOw2/5mfrAciWVKPTHEPOL8+37qCoo9OKIL3BkYLOa2bt1o8hiSef4
7tFBZcxEy9OsBrvPF4p1LTU+I8CcpzQ3bR6285A/WWnBBoeBG1EY857IjOQO
ETdKcD/t92fl54pwXuyfg8QZ1/WItvm3fL9eXM9sXvVRVhfwb9X3PD99217P
fJPlKY9shHVc7i7XK+4HNWCQ+1Tm6TWQnxPqnnliGoiCbUHJxxT2vvVIDneM
6Jf1AnXPSdkvb5gRt/xLv4E8IyyJGaPRETogNUmdBx5MAkafCZhVFCLDxgJe
WlEvqPZT0EScDjR1Pyy6qj5DWF0oiRv4EMmd69ccE3qB7hLo1thhRRIsOun/
PtLTMqKpuI7r9zwWFuiv7jDa9yev3nCZx/mt65n4WtaGS7g+Ku+VgGsPW5G8
7gyFFevCoDXf3c+UdqLKa7yfZnh/IaqxooKkVSFmfO5p3b0eUErqJt8pldp9
xlL5OzLiV+y8KZriFWxcjqgf5ZAd8pXwD3heYQE=
           "], "Children" -> CompressedData["
1:eJwdiXl4DwQAQN83wpRIVO67HKlEy82cDYUtV0omOyjkt9nlmo0Nmyn3mbvI
TacrVJSo3EKlcisq9/mMP977vve9Cr0GhEcHAXEFchUemRgaCEQmRwTnRlj/
+KiYqECtkNh7PyeXoPvkIS8PkMIG87FejSc/BQhmnW/zDgV5kIf40hi+sBAP
U5giFOdzH+Ezi/GpdyzKbR/llp9407U+xuM8QQlu+DLXXWNJSlGa1V5zlWUo
y1XLUZ4KXHGlFVnhkyy3Esu8bGUuWYWLLvUpqlKNj63B0/xvdf5zif9akxep
yzM8ywUX+xwfed5a/OPz/G1t6vChL7DIc4Zw1oWesR6nrc8pF9iAhjSiMS1p
RRPme9JQmjLPE861Gc1pwRyP+4F/OdvWvMSftiOMWf5hW9ow02PO8Hen+5vT
/NVXaE8HjtqRTkw1nClG8CpHnOxhJ9mZLnSlG78YzWtM9A16cMjuvM4ED/q+
b/KePYnkgOPdby/eIsd9jnOvvdljFLvN9mezjGWsfRjjT/blR0fbj0zjyLA/
oxzAuwxkpLtMd6cBfjDNHY7wewfxnQkkkmoSw91uMtsc5mCGMJShDieVbx3G
Nw5xBIMdRQZppPi16Ywk2a0mmUmiY0hwNIPcYrybHctXZpFNnOMIuMkcNjrQ
u39BJsw=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{4, 3, 3, 3, 2, 4, 3, 4, 4, 3, 2, 3, 2, 
            3, 2, 2, 2, 3, 4, 2, 4, 3, 3, 4, 4, 2, 2, 3, 3, 4, 2, 4, 4, 2, 2, 
            3, 2, 3, 3, 2, 2, 3, 2, 2, 3, 4, 3, 3, 3, 4, 3, 3, 3, 3, 2, 2, 2, 
            3, 4, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 2, 4, 4, 2, 3, 3, 3, 3, 2, 3, 
            4, 3, 4, 3, 2, 3, 3, 3, 4, 4, 2, 3, 3, 4, 3, 4, 2, 3, 2, 3, 2, 3, 
            4, 3, 2, 4, 4, 4, 4, 3, 4, 4, 2, 3, 1, 3, 3, 1, 3, 3, 4, 3, 3, 3, 
            3, 3, 4, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 4, 4, 3, 2, 2, 3, 4}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{54, 5, 4, 55, 53, 53, 53, 55, 55, 52, 16, 5, 
            52, 55, 46, 48, 5, 52, 2, 53, 35, 5, 52, 2, 1, 4, 47, 5, 55, 52, 
            4, 5, 2, 2, 53, 4, 55, 55, 3, 1, 2, 55, 2, 54, 52, 52, 2, 1, 52, 
            27, 54, 5, 53, 55, 21, 54, 4, 30, 19, 41, 4, 3, 53, 47, 2, 2, 55, 
            2, 55, 3, 54, 31, 1, 3, 46, 1, 3, 53, 52, 53, 38, 20, 53, 2, 52, 
            14, 29, 42, 52, 2, 53, 1, 53, 27, 9, 2, 54, 4, 54, 55, 54, 4, 54, 
            47, 52, 55, 3, 53, 54, 55, 1, 5, 52, 4, 4, 53, 50, 17, 17, 55, 55,
             15, 1, 3, 2, 15, 54, 4, 46, 55, 54, 55, 52, 53, 52, 1, 4, 53, 41,
             53, 52, 52, 2, 52, 5}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJw9lFlQ01cUxkPG1sBQjWNVSlkFG1BpEWgbSvEisoSlJYh2QitOYEqbGUsT
h9oiuwGGKKIBLVBkJ8SACIFC2T1JyAaypMhWQAmyGFZBEVAi9M8DPNync849
93y/71zzEOaZUB0cDpeGHRVZXpGapAbbjoXHxodGQJliG2//fSuwEjzi3rOU
AyW506jpagMiZ+rsC6qRg8Djw7fzD9qAes9KL2tBCYQjhEKfC91A6230dCJh
8VSSKCGgDglOuipX8RokCPEgLrGloMlU2aRG5wA1r+Opx+5KNGhRyuuKq0aE
lL/vfV1WhbifNoyT1XLgniLoe04MgPCDaTth292d/KzP7aP06yRAkcr15jKU
UHDfpCwuqh/Z9vqzdj+UIatcmaHdbyOofqM0wldajOKz474tJo0hnFua+0BX
O5it/Mgg5SlgbWPpctBIC4qgOEjsr0iR7aqr6PpUL2iCtNlF4aOQJe1oLcQp
wIBflXbdlQ2LDN6cKKoTVBa/joaPdcOaTqPwLV0NqpTdpuJ3Q0Dz1ehHC/hA
WdO9c8dYBYzZlFzHoXHgZEQPnz6oAXrcKp86JgezGQ5T7qIATj5X7NJTC5wj
9GfcZi5QjKP1BS1ioAd4bnrHlCKRaY9xU98EFMQU/ZRjPgCahIKVoZFUoBYL
SzqzVYBrSe9TTAqRWUvsceq7ERBtFMY6YLwYi8bOj6rFSH1xf0mxgRRlic9t
pkqqkGBmiei0xdNBm+h2kwcUXbmd45wMtnWK8Ev/o0K/H+j1Z7tf/lwLBR3r
kmNRT5GBr9pnay7u2OXXdYYqIOfy9rhj9WsuV9jzZf0I9+S2D8dPiDTTj8Rx
0T1QgO8d98bi27zqL9zQbnFx2YiMpW7Vbe43VKRLIf68N+CTFEAOO1vlFypF
ZGX7s9ikeCQo+YrIOPEYcUu56Xffn0UGu8iaTrsBMCv6iGuGl8GiienCpcN9
aPt+6lAQU8kGJDygVYhI/0BEQNDyMvZ+W62eI2++AeLPdOvKMT7cNrZh5Mww
IjfMBD8Ir0TEm9eKw5MFaO0TVvsElr94bNPz4gTW9xzzi/u9mA7j+esxpv8i
UUiN5SlKJ3CsM5oPs9TA4v21IPmhD2h4kt4cBe+yrZ+KfzRM4/wEEZgio8Tz
r5Cq08LrkvUU4FxJt+urREB8zjX/cgXbE4LOiUndbrAKbPgz8MYoUt8iZFZZ
PkcFrJqF8mEZMKqHHYIxX1JtCV72mI9p5ey9kboPd/QkMEMPJHxXjmhvvHr9
kpsQrfbNi4YIFdA49Gv++1SgSQ8lXLUWIIpJzrQ7LRusVmllEoduRHb+ZeR0
vhhF9FWELWsbEaWmsp396iWi838PTDn0YkdPQh7ey/JjGagS9QNlxweBsGfY
bZarBKKNl1OaqBmEBlpmPrsVXPgkOqurGhg6c0e9sT6M13aOn2H+oqNdg6ST
yh3fZUkm/3M2awRRYf83wuApRDRU1hcXjSHWwSL/W9i+KddtNve2VKDBylQP
I+zf+R/3wnE4
           "], "Children" -> CompressedData["
1:eJwdkmeYDwQAh9/nrCNKVimE7JEupSGydWQdMrLudEfijv+dO+e2Pe64yw5l
b9kyUkYoskdGw4i0l1HW29WH9/c87/P7+laIiAmLCgJig3MnLDyhcSAQntix
YK6ERsdF9osMhNTr/9+fk0vQ/+QhL/l4nhfIz04L8QAFCEY/sSAfe98dFqYI
9/zIB3mIpwmhKA9z1+0Wozi12WYJtnrHLZakFI/wKLf90NI8Rk02+zibLENZ
/nGj5XiCv91geSpwyxrctCJPUokbrrcy66zKWquwxut+4F9W40+r84er/d1V
/mYtfnWlT7HCOiz3F5f5DEv92SXWZbHPssiffI56LPRHF/giLzGYIdTnZX4w
mgY0ZCDzfYVGvM08G9OEa75vU5rRgpZ873s2Z65XneOrhNKDnrRitm1pR2ve
9TVmecU2fOdML9ueS3akA2FcdIYXnG4nptmZ1/nWqXZhil15x27k2J1s32Cy
3zjJr+1FP7LsTaZ9mGg4EfRlgl8ZyZuM97zjPGcUZx1rf97ijAP40jGedrSn
HOVJB3HCkR43hmOO8KgBYonjiBkOJZ5U0kgg3WRSGEaah03kkMNJItUvTPGg
yR4wyXSGO45EMxjmCBIcSbyfO4rRjOEzx7Lfoe4zzr2O51MnMJFYMwm4xywm
McTJDDY7t6DdxrjLaP8FBgYsyQ==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 4, 3, 4, 3, 2, 3, 3, 3, 3, 3, 2, 
            4, 3, 3, 3, 3, 4, 3, 3, 2, 2, 3, 3, 4, 4, 3, 4, 2, 2, 2, 4, 3, 2, 
            4, 2, 1, 3, 3, 4, 3, 3, 3, 2, 3, 4, 4, 4, 3, 4, 2, 3, 4, 2, 3, 3, 
            2, 4, 3, 3, 2, 2, 3, 2, 2, 3, 3, 3, 3, 3, 4, 4, 2, 3, 3, 4, 3, 3, 
            2, 2, 3, 3, 4, 4, 3, 2, 3, 2, 3, 2, 3, 3, 4, 4, 4, 3, 4, 3, 2, 2, 
            4, 4, 2, 4, 3, 4, 3, 4, 3, 3, 3, 4, 3, 3, 4, 3, 2, 4, 3, 1, 3, 2, 
            2, 4, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 2, 4, 3, 
            3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{55, 22, 23, 4, 3, 15, 31, 5, 53, 54, 6, 33, 7,
             53, 2, 29, 19, 54, 19, 5, 4, 38, 4, 54, 55, 54, 54, 54, 5, 21, 8,
             53, 15, 53, 3, 55, 39, 4, 17, 4, 5, 52, 54, 3, 53, 38, 1, 54, 4, 
            54, 31, 10, 2, 6, 53, 55, 2, 13, 53, 53, 5, 48, 54, 1, 5, 53, 54, 
            53, 52, 41, 47, 53, 53, 12, 5, 54, 54, 54, 1, 55, 48, 54, 31, 55, 
            55, 54, 17, 55, 8, 1, 36, 55, 53, 2, 3, 53, 1, 21, 3, 3, 17, 2, 2,
             1, 3, 55}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJw9kn1QywEYx385abtKc+6EOY1yhsMiIS+PJjPvwznjRKu4qNR5nXBNHTcd
Z5LMIrmiZbHR22TzrMyWTBut2Sx6IZbXqWvmpZ35Y/54/nr++Xw/3++ExIwN
O/0IgtjjPVpzddJu+X2U3oihpES2Amls/66s93dAGG3TC0O/AV3qadg35T2K
zqsFu10qEK/vln/OuAVibXPrjyEOUBiNfWESPQoH8zbHxHVi5p0rwK9pAE6x
4Q0rQA7iamkqN70eTDmWNcQvHfI3X1pV+bvx/98hkEpmcGsg0/6Ckh/RBY6v
zjPneAYQXZ5eOPeIFkgROU+iD7QDI0AGIWY2iAdaqf+4GAa/gih/OwgKLIN7
H9UjJ7fj6LpR7eCIm1M89mcvcknXGo6GfUTu4qdD7WUdYA2vKGvJvgdWpNu7
nVJQvpaVzyTdRlpT3h9plwJooR6VIl+PHO01VnOUEay2PXUdZB2KOHUXatOl
oCnRMWZufYSmjA9a+HETmoJYaYUeMxAHA1vmezkzS2Nj5SodujcmyQqqjOj+
NCtNNeoliubWtAXMfoy0RPmCxpPJwCUygxsHX6GTIalgyF4h+8u6MAMzBxUD
fsuCRr9Fn1/ThbMDwtP3gb7DdbHolwF9npTxTUP8Ch+jKHlDiMJfi6Tlb8xl
Xp++fITt8KJjD6YDhTzmYvSZKliS3VF50mBCQp3fpu9RgDLf9PAW2QXuQ+FC
y7iP4OAu39QYUIuaRTHB7EtqFPDu9uSyv0CK2dk+NEuLDGF4qiFaj854SnGl
UgNKTwV/tbYUEorSmdSYOuSXl/J1TD36drNE4OZRQ9vRdP1sZJ/6LTombVow
hdMFNN7TVWuTvwN9e3Zcr60aHKkTQnIGm8HHZY1a8eLDqU6kUZn64ckNkEK+
WdU1TAedkzl4OHUHupuCOIcGepC+jLsvuKQeNPUtvbX+EiQm8qSutLvgiEhk
0tQWtMrIuUAxQkI5eurOvQOx6lmR64YO6dOuTu1hGdE6fu1GUmQbsvf3H8+K
9/aybQt/Klfy30/C9q9g8vZfQu1OOqG0Q0qs5bs8UAHuY+6l/3ZL6mPbnjM1
IHje3W/2+ptHCeQtXFmAmryRI1jvOPgXHAzElA==
           "], "Children" -> CompressedData["
1:eJwdkVVTFAAABnewwMTuQLETAztQDGwPuw89QB905nTG8YfY3WAndnd3d3d3
rqcP+83sfI8blzYxkB4FTIqOTCA4JSkcDk5NjYlIyoTJoYxQOCEx898/PkLU
f3KRm8v24ZJ5yEs+ounNRWPITyEKU4CC6AX/eN7fnrMIZ/3lGWMpSjFO241T
FqcEJTlpa9pQitL8tAw/PGFZylGe4363JRWoSCUqU51jVuGo8RwxjsNW5ZDV
OOg3D/jV/dZgnzWpRW3qkEBjvliXetTns3v95B4/2oAPNuS9jXjnbpvQlLcm
0oxdvnGnr91hc7bbgm2+cqutyPGlW2xLO1642fZ0oDObfO5Gk9jgMzvSifUm
s86nrvWJXejKGh+72hRW2Z0e9GSlvcj2kVk+dIUPXG5f+hEglUyW2Z8BDGM4
A1nqYIYwiCXed7FDWeQ9F3rXBY5gvnec521HcstR3HQ0NwySxhjGMtcM5hhi
tunM8rozveYMx0UqXXW6V5zmX7y+3uE=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 4, 4, 2, 4, 2, 3, 2, 3, 3, 3, 2, 
            3, 2, 3, 4, 3, 3, 2, 2, 3, 4, 2, 2, 2, 3, 4, 3, 3, 3, 3, 1, 3, 3, 
            4, 4, 4, 3, 3, 3, 4, 3, 3, 4, 4, 3, 3, 4, 2, 4, 3, 4, 2, 4, 4, 4, 
            2, 4, 3, 3, 4, 2, 3, 2, 3, 4, 3, 3, 4, 3, 3, 3, 3, 3, 2, 2, 3, 4, 
            4, 4, 2, 4, 3, 2, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 3, 3, 4, 3, 3, 3, 
            3, 3, 3, 4, 3, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 8, 53, 53, 1, 3, 53, 41, 4, 53, 55, 2, 4, 
            23, 31, 55, 14, 1, 2, 13, 48, 7, 9, 52, 3, 2, 6, 5, 53, 3, 6, 54, 
            54, 2, 47, 55, 54, 5, 52, 54, 15, 53, 52, 53, 19, 5, 53, 54, 54, 
            53, 53, 55, 55, 1, 1, 3, 53, 54, 55, 52, 55, 6, 19, 55, 1, 1, 3, 
            2, 55, 23, 53, 4, 55, 5, 1, 27, 2, 41, 52, 54, 55, 3, 39, 5, 33, 
            4, 54, 54, 5, 4, 52, 54, 55, 2, 5, 1, 48, 29, 38, 17, 53, 55, 47, 
            53, 55, 53, 54, 35, 12, 42, 3, 4, 52, 52, 54, 55, 36, 54, 22, 4, 
            54, 5, 4}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJxFkntM0wcQx0uYwnRgYRutwnhIpkQ2qYONwjavhSDdhKXAJMSIVjewsZAW
mLMrIgWSWUCw0WxrUEYjG/uhs7COR+V1rbwKLVgoLQVBeYkFMwRhiVFh+5EM
9sfl/rjL9+6+9/E7JYxPcaBQKNlkEJ0qf1/aGMpDE9jpXSpIahgMG1rSoyxn
yHpO2YQao0OO9PwgMiNL2Nwn0yDq2J3Wx+pBrYfAhSVuAy2z1u4abgPq60u0
ueUeZEXeKBgvuIMTgXvrmaPTqAw+GjVVPIXOu5ZTJbMqmHDTBxRPtgMlLPPY
jtv9uOjts5Cx2wKi3/ihFq95UD4ccPyRqEJK6xVL96NasPlX/9KfqwZ53Iex
V0d0sKHDO7ul8ep8J8qcd86ddmCDXOQvks8OoV1KlO1Pqgf7zHCqx2ozMByH
dPGuahRHJXieqi7frCepHl+YjbDBc8eMF1PNVmRG32QZPxhGzVq1OKajEjSG
UPNBahc6m4P+effNeeTHe+wPJvUokvJtMv9uVKRGeb0f2Iu++qJXxGQtLFpd
tEjTo+arQeFjeicSmty+p3eqNufxdkrK65wakGP8Lkv45SjYj1sk4pUqkOud
fUr2/Q0cl3OfVvgRIO4Wuj8P5AGF3pbvZNOj/dmemIH5DlRk3js8d1aFREzV
S+3qKPKnG7av/4N+Js9nlqEGbnRZWuHROWQYXlDY9AHUchIOnVjoQl5u07Vb
xq7/ffkvm97w2bYQ3ofik8N/tZN6xMiNlLtk5sUecHrbpsEAY8jJvGwryB7I
llpqTEgtLazMukiAzdU0VXn4LopfvkNLH2sFaun1EyyZCYkc5VsVfsPIXB4P
mdzzEFmFgsz6kjaQBh3cNRGhBe7NfV5fC6qB4CS614n0aIoyTap+WgFCLRgr
EhpQ/Dl7SRdyD0RrsY9cSA7prufd17nk/mx8cMipBpTJYTOMb8bARI9bybzc
CNziW5PHmu6DJutMgA/Zx3BTm2W0pyCVBeORVx1IJG4tK3hvCJNWLuVcYeqw
Ni+yKLxCB9KL5mRPsl9r+daQ3SLHDb425vCfXCeUpXnAZ1uXarbXAv/aR2u+
M+Og+ELCTHAzbfKh96SZ4bN2tAv8duSv9oJibPG26nQjco4fKU4R2Tf33uCV
O5os1OcjLH4clW9Yv1P1wyeF5L72Z1tae/u1SC8O35r6Rzf6LiQmz91vQf33
cWV700ygqCMESelNII7OuPSnczMQv4ZT+QfMIP39NYv3hSrSr2p6DGcCNREl
Kd7kXdSekdUg0qd/AVYRB08=
           "], "Children" -> CompressedData["
1:eJwdiVN0EAAAAO/lZdu2bZtb9qplLtdvtm3btm3btl3X6uPuvXuXplW3wLbh
gJ5RwhQY3LdMaGhw/6CAsKjStVdIu5DQPAXb//sDwwj3n/BE4JgRiYQeNTJR
iMYR/3jYAKLy20P+8qDRiUFMYtGO9sTmgHHY70/3GZe9xiM+CUhIG/aYiMQU
YrdJ2OUPC5KUZCQnBd/d6TdTkp4MpCI1adhhOrablm1+datf3GJGMvHZ7GRm
s5/MShY2+dGNfjAb793gO3OQk/XmIjd5WOdb15qXfLwxP69d4ysL8NLVvnCV
hSlCUVZanRoUozjPXWEJSlKK5VZkmaUpQ1nK8cyllmeJT13sEyvw2EVWYqGV
qUJVFvjIajx0vg+cZ03mGkwrajHH+9amDrMNJIh71qURs7xrPeoz0wbM8I4N
ue10b9mYJjSlGc256TRb0JIbTvW6U7zmZFszyatO9IoTDGG8bRnnZcd6yQ50
ojMdGeNFR9uFrnRjlBcc6XlH2J0ehDLc/gzznD05ay9604e+DPWM/TjtEE85
2JMO4IQDOe4g/wKVGgDf
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 3, 3, 4, 3, 2, 4, 2, 2, 4, 3, 3, 
            4, 2, 4, 2, 4, 2, 2, 4, 2, 4, 3, 3, 3, 2, 2, 2, 4, 2, 4, 2, 3, 2, 
            4, 3, 2, 3, 3, 2, 3, 4, 2, 3, 4, 3, 4, 3, 2, 3, 2, 3, 3, 4, 3, 2, 
            2, 4, 3, 3, 4, 3, 4, 2, 2, 4, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 2, 4, 
            3, 3, 3, 2, 3, 3, 2, 4, 2, 4, 4, 4, 3, 3, 3, 4, 3, 3, 4, 3, 3, 3, 
            3, 4, 3, 3, 4, 4, 4, 3, 3, 4, 3, 4, 4, 2, 2, 3, 4, 2, 2, 3, 3, 3, 
            2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{10, 5, 21, 30, 54, 3, 41, 1, 1, 46, 5, 6, 12, 
            48, 40, 1, 3, 1, 34, 34, 9, 3, 2, 53, 52, 55, 53, 1, 52, 6, 53, 4,
             52, 2, 3, 16, 4, 2, 4, 54, 41, 55, 27, 54, 5, 54, 52, 2, 53, 54, 
            52, 5, 1, 5, 54, 4, 8, 52, 47, 52, 55, 5, 3, 54, 4, 53, 54, 2, 6, 
            55, 54, 3, 2, 23, 52, 54, 17, 47, 53, 53, 5, 2, 53, 1, 42, 4, 3, 
            53, 54, 1, 5, 54, 52, 4, 20, 52, 5, 5, 3, 55, 19, 55, 15, 54, 54, 
            4, 39, 53, 4, 2, 52, 30, 2, 5, 55, 54, 1, 2, 31, 52, 5, 4, 5, 50, 
            5, 3, 55, 38, 1, 1, 52, 52, 55, 54, 31, 4, 36, 38, 41, 55, 55, 5, 
            53, 53, 1, 5, 3, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJw9VH8w22cYD6XS7mxRxXet7qK11tbb0q0/plWela1yRheqmuk47Oz0qhVt
tyWmFbpb9Eob1ZLhxk3xZR2hqinWJ4IkSCWING0NVSJFTUvLpmXf3I0/3nvu
ee99P8/n/Tyf53WLSQiJtaLRaFeopcvOfJF+/jZ8ut75iKtLHxo3lV/rTKmB
pSi+zCpnxuqwKCX3fucOLUhmrgpyIqog/e5sSnR8N0i19W1sbh5yftX077er
AmFvVsg6CmfwmGNJMdEC9HXT3yaZKiFuaoN3R00TRHHPKPhOj0Ao521oef0A
Pf0y93HGHwMtvDXv0eYBZJjWkHZCEpbjxfPFp0QkMK2uW516z4TmssQrwh8N
IK9MDvg+txWjDOSAY44a6dEx857+SiR+NriG61XI1W4//nxGA2IP703XfdVo
FpJ5H3JvwmBk8f3AbjWq7yW7T2X/DukVhhmbd9uQNr/vRSqFy/cpHD9J1eE8
iEhQpyHMmbV+6iO9KHVme9/9+B4yep8+UVI57dVFrXR4BCVNhxYzFdVA5rhM
EtiM4gHV87e01cDf/Jz1nWgMzdnz+XPWZiC2//HlPz+MoXhidIjjpkZpu0GT
YdLjVETtGSeFBDlDxI1W6zGkE/w/+xxVSGS9o9j8ugHmfunzeONOKwgF9nur
3UeBOHw5Up3/BHn1HlsVFh4bo8mX8dUgvjTNiKD0kC2U8wNbioHDcFrvv7IZ
pWvcs07YdOE24yrm/jI98A7bOiVS7zPafxJbNDyMwqRscbrL30Cyct8WnFWh
dDXRoawbxUHDoDPLQ76sG9EVPVLp1Ii0O41FopVGJApCx3a6SdEclnFAS+lC
D/Wxna1rAOYE7TOvXhUK2wWvDtr2I9vPpab/UCss8aK3Z94SOzRj1IhIszCh
xPTQ+McFbvcwamWcrGJeAUbRtZ0+BUrQ2fknH7X46v8+8LfmFlbqDWhEkSBV
9hB4U0pNhddPwCuwj20QdyD33G5Nr+sYbOOy2zwFLeDh5Vx4o64LdPUO2wO2
yCl+4QMjF4aQLNnDiPuoBzh2YYqeA4jMxUgvy3nSr7aDoHwrExjzLfoMrh3S
Vk+242DY2Srifg3Qn33lclN9F6UZqYlZ001gfN+zpz9dB+qDVYmh/Wrg+svX
mih83kLQiL2yEiT63RHXwptQXB/k+5tvGs4FSwN1lE465qQ+pl+xPGf8NMbD
DmrffG5yvtmuDmmlbK+4dg3KZiNFTzpkQHReFK3Y2IK03ZnXL1F+kQQPVU0k
VIDUZF2UUKJAHWsvvZW6xxFHrK6g9KHZH1VZfLI0j3Ga4VOWXLKr7a+e0jaU
/zv69OiuTiQ9xz+YrBUCW3iwUbXFAOwTt4KTk7tx26rTgXbsFowKP2L1eZIK
zac938zfYwA6WXppxxcjsFSfYXvORFL1JLXkMe7xeljC49uIsqqCZcArK08N
eKZB5tcZrEUrDXIuNK4QF1O50tUhkqaHufnuq01WFK944qSe6pu865uFl9Sc
FN1mxVv+A1lQSG9fcxP8B41EfVw=
           "], "Children" -> CompressedData["
1:eJwdiXeYDwQAQN8n6cgOhaxQKDIyyh6ZZZwUGTm5kePO/e7OOXfuODfsM86o
zDIjijIKFQ17lQZl07ZHWc/xx3vf975XaUB0cFgeIDYoV8EhCS0DgZDE7vlz
o0NUXGh4aKBOg4h7PyeXPPd5gLw8yHQ+NR+f+DAFeYi1BpGfAqxRP/aOH1mI
wgSz2tuusghFKcaH3rIrxXmEEpTkJVZ60xWW4lEeozTt+MAyLPdxylGWZd5w
qeVZ4v9WpgIV+c9KXHex13yCqy7yilWoyvs+yVNcthpP8wyXrM5Fa3DB9zzv
Qs9Zk1os8F+fpTZ1+Mf51qUef/scf9mG+jSgIfNsQlP+tBHPM9cXmGNj3vUP
37EZzfndVrSgJWd92zPO9rSzPGVrTjrTE75IW2Z43Bzb04FjduSo0/3NTvzq
NF9mqp2Z4hG7cNhsf7EbPzvZ7rxCD15lGpN8jYlmMZae9OJ1JviT4+1NH/rS
jx/N5A36c8gkQhjnDyYygLF+75sMJJQwwhlElgfNNIIM3yLdA45xv5EMZghR
RLPPNPc6lHiGEcNo9xhgt7HsMo6djjKBVHc4nO2m+J0j/dYRfGOyySQ5khGm
kOjXpjKK0WwzjXSGu9UxfGWCX5rBFw5zi/GOI87xTGCzsW5yIpMJ+LmT+MwY
s5nCRoc6lWg3GOV6h5jDYNcZ6V0KRjLG
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 2, 3, 3, 3, 3, 3, 2, 2, 4, 4, 3, 
            4, 3, 3, 2, 3, 4, 2, 3, 4, 2, 3, 2, 3, 3, 4, 2, 3, 2, 3, 3, 4, 3, 
            4, 2, 4, 3, 4, 2, 2, 4, 2, 4, 2, 3, 4, 3, 3, 4, 2, 4, 3, 3, 3, 2, 
            3, 4, 4, 3, 4, 3, 3, 3, 2, 4, 3, 3, 1, 1, 3, 3, 3, 2, 1, 4, 2, 3, 
            3, 4, 4, 2, 4, 3, 2, 3, 4, 4, 4, 3, 2, 4, 4, 2, 4, 3, 2, 3, 3, 3, 
            3, 4, 2, 2, 3, 3, 4, 3, 3, 3, 4, 2, 4, 4, 2, 4, 4, 3, 2, 3, 4, 4, 
            4, 3, 4, 3, 3, 3, 3, 4, 2, 3, 3, 4, 4, 4, 3, 3, 4, 4, 3, 3, 3, 4, 
            2, 4, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{14, 5, 4, 7, 55, 5, 10, 54, 3, 3, 16, 55, 1, 
            27, 23, 48, 13, 54, 1, 54, 32, 54, 1, 31, 52, 54, 52, 54, 53, 55, 
            3, 1, 3, 54, 35, 4, 3, 2, 9, 5, 41, 1, 45, 55, 54, 52, 52, 52, 38,
             55, 2, 39, 4, 2, 4, 54, 15, 3, 19, 41, 52, 55, 3, 53, 52, 53, 1, 
            3, 3, 54, 53, 54, 53, 54, 45, 52, 15, 3, 3, 3, 54, 1, 20, 55, 53, 
            2, 5, 2, 52, 4, 52, 54, 55, 53, 5, 34, 5, 30, 53, 54, 2, 55, 53, 
            4, 54, 8, 15, 52, 34, 34, 53, 55, 15, 55, 52, 8, 54, 4, 2, 55, 3, 
            27, 3, 53}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJw9kntM0wcQx38G5DEFKmPQsAn4QpiOALJY0XGdjUrYkMJw62aCLQukw/Hq
2CzKaidbBqtdOh1Jp1AYsVjeUB6WiL1Sy9MyKLS8JFpBSnUMC4auApOVP+CP
++su3/vcJ7crOTMhZQtBEHn2svj5z2fvNkDZq6vdpfufAFceOT4jmMKxatd8
IA2A2ONKH9pKkC79lZy9PAmD14VLBYVtkJWp90tSPQRR8mpCTrAJe/bTXsb9
PQ1Es9on8PwDMKYGPL74rQDZbjXUK3lDSC08z2kRKsElMWrrv613gbh3zdA9
0wBjeypv/XVZDmSvR45HrhtR9SKpen2esSRrl5Q/Ra6nQ7nQjKD6h8t0WjIB
W/bzJdV/E0j53HK8iCsHht4rv0isQeOz8cw9RjOG1sVzM3hdSOm95vSR2yQy
Hd8vMNB+QMWZhX29ykEs050LXuelpH/md4zeiZS0P4f7IwYgwNWdPJH7DOkS
7aOTzvUwKDykO/zFfeRvy7vNsc9Hx7Dqby1r0cX3ZepFUx3YaIEndvpMorjj
zJpQ3QhmatRJ/TvPYbN/c99Xnzb1YbTgNIv4pA/N4RfaZj00aGG0HHD98j4W
cBTeoQYNUnr6png/8YG/M0Qfs60VFWklkroVNWS9jp1x66oDxsKK4qidQ9TM
ba/dPoLGGv/ZKv0IBjFN0oX5WQjo+WVV9qQBSDWxH65zmvmyGyGMFtjgYn4g
feUo70TqfOnBuTgdlr1VTLiEGTCAU8Y7a1Fi9Kj0PYndF9EoGvLg3kXiUI6V
y7iBxmDJeD/0Q+g392qz13Mnjq1cajIj3SHR3clbjkEPJXm6oWlkXHZYPsxS
oqjju6oZzZ3N+8lFSt/0OjVu8LFzyBXrOQrzCVdGZQlaJp8PqO3eGQbv5PR6
ByrZn+05bPcnk0aS2GHDwGTFLrRrHyB1oVMuYWlQNKeNF5j0GJRKZPU6t6JL
eIpPld2TJXFujR+iwayp3OquswYUL5WfO6XvQqp85OmPcTNojqi1lVXw0Ojn
a329oxVtht9zbu4aRZLJU+bMlwE9abX2SK5m8w/ZI3tjTpM6kG7l0TzU0xCQ
zzRpw0dRoTZtHbbehjFd2x9VhArprlEZqbxmVEid4j+O96KKw4oPbtG1g2KK
4ZvM6QKb4VSTubgHs96WJERXtsHGPkJMJ7st9uCgKu1oYnMDNtBi06w7KqDB
c+9vGY46tHVbc94d0gOxmyWzft0I9PTvfS9ELALpamSJwOcFsOmFFSPHVTC4
3f+N+ch+pJQGrr05pkDR4+5Fj4FGEElSQvsqelHkTrtzYAzxf0yKE0g=
           "], "Children" -> CompressedData["
1:eJwdiUOQEAAAAHeybdu2bXfZXXWZl/HLtm3btm3btrFdPXZndjZliy4BrUMB
3SOEKCCwd8ng4MC+tSKGRMXOPYLaBAXnzNf23x8QQqj/hCYMYdEBhGO/7WhP
eCIQkUj8cZ+/jcwv9xqFPUYlGtGJQX0aEJNYJCcFsYnDT5MRl3j8MCnx2e13
d5mAhCQiMd/c6Vd3mITtfnGbn93qJ7f40ZR8sC6pSE0a0lKbzb43HRnJxDvT
k4FNvnWjmdlgDnKShfVmJRtvzM5r1/nKteYiNy9dYx5WW5lV5iUf+SnAC1f6
3IIUYoXPXG5hivDUZRZlqcUozhNL8NgKlKQUpVniI8vz0DKUpRwPXOx9F3nP
hd61IpVY4B3nW4V5VqUa1ZnrbWtyyxrcdI4BzPaGtbjuLOsw02vO8Kr1uOJ0
G9KItkyzMU24bBsu2ZSLTrUZzblgIEG05rwtaMkUWzHZc07yrBM94wRPO95T
jrMDYz1pPzoyxk50pguj7Uo3TjjKYEbalxEetzs96EkvhnvMYfZmqEftwxGH
eNjBHrI/Bx3kAQf6F3d2At4=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 4, 3, 3, 4, 4, 4, 3, 4, 3, 3, 3, 4, 
            3, 2, 3, 2, 3, 3, 4, 3, 2, 3, 2, 3, 2, 3, 2, 2, 3, 4, 3, 4, 3, 2, 
            3, 2, 3, 3, 3, 4, 1, 3, 4, 3, 2, 3, 3, 4, 3, 4, 2, 3, 3, 3, 2, 3, 
            3, 3, 3, 3, 2, 4, 2, 2, 3, 3, 3, 2, 3, 2, 4, 3, 4, 4, 2, 3, 4, 3, 
            3, 4, 3, 4, 4, 3, 4, 2, 3, 3, 3, 2, 3, 3, 2, 4, 3, 3, 3, 2, 3, 2, 
            2, 2, 4, 3, 3, 3, 4, 3, 3, 2, 3, 4, 3, 4, 3, 4, 3, 3, 3, 4, 3, 2, 
            3, 4}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 15, 53, 3, 4, 1, 46, 52, 47, 53, 4, 54, 54,
             54, 4, 4, 17, 4, 52, 46, 55, 34, 4, 55, 2, 5, 52, 39, 54, 5, 55, 
            5, 55, 4, 3, 9, 1, 53, 5, 38, 52, 52, 31, 23, 3, 55, 55, 55, 5, 4,
             5, 54, 52, 45, 52, 53, 55, 5, 8, 54, 2, 4, 7, 53, 52, 31, 2, 6, 
            53, 2, 53, 30, 55, 54, 1, 1, 54, 20, 3, 54, 13, 33, 52, 3, 4, 31, 
            55, 5, 4, 2, 4, 53, 4, 3, 54}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJw9kWlM0nEYxylLbK0kqWR5TLNNza2kw2HTHjpMN1PRcNExo9bxL1eSOkfa
4VaZyyya2ZwzwYEbuFKRmYTpA4ngPNK8RkWGhKhYi7SDzFx/X+SL34tn+3ye
4/sLPJWRcmYJhUI5QT7CpvGRBI9CXPqRF81+TUB0c7+7X5RgmWY6KTvUjvUd
Su+IbDOwLg3P5F/tR05l98gBah0wkoajGLlOUM8rhAf1UqA9oFs9o4uxLGeG
+6nIivzcXpelNw20X4R89x926HvcqtjZM46SSs5v/bEhFDSHdi5w8ryllR40
HThVGS0RR9sw4E/q00I/4+IcYbPnHIfyBml2Lzk1Xw75Yad3sEiOBQkXJDWt
yAvaHmM/14iWzce3R1/Rg6CoJ5ieZkDBfMLYKkMtmB5y6Ym+/WCxNrU2U59j
yOTHjrDITiR+K6VNZO30Olzz09yLErFSY2P3YYBmhJ9J3u2xYeZsrr0WiOtZ
J4d8HaC+yYmR9iKyXvn3GElPFF8R67/xGshz3nOSLimxY/VcJ3dUCeG1rVvj
ZG3w37dMyV7svy9Dvm2PIraiAbR36WsO2Dg4kbJtrQ0KUUDNrRGT+fN44WIm
mbNFBam+3mZk2MdXnZh0oIUIY6qz2hb34TxKZQo0RhSYBllfxXoMybSqdl8u
RfW6kE4f0ptIuy1bT2jB+exoVAGWQ4AqgSi2D2If8sp/rekCUfLOhJK3OhCl
VHDzAp+ia1+0MtxhwLJka93njBrguyW+EpG8JZ1eLWXoQVg1q9WdaUfK+eU5
ktlu9Bg+xo46ZAZTkEL2+kYD0Ih515Z4svvsyBPxhz5kT7t7DpN5hcTU3dL9
fYemG8z6l1R/trx6F41gDgDrb450pUmNgkO3PiUqHEg4/aK7GnTw/78DXJKz
7wY6MD+SsiyI5FimOU2R91dgHXHuLRU2gGgTe2yPQ4dxypHGn0snoP7aN7dk
cwuUGYzjg3u1IDJx3twheYnblLFA246u2JaSBZ/CGHtycUUb3rtcZSjJdGf/
A9Aflbs=
           "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9llb1XVoQoIyNkldUw+5KVdLkLP3H3cef8N/YqskWIUrL3
yt6yySbPxw/v3b17UYtXBJaEASvDQwrkrU4OBvPWZEaEIm35qvyl+cH4hGX/
fm6IsP/Uoz4NmM4MtCGjuGIjwomgMS257B+b0JxLNuWidTbjtxf8ZQt+et5W
tKYN52xHe37Ylu+e9ZsdiGcIHTljJzoTyWljqbILXfnqKbvRnS/2oDd9+GwU
PelFNJXWWuEnT9qXcj/ajw/G8N4y39mft54wjuMOYCCDKPWNxxzMUV97xKEM
I4ERvHI4NZb40sO+cCTPPeQzi01kNGMYy1On8cSDjmM8SRxwEvtNZgKP3ecj
J/LQvU5mCg9M4b5TSSWNe6Zz1z3ecbfV7vK2Rc5kpznscBaF3jKDAAVmst3Z
ZDGHbc5jq3PZ4k03O59N3nAB2Szkuhu95gYXsd5c1nnVtf4FXfLI7A==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 3, 4, 3, 4, 3, 3, 2, 2, 3, 4, 4, 
            3, 3, 2, 4, 2, 4, 3, 3, 3, 3, 3, 3, 4, 3, 3, 1, 3, 2, 4, 2, 4, 2, 
            3, 4, 2, 4, 3, 2, 2, 3, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 4, 4, 4, 2, 
            3, 3, 3, 3, 4, 2, 4, 3, 3, 3, 4, 2, 4, 3, 3, 3, 3, 4, 2, 2, 2, 3, 
            4, 3, 4, 3, 4, 4, 3, 3, 4, 3, 4, 3, 2, 3, 4, 3, 2}], "RootIndex" -> 
          1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{52, 3, 6, 3, 55, 19, 5, 54, 55, 54, 33, 53, 1,
             14, 3, 34, 3, 5, 54, 36, 5, 54, 1, 54, 55, 2, 54, 52, 1, 54, 52, 
            55, 5, 47, 53, 53, 2, 54, 1, 54, 17, 3, 34, 5, 2, 2, 5, 2, 4, 4, 
            12, 55, 31, 53, 4, 55, 54, 53, 52, 47, 33, 53, 5, 55, 4, 53, 53, 
            52, 27, 55, 33, 52, 1, 54, 1, 39, 27, 55, 3, 54, 27, 3, 54, 54, 8,
             55, 14, 53, 4, 54, 2, 5, 17, 36, 54, 53, 54, 53, 5, 30, 15, 4, 
            55, 23, 41, 55, 27, 53, 55, 9, 1, 53, 3, 5, 52, 4, 55, 4, 55, 5, 
            4, 3, 17, 54, 55, 55, 38, 8, 4, 2, 38, 53, 13, 5, 4, 2}], 
          "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJxFUn0w22ccj7UbpiqoNm2VoFWhp6HlYjpfZtNc1bFOya2beW9auqZYZ6ao
VZfDXK42VYaZ0h+9kqh6qdg3iLciokiwFmWxoNMw29Gq7edu7I/nvvfcfZ7P
8/28WIRePBWhRaFQ+OShb/k+cLftLLDdPL385qZgIsq4tIQmBZ0jMamxjGmk
muu6RVu0ojqFyLPnPIDOrhhb0f7fIXfqaFaptwyW56MjHYJakel+Wqt49xj6
FfaMeWlXgXr03gXd+WqUt3/eNGk9jsv6O0aa1e3QeXdFwiN5eXsLT7HLG4DX
8gP9UHkBUu11PFlfSYFekKSVzFKB4EMnn+yRZkh5yWLZv24EqlJzf9jkBQgy
R8K8/NpQ8l3YhPWdWaRymzpmFmqQvW3vg8zpQeSVKsWzSw2Qe3Lp5sxYC3K9
nZ0UprPgHn5/JMBgEoQ7gltr0ztx+WeZOSOrDzW/fuS0k+SvXyuPPyktAZuZ
58V9CgkKmkvCfM92IF0ZFZBB8hKGR/P87/UjLyLQY/svbSBXtIZ866xGrodi
oUpPCJytxoMx635NGxHaKQSk2L0qciH1SByFjS6jUygZtmKvz+DDOrrr/gn3
Zy70OiqRf7lm5beMSWSqSnumyKmz58/IhOlKEFQY5xi59SLlabY331cIGnFk
eEGhFIV8FTLjnoBG+iw2WPYP1CefUG8/O4HyXKXUu1aKtDHi1bm5NtzQs5GH
/JhWQX9WG/J6HNjmu56g+pPQRSvqIHDq5pTSM0NICXtplxfSjsMG6oMO5h1I
XXCNW8zqQMF4x6JBnwgEB2YSX1fK/s+XjnVLJP6nTAePzzh5yJl0qSrbNwMp
71ibBpB33pqPSr+d1PHf+9zZ3tWPRx8DwapoeGPtMVCl8p3RPS247LxmZGLX
CoLCCOajsi6c+JLQK1L1ozpTkOa0TQaaq3+ZcFVNkHKafj50sR41ZubzlyyH
QKg/4yjsysfOWw13495LRYmC/zD0INkH3+Zmpo0EaXpbRo9XiGAjn9waIopz
4SGoz4vudFupgZ/EWIr5QoTc2FXaM4EGNFh0hpVYjdRDjLcLLJQ4bFV+W5Zc
DeobETpXGQTEh6VnHyZ9p4lXg2zNujZz8quwNQ2PKgf3PW/yF8S9yH7rFjMx
Xgwan+iggW9kMLzV9aY/o3sTz6mYGBog+8i7/P6NBkYR1ieYXfHMuo31szmi
Ru1anBiQOVVflKJNXsI1YlCBEjol0DBIjpzsVWsXmgLZJ/LTjgX0oU5pUukR
sl8cjt31dZx7fuqIv6h4s4/cSOu6proVIJ66yQvFEiAMP33UOipHemiVa0ta
OFAsQ4i/o0UgORBUnr7rBXSe+8Pm2tcKEHj/eNzM8gpwje0HKz5oQ65m37vd
1c1AfT58SUzuxxt30aok/xOULWVmuObAv1kXRCw=
           "], "Children" -> CompressedData["
1:eJwdiWeYCAQAQN93obuMCNl0aViF4hBChEPiLjPr5AZxlzPOcWecW/bILntm
Zmak7IyGnT2iKNmr/Vx+vPd973vBXePCogKAPoFZCotIqBcfH5EYHpQVobF9
I6Mj4yuHxPz/M7MIeMwTZCM7aXxtDp5kOKkE8pW5yE0QW32KL9Wc/OcW8/A0
/zqEvGy2JWHk4xnyU4B32WRBniWEjRaiMK9ThX8swt+WpSjFKE4J/vIL/3SD
JVlvKdb5h88RzPM8tDQPfJEXWOt91/gSL3PP1Zbhc++6ynKs9I7lqcAr3PZV
blmZm1akEiu84XKv+xq/u8yqLPWan/mbS6xGdWrwBg1YbE1q8RaLrM2b/God
rrrQKy7wF+tSj/n+7DzrM9fLzvFtGnLJ2TaiMaHMsinN+MkmXHSmF/zUd/jE
5szwvNNtwTTPOdVwptiaNpz1PVox2TNOsi0f24mJtqM9p53gKd/npB04YUd+
dLydGWcXIujKByQwgOOOtRuRRBFNDz7kmDF0Z4xHHe0RR9mTXvSjP7HEcdje
fMRIDznCg2b6g/F8bx++sy/fmuEB091vmvtMNZHhDiTFQQwziaEmM5i9DvEb
B7vHoQwj2RSS3O0gdznQnSaazgB3mMF2M9lmgo8ADSwa0g==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 3, 2, 3, 3, 2, 4, 3, 3, 2, 2, 3, 
            4, 3, 3, 3, 4, 3, 4, 4, 3, 3, 2, 2, 2, 3, 3, 4, 3, 3, 3, 3, 2, 2, 
            4, 3, 4, 4, 3, 3, 4, 4, 2, 2, 3, 4, 2, 3, 2, 3, 4, 4, 2, 3, 3, 2, 
            3, 3, 4, 2, 3, 4, 3, 2, 3, 4, 3, 3, 2, 3, 4, 3, 2, 2, 4, 2, 3, 3, 
            3, 3, 3, 2, 4, 4, 3, 3, 3, 4, 4, 3, 4, 4, 3, 3, 4, 3, 3, 4, 3, 3, 
            3, 4, 4, 3, 3, 2, 4, 3, 4, 2, 3, 4, 4, 1, 3, 4, 3, 4, 3, 2, 3, 3, 
            4, 2, 4, 4, 2, 2, 4, 3, 3, 4, 3, 2, 2, 3}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{55, 48, 2, 54, 17, 54, 15, 15, 52, 38, 54, 3, 
            2, 39, 12, 52, 1, 36, 38, 55, 55, 55, 52, 5, 54, 8, 52, 1, 14, 52,
             19, 53, 55, 5, 52, 3, 54, 54, 4, 5, 55, 6, 4, 4, 17, 52, 1, 27, 
            52, 53, 53, 1, 55, 53, 2, 55, 52, 53, 54, 38, 4, 3, 31, 52, 2, 38,
             52, 55, 3, 54, 53, 34, 47, 54, 1, 54, 52, 55, 38, 54, 35, 31, 3, 
            1, 3, 52}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJwBvQJC/SFib1JlAQAAAFYAAAAwKVXm6VN/vwC9ktXH5bA/oI/eq6D7wj/w
SR7Rndj1P3BvJm3hprk/KEUzXQaq3z8gyIr8qOGwP1gLlQ0f9c8/iMMa/LsG
w78AJ8rv+0ZPP1iJl8u9vNg/SD5DRlDr4z9gD8ZePNrjv3D+TeUNxq4/CBrz
Znrmrj8QOvFn8IvIv/BJZSvfJt+/kFE1TZPZwT9o65yooI6BP6BOZ4N6fcu/
EJECZ1upy78QwsuJ2z/Lv3Cl1WZr5Me/qHszp5NA578QO340TlrnvwAiYaj2
bLE/GMPqpdi3xb8AGFu3Uliav/gNFNnB6MY/MNLAlVyDx7/ogKiaLli1P3jJ
m9Zofse/+KxJy/Lxyr+wackhI/27P6hMU8HLFsS/aKa6D3Ip5r/QPMijJU/I
vzCyFcYqvt2/qBbNfDFaw79o8Ma0sCTnP+CZsF8bE8u/6IComi5YtT9YCofM
OVrDvwjEF33ii+K/aEHW8a8LsD9ge+B28mbGvwg5rYMIIsS/OLnqYa1zrz8Y
K/guFfPDv1DPYCxm7ac/YCvUNz3Bwz9A5PBnVozfPwgoq7cAAba/uFSgIQp2
4D8owwGH10LAP/h24t6j88a/YByH6rzkkj9olg9qSVeavzBRteFBnhBAkEuc
Rx4ifT/4U1WkiRfvP4iJjrnKNM8/0CwI2fBKuT+w4v/g4KbeP9CojEJyqKa/
gBjGBGOGZj8QniObyo7Jv2jMQ9GHEsk/6BvhAgkx1b8oGvQqEarlv6jvbn/h
4PI/EOYSqAeAqD+4/ql4TMSjP5h8RfGQgfI/kDBl/Ht80r+QmlvnBDrlv6hn
1e8JQKi/oDIFTIZX1T9o65yooI6BP9i/svHmxec/UJ7M3kYHrz84WfBClXiy
P5ifUQP7N5Y/aEQ64ydYmr9ArGuWzDTPP4jzcvWXesS/O7ltTw==
           "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9llVVWRkSEjFQaZvTJKqu+6PfcJT/l7uOu8yclsiV7k8iW
hCKrCCWzeL788N7du5ewfVdwRwSwOzKsYElFIBQq2VsUFY688j2lZaWhtKyd
/b84TMR/BjCQQQRYxWCGsJJHRhLFMh46lAfOJxkdxnDuO4KR/DWaP94zhruO
YjR9jmEsd+y1wXHEMp4JTGYKE5nEb+P45W1/essf1vvdm8ZT51SmkcANvzmd
Hq/71RkkMpNuZ9HlHGZzzS8m8dmrfnIu87hip5ddQAoZXPKjF/1gKmkspMML
tpvOe8+bSRaLOOcSzvrOxbz1jEs57RtPuZxsXruCNmt95UlzqPGlJ8xlNds4
bqtrCFLEWtbR4nryOWYeR33hETdw2I1s4rmbeWYBzW7hqYcs5KBNVruVAz5x
v41WWcw+H1vpP7yrtvU=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 4, 2, 3, 2, 3, 3, 3, 2, 4, 4, 4, 3, 
            3, 3, 2, 4, 3, 3, 2, 2, 2, 2, 3, 3, 4, 4, 3, 4, 3, 3, 2, 4, 4, 3, 
            3, 3, 3, 3, 2, 2, 3, 2, 4, 2, 3, 4, 3, 4, 4, 3, 3, 2, 2, 2, 3, 3, 
            3, 2, 4, 4, 4, 3, 3, 2, 2, 3, 3, 4, 3, 3, 4, 4, 2, 3, 4, 3, 3, 2, 
            3, 3, 3, 3, 4, 3, 4, 3}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{22, 34, 54, 5, 55, 5, 52, 38, 53, 34, 5, 52, 
            4, 52, 54, 2, 5, 55, 31, 9, 38, 6, 54, 3, 52, 54, 54, 54, 5, 52, 
            8, 50, 15, 34, 53, 5, 1, 4, 53, 4, 55, 47, 4, 16, 54, 27, 55, 2, 
            53, 53, 1, 3, 1, 4, 38, 2, 3, 39, 8, 54, 55, 53, 38, 1, 4, 41, 1, 
            2, 2, 40, 54, 45, 19, 52, 8, 53, 2, 2, 53, 15, 54, 53, 3, 55, 3, 
            54, 52, 4, 52, 3, 45, 55, 53, 54}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJwB/QIC/SFib1JlAQAAAF4AAACopToQaDHTP/Dyk32j9b0/qOObzyaE2T+Q
d+w5OHnEP6j6XTil4sC/QLLYK/gC6D9g0TqWEAHlPwAnyu/7Rk8/iPBevlTp
sr+YtofLbfm1P5iziNlIqrE/EK19fhR6w7+QtptFxFvVv3DgtDCoMMW/EMnM
mCLGwb+wc1wyqPvCP3grYj3kO8E/MIyfWJpl0b/gEcgoi+HDPxCOiaNzh6g/
GC12JozsVz/ogKiaLli1PyDUJYgXG90/AP5OE8Y0zz/Yf2BRmYTEv5gmT++v
geS/6Hdq8wTu4j8YdhCGxKbQP/DanKAbF9y/oAaJJC4Rw7/Yvyjb4vCoP1Ce
zN5GB68/kJG9gGn2vD/IUCn9iNKqP3ADUPlvDIm/2II8/q0Htr+I9gBKE0rZ
P4jBzRk1dNw/IFf3qNmRk78QhG6prtTWvxAyJ215uM6/uP6peEzEoz+AjAhd
rdTWv1DaXW/Igr8/2JR7jbrZ3j+Q38fyD8+xP4Dt5ti1Y82/4Ax+7fFntb/o
qT421rCIv0jBbVmtuoy/8Lh9SsbI1D/IaHo4TuvjPyAcFpsHvsU/6FYcWOOL
4r+oOOst7rSAP3hp/h8TXrC/iC+LPVDr4z9w/k3lDcauP+hehaQWaMA/yKMu
5pm3wb9AENef81/xP8DAMYHCrcI/QOYwYBY1gT8ga9JGU4zfPwjiysI1dNw/
oF7jBvs3pz9gyttmwf3av9iLrJuM5tS/CAH3Sw2jqj9gWH3CeBXhP2hC+e85
Xtu/CBrzZnrmrj/ogKiaLli1PyjAR1hfOMm/gG/P8Xvctz8sQPprZaosQGAP
xl482uO/oDxEhc0y178wA2fp1KO7v7BDTWr2EaY/mMYQ4/GZ3r/oJpdIX5+2
v1j75MwoqZ2/OFRry0y/2D+QA00DzqbJv7BEEQuKp96/AH5i35o9w7+YZXgW
44viv7gpWQq12ci/qBHGiTchsL8IGvNmeuauP7iPi7RPPtC/CNSrBFbsxr8I
jHYVPlXHP1XhkmY=
           "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9lFSLZK0okOyOiaKdE+rJHd7kLP3H3cef8OfbeRGRn702y
d2Z21vPxw3t3717svMWB+WHAkvCQAmXLMoLBsuUlEaHIX7S0fEF5MCl54b9f
GiLsP41ozGVLuWQTmtKMcHLJI4KLjiKF5rSgJZH0JJZWtKYHF4yiDd2JIZrz
dqIz2pZ2nLM9Z/1jBzpyxt+e9pdd+Okpf9iVbpy0wRN+t9pvHverx4yjFyM4
ajy9+eIR+5DAcA7bl0N+diifTKQf/fnoQesdwECqHMRgPnjA9w7hnUm8db9v
HMZrK61zn8ns9ZUjeWmFL9zjaHY7hlTSGMtzdzmOdLLI5pkZZLLTp+7widt9
7DYfmcNDtzqeLc5ms/kUMIFCHjiDiUxiGpu8bxH33Gitkylmg3cNUGMJU1jv
VNZ5x7Xedjq3XONNZ3LDWVx3tXNY5TXnctWVXnGFfwFez8bt
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 3, 3, 3, 4, 4, 3, 4, 4, 4, 2, 3, 3, 
            4, 2, 2, 3, 4, 4, 3, 4, 3, 2, 4, 3, 3, 3, 3, 4, 4, 2, 3, 3, 4, 4, 
            3, 4, 4, 3, 3, 4, 2, 4, 3, 3, 4, 3, 3, 3, 3, 3, 4, 2, 3, 3, 2, 3, 
            4, 3, 3, 3, 2, 3, 3, 3, 3, 4, 2, 2, 3, 3, 4, 2, 4, 4, 2, 2, 2, 4, 
            3, 3, 4, 4, 2, 2, 3, 3, 4, 3, 3, 3, 3, 3, 3, 4}], "RootIndex" -> 
          1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{14, 52, 2, 5, 33, 21, 2, 7, 54, 52, 5, 52, 8, 
            54, 5, 3, 54, 33, 47, 4, 55, 1, 4, 2, 54, 5, 52, 4, 4, 4, 2, 3, 2,
             3, 1, 52, 55, 5, 55, 8, 52, 1, 53, 5, 3, 52, 10, 3, 5, 1, 5, 53, 
            3, 55, 47, 3, 54, 38, 52, 55, 52, 5, 54, 54, 4, 54, 15, 54, 2, 19,
             1, 52, 55, 54, 53, 52, 55, 52, 5, 55, 52, 3, 4, 21, 1, 54, 5, 53,
             54, 4, 15, 38, 15, 54, 54, 38, 53, 4, 2, 54, 55, 4, 2, 54, 5, 3, 
            55, 27, 4, 2, 1, 52, 55, 55, 53, 4, 20, 52, 52, 4, 31, 17, 27, 3, 
            2, 52, 52, 3, 54, 52, 54, 54}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJw9knlM0wcUx8GMAWFondwwzgAF56gDtUPHYziBgcxyqGUQLQy2MlAwGKwD
pFwGaIQOM1AEVhGhdQrlkNWBvhIKLYeEcxwqthzlhyTjSEGCgPv94/54f7wr
L9/v+9hFJ4bEamtpaeWQsVEcdiEuUAkCzYqzeY8cCW+Wqu/LMcwbc5L4PWgA
RmXflK9uPWg9LR6Vz4nBn7a5mJX6D/CDDwXdnGgHxT6en3prHilEg6QyVIEb
lXPiZ7otyM/SZ3xXqkDiXG61CVsK1DviDmGVClgGNh73nFXAuKjghogqMCk0
Z+Z70Rv8cEeyI+KclN0D292zR5Ojx5D9yUTwUu4A0jm8ZxuaPhCG7Zgf+6ED
JQ2ffVuoHkHJ1/vs1goX8FbCcP36LgL0RD9eNDRWIO2U0ZonOScePr5w/loz
ch4RRbO8aeQMWt/8anIGN/QP7fXK7sCklOT1zKAptB3hxVnBINomWl2JThgC
70dOmoyRG+h90i67pXAQkzRVTU9IXXmepwZj0+dBr1jz4Oz4c+Bs6RhcKid9
W+htz0gbQqYkd3+6byP6J6jjrUxf4vLVc4dtxiVIG9QOudEnQ+p9u+KKsXag
hMbVW5L1gSuX6jyuymD5RWRL5/Yk5jUZs+lkPnB9jmdX14E0iLwdtDgDCvvn
jWlP5fjBH2aMq5nOzhBs7GK6tr6YRSF98cC/zVwgfM2O9H4kQ4G/l/Heqec4
Hv96pL6qC4UrveoTdq+AKDlBbSCUKM2a/OV4xFlgSkVm8ohR5L+LMdKyV6Kt
omBLqBKDuIryZjl8GsXztzt7SR4IrrDsC+ZjEOeYu3zDLEPGu+tq/T/lqHUt
X7fot24UG28LH1rPgqDVa/u0iQxZpbuNViK78FZEnXawph+lOtlRUNoGzK21
WkvSFyIyetWBMgL0aZVuQZkck1xNvJJd1MiqSQnnmS7BuIOouj+jEWi1fj7c
8G4wi1raotxZRH6le5HHdisw/pY6O7qXo/fDqIpU2wJQ8Ghcd/LfRHGsXqaL
ENiL5UJBYSb8nwfkOzZJEOl7VqnTh1uRH1juZ22fDt7rv7pli5uR/+lBsdvl
l+C/OSC8u9mHenX0leoDBDKcLEyP1XUjazqQoib54bp5WSh9pODdbdjTOluB
nPd+mqPkvzgxZwLDSJ71xmMEDTGtyAr1ex+QLgLKFC1yjtyjPtYvGSf3uH07
Ag3JsbhHHq+yliP7c4FH6R45MgMXLWg/96BSNns5eLoL+YaSxgDTbhDe96Sw
Dw4DK1WZsvpTFyra9tdUkBxJDAYcj5B66eHLPr9zGiEp0emCquYJDKSW2J72
rwUWo5MfWliN0rf5q29dR5HukBY5ES9DRX+X+nXbMihyHSZ9yL7/x4w/sixf
ASd7zolKJYBxV2FTc34SGdZs5Zm/ZPAfDKE2sQ==
           "], "Children" -> CompressedData["
1:eJwdiXeYDwQAQN939opsZZaV2VGXsinZ4y5khLvcyO5nnHN3HM6okK3sncqq
jJItsvfehIyQPes5/njv+973ikR0D40KAnqmT1FoeGzNQCA8LixDStTr1isy
OjIQHBLz/CenEPSCVKQmDbretKTjdYqSnnVmZq0ZWGNGMvG/q/3P383CS2Ql
G6+yypfJzlN/84k5eIVfzUkuHrvSR+YmDyt8aF4emI/7Lveey8xPAQpSiLu+
xh1/8baFKcLP3vIn/3WpxSjOTZd4wxL0I56SvEEpFnvdvpSmDGUpx4fU5R/L
U5NavMkirxlMBSryFm9z1fe44kJDeIdK/Ohl3+Vvf/CS33vRylRhgVWpxgWr
U4Pv/Mv5nneetXmfc37AWed6xjmetg6nnG096nPSJjSgIY2ZZSNmesIZHne6
x5zmUZvSjKmGEsYRP6IFU2zOZA/7rYdsyce0ojVtiCKatnxCR77xoJNsx0QP
2J79dmCf4UQwwU8Z717HGclY9zjG3cbwOaP9jK/tRGe6MMqujHSXI9xpN7rz
lT340h1+YYDh9mSY2+1Fb4bahyFuM5atJhvHYP90kAkMtD9JbjGRzQ7wDweQ
RH8HMohNJjqYBDeazAbjfQbXnhLW
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 2, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 4, 
            3, 2, 4, 3, 4, 4, 4, 2, 3, 2, 3, 3, 4, 3, 3, 3, 2, 2, 2, 3, 4, 1, 
            4, 3, 3, 3, 2, 3, 2, 4, 3, 3, 4, 3, 3, 3, 4, 3, 3, 4, 3, 2, 3, 3, 
            2, 2, 2, 2, 3, 4, 4, 3, 4, 4, 3, 2, 2, 2, 3, 4, 2, 4, 2, 2, 3, 3, 
            3, 3, 2, 3, 4, 4, 4, 3, 4, 3, 2, 3, 2, 4, 4, 2, 3, 3, 2, 3, 4, 4, 
            4, 3, 4, 3, 2, 4, 3, 2, 2, 4, 2, 4, 3, 3, 2, 3, 3, 4, 3, 2, 3, 3, 
            3, 3, 3, 3, 3, 3, 3, 3, 4, 4}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 52, 4, 47, 2, 14, 53, 5, 41, 8, 3, 39, 4, 
            52, 3, 5, 21, 5, 52, 53, 39, 27, 22, 55, 53, 52, 3, 53, 54, 5, 38,
             1, 41, 29, 4, 2, 3, 3, 3, 31, 1, 15, 4, 34, 30, 10, 53, 53, 54, 
            31, 34, 47, 5, 1, 34, 4, 46, 35, 21, 52, 5, 55, 4, 8, 2, 33, 35, 
            41, 55, 2, 53, 4, 54, 52, 6, 53, 53, 20, 54, 54, 31, 54, 54, 52, 
            54, 3, 31, 55, 53, 8, 52, 53, 54, 23, 34, 53, 54, 36, 53, 53, 4, 
            54, 55, 3, 5, 55, 17, 47, 3, 55, 1, 1, 55, 54, 2, 17, 1, 52, 45, 
            23, 55, 53, 53, 16}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJxlUW1UkwUUfpsiI0dgR/lQ+QrFWR0cBNv40DvxxFlMkEwJUjmToshU5slq
mOSkDgdRcEJ6Jp7j2YB0JG58ZE4Q7mDAXiLdEIHNEV/yMeBYc4oQU2n+2P70
457nx733uc/z3KCM7J2ZrxEEcdxeZGSZT3JxJQ53Tx77OIxEoao5TbunF1Uv
q4Tb2ypALAgWiCfu43zJrkNf8oaBXUzmDl4hkZC4ZJZvGAFJy+7FotZaMCDd
NGqRg+Tslr+pYb0oeJk47t6hAP3jlK6Hiz3AP00znBVpkRHxutuRjROY9XRx
ZI5iBkNwVeXdE3VQEDjct/FFI4jZnH6/cwNgCOJtTvpA4+QRD2mtHrpakP8S
7ZkV1gPCC75LW2/rMDD7MJl0sh3VC4ztigg7VpBvu9nvJ//akR9w3QbUi9do
5dYpnF9X8a3C9XckNvzxjy1+B9C90g75/nQcpekPl9lYVyH58p+D8a5KoCeY
xAlxeUhf+YnREKeGrN6cjkhKN3IvVX9/90on0vmb3vU1qJBKDaXMrpdDwSVZ
uJedJ5AsfC4fqYHhlZ8dHj89ihZraW7FbJPTn760aLbg1C3Qa5uMq6rtOaTM
KXcMaZDfwLNp6juRnWaJOy+sA8+JN+WuIjk48lf5M6djctpAlBFTdH/ttLNf
Y0rwfnXHoduBRFNJr3a8BlIPWBIrjSSqZQ2ym3bfnvlnQqbnXDiW2OC5Mfse
8dZ++bODteBpMK/994sb/+ORPD2fc2GfEtRLF643ZOhRJR470x3ej3JeBI1m
nQH9MiZv1M5TsKXiK/d1BEff+N4TXTyJZpG8LDT1Bqj2FgcxykuR9PLWhc9I
nX8j+Qe+2dXZCAIuZfOYYgoYiuZN3EoNSNf8kB51ZAiES/bWUZhG4OfG1J67
psXknK+fR6X3gyQl39QSoQNHTuapR0c9fe8ge8mJ6O8m3+E4/BCsras7D/6G
/IGLIcBE5BQW/kXMTyJ19ZPPj00oQLDm8k5u1S3g9lUxB8c7UNDTFVy/TY3i
DyMTS40tMC+MvffGo2YUhy3kaSVt6ONijb65vxp8Rvd8VNnUB/ypok9Dm9VI
tbHGXukRR+2eDvAeQLV/fZm/Wytmbe17rFxe4/wfN265TG+fE6QdvfNzoQYZ
EyXS9hcPUFW8uE1tR1GPO+tkUydKn4neTwowozSqkK20tQI1O3PVjynVQN6j
NXBSy5AIkfl1LVx1+nCgWsdeMehxGzkmD95MXjuKKH6srlgNJj/Yl03mIfwH
BboKkw==
           "], "Children" -> CompressedData["
1:eJwdkVOQEAAABXeybdu2bXfZXXWZl/GXbdu2bdu2bWO7+tg3s/M+N2WLLgGt
QwHdI4RMQGDvksHBgX1rRQyRip17BLUJCs6Zr+2/f0AIof4TmjCEJTNZCMdZ
IxGZ8JwxAqeNyCn1pFE4YXRiEJXj/jEavz1mTGKRhKPG5oiJOWwcDhmXeMTn
oL88YAL2m5B9JmKvP93jD3eblF1+NxnJScE3U5KaNKRip1/d4RfTkpFMfDYd
n0zPRzPwwe2+d5vv3GpWslGXLWZns3nZ5FtzkJNcvHGjudlgHtb72nXmIz8F
KEht1lqIwlRmja9cbRFW+dKiFKM4JVjpC0tTkhU+txTPXG4ZylKOZT51qU8s
TwWWWJHFVmKRj11oFRb4yKpUozo1mO9Da/LAeQYw11rM8b6zvWcd7jrLetSn
ATNtSjMaMsNGTLcx02zCVO84xeZMtg2TvG0gLWhJKybamgneMoibjveG42xL
O67bnmsG04GxdmSMV+3EFTvThdFetivdGOUlR3rR7vRghD3pRW/6hLQdbl+G
2Z+h9mOIFxzseQd5zoH+BUgiAt4=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 3, 3, 2, 4, 3, 2, 3, 3, 4, 3, 3, 
            3, 2, 3, 4, 3, 3, 4, 4, 2, 4, 2, 4, 4, 2, 4, 3, 4, 3, 2, 4, 2, 2, 
            3, 3, 4, 2, 2, 4, 3, 4, 1, 4, 2, 3, 3, 3, 4, 3, 3, 2, 3, 3, 4, 4, 
            2, 2, 4, 3, 2, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 2, 2, 3, 2, 3, 3, 3, 
            3, 4, 3, 3, 4, 4, 3, 3, 3, 2, 4, 3, 4, 3, 4, 3, 3, 4, 4, 2, 4, 3, 
            2, 3, 3, 2, 3, 3, 1, 4, 3, 3, 3, 4, 3, 2, 3, 3, 4, 4, 3, 3, 3, 3, 
            3, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{55, 10, 31, 54, 17, 31, 5, 38, 40, 55, 38, 4, 
            17, 5, 53, 29, 55, 53, 2, 41, 31, 54, 4, 5, 53, 52, 4, 2, 54, 2, 
            54, 55, 54, 52, 1, 2, 52, 1, 5, 3, 52, 3, 55, 3, 1, 1, 5, 2, 52, 
            53, 55, 4, 5, 5, 5, 3, 52, 52, 55, 1, 53, 47, 55, 3, 54, 55, 5, 
            55, 1, 4, 15, 52, 5, 10, 6, 1, 4, 14, 2, 52, 54, 13, 34, 54, 52, 
            52, 50, 40, 2, 54, 5, 53, 55, 29, 8, 34, 4, 54, 29, 53, 53, 5, 50,
             52, 3, 38, 4, 55}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJw9Un1Q0gcYpk86W4tqGfYhWql4uzMu9eTSehGvMi/L2lrMthub4VltyzLr
59QOzDPSLLSPs6ygUqNuWbgzWLa9gCSQGpgSrFoCBQHpBqN2ujT384/84733
j/d53vee53kjv9u7VTCJQqF8T5Za47VBqgbNp6rfio/9ChGLuPqPd2qAiMuM
L+lxAm94Q9/mo21gn2NgVjnaQfWDteQm9Q4K6R1Tcypygc8r1RLzHTDD5VN0
HelGceZY2DlGDshq0myOsV4QvxfceDyrHWSDu7LCFzxDWrnv23kDGsi61PV8
HfUWmCVOwTXmA+T9vOGAd40RDaKhfy1cNdRpto1VaxXA/tLPPUO0gDxhcYWP
50ViWp6S/aIb8kKOR0kjrUgJGQiLumdAOyOyV5akR3ZhUpuryonpln8sQk8v
DvFTuSu2+FD99EKg+Z0WKNrylpb2P4E9mOMoffcQ6aenMKddcaOKCGSbqHpk
3nsickb3o1iRENNA4lUrYkxctR45l29cvNVjQzERnvQiWQPir3Pp+2PdaMhP
7JsSrUdD3ScdxgQT8L3ZL7dndqKt+gmnS0vywrcbM652oawpjj0n4w8wiEpW
LSZ9iNCnUhvJ/UP+VsbhQ/fRzzi8ekcR2Qui4obXG5B+ZOEv4zok+WOyZtJv
2+d3q0NH20CWXq+qJ3XTH302uo+8r26fPFJ+Voecs/XzigQdaHdErX7bqMH0
vuLEbN55jLAV0KbX6FD1/jqxUXcVzAXRs1t/NyEtnjebdaIB6exBxdQGFzAr
s970SzuRGJF4x3NibzyaUhGvRbUvtrys5BGybSN3qxb8DZ5awQxRrBxuf7Rs
tHWtDu0Hnxcqlr8CZmNk7UWrBjxC+fk4XitQ1i8ZKCZ5rJshpeM6/OGMv/Yt
tUBestzbudKKnrV7js0MMyDxnzU4PWhHym+1Fr3rNtDcc+VUoRxsbmqNuc2E
ZqOz/1JTB9K/SBkgHt7HD3/DChV65wa7wXOSr/tK3oQpyWXBxyGLOBLlfOG4
v/l2yf5AGSKHZpUGvwlM/JtwrylQ/Ew5cafuYIL0R24ZMguHci9zX03g6JVp
LZt8ShT+NGv3IdcwqE4uHFSSOXyYcyozrrE+NWJ6UerTJdCDHDeLH5ooAl6y
Ms3BMaPfKI1pFr+G/wHSgtC8
           "], "Children" -> CompressedData["
1:eJwdkMVuFAAABSfFWrS4S3GHIsWleHG2uG9h2yKBZCEhfAeuxd3d3d3d3d1t
WDjMSybvNnEpYwOpUcC46MgEghMSw+HgxOSYiCSNGR9KC4XjE9L//aMjRP0n
E5nJQkc6kZVs6BmjOW1zWhBDdnJwyvwUICcnzUVu8nDCP+YjluPm5Zi/Peov
j1iQQpTlsIU55E9LUYSiFKM4PyzJd0vwzYN+9YBf3G9p9lmGvcaxx8/uthzl
+WQFalGbilTio7uszE4/WIWqVKM6NXjvDt9Zk7du943bjKcOr21KXbZaj/q8
cosvTaAxm21AQ164yec24pkbfWoTnrjBZqz3set8ZEse2oYHJnLfVtyzNXdd
a1vWeMd2tGe1HVhlEiu97Qo7s9xRkWJd6Motu9GfZXanBzcN0IelJrPEniy2
F7254SKvu9C+LLAf873mPAeQ4UAGcdXBDGEoV5xrkDmOZLYpDGM4IdKZ5WVn
msoM05juJad50RFccKrnneI5J3vWSf4FeD/i3w==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 3, 3, 2, 2, 4, 2, 3, 3, 3, 3, 4, 
            4, 2, 2, 2, 2, 4, 3, 4, 3, 3, 3, 3, 2, 4, 2, 4, 4, 4, 4, 3, 4, 3, 
            3, 3, 4, 3, 3, 3, 3, 3, 3, 2, 2, 4, 3, 2, 3, 3, 2, 4, 3, 3, 3, 2, 
            4, 3, 3, 3, 2, 4, 3, 2, 2, 3, 3, 3, 4, 4, 3, 3, 3, 3, 4, 2, 4, 3, 
            3, 4, 2, 4, 3, 3, 4, 3, 4, 1, 4, 2, 2, 4, 3, 3, 2, 4, 2, 3, 3, 3, 
            3, 2, 3, 4, 3, 2, 3, 3}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 4, 27, 52, 15, 53, 9, 55, 5, 55, 52, 53, 
            27, 8, 5, 3, 52, 52, 20, 1, 2, 53, 1, 52, 1, 1, 55, 2, 34, 47, 1, 
            2, 1, 2, 8, 17, 53, 52, 41, 53, 2, 52, 2, 17, 53, 35, 5, 54, 53, 
            5, 47, 27, 54, 55, 1, 20, 13, 54, 5, 3, 4, 55, 31, 53, 5, 33, 54, 
            14, 47, 52, 3, 54, 1, 4, 13, 4, 22, 23, 5, 55, 2, 35, 53, 3, 52, 
            53, 4, 4, 52, 15, 55, 2, 53, 1, 52, 1, 2}], "NominalSplits" -> {},
           "NumericalThresholds" -> CompressedData["
1:eJw9UX0s1AEY/nFx94fqt1ahcEezqa1iky7FW0mZmI+y1MaOSjYrX31IXVHK
CXPM7JQkZKeGk9jF8t6du+PqyuE4RVxyF92uROoWqd8//PHu2bO97/M+7/O6
xidHnrUiCCKOKnJ7QI7fqS5k32Qm+lPIOXbkXzC3Hlgh4T9qM1UoKshOLZ6T
gqUxNO158QNgHPe3+d3WAfp1ukbyjAL1bxJo+67KwXLywLlckQYlb6fOslap
MIju6ZyuViJZORaRLpeAeMFvjXCkAzgN37ofueqQLR5UhJk+g1DENRdtUSJ/
Ld2P+KVA4RNfMtFrAPhsc7b07wfk2eX3ZgrrcCrdUDD/BZHns8tvyOkreEyW
J3jFKpFV3VJx43o/ZtRZu2VRGH55m1vUrAarxvtoZdRcT/jWv7z+pyBeqs8I
kddASv5L7S2qj0zWThvOtSI7QMrLpji/yafTRPFh9BiZmBGC8Jp1JYOUggMt
of19nBw53L3Nxc+6USCN+lcoawaxY1iovl2BvDDvcVWBGgW+HnasaSVGq813
lyid6ApzmX6DCjx/rrYQOa0QXqkeO0xvAsbMfYOM3obDtKKJeq4eOW1lMZlj
etD49u0uqlHjss/9eUlprYWdULX5Ruye1HEgNzTL3WnvcCowRKal7l/OiXhV
MthtEEHPz9uTTrkm4BHlwR2Uvihx9vT56n7grP9SbcifwBTfnYt3c2TIYOyw
nncXgmfEpdfZvBpkeMf8YdqP4rI/z+hDTHneD5hxYX5LdRtcyc3hzt5nZssL
5McvRl7cakTJFe5FWcMnFGutnCM1IxCk896YZ/8dJC6L28sH2iArKl0lOXhr
5Z+MTXMJmcZGmPIixRFPm4Fd8nB9pUmF5NBpJt+oXdmvWTqhO8AtQ6LKv0vj
3QusD5NZFaUCrFrg9bQMlSI76WOn08Qb6BkbNmuERsiYGxxaW6JED62tcVSF
MGywoX8+2osCyQXd4wUZiNrt+TaOu/ZnBTgl2nYqIGjay1SrkaGlIbB9NcWJ
Odd7zkmj+B+43qLR
           "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9llRXZW0iyM7JCUUgJX0q2z134ibuPO+efsffOCAnZW1ay
995b5vPlh/fu3r3YOQsDcyOARZFhBYJLUkOh4NKcqHBkLFhcMK8glJg0v+oH
w0T8pxrVqUEKqWhN/nrJWkQSRW260Z061OWPXfhtPX4ZR33KjOaiP21AQ2Jo
RGN+eMEmnLct7WjKOZtx1uacsQWnbUkrWnPKSk/63TZ884RfPe4X2xPLMT/b
gY4ctRNH/GSpH+3MB+N572HfmUBXDvnWg76xBwMYSE968doSe5PIK/vQl368
9IAv7E8SxT53v8/c5yAG89S9DqHIJw4nmaE8do+PHMZDd/vAXY5gJPedSho7
zWAs6RR6z1GMZgx33eEdt5vJNm+71Sy2OI5sxrPZSeQygYnccpM3DZDDRm+4
wTzWW+E6J5PPFNZ63TWWu9ppTOeaq5zBSmeywlnM5qrLvWKQyy7zH2uSzOo=

           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 4, 3, 4, 3, 2, 3, 2, 3, 3, 3, 3, 4, 
            3, 4, 2, 4, 3, 4, 4, 4, 3, 4, 2, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 
            2, 3, 4, 2, 3, 2, 3, 3, 4, 2, 3, 3, 2, 3, 2, 3, 3, 4, 3, 2, 3, 2, 
            3, 3, 4, 3, 4, 2, 3, 4, 4, 3, 3, 3, 4, 4, 3, 3, 4, 2, 2, 2, 3, 4, 
            3, 3, 4, 3, 2, 3, 3, 3, 2, 3, 3, 2, 2, 2, 3, 3, 2, 3, 4}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 55, 55, 3, 34, 6, 52, 54, 30, 53, 38, 31, 
            6, 5, 54, 3, 4, 52, 55, 5, 55, 50, 52, 54, 52, 55, 55, 1, 54, 52, 
            3, 2, 47, 34, 5, 29, 35, 55, 55, 54, 5, 4, 4, 17, 53, 55, 2, 5, 
            55, 48, 52, 46, 54, 35, 2, 30, 4, 15, 2, 31, 53, 3, 2, 3, 1, 3, 
            54, 13, 55, 16, 2, 54, 54, 1, 52, 53, 53, 13, 54, 27, 12, 5, 4, 6,
             5, 55, 55, 2, 3, 54, 55, 4, 4, 47, 10, 53, 2, 4, 8}], 
          "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9Un1QiwEYHxdFFy/VlO9V171OFH0Y4dnCboeriShfp7oyckpx14fy5uN8
5/Jxh8iS9HYyM6UZebZrtbV1GrWxSobaJi6pSzlH3n/sj+ee+93z3O95nt/v
4SSlx6aMY7FYyUwIV68RiL5+huvhl8buR+cjK03bEh7UjLThJpm1wIaEbTrt
StHgoOibi+NrQRIx/2xA6C8QJb/c/2BYj+/8q+69OiYHmceXpbLmEhR/vUVL
igrBOOFUecHperCmeVaU+2jguoZ9YPaMLqTc/bqrtRYUZ9nLWsNagVDWe4Qd
7gJCdUMQuFCHbqmHJWNDr5AyFSuv8OzIs9w2+dU1oqi0pVvg+gj2eHuPJWma
MCNz4sj2ERsQJ2oSGjubUMZbV0o2tCC5pHZlRKIauctP5Ztn94G1WukVvOU9
xBe/8eo7r0bjSElhJnMXzY6o4XQpUfG3KnujphwyZpXGCqueAe9o7kmW/plz
3v+sUMapWh0GNH6piIl+bkDKZw3/Ib8dRhdvhnPlLTjwMNa7YYcJM6YL+nvG
2sCYbtfAyH3gmldUfT6oQCqxIs+gMODA0VZHfp4ZiMHelNHxDuAFCtOuRWmd
Oko+ZnL9O3TO+SHf+9fm8LVObDVb2cGkytkff5f8IG03o7jxlmqD1ACql/zE
EKZO6e9MKVzP+GWhIn2f9AMrSRcSw/isy5k33LO3FmVF+n1BRffwTIpe3M7o
RKeWyIMZTD+9ULnKtw/FA3NWGeRqcKtr2PGt9zmKOnal644jkHMPrlzA8O9p
Jly5nJ+Qzdm2t/mBHbh/LoabGB7J48lSwTQVElcndbj0FoNo2D9UcbUMnHwu
i/IvuPQAUdq9KUujAreZQ6m5NinE608L5QF2EE2NY7fRNrBuLXjkY5GDopLi
RuYw/0PVTHN80oNjZ9KgP9EOboNCy+soFXDPvh8gmb2Fu+POp2Q4UJfgbur1
toKMpZBKEqvB50eep5bx5b/PZAXn8u23aiAPcYKGltWjzuM3v9NVj+Ijxuhq
Rsfsb9e8ovpewD9fhqIW
           "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN8llOxNRPYqMrIjOzNfZI+vLvyUu48753+xN2XvkS1kZG/Z
K3uveH388N7duxefNT8wJwJYEBVWILgoNRQKLs6IDkda7sKcuTmhpOR5/352
mIj/VCCSimg2lahMOuOJ4oZViOGv0fzxulWpRpnXrE4NkrlqTWrx2x7U5oqN
iaUOdfllPX5anx9etgGXbEixjbjody/YhKZ057xxnLMVrWlGc74Zz1eLbMFZ
W3LGL562DW35bKGfbMdHT9mek3agI504YQLH/eAxEznqezvThSS6csR3duOt
h31jga89ZKkH7ckBe9GbPuy3Pyn0ZZ/92Osr9/jS3Q5glwNJZRA7HcMOB7Pd
Fw5hKNscxlaHs8XnjiCNzY4k31Hk+czRPHWTTxzLODb62A0GyOCRWUxgvbNY
50QymcRkHrrWB06hxDVOZRr3Xe10ZnDPVc5kpXdd4WyWe8cgt13mLZd60yWW
A5Y80Og=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 3, 4, 2, 3, 3, 2, 2, 3, 3, 2, 3, 2, 
            2, 4, 3, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 4, 3, 4, 3, 3, 3, 3, 3, 4, 
            4, 4, 3, 2, 3, 2, 4, 4, 3, 4, 2, 3, 3, 3, 4, 4, 3, 4, 3, 3, 3, 3, 
            2, 3, 3, 4, 2, 4, 3, 2, 2, 3, 4, 3, 3, 4, 4, 2, 3, 3, 1, 3, 4, 4, 
            3, 2, 3, 3, 4, 3, 2, 4, 2, 4, 2, 4, 3, 3, 4, 3, 4, 3, 3, 3, 4}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{30, 14, 35, 53, 3, 2, 55, 6, 55, 3, 47, 55, 
            19, 55, 55, 55, 38, 19, 3, 3, 13, 7, 15, 5, 13, 54, 41, 55, 53, 
            55, 41, 19, 55, 4, 52, 3, 20, 3, 55, 3, 27, 52, 2, 41, 5, 4, 2, 
            27, 47, 3, 53, 4, 52, 54, 55, 5, 15, 54, 55, 17, 4, 2, 1, 52, 30, 
            17, 15, 54, 52, 52, 17, 8, 54, 54, 38, 38, 55, 10, 54, 55}], 
          "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9kVtM0nEcxak50ZdGF401cyGbE6/YXJpmX3xRSqt/3vZf6YYXDDWHkms2
zTCbs0ZeWBkyVJqX/Wkq5qUxw36KgOkgmDE1s8K8oc36z1m5mRov+nCezsP5
nHMYmcJE/iEKhYI5xX2ZuNqn0sOWNLkgN94OWLPpayxVDRG0zUUf5jgi5qNu
jYZZgPa7p8l8dhqJDYPRQf1WZM8/3t5K10MhoWDhKTbg+p6wiVjLSLOrKknQ
t4LVWx5MZ8+DQ0zIg/EB4KYpb39a4iMsjbkdmmdGEe43V01bfUjwQ0EoayrA
8ZOU1GaYQNZyLMTizMNsPupzNW1ohqlq+/CgF2T9RD5eMAjvFTxzTYAONJtE
uYH65sAPc1x3Oe/uwZFtPr/XkK4Gu4dcvbJuQZraF1nfV74BKZwLv5o0gMh0
WnOnZviASxxzQ9fJMqIZ7aOnO5xZII2erplFo4gmZIiKnH2I9kiaIPQjCFwL
fa44eTh78h5LphWR2tenmDMaxHVtZJeVaMHRtUG5phhD1V6eSFw6Bdgrf6/s
fBVU322c9N55C/SEVPes8n7k51UmkSzbEC8pbu/yfRXs74XP5RGpomlE3Akq
DswwIJ5a1dltm0JiP9ORhUId4jCklWO+ayCYIqMmis3IrltITm2bBYeU71bB
ImAY3+oKoDqQAOuNr3y4BETp4WY32giwn2WEPD75C86UixY7tnWAVa3VV5RN
ImX0Li5hGw72wxXrDXaPcairHxLn/tGC5p2nv3zpMxJfisuJjDUi5Ryevasw
IqtwRQ9/O6AuPCmmwNgNvKrIBM6/RSCrT1+cfGJHYrrRJasqB/Z/xQJlXy6Y
J8CvnSFtmh4Bkh+aQu2zIx7vaHHLxhD6D/VkUwo=
           "], "Children" -> CompressedData["
1:eJwdielSDgAAAHdCOiVEolJCRBTlphBF0dQT1EzqV2a+mmk8FSqVI7nlTqRE
jgiVMyoK6+PH7szOplQeKzsaAtSFBVVW0ZAfCFQcLw8PRlFtfVV1VSArt+bf
Lw0S8p8XzuC5MxlwFqHM5pnhRKBh/PGpkUTx23lEM4dfxjJtDHPpd8on/rTP
H/Y6n8cuII6FLKKIg8TT4y4euZgElvDQRLpdygMn7TKJ+yazjBRS2cY9l5PG
hHddwUrG3coq7riJ26azmjVksI5bfvem31zLmJ1mcsP1bCCLbL563S9ecyNX
/ewVP5nDR3PZzGU/uIVRLzniRYfdzg463MkF39vubvJ4Zz572ccezvvWcxZw
1iEL2c8ZD9DmG1t9bYuHOO2gzb6ymBKaPEyjRzhlKSd96Qn/AkRzqvs=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 3, 4, 3, 4, 3, 2, 4, 2, 2, 4, 2, 
            2, 3, 4, 3, 4, 4, 2, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 4, 4, 2, 2, 3, 
            3, 3, 3, 3, 4, 4, 4, 3, 2, 3, 4, 2, 2, 3, 3, 3, 3, 4, 3, 3, 3, 3, 
            3, 4, 3, 2, 3, 2, 2, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 2, 4, 3, 4, 3, 
            2, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{53, 52, 49, 55, 1, 27, 1, 54, 48, 2, 55, 5, 
            14, 5, 53, 12, 6, 3, 38, 5, 55, 52, 53, 1, 54, 29, 2, 2, 55, 12, 
            5, 4, 2, 54, 55, 3, 3, 5, 2, 55, 54, 2, 55, 55, 55, 31, 3, 52, 55,
             4, 31, 4, 2, 15, 3, 8, 12, 55, 4, 8, 31, 55, 52, 53, 31, 55, 2, 
            52, 17, 15, 1, 34, 1, 52, 38, 4, 2, 17, 3, 55, 5, 54, 3, 4, 6, 54,
             31, 15, 54, 21, 52, 55, 3, 34, 1, 4, 41, 38, 3, 8, 31, 27, 55, 
            55, 34, 52, 4, 53, 2, 5, 4, 2, 55, 3, 1, 54, 3, 53, 4, 48, 2, 42, 
            53}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJw9kn1MU2cUxqtucN2o1AEF0cyqICCbY7MyiK6HmAwRmCkzmi4OU2GMKm6E
jww2gZWaaJEEjcsQK7DLqOwWBkWGrAnIKQT6wUfp+GwByYUupbg5WTrItcyx
u2Tyx5uTvCc55/c859mTlv1hxiYOh3OZfeKaziMr+9rQNrI1nlduRvLbnwPT
Bf3gEjYzZEMJVmk7Hk7segwJXneiigq7ILzR6BsqUWFQR+phn3vTaNunUVu+
boO46L1pR6cd6DqnyjdktGJhXX1X9Z4pZLj+9h6XAWSL8r6Pq+2o97K+n282
IhHs/vQrZwu45JTqoOQBMD3ZyztsOpT9Vk2RFaWgEwX67QqcRZInetTnHkYi
kbnYVmbEqsfqN/bbjShZzyRjWI7lKJUmqmkaxbVDc/HeWnApw8JuUA1oKvip
O4+t9HQ3/0KsFXkVZfV51yhYzpH7Cti5RIjCHJ0/C3T91TNXLk9C+IlDS2N/
LCJ1w82/U2REmn9INiIcAd3FEesgW5UB7tHbrB7r7ZxF9Vov2PKuflHMHUA9
R6F8PaUXJfEnX2lk/2XbPSVzBwZRvCaqm3BbkJLyyU+kg1iVsqD9PbsR4jKF
q96Zg5hQ+c07CXdNKDmVv3it1IpWn2P25vFJJBTzqvJWBP1+7ohzfQwIv2RH
7H++3sogSiMooJnv1nIjnMjZe55avXQfXvioK+leEvYMIJF7N+swq0u39t42
aqYTXuxVHr95PYg2YEzaPeVUkxEFk1pxhGpggyshsNT+y58mpNrL5meO6YEK
yg/4zNKLsqmz6ZpQE4SPezlnzQi6uVcltSHDyHO+RnnLKZBUP92pKBpFpbTr
wJjBgPQWviNWcBqorO1hjvIFLLzwz26/c60oqX5SSQeYgZoszjldocZwdcHq
D8GIUjxaJvqyDwTv2ooebe4H0lPTRbw9gUzFMiMtaUf6TIk2yN4GUSFuTkFu
PxLEwc0roRQITNf/puZbIcgnKeWD77s3ctj65GnSj897UMz1VASeGEC6s4fx
SOkN3pjdLy0NOezAuaSs+5Xl0/OzuHGF3ZBAvun7sikdiJ0tzniWb8Pf/+8h
PXV8PbFYA1WhwR73DhLEU9FZwyt6NIkjnitHG4HTlyx4K5KCm8+YjzTsHenI
1LmqZAtI6HbSkfkAZZ4G34feHSiIFtW2sH3y/uSWJjYvYoPMvGAdQvmEf2ip
bgaIk+NC/0Q7SLZd2WScn0LeX9pEC5s/V3mksDnJBsyR816GsxMbesPdiWG5
bM7F06nZJgUCWfd5zdbKZ/AvRZ8RYg==
           "], "Children" -> CompressedData["
1:eJwdiVN0EAAAAO/lZdu2bZtb9qplLtdvtm3btm3btl3X6uPuvXuXplW3wLbh
gJ5RwhQY3LdMaGhw/6CAsKjStVdIu5DQPAXb//sDwwj3n/BoBGpy0ohEIjJR
qEBFAojKH08Yjej8NjcxiMkvcxKL4/70mLGJQ1yOmpgkxCM+P0xAQhLx3SN+
87BfPWRSDvrFAyYjOZ9NwSdz8NGUpGK/H0xNGvaZlr2mIz3v3WMGMpKJzLxz
t2/Nwht3mZWdvjYb2dnhK7f70m2+MBfP3Woe8vLMfDy1EPnZYgE2+8SCPHaT
hSlCUTZajA0+cr3FKUFJ1lmWtZZijQ8tzQPLcN/VlmOV5VnpPVdYieVWozqV
WWYVllqVJd51sTVY5B0XetsF1mK+talDIEG0JJi61KMZzalPAxrThFs25Kbz
bMRcbzjHpsz2urO85kyvOsMWTPeK02xFay471Uu2IYS2XHSK7ZhsJzrTnkl2
YKIdmeAFx9uFrvSlH90YZ3fGet4x9mC0ofSkF6PsTR/OOdKzjvCMw+3PMAcy
1AEM8bSDPeUg/wLu3ADf
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 3, 4, 4, 2, 2, 2, 2, 4, 3, 3, 4, 3, 
            2, 4, 3, 3, 2, 4, 3, 3, 2, 2, 3, 2, 4, 3, 3, 3, 4, 3, 3, 2, 4, 3, 
            4, 3, 3, 2, 3, 2, 3, 4, 4, 2, 4, 3, 4, 3, 2, 4, 4, 2, 2, 2, 1, 3, 
            2, 3, 4, 4, 4, 3, 4, 2, 3, 4, 3, 3, 3, 4, 3, 3, 3, 2, 4, 3, 3, 3, 
            3, 3, 3, 2, 4, 4, 3, 3, 3, 3, 4, 3, 3, 3, 4, 3, 3, 4, 2, 3, 3, 3, 
            4, 2, 3, 3, 2, 2, 3, 4, 2, 2, 4, 4, 3, 2, 3, 3, 1, 2, 3, 4, 2, 3, 
            2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{38, 31, 14, 15, 4, 55, 52, 23, 11, 52, 3, 54, 
            1, 8, 1, 10, 5, 2, 4, 4, 1, 53, 4, 2, 41, 1, 54, 2, 3, 38, 17, 17,
             55, 3, 55, 2, 5, 54, 3, 3, 52, 5, 5, 53, 31, 5, 54, 52, 2, 54}], 
          "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJwBnQFi/iFib1JlAQAAADIAAACITf8ZmR9jP7iciFUMzMs/+A0U2cHoxj9Y
C5UNH/XPPzhL6Hs3GNa/QCk3Hkg+ur9QW99nSjfIvwga82Z65q4/eBIDoo3o
vz8QkANRy4LBvziEgnNO6+M/8HVod8IJ6r+QLJOO4JKeP7j7PQ6o27s/MCsH
OX180r/Qk431iIm5PxCrDGmLrMe/0NriJssy17+AlHHhYNy9P+BIE43EW9W/
IMy+6wit4D+w+OinV0DJv3AL1CphfrS/kAs4sIJ71j+YwVX/jcKxP+hAPkbU
HOo/2H8xsLwHHkBYowaZgnvWP7C3VU9Q6+M/gBjGBGOGZj9oQdbxrwuwP2hB
1vGvC7A/0AwfCu46zb8QFAiITuvjP5hwPAjyXcG/EPWJKaH7wj8gd8DYMP27
PzCmybgmNee/8DtFgss0zz9AEyCXcSnmvxiLOgZmsce/2CZp+J4h17+Yq05X
UiLAv+j+x0GGdqO/OFnwQpV4sj9QT8MBLv27PyDFwLZkA8S/MM97WZMMyb9Q
XXiVrgzWvyRT3YGnBAdAZj7JsQ==
           "], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {22, -26}, {
            6, -27}, {-1, -28}, {7, 8}, {-2, 9}, {-3, 21}, {10, -29}, {
            11, -30}, {12, -31}, {13, 14}, {-4, -32}, {15, -33}, {16, 17}, {
            18, -34}, {-5, -35}, {-6, 19}, {20, -36}, {-7, -37}, {-8, -38}, {
            23, 24}, {-9, 25}, {26, -39}, {-10, -40}, {27, -41}, {28, -42}, {
            29, -43}, {30, 31}, {-11, 32}, {-12, -44}, {33, 34}, {-13, 35}, {
            42, -45}, {36, 37}, {-14, 38}, {39, 40}, {-15, -46}, {
            41, -47}, {-16, -48}, {-17, -49}, {-18, 43}, {-19, 44}, {-20, 
            45}, {-21, 46}, {47, 48}, {-22, -50}, {-23, 49}, {-24, 
            50}, {-25, -51}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 3, 2, 4, 4, 3, 3, 3, 3, 3, 2, 3, 
            3, 4, 2, 4, 3, 4, 3, 3, 4, 2, 3, 3, 2, 2, 3, 3, 3, 4, 3, 2, 2, 3, 
            2, 3, 3, 3, 2, 3, 4, 2, 2, 3, 4, 3, 3, 3, 2, 2}], "RootIndex" -> 
          1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 10, 55, 4, 55, 52, 55, 2, 55, 9, 1, 55, 55,
             4, 54, 52, 52, 4, 12, 15, 4, 2, 52, 15, 52, 5, 23, 3, 38, 53, 3, 
            2, 55, 52, 1, 52, 52, 1, 47, 4, 55, 52, 1, 41, 4, 17, 54, 46, 3, 
            55, 53, 17, 5, 5, 38, 52, 54, 41, 53, 1, 31, 53, 12, 52, 5, 2, 2, 
            53, 53, 8, 47, 1, 4, 3, 40, 5, 54, 3, 5, 53, 3, 53, 55, 53, 52, 
            55, 55, 54, 52, 4, 54, 55, 3, 2, 52, 3, 54, 3, 53, 5, 3, 4, 53, 
            53, 27, 30, 54, 1, 1, 27, 55, 1, 6, 30, 40, 55, 17, 55, 3, 53, 55,
             47}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJw9kmtMk3cUxgurs0tGUoRhLW4rgS2FGS2GbLVz/DvdWEds7LyEl81BIA46
m43qTORWKYKhMGAqhlWCUMNlbx1IU622Y3Kw9G5bOlqgrDC5bKVKtI0IY3HF
vftQPpwvJ3me8zvnPEmFJYe+iiKRSOVElWqHcs1fjIOrpWlFVq9DzCsdP2D2
BqBNiWy4ZwLYiH9CcX0IGJBVtSw3Qoj/AQt0ehB/uRYMFWsAi8k9z1oaBQp9
uajcfwOx6M6rksox4HlPh/eRRwHv8q0XNrhg9vRI2w3CT37SmU33qQBn9k+4
z5kBu2OIF/cZAS+pSfvz+/kNH6bnZf+0FRC2zVOjJHSCFIZ7kZjHeGlG21Jg
AiptbazY1Y8UnxwrbySbQVE2E84sM6CInvfgQj5FeRXYFtv82fNSRP033vgt
1QjSxqAyp7kbWKda3wgSftSLh97PtjtByhr8VLLahbDiO7FnCX5tVEZnBnkE
8Merj3urR4AnyKz1bH+EtOvK0gOGLsRLfr1xgeBlVlNVbQseJHyatX9nqhaE
eT5pJaEXXE/bflykRF7vgd17V2cAr4juoFDvIfZDzpPodxaRoMP+R9bmAcSu
nwkxCR5BkUZhi19A7MA28rLIBq6SRQP6uxe5zt0qa0+aBEstptZsvg3CpXZc
0VyNxDmv7Wq1GiHAid1CHV9GkXniF/l1K0sjMFuyJ9dN8Lp2UKZC2Toko5NH
zDvlG/flURp/L5wwA+PZwKa16ADi9uXvk1ZMIMWe8IP+53oUQAM/1TiuAXvp
rURHpwm8wPTNh/CN/RUZ4HgXawMZ+5jUSOQHK1cFHb1WwHs4VGG6G+EHfQfp
W6fhQieniM/Sg2Wy7h9xqh8C6sTJlPAgUqXGtZw5oobhDkfz/31x8i89/M6b
oL3/njuTagJZ2fR6VsKvEBIkKjP1FmD8/KK+yWQEWkya9lrwLpSqPyraKyHy
NJ3aPrdoAObKwKaGrUHEpNWl9554BAp33HC19T7I7OyVgjYbBHZ5fmz0e4DG
D3zz5kkLeJN0iq+JvlyQw9l9bw7E/TGffUdwsLc8SRh9dhuwo2phIsFPGX5+
xJkxirDDfImJ2JNUcLj2eKwMWG8nkK504sCtF53SNA0hb7Ky21mlRsMSXXYY
rwJx3v7P56ZuIeZTSUVFrhVJ27gfRuUNorWP00WeHU6E/xatT6qthFlRXE8X
zYBIdy+Nm/9Socj9ZtdvXm5dHUOR3IS4/phXUnxIdrF7rJVhA4rc8WqfxgT2
M7Kjlx5SuJG//AeAbg+3
           "], "Children" -> CompressedData["
1:eJwdiVN0EAAAAO8t27btWrZdy26r5VYt959t27Zt27Ztd60+7t67dxlCegR1
CAB6R49QUHD/8uHhwQMbxIiI6mF9QjuGhhcI7PTvD4og4D+RiMxBS1OGKEQl
GtEpQiAxiEkODhiL2GRlv3GIiyYmHvFJSCISsM8/7vW3e/zlbn+6yyQkJRnJ
+eFOU5CS7+4wFalJw3a/uc2vbvWLaflsOj6Zngxk5KOZ+OAW35uZLGz2nZvM
xkbfmp03bjAnuchNHvJTgLys97X5eOU6X7rWgqzxhat9biGeWZinrvKJRSnO
Sh9bjEeusATLLckyH1qKBy61LOUIowflqUBnulCRJXZgsZWoTBWqct9QqrHI
ey60OjW46wJrUovazLc986xDXepRnzuGEMRcb9ucBszxlg1pxGxv2pgbNqEp
zbjuLK850xbMsCWtuOp0W9OGtkzzisFcdqqXnOJF23HByZ53kuec6Fk70okJ
nnG8XRnnabtxyrGetDsnHGNPenHcgYTTmwGMtg+j7M9Ij9mXfozwqMM94jAP
O9RBDPGQg/0Lpvz+0Q==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 2, 3, 2, 2, 4, 2, 3, 2, 3, 4, 1, 4, 
            4, 3, 3, 4, 3, 2, 3, 3, 2, 2, 4, 3, 2, 3, 3, 3, 4, 3, 2, 3, 3, 2, 
            3, 4, 2, 2, 3, 3, 2, 3, 2, 4, 2, 3, 3, 4, 3, 4, 3, 3, 4, 3, 3, 4, 
            3, 3, 2, 2, 3, 2, 2, 4, 2, 4, 3, 2, 2, 4, 4, 3, 3, 3, 4, 4, 2, 3, 
            3, 3, 3, 4, 3, 4, 2, 2, 3, 4, 4, 2, 3, 3, 3, 2, 3, 4, 2, 3, 3, 2, 
            4, 3, 2, 4, 3, 3, 2, 2, 3, 4, 3, 4, 3, 3, 3, 4, 3, 3, 4, 4, 3, 
            4}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 4, 54, 5, 38, 4, 43, 39, 20, 29, 52, 53, 1,
             38, 3, 1, 53, 55, 55, 8, 55, 54, 53, 54, 16, 17, 53, 38, 52, 53, 
            17, 3, 5, 52, 2, 1, 2, 38, 41, 3, 48, 4, 55, 1, 53, 52, 2, 4, 55, 
            2, 2, 38, 55, 27, 42, 54, 55, 8, 7, 54, 55, 31, 9, 53, 3, 54, 31, 
            55, 53, 38, 55, 16, 21, 53, 1, 10, 47, 53, 1, 52, 55, 21, 1, 35, 
            5, 54, 5, 6, 35, 55, 52, 54, 54, 2, 5}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJw9UmtMkgEUpey1mflVupzZRllqUqmUlmXd+VhzlQna0pZFmiHNGvSa2jRQ
M2tGc7IZaSZp6ac1pZJEzV0wCdQWmJnEfCC+yLJoWSNNF/3QH3dnu3e75+yc
sz6BG3VmAYVCYdmGOGkXvnamCQQTxYM7LveC5EaQ+KhyHPUpW0pdbXuKZ/v3
6f2R4PJ0YZ6P7Z66yq5MaEbgzUaMOLypAfLxboLj1wWMB2/79y+tBfmKS3SM
KgTdhJLMeKJGXn8/GcRQIefLfVJyJxPI8cHMw1+GYJc7L14xY0Bqp1uNk6ke
OHXWh1yDFnl7soylLXK0ZP5y5ow0A+PGZr/I3g6U0+l5pZ9NKPV2GEmmDYNk
rCi4m2ZEUuipyI6uB825NvfAqUcgnoopSV7zAqkJtXtachJBsI/vWKdXoSWE
yoy3VyIn+OOPWnspCOzTKy9uHkXi94XCxqUvMT9lecZnvgJj64cqJ5NkaBUV
eBy7PQCUrcwLPl6K+X+Mam+3xOQq4A1fCbPz60a9e9Wjd/zncGr4aYiCrUYi
705GoL4DYzed3dDtNg66l02qojoDWC05ytOhIiQdyvMqpluA8JOFpYVkoUbk
8SGOqQSxgmwesPFSiJlFMzac80s6xIrx+ZML1oDZVc6018AwnOBqshCWrdZp
D/aNouB3W5mHth3zd0YHn7flkc/0jxB9UgK5cZjN9xoD34jKcO+QBhQzTbVf
udWwzPUn++poDVgnXVm8jlbU+CwP+O+DxeokvxymA93inPJruc1gdDJpn31r
R5c/jSulvq/m9bj4hy6hlQpxTgfHsm5vx3MbX/2Be0yWDKkVV4Q/J9+CTiT8
dfNWA8hnq1IPtZaDvvcv665Wg5Zn0eeknXqUl9HOw4QaJVGOgiM9WqQ0F3Sr
R6QQ3na8Mz39Pc71SddjCizzHARqsdlCFBpBgn2JQWmtYBaQRdtiZfO9I86o
0pShcvDKHkuK0L1B4nuuShTzEcXHzPSj243AYUfK3tF7MLawJO56cRf8A9cS
l5k=
           "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9llb1XVoQoIyNkldUw+5KVdLkLP3H3cef8N/YqskWIUrL3
yt6yySbPxw/v3b17UYtXBJaEASvDQwrkrU4OBvPWZEaEIm35qvyl+cH4hGX/
fm6IsP/Uoz4N0GQact0/jqYR4URwzQSu2pgmNKUZdV6xOS347XB+edmWtKI1
bRjGJdvSjk505qcX/WF7vtuBjlzwm+eN5JyDOGsXuvLVbvSmD905Yw9O+8Uo
PtuTXlQZzSlrrbQvMcQSxycr7Ed/PnrSD5b73jIHMJB3nvCtxx1MPEMo9Y3H
HMpRX3vEV5ZY42FHcMiRFDuKRF560BcecAz7Hcs+xzGe5+41iT0+c7cTmMgk
dplCKpMpcgo7feoO00hnEYVOZRpzmcd0ZvDEAmey3cdmMYsMHhngoZk8cJv3
nc09tzqHLd51s3ecz0I2uYCNVpvNbTd4yxxuut5c1nnDtf4Fj/PI7A==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 2, 3, 4, 3, 3, 2, 4, 3, 4, 4, 3, 3, 
            2, 3, 2, 2, 4, 4, 2, 3, 2, 3, 2, 3, 2, 3, 3, 4, 4, 3, 4, 2, 4, 2, 
            3, 3, 3, 3, 2, 4, 4, 2, 3, 2, 4, 3, 4, 4, 3, 4, 2, 3, 3, 2, 2, 2, 
            4, 3, 3, 4, 3, 1, 3, 4, 4, 2, 3, 3, 3, 2, 3, 3, 3, 4, 4, 4, 3, 3, 
            4, 3, 4, 3, 3, 2, 3, 3, 3, 4, 2, 3, 3, 4, 3, 3, 3}], "RootIndex" -> 
          1, "NominalDimension" -> 0|>]}, "Processor" -> 
      MachineLearning`MLProcessor[
       "FirstValues", <|"Info" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+JZM0HgpD0hOkWRO/KE07RRmk40Axh8wEkDAI1Pnak=

            "], "Type" -> "NumericalVector"|>, "Key" -> "(f1f5(f2f3f4f6))", 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], 
      "OOBConfusionMatrix" -> {{0.25001021205676266`, 0.24466636283924065`, 
       0.07787431932519003, 0.2288111302475244}, {0.2499965959810791, 
       0.24734484146338212`, 0.18517281153751422`, 0.24376578027132723`}, {
       0.2499965959810791, 0.2606572799982943, 0.500569413589354, 
       0.28862973034273565`}, {0.2499965959810791, 0.2473315156990829, 
       0.23638345554794168`, 0.23879335913841276`}}, "Calibrator" -> 
      MachineLearning`CalibratorFunction[
       "TemperatureScaling", <|"Theta" -> 1.876569953287592|>], "Method" -> 
      "RandomForest", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "FeatureFraction" -> <|
         "Value" -> 55^Rational[-1, 2], "Options" -> <||>|>, 
        "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
        "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
        "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
        "Implementation" -> <|"Value" -> "Default", "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.188068`5.725859899595604, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[1.1130065344199256`, 0.029329806949628636`], "Accuracy" -> 
         Around[0.6086873292218694, 0.04068197879930933], "EvaluationTime" -> 
         0.000022348252015324235`, "TestSize" -> 283, "ModelMemory" -> 255864,
          "ModelUtility" -> -0.8055660938413114, "TrainingSize" -> 1131, 
         "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 2329856, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[1.1130065344199256`, 0.020739305384974736`]}, 
         "AccuracyHistory" -> {
           Around[0.6086873292218694, 0.028766503081078986`]}, 
         "Configuration" -> {
          "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
           Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
           0.5, "Implementation" -> Automatic}|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "RandomForest", 
           "Options" -> <|
            "FeatureFraction" -> <|"Value" -> Automatic|>, 
             "LeafSize" -> <|"Value" -> Automatic|>, 
             "TreeNumber" -> <|"Value" -> Automatic|>, 
             "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
             "Implementation" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.247202291168413, 0.015647389189071638`], "Accuracy" -> 
              Around[0.5586634981337953, 0.049448528868826495`], 
              "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 200, 
              "ModelMemory" -> 85984, "ModelUtility" -> -0.91661399140447, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              156848, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.247202291168413, 0.011064375003457626`]}, 
              "AccuracyHistory" -> {
                Around[0.5586634981337953, 0.03496539008284597]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.1415842296829957`, 0.021021716318006495`], "Accuracy" -> 
              Around[0.6077523232657355, 0.019810981149131546`], 
              "EvaluationTime" -> 0.000019952623149688793`, "TestSize" -> 600,
               "ModelMemory" -> 93741.33333333333, 
              "ModelUtility" -> -0.8292999761979101, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
              234074.66666666666`, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1251583479796599`, 0.027407086320993274`], 
                Around[1.1580101113863317`, 0.014941724817118411`]}, 
              "AccuracyHistory" -> {
                Around[0.6094760748897424, 0.027803841835105467`], 
                Around[0.6060285716417285, 0.028018804642146074`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.126797176194803, 0.0074431792679123775`], "Accuracy" -> 
              Around[0.603791266606859, 0.010218126170371303`], 
              "EvaluationTime" -> 0.000019120344713572696`, "TestSize" -> 
              2264, "ModelMemory" -> 135322.66666666666`, 
              "ModelUtility" -> -0.8139160472791294, "TrainingSize" -> 250, 
              "TrainingTime" -> 0.08628854898161875, "TrainingMemory" -> 
              654957.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1240179948230564`, 0.01012865668847846], 
                Around[1.1295763575665494`, 0.009437795206031423]}, 
              "AccuracyHistory" -> {
                Around[0.6042890330553146, 0.014578271853215924`], 
                Around[0.6032935001584034, 0.014292872470478342`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.1130065344199256`, 0.029329806949628636`], "Accuracy" -> 
              Around[0.6086873292218694, 0.04068197879930933], 
              "EvaluationTime" -> 0.000022348252015324235`, "TestSize" -> 283,
               "ModelMemory" -> 255864, "ModelUtility" -> -0.8055660938413114,
               "TrainingSize" -> 1131, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 2329856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1130065344199256`, 0.020739305384974736`]}, 
              "AccuracyHistory" -> {
                Around[0.6086873292218694, 0.028766503081078986`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000022348252015324235`, "MeanCrossEntropy" -> 
             Around[1.1130065344199256`, 0.029329806949628636`], 
             "ModelMemory" -> 255864, "TrainingMemory" -> 2329856, 
             "TrainingTime" -> 1.003085874359093|>, "Index" -> 1|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            4], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], <||>], "MaxTrainingSize" -> 1414, 
      "PreprocessorEvaluationTime" -> 2.10546875*^-6, "PreprocessorMemory" -> 
      162512, "InputDimension" -> 55, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.9603219837180875, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.879358295348941`16.34133488180639*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.008024686994872745, 
          "ElapsedTimes" -> 0.01473, "ExperimentCounts" -> 1|>, <|
         "TrainingSizes" -> 50, "TimeBudgets" -> 0.04012343497436372, 
          "ElapsedTimes" -> 0.060896000000000006`, "ExperimentCounts" -> 
          2|>, <|"TrainingSizes" -> 250, "TimeBudgets" -> 
          0.20061717487181863`, "ElapsedTimes" -> 0.250929, 
          "ExperimentCounts" -> 2|>, <|
         "TrainingSizes" -> 1131, "TimeBudgets" -> 1.003085874359093, 
          "ElapsedTimes" -> 0.775341, "ExperimentCounts" -> 1|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"Materials"}, "ID" -> 
           2846111867015398573|>, 
         "f2" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {20.857}, "ID" -> 
           41728420326286313|>, 
         "f3" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {24.308}, "ID" -> 
           1436697572522429983|>, 
         "f4" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {227.299}, "ID" -> 
           536027689597629633|>, 
         "f5" -> <|
          "Type" -> "Text", "Weight" -> 1, "Values" -> {"Estimated data"}, 
           "ID" -> 5753609278033805624|>, 
         "f6" -> <|
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {106.653196777609}, "ID" -> 8080186329754682489|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 2.432032, 
      "MaxTrainingMemory" -> 3307968, "DataMemory" -> 1910920, 
      "FunctionMemory" -> 493880, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 12, 6, 23, 31, 36.66302`8.316803215071124}, "Instant",
         "Gregorian", 1.], "ProcessorCount" -> 8, "ProcessorType" -> "ARM64", 
      "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, 3.8788070723199997`*^9, 
   3.8788071152477303`*^9, 3.878811629852172*^9, 3.879149119975829*^9, 
   3.879325483862817*^9, 3.879333011347499*^9, {3.879354686929783*^9, 
   3.879354696685204*^9}},
 CellLabel->
  "Out[524]=",ExpressionUUID->"ae6ce56a-a135-4d43-acc3-2ba1e901dba6"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Data type"], 
                   TextCell["Data type"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{
                   InterpretationBox[
                    Cell["Mixed"], 
                    TextCell["Mixed"]], 
                   StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]},
                  "RowDefault"],
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Text\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]],
                Annotation[#, 
                 
                 Short[{"Nominal", "Numerical", "Numerical", "Numerical", 
                   "Text", "Numerical"}, 10], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classes"], 
                   TextCell["Classes"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 InterpretationBox[
                  Cell["B"], 
                  TextCell["B"]], 
                 InterpretationBox[
                  Cell["C"], 
                  TextCell["C"]], 
                 InterpretationBox[
                  Cell["D"], 
                  TextCell["D"]], 
                 InterpretationBox[
                  Cell["E"], 
                  TextCell["E"]]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"61.", "4."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    60.8687329221869433127`3., 4.0681978799309330697`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Method"], 
                   TextCell["Method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 
                 InterpretationBox[Cell[
                  "RandomForest",ExpressionUUID->
                   "7cee9b4e-ad0f-4d49-8234-be4044e4ff37"],
                  TextCell["RandomForest"]],
                 StyleBox[
                  TagBox[
                   GridBox[{{"\"FeatureFraction\"", 
                    FractionBox["1", 
                    SqrtBox["55"]]}, {"\"LeafSize\"", "5"}, {
                    "\"TreeNumber\"", "50"}, {
                    "\"DistributionSmoothing\"", "0.5`"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                  "Verdana", StripOnInput -> False]],
                Annotation[#, 
                 Style[
                  
                  Grid[{{"FeatureFraction", 55^Rational[-1, 2]}, {
                    "LeafSize", 5}, {"TreeNumber", 50}, {
                    "DistributionSmoothing", 0.5}}, Alignment -> Left, Frame -> 
                   All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                   Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                 "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"2.93`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"24.6`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                   Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"1.1130065344199255861`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0293298069496286361`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "1.0543469205206683625`3.", "\", \"", 
                   "1.1716661483191828097`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 1.0543469205206683625`3., 
                   ", ", 1.1716661483191828097`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Model memory"], 
                   TextCell["Model memory"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"498.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training examples used"], 
                   TextCell["Training examples used"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               TemplateBox[{
                "1414", "\"examples\"", "examples", "\"Examples\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training time"], 
                   TextCell["Training time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"2.43`", "\"s\"", "seconds", "\"Seconds\""},
                "Quantity"]},
              {
               ItemBox[
                
                DynamicModuleBox[{
                 MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                 DynamicBox[ToBoxes[
                   Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.2209028758094642}, {
                    3.912023005428146, 0.13241697286204823`}, {
                    5.521460917862246, 0.11937925097753942`}, {
                    7.030857476116121, 0.10706494327341126`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.2209028758094642}}, {{3.912023005428146, 
                    0.13241697286204823`}}, {{5.521460917862246, 
                    0.11937925097753942`}}, {{7.030857476116121, 
                    0.10706494327341126`}}}]}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.20827751897275082`}, {
                    2.302585092994046, 0.2333708183575929}, {
                    2.302585092994046, 0.2333708183575929}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, 0.11383080330054485`}, {
                    3.912023005428146, 0.15066399067165798`}, {
                    3.912023005428146, 0.15066399067165798`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.521460917862246, 0.11275173044241647`}, {
                    5.521460917862246, 0.12596313651737936`}, {
                    5.521460917862246, 0.12596313651737936`}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{7.030857476116121, 0.08035963664959353}, {
                    7.030857476116121, 0.13307558745948941`}, {
                    7.030857476116121, 
                    0.13307558745948941`}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {0.7586295071817292, 0.09815647901879804}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{0.7586295071817292, 7.254177846456518}, {
                    0.09815647901879804, 0.2209028758094642}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.5586634981337953}, {
                    3.912023005428146, 0.6077523232657355}, {
                    5.521460917862246, 0.603791266606859}, {7.030857476116121,
                     0.6086873292218694}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.5586634981337953}}, {{3.912023005428146, 
                    0.6077523232657355}}, {{5.521460917862246, 
                    0.603791266606859}}, {{7.030857476116121, 
                    0.6086873292218694}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {0.7586295071817292, 0.53543526119347}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{0.7586295071817292, 7.254177846456518}, {
                    0.53543526119347, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.2209028758094642}, {
                    3.912023005428146, 0.13241697286204823`}, {
                    5.521460917862246, 0.11937925097753942`}, {
                    7.030857476116121, 0.10706494327341126`}}]}, 
                    Column[{
                    Style["RandomForest", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"FeatureFraction", Automatic}, {
                    "LeafSize", Automatic}, {"TreeNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.2209028758094642}}, {{
                    3.912023005428146, 0.13241697286204823`}}, {{
                    5.521460917862246, 0.11937925097753942`}}, {{
                    7.030857476116121, 0.10706494327341126`}}}]}, 
                    Column[{
                    Style["RandomForest", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"FeatureFraction", Automatic}, {
                    "LeafSize", Automatic}, {"TreeNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {0.7586295071817292, 0.09815647901879804}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{0.7586295071817292, 7.254177846456518}, {
                    0.09815647901879804, 0.2209028758094642}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, -1], 
                    Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, 
                    Plus[1]], Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                  ImageSizeCache->{330., {120., 126.}}],
                 DynamicModuleValues:>{}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> 
           ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  MachineLearning`MLInformationObject[
   ClassifierFunction[<|
    "ExampleNumber" -> 1414, "ClassNumber" -> 4, 
     "Input" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|
           "GICS Sector Name" -> <|"Type" -> "Nominal"|>, 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Disclosure" -> <|"Type" -> "Text"|>, 
            "Revenue (USD mn)" -> <|"Type" -> "Numerical"|>|>, 
          "Output" -> <|
           "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
            "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["FromDataset"], 
               MachineLearning`MLProcessor[
               "FromNamedFeatures", <|
                "FeatureNames" -> {
                  "GICS Sector Name", 
                   "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                   "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                   "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                   "Carbon Disclosure", "Revenue (USD mn)"}|>], 
               MachineLearning`MLProcessor[
               "Transpose", <|"FeatureNumber" -> 6|>], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {
                  "Nominal", "Numerical", "Numerical", "Numerical", "Text", 
                   "Numerical"}, 
                 "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          False, "Invertibility" -> "Perfect", "StructurePreserving" -> False,
           "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|
           "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
            "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Output" -> <|"(f1f5(f2f3f4f6))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+JZM0HgpD0hOkWRO/KE07RRmk40Axh8wEkDAI1Pnak=

               "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
            MachineLearning`MLProcessor[
            "SynthesizeMissingValues", <|
             "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Distribution" -> 
              LearnedDistribution[<|
                "ExampleNumber" -> 1414, "Preprocessor" -> 
                 MachineLearning`MLProcessor[
                  "ToMLDataset", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Text"|>, 
                    "f6" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                  "Processor" -> 
                 MachineLearning`MLProcessor[
                  "Sequence", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4209554619632865690|>], 
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 3407689957052572250|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 6386559724484824442|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>, <|"" -> 1|>}, 
                    "MissingCode" -> Indeterminate, "Version" -> {13.1, 0}, 
                    "ID" -> 6398143214224852052, 
                    "Output" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {195.3790406242356, 61.646977913209476`, 
                    190.01452218184144`, 2221.139431539642}, 
                    "StandardDeviation" -> {1024.181623136537, 
                    293.22971478478104`, 196.3462516724107, 
                    8256.563224223488}, 
                    "Output" -> <|
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 5272605604417048922|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {11, 1}|>|>, 
                    "Boundaries" -> {{-0.5, -0.40909090909090906`, \
-0.3181818181818182, -0.2272727272727273, -0.13636363636363635`, \
-0.04545454545454547, 0.045454545454545414`, 0.13636363636363635`, 
                    0.2272727272727273, 0.31818181818181823`, 
                    0.40909090909090906`, 0.5}, {-0.5, 0.5}}, 
                    "Version" -> {13.1, 0}, "ID" -> 6197818036640951475, 
                    "Output" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>, 
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Spans" -> {
                    Span[1, 2], 
                    Span[3, 6]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {13.1, 0}, "ID" -> 
                    8353511239162088478|>]}, "Invertibility" -> "Approximate",
                     "StructurePreserving" -> True, "Missing" -> "Allowed"|>],
                  "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                 Automatic, 
                 "Model" -> <|
                  "RotationMatrix" -> {{-0.016529304250428277`, \
-0.003977987447750752, -0.012477440984088895`, -0.04545168631433546, \
-0.040285349722368934`, 0.9979311128491188}, {
                    0.01596574457173288, -0.006708263073187452, \
-0.00040598392451674106`, -0.014556730175053777`, -0.9989129253090748, \
-0.04075535107125976}, {-0.6653732185251798, 0.1124523798151379, 
                    0.11146524296590558`, -0.7282974622862278, 
                    
                    0.0009043213447041751, -0.042313479935505466`}, \
{-0.4525941812355412, 0.18835870882694628`, -0.811184280639024, 
                    0.31857507990246814`, -0.012693627641696917`, \
-0.0028908558170766944`}, {-0.5865457203965476, -0.1266413177930213, 
                    0.5322936369719147, 
                    0.5964308669513955, -0.018364869771830078`, 
                    0.022858938234849496`}, {0.08872982681677569, 
                    0.9673554726846854, 0.21462337975498835`, 
                    0.10042505493141408`, -0.007130485725141593, 
                    0.012295392549469028`}}, 
                   "Precisions" -> {0.7412798880639702, 0.9964373275433729, 
                    1.0673796022522453`, 1.3993993968464005`, 
                    12.201704677895991`, 16.393220731846185`}, 
                   "NoisePrecision" -> None, "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, 
                    "Mean" -> {0.011739285984329209`, -0.006302120975041767, 
                    0.00004772992030729378, 0.00009223757588118813, 
                    0.00010485167865102885`, 0.00022815565912183614`}, 
                    "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4890335152835729504|>], 
                   "PostProcessor" -> 
                   MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6.|>,
                     "Key" -> "((f1f5)(f2f3f4f6))", "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                   "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                 "TrainingInformation" -> <|
                  "Configurations" -> 
                   Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, 
                    "Mean" -> {0.0117392859843292, -0.006302120975041762, 
                    0.0000477299203073033, 0.00009223757588118716, 
                    0.00010485167865105884`, 0.00022815565912184035`}, 
                    "StandardDeviation" -> {0.2507752898157967, 
                    0.287088148869262, 1.0003557397467897`, 1.000479951290525,
                     0.9999589168221408, 1.000059389178472}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 6, 
                    "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    2255176406760574746|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                   Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                 "NaiveImputer" -> 
                 MachineLearning`MLProcessor[
                  "ImputeMissing", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, 
                    "Mean" -> {0.0117392859843292, -0.006302120975041762, 
                    0.0000477299203073033, 0.00009223757588118716, 
                    0.00010485167865105884`, 0.00022815565912184035`}, 
                    "StandardDeviation" -> {0.2507752898157967, 
                    0.287088148869262, 1.0003557397467897`, 1.000479951290525,
                     0.9999589168221408, 1.000059389178472}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 6, 
                    "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    2255176406760574746|>], "InputDimension" -> 0, 
                 "OutputDimension" -> 6, 
                 "Log" -> <|
                  "Example" -> 
                   MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"Materials"}, "ID" -> 6891347935690616595|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {20.857}, "ID" -> 7118546871732690271|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {24.308}, "ID" -> 1379309737266346865|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {227.299}, "ID" -> 837637490153197528|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 3439309116171360036|>, 
                    "f6" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {106.653196777609}, "ID" -> 
                    6782593871927012987|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                   "TrainingTime" -> 0.056006, "MaxTrainingMemory" -> 746208, 
                   "DataMemory" -> 281808, "FunctionMemory" -> 77680, 
                   "LanguageVersion" -> {13.1, 0}, "Date" -> 
                   DateObject[{
                    2022, 12, 6, 23, 31, 34.327113`8.288212259545949}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, 
                   "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                 "LogPDFDistribution" -> 
                 MachineLearning`TailedQuantileDistribution[<|
                   "Quantiles" -> {-6.55632279314249, -6.55632279314249, \
-6.315785215489547, -6.162522934782237, -6.1398787535563875`, \
-6.126269610777768, -5.9899705977166935`, -5.796356546713496, \
-5.78340630206846, -5.713199421330183, -5.524175855523637}, 
                    "LeftBoundary" -> -6.315785215489547, "LeftScale" -> 
                    0.12026878882647152`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                 Around[36.064732818660545`, 0.5889388483539343], 
                 "EntropySampleSize" -> 10|>], 
              "Output" -> <|
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
              "ID" -> 5495059474424677337|>], 
            MachineLearning`MLProcessor[
            "Threads", <|
             "Input" -> <|
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f2f3f4f6)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>,
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 1126745677642804853|>], 
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 6097991814255900671|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
              "Missing" -> "Allowed"|>], 
            MachineLearning`MLProcessor[
            "Standardize", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f2f3f4f6)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Mean" -> {195.3790406242356, 61.646977913209476`, 
               190.01452218184144`, 2221.139431539642}, 
              "StandardDeviation" -> {1024.181623136537, 293.22971478478104`, 
               196.3462516724107, 8256.563224223488}, 
              "Output" -> <|
               "(f2f3f4f6)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 5442548032159666094|>], 
            MachineLearning`MLProcessor[
            "ToLowerCase", <|
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 3704118531076445188, 
              "Output" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
            
            MachineLearning`MLProcessor[
            "RemoveDiacritics", <|
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 2201451281876833381, 
              "Output" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
            
            MachineLearning`MLProcessor[
            "Threads", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
                "f5" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "EmbedNominalVector", <|
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>}, 
                  "Output" -> <|
                   "f1" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>|>, 
                  "EmbeddingVectors" -> CompressedData["
1:eJxTTMoPSmVmYGBgBGIeIGZlwAAN+PgP1e7vB1IHGqqv2QPpBMkbO0D8BXF3
9oL4Dt+ZXoDoB/U1l8DiZ42ug9WbrZwLohWedD8C0Q4WlUdA6hquN9eA+A9u
OB0Am3d22Umw+k7x9yA+w0aV52DzziU8A8tf//4QbM7Bfw5g/T8FT4PF83/d
AdOfvpwB0Qesbj0GqWtInXUKbN7j/5dB4gsWqj8Eu/PQ31sg8YTKFcvA9vu9
fgzWfzT6Klj9bEWwuxN8ImaB7Vv++xBY/qTJebB7jEog9smI3wHrZ993FOze
3mdXwPYWaT4D6zeLOgzWr/J3N9hdV2RegfW/T98KVufQtwQcHquvXAOr282+
DSzuHHAUrF9X4wBYntUQ7K6EXU5NYHmPVRvB/kjMuQSiFX7UQsL1uhc4PBTW
HjsMtm+yw/P9ADP/nVs=
                   "], "Version" -> {13.1, 0}, "ID" -> 436404844719395216|>], 
                
                MachineLearning`MLProcessor[
                "Sequence", <|
                 "Input" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f5" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Processors" -> {
                    MachineLearning`MLProcessor[
                    "TextToNominalSequence", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {13.1, 0}, "ID" -> 1494710476529535751, 
                    "Output" -> <|
                    "f5" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", <|
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f5" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> CompressedData["
1:eJw1lMmNHEcQRedAC0Q6IAMkxL6YMIBONIEHAjzpQPkPvaqswmAajYjMH/GX
7D9//Pv9598fHx+/v/Dxz6/f/31+48tfq5ZqtlObuTmrehqzJq3SttarI5Hy
NFLTt0tbuZXm1U9DsyT6Oh6zpV51Gj2Z3ZKWmdPrE/o2bLyYrhLFIC6eRq6I
erdppU+N7ttILQ+p2hkZz/JnRjDV2Gbb1zk1740oUD1Xu3xYgiNPI9hDbYUJ
3su8B4pjFhrd9FO1rONtmCoE0tFJlqUe5l7SsqAoly41O59GhGtKO1vNpaE/
w50dZcRjmivcf9W1lGWlDll64NrbUOzxipnJQtF2Ow2tiUIjbOwtkX6Za0Yo
Cl4ULLBs4vPrEbG7+qKsY4bK9fkHdQsMgrlentTG2l2OuFYcWEhHl0H6Lida
uqn4XPrWnDIMERxWh7BY3uVNCc4anxNsGnKvogoymJIT49DIPfUsHMyC9Ehf
5r11tpaFSxb6mZC9u16tAU3gxbFUzO46iiBjJEFL499l7rrbdDjUSY1IrD/4
DlewBK3INT6Yn3p2BfpBE5CyIdpfbxFYBb/LEjhO9Jl7i1UZ/F3ZaEacujrJ
gVdu3d8evtDlbXQVA+qaEwcfy69HyFvbRSf8PXzJC2kj/OqM4HnYsbYu24bb
0QENI4yn3shLDjbQYnkmefQnYO5O2JEtROGcp95+PXmAXasKpc55fh4GBQrF
SObIu8/yeALjQQIxIDb/A7nYyuk=
                    "], "Values" -> None, "DefaultValue" -> -1, 
                    "HashFunction" -> 
                    Function[{
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {13.1, 0}|>], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJxTTMoPSmVkYGDQA+LbOV8TL6mwOBw7IXtlt7CwwxbBphMcRQwOqRteRSf4
sTmsOeD/Yv01AQeWGe1G7iyycPF1vPubIlI5HO5cfCdz9KCQQ5dapabS3f/2
MPWPGe/VOXn+s4fpg9ljs+zsl6UcgnD9MD7MXJh6dPqPVVvx3HMMcH7NVut+
3jSEO1gWxq+amceIIS9q164wfz0jnA/zJwMENEzYtWkV15Rl9l6+IXk/zNjg
7nmpqDPn/CEGDP+jhwPM3MteV9rLFp+zh7lnh0nPFrMpYnB5mD4AXlSO/w==

                    "], "Version" -> {13.1, 0}, "ID" -> 6967355064030955657, 
                    "Output" -> <|
                    "f5" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                  "Invertibility" -> "Impossible", "StructurePreserving" -> 
                  True, "Missing" -> "Forbidden"|>]}, "Invertibility" -> 
              "Impossible", "StructurePreserving" -> True, "Missing" -> 
              "Forbidden"|>], 
            MachineLearning`MLProcessor[
            "MergeVectors", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
                "f5" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                "(f2f3f4f6)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Spans" -> {
                Span[1, 5], 
                Span[6, 51], 
                Span[52, 55]}, 
              "Wrappers" -> {Identity, SparseArray, Identity}, 
              "Output" -> <|
               "(f1f5(f2f3f4f6))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+JZM0HgpD0hOkWRO/KE07RRmk40Axh8wEkDAI1Pnak=

                   "], "Type" -> "NumericalVector"|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 3066956983799749125|>]}, 
          "Invertibility" -> "Impossible", "StructurePreserving" -> True, 
          "Missing" -> "Imputed"|>]|>, 
     "Output" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "ToVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
            MachineLearning`MLProcessor[
            "IntegerEncodeNominalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Index" -> {<|"B" -> 1, "C" -> 2, "D" -> 3, "E" -> 4|>}, 
              "MissingCode" -> 0, "Version" -> {13.1, 0}, "ID" -> 
              3368851722935717418, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
            MachineLearning`MLProcessor[
            "FromVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|
                 "Type" -> "NominalVector", "Weight" -> 1, 
                  "SetSize" -> {4}|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
            MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>,
               "Key" -> "f1", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
       "Name" -> "class", 
       "Marginal" -> <|
        "B" -> 0.004231311706629055, "C" -> 0.1607898448519041, "D" -> 
         0.6036671368124118, "E" -> 0.231311706629055|>|>, "LabelSplitter" -> 
     MachineLearning`MLProcessor[
      "FeatureLabelSplit", <|
       "Processor" -> 
        MachineLearning`MLProcessor[
         "KeyIndexSplit", <|
          "Index" -> "Ratings", 
           "Order" -> {
            "GICS Sector Name", 
             "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
             "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
             "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
             "Carbon Disclosure", "Revenue (USD mn)", "Ratings"}|>], 
        "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
     "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
     "Prior" -> Automatic, "Utility" -> 
     SparseArray[
      Automatic, {4, 5}, 0., {
       1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
     "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
     Automatic, "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{8, 1, 3, 5, 52, 27, 38, 54, 28, 1, 52, 55, 
             20, 4, 52, 55, 55, 5, 5, 54, 35, 4, 4, 55, 4, 53, 55, 53, 5, 4, 
             55, 4, 5, 3, 54, 3, 47, 3, 4, 52, 9, 4, 55, 3, 53, 4, 3, 54, 1, 
             17, 52, 53, 3, 8, 5, 52, 1, 3, 35, 52, 52, 3, 31, 2, 41, 52, 54, 
             38, 53, 5, 3, 46, 5, 2, 27, 38, 38, 53, 5, 3, 15, 31, 10, 4, 2, 
             54, 52, 55, 53, 31, 8, 53, 54, 10, 55}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJw1kntM0gEQx4k0cW5lLSdZU2xTf73V1MhHx8oMyxJrpZYzqPmYW9mWBWkq
tTSnZs7SsKljUopWvlZKqR0sMDJFykzKV2kRRflI3TBf/fjDP+6Pu33v8727
nfOZxKMxyygUymkyhIldEyn9TcA6cSBIw9VDfMtf2RuvLhCfX+NuohqA5eqS
Z5GkRIYeeeV2cmCq24fTMoTgvn7dz77cXyhYs7z8lgGBHsbNGHAdQjFfTpU0
qFB8POrTwI9UlD70tY336AbmlgDdSM4wZmXydvNfqbFO96l+22kV2i707Nc9
7UTG6JVv2+ebwXCnuNTJvh91iy76NLdR4JR1DAZZ1QLh58TKsR8DUdJEg5kT
QX3k627zDrX51Q4+Sf3AjtryeCpDhnVqlyHHOQ2yWJeo6+8WIXtP6NYNJI/h
l9qwk9TJDmXcb96sRZNk+aAHmWv9fp90IH0ZXmNNFzbpcXxwII3w/wPCdE3y
RTKXLVQJQpQSMIV/vnnYOAKCEA9vs/8FZYRuQ7AKaQ6Tscn6GmBfC6zwJHnS
p/+spac60CC5semarA9Y97pnFJlK/BLcqB4m+0x5TTlHSE5WBfVxcYkR2G9j
iJmpDpCmUMtotgoQFSeUGhOmgcnTR+4YKEB14UdLDqknnC7T7NQVQC8LjTTv
ozZOOHaXtCHNM/ow5aUKspoDNeb5lu6lzTQ6rkpuQ/f8xfc+r1Wo9r5P5+Q9
QBptO3XaRQoiubR1KO4ZiqNHVszuqgQa1YL+R7IAWTVu6dy4r0Bxax+bDQoF
tn/UvDxYgQL7elGLVSOyK/m6fSRnySd+pl7SRNaFVXXCngcfkHvswOLB1CoQ
0tsszmbGAnHPwDE5hgHF9wnDMrsdxYaadYTrN6BL+YT5voKemnNTcy9AFDZc
+zuxGoiHzgWlvQpgtfI2vt17HZk+a193efZiXeBqm+zKQRSqOLFFPPJ/fq2c
le/vQlvrCfufk2+QGTm+t1DQALSCqepwXScQh3YGOHOUoP2u4V993odL3PyI
XONtaw3+B9jfj7E=
            "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9llb1XVoQoIyNkldUw+5KVdLkLP3H3cef8N/YqskWIUrL3
yt6yySbPxw/v3b17UYtXBJaEASvDQwrkrU4OBvPWZEaEIm35qvyl+cH4hGX/
fm6IsP/Uoz4NmMo0GtIIHUc41/3jNeuMoDFXbUJTfnvFZjSnBZcdwlBa0orW
XLINbfnlRX/ajl5csD0d6Mh5f3jO73aiM2eNpAvf7Eo3zvjV03anyh5E0ZNT
frHSz1YYzUlr7U0f+hJDuZ8cSD/K/Gh/YjnhB+MYwHHfW+o7BzGYY8Zz1Lce
8Y0lDuOwwzlkAsWO4KCvHckrR5HIaMZwwLHst8Z9vnSv40kimT1OYLcv3OVE
ipzETp87mWdO4akpPDGVNHb42HQeWehDp5PNQh44g5nM4r4F3jODAJncdTZz
2G4W27zjVucyj/lssdoF3Hazt9zkTTeawwYXsd5c1nnDtf4FknrI7A==
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 3, 3, 3, 3, 3, 4, 2, 3, 2, 4, 4, 3,
              3, 2, 2, 4, 2, 3, 3, 3, 3, 4, 3, 3, 4, 2, 2, 3, 4, 4, 3, 3, 4, 
             4, 2, 4, 2, 3, 3, 4, 2, 2, 4, 3, 3, 3, 4, 2, 3, 4, 3, 3, 3, 3, 3,
              4, 3, 2, 4, 4, 3, 2, 3, 4, 3, 4, 3, 3, 4, 3, 2, 3, 3, 3, 3, 4, 
             2, 2, 3, 3, 4, 3, 3, 3, 3, 2, 3, 3, 2, 3, 2, 2, 4, 3, 3}], 
           "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{9, 5, 2, 10, 55, 54, 2, 54, 52, 34, 4, 52, 6,
              1, 53, 15, 1, 3, 2, 53, 52, 54, 19, 53, 53, 2, 34, 2, 55, 4, 54,
              55, 31, 54, 54, 4, 54, 54, 15, 53, 1, 3, 48, 3, 3, 1, 53, 42, 
             22, 1, 3, 54, 5, 53, 38, 53, 48, 52, 1, 52, 4, 52, 5, 52, 2, 55, 
             1, 54, 53, 52, 54, 52, 4, 6, 17, 53, 52, 1, 2, 2, 1, 2, 55, 1, 4,
              5, 53, 53, 52, 2, 52, 31, 52, 53, 5, 41, 13, 22, 55, 54, 5, 15, 
             4, 47, 52, 54, 4, 19, 53, 5, 54, 54, 5, 13, 6, 31, 54, 1, 54, 54,
              54, 55, 1, 52, 55, 54, 38, 3}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJw9kltQUwcQhqlgjUA10FbDgCI6ICpTw7TSAA+b4qUgDhOwjkFsKZ1QQ225
FKZgI3BsRQ5EkIoMmQg2MyCeAJqIyCUBNiUhhsgl3FJAFEgDCZRyaaumtTjN
Czzsw+7O7n7z/+vzRUpM4hsODg6EPejFBVXp+RTQde7TLzdYwXon7QYhMIKh
tOg5WdAKtrjN4gtgQHpOpEJxZQoleiflPVcjtrCCPJpgHlOTb5X6Vv4DOs6+
VXKwFkqOF22RadXAPvEktO7qI7QSlPg97kOgfZ6yzaWjCzgK1V7f9yvQej2R
dmkfBSUxmxOe+U0i0dN6yClwBA1lX03HUzUoedqwUjTWjaO8yLPBy1pUealn
okLn1veJ6rtjs3t1yD5DZgpTu5H289fJxbPDuMbB4EnMBfacRb/d+kv8LDB8
XnmZhSYk4mc9M9GCfNex6KU8A4qiTbKFlFogDrunPZkzI2uX8Ej1pAkZK4K3
H8WNoH991EnGyjSqwjS/hi6a1rkl8TebxIKbyJn7xNi5Oo7yOKf2BLEeR/dI
q/tyG4DDjPiyD3qhZU/zxqHjj8GaQjGHveaBu8MvkbEgQqpor+rHk81A3Q6h
8wOHgKr2ynW068P1z9P1fdAPo7mB8rZNO9lsj+cyz+0TqPP4ruCWQov83yso
SfElkGfwFnom5Ov3uL6NEfMTbcAaT27IvTiIRNp5JxnZidYtakdy+xJwZpK8
jxa2I/e0dxhc0AD5bcs25ogG+ZcHIrt3dyCt7tRMT7QBw/P/LXW2c7Cic8KE
nUbkDF0UgagDVYLrdx+80CJr65/+piAlLlf7kjH3tSj5NNjMzJiANV/4HxlX
ZC5yUCmuBeysaEUyzSXJrUaLy+niXR9zxWgYHuy/+6oTGBziciFbj/5uztfS
7HW5ZXC/LUmJfONyqD6jFx2OlNCj7XVbRt6h1+xx0H3IOei5qoQSwdPFKHGD
vV8ZsDu8Ca3K7830QhUyAlQ/zZ17iBIlo1zzjRYNG/OqcvLb7Tx33r0y04jk
O1vvjzd3oq2CSI2rGENO7X4v3nkprOm35kNqvs7inPkYSW+aiBmrRYKmm6Dp
W1G1rF1K5OkhVWtbUiTUQ8tradYJTRXQLVKdu1GDXMGxhOAyC4y6vmh89kfX
+p9SQV1mWW8p2kihunFTE3IPlEllVdNAvLz692dUG2aVmR0n/xtY51ibY97r
OBherYapUz8kSNMnMcv1cMSI/X/Cfd68EfSXBUURsX4h535D1lzI4oYDFghv
MtW0Ha3DrB1cdbZdt5YB9mnPGTWOsrIrJ3MMSJRlJI71ziKjXFGe99ZZ8O/n
TQW5KeB/86Eozg==
            "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO+NcKMkBKSUSYp0l8AkR7MhCkgMGZ0fHcoISenuTklJ6TQI
pbu7u0WOyY+79+5daJP2Ec2CgE7BsYqI6hYWCET1iAyJjfB2naObRwfyFW7x
/4+JJeg9cYhLPHqww/h8gHYjmBDe2oUEJCQ3203ENj8kKf+ZmCRs9Y1bTEZy
cvAF/5qCbGTnI1Ly2lS8crMvTc3HbDINaXnhRtORngz8ZkZC+YQNPvdTnrne
p35GJtb5xLVmJguPzcoj1/jQ1T7wV+/7Ofdc5V1zcseV5mKFt11uHvKSj/wE
WGYBlhpFEwpSiML8Yn2+owhFueUSi7HY4iyyBAu9aUm+pBSlWWAktSlDGF9R
lhvOtxzlqUFNrluBcCpzzYpUYp5XnesVq1CVOV52ttWY5SWrc9GZ1mKGF5xu
BNM871S/pg7nrMc3TPGsk/2WSZ6xLqed6CkneNIGNGK8DRnnCcd63MYcc4zf
05R2jDaaZhx1lM1pQUtaccSRHnaErWnDIYd70J9tyzD/cah/254ODPGAHdnv
YDsxyM4MdJ8/udeu/OUA/7Q7f9jfnvSzF735gb7+bgx7/JHd9mGXMe60j+8A
iaQK2g==
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 2, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 4,
              4, 2, 3, 4, 4, 3, 4, 3, 3, 3, 3, 4, 3, 2, 4, 3, 3, 4, 3, 4, 3, 
             4, 4, 4, 2, 3, 2, 2, 3, 3, 4, 1, 2, 3, 3, 4, 3, 2, 2, 4, 2, 3, 4,
              2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 3, 3, 
             3, 3, 4, 3, 2, 2, 3, 4, 3, 3, 4, 3, 3, 2, 3, 2, 2, 3, 2, 2, 3, 3,
              3, 4, 4, 3, 4, 2, 3, 4, 2, 4, 3, 3, 3, 2, 4, 4, 3, 4, 3, 3, 4, 
             3, 4, 4, 2, 4, 4, 3, 4, 2}], "RootIndex" -> 1, 
           "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{40, 5, 1, 5, 27, 27, 52, 52, 21, 4, 1, 54, 
             33, 52, 33, 54, 52, 3, 3, 3, 5, 7, 54, 55, 55, 2, 2, 52, 30, 52, 
             55, 55, 40, 54, 3, 39, 17, 3, 53, 52, 2, 30, 55, 1, 54, 54, 54, 
             53, 4, 55, 4, 55, 55, 52, 55, 5, 13, 52, 3, 9, 5, 5, 52, 1, 34, 
             55, 2, 55, 4, 55, 5, 52, 3, 4, 55, 5, 46, 1, 33, 5, 3, 54, 53, 
             43, 52, 2, 4, 27, 52, 55, 55, 22, 2, 55, 53, 53, 54, 53, 54, 12, 
             3, 5, 19, 52, 3, 29, 54, 48, 22, 30, 5, 52, 54, 55, 52, 5, 2, 53,
              35, 1, 47, 3, 54, 10, 8, 5, 55, 54, 52}], "NominalSplits" -> {},
            "NumericalThresholds" -> CompressedData["
1:eJxFkn9Q02Ucx6fIRuflrSmwBDnIJJQ6x6/LuLNnJNkCiVEga5GuJFk5EG5F
o2OAFjgVcCcHN1C4pZt85yW/GrI65DNiv2SOfRGEgdycgGzAJQYJBMn68sfo
j+ePz3PPPa/P+0fIl6c//moTiUQ6QxweR/yHyPcx4nPrU6uZTrCFT1i9u/Qo
eMY3PdB/DFjkWkahqBNRG+wpQp0WyckHl0qdRtDk7IlbPmYC226Voq+4DdEr
A2sjvh1DnKK/iyM4daARfO9XtNQD7IZ79sOUZsTKGeTGH9dtzNKneKB16AHg
VcMaUaIO6EzzYl+0FWFD4ry0SgUwPrxdJ9w7BfIcGmN5swvJ1NgpTvbvSPpv
5WL0Vj+mVBSpfDUbB/5a5/vZSTpwpGUPzma1g2Nr8uwbYVrgDWGPttf8v1+Y
ua6sJ+ouaFgZ117KNIB8Leiz7BIrMPxKpmkLFsTWeKms9hnAxJvE69zctaQn
LxuaEH7aqUNLNxB1//PC9XvXPzVXdy91gOwsxX9+Xg/Lme4CBsHzcLRkdsNv
n1pBmpy2upnw8UDrMcOLV6aBdPQZ2WydBvwt3Hh9oQuop1a63M0mkK4+X3ub
2wOyubjg3iwc8NgUJ/7eWWCHBtTHMczAyp/BygP6QBPaYxeouoE3WoiPBVuA
Gu8lT7jZijxcZqeJw4gi9JaF3qfZNOCzc+HkD1NNiJq5JbX5dSeylc/alwgf
JdwOWoreBCXtLR2DgTOIOkXDKCUYovLvGKf/UgPvPPjHjk6AK4/s+2tVO7Bh
fOekewAxJWTXvn1awL9uPLz+X7DhSgj/ihbhFY+Vgt4usGXoFRf85xAJ4Kd7
QQqQZJjj13mevE2rkS1nCu9v5K+9c2jXL5TbIHqnzDdpdgLhNV2qGIsTWg7c
TBi91AMimte1Chcgqh0L3zGiB473d1xr5DDQvQ+dfHJxHHiffOBOEKuQdk/Z
dCnFCLlH/rws3NELrOq7jd3H+wFTxlL5EQOIVJpV8YjSCz51iV5BLyxgO6eI
efeqATGm0IngJivKDaiSqlMtSGYPpQw04Yj9ZoFzu/Eh8vj3bG9+vIXopcm8
TdFC7Os4WtRMHyH6fqm6rTh5BmGT6QeTiL56dNE7GJKSW46NXDx7eGaZMD8K
FegQSfrA4aUygFp+cS4rfgtTErBLeaNzBJk+arvA3a+DXOHD9FjinUY6Wd5P
6Gb9rP7xxJh+g8NUCiyFhJ+aNZXoiO460mRY3J+r6kEiCLCF97dBmDLkcv1w
NyK99gW2KGhF+Dc+tXkrY4i9bf7W03M4LI+vNMZ0ED2MjU5sn9LDf0XtKps=

            "], "Children" -> CompressedData["
1:eJwdiVV0EAQAAO+NDklJpUGQRkpJ6VRgQ7oGDBBww20wRk/p7kY6BaW7G6Sl
UWlQuhuO4cfde/cuW+uwwHYBQETCWAUGR1UIDw+ODkoUGzVCI0Pah4QXKdHh
w4+JJeB/4qBxeecu4xGfBOw0NR+TkES8dYeJ2W4StpmUj0hGclKx1RRsMSWb
feMmX7vRV24wDWl5aS/SkZ5vWW8G1vnCb8jIJ3xKJsrzNZnJQmnW+tys5CQX
2chODtb4zNU+dZWfsdJSrPCJucnD5+QlH0X4gvws97G/+8gCFKQQDy3MA3/z
vsu8Z1Hu+iXFWGpxfrUEJbnjEm+72K9Y5C0X+p8LLMN8yzLPfy3HTedagYpU
ozqVmGNlZnvDWVZhplX5xevOsAY1ueZ0r1qL2kzzilO97BQvOdk61KUegbSk
FUHU56LN+Y4GNGKS/zjRv23IX06wMU24YFPOO95zNuOs4zxjC0471mBaE8oY
T9mGk3aiLSG0Y7TtGeWfjrQDI/ye4Z6wI8cd5jE78wNDPeoQw+jCjwz2iIMM
Z6ARDDCS/nalG4eN4pA/252fjKYHfxjjQXtywH72pg/77cs++7rXfuwxht32
8T29ZwzZ
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 4, 3, 3, 2, 3, 4, 2, 2, 3, 4, 3, 3,
              3, 3, 4, 2, 3, 2, 4, 2, 3, 3, 4, 3, 4, 3, 3, 4, 3, 3, 4, 3, 3, 
             2, 3, 4, 4, 2, 3, 4, 3, 3, 3, 2, 2, 4, 3, 4, 3, 4, 4, 3, 3, 2, 2,
              3, 4, 3, 2, 2, 3, 2, 1, 3, 3, 4, 2, 2, 3, 4, 4, 4, 3, 3, 4, 3, 
             3, 2, 2, 3, 2, 3, 2, 4, 2, 2, 4, 3, 2, 3, 3, 2, 3, 3, 3, 4, 2, 3,
              3, 4, 2, 2, 3, 3, 4, 3, 3, 3, 4, 4, 3, 3, 4, 3, 3, 4, 3, 3, 4, 
             2, 4, 4, 3, 3, 3, 3, 4, 2, 3}], "RootIndex" -> 1, 
           "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{50, 15, 52, 5, 52, 55, 52, 17, 1, 31, 1, 54, 
             5, 30, 55, 55, 4, 52, 54, 54, 4, 38, 54, 4, 2, 30, 3, 1, 17, 47, 
             3, 52, 5, 4, 41, 54, 55, 4, 3, 53, 54, 54, 55, 53, 3, 54, 3, 2, 
             54, 55, 48, 54, 52, 52, 55, 8, 4, 4, 4, 52, 53, 53, 54, 1, 55, 
             54, 15, 2, 21, 53, 30, 53, 1, 38, 17, 1, 2, 55, 53, 7, 5, 52, 16,
              19, 3, 8, 17, 1, 2, 4, 55, 52, 2, 5, 4, 5, 4, 52, 3, 1}], 
           "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9kn1QywEYx2dyNZ2MXHWWbOe4Ell5uUk8i8PORXnd77hll1JeUk7HukjT
5UKYHKJaO1K/lLaLuqX0rLa2rnY2USak1prMS3OULho/f+iP56/nuef5fr+f
hxOXsiNhCo1Gi6cqRm7s3eSuBMLzxoz5Iybgnh6K8Kc/QsWx2dwx+hDIKuNO
bs0wIJvr/DhSlIeq854Dth065MlDhDPFz4BYKTR1+TuAzVpv8IpvBkGHj/bM
6U6M8Tpg3bzyBZpPHa9eka4Dy4KK0mdna8DZ+ZoRNaMSxSOx3MxVZnSe6XfZ
LlmRtzM6+eoDPfIfH366rNOG7IWOR8ogOxLfv7gPUP2kT0Wk4ooUFH8KlaIS
O/YlT09o2deFzMZvn1PIMvy/XzwckDPPosZU76wlUkoHmUGXezCbQe2qkETp
7oH69m31uLgPJdl/Mi0sA+bG67c41jQDU/qTFfheDk4RU16l1gCxJDu+keFA
9g9NaXi3DtnHp/QYk7Ugi/xd6FZRjAJj+omUXT1QkBu5mnWkH/mc/GzDIgeQ
yqJDtQwdSp64JV7MqUe/jLtGor0JFZ6PM4URHaD4MOqTRvkaE20vMIW9wsCt
6+ami58D+WaVbWJ/x6QPSXj5/Fb5LZA0vTfVhzagebF7v+yhFrNkatq7mFa0
YOAbq5MEhY5VXvWyGzX1g+28vVrkpzplF3yHITVUZbUHaZFWdHPOKYJE85bL
43mMGiw4uNF/aXA78sI6vV9S3HKvC3Yl0Q2Yp4+qc32dwx/KT/CQBpHAu2CT
uhJrkfY0v8swqAKafXCcH9s3yVHjVx3S8Pw+kmuvjTZP9EzySYrs/qb0VEHb
tsS7QuIO8sM/QPWvFsgNCR4bvdaOKqfvVHOrBiyVjGxgmsA5lX6QdlKKWckc
S22DHmN6RClt5xD69mQq/V5TPFneP6I/DcBQbE6pT5IGBBt8a3p3t4LYMuu6
xwkqp2iR0EjlaE6rTlie9hYEddayxo2V6Ndyy82+tg3bJpYufkjdz7oiWhDg
+xYJglsSSs2xXeE3ijmvKH3Lhv/9X8HR+rBpx/SoPl9Yt4GjwtTeXjKCyvkv
rKytOw==
            "], "Children" -> CompressedData["
1:eJwdkedXDQAAR+8po+y9RfYmI5uyKiteRrYX4RPnPM5x/C3ZsldWCMneZO+9
Za+MuJ4+3N859/w+3tiMBYE5EcDCqPAEgosTQ6HgkrTosKTMX5Q5NzMUFz/v
/z87TEQpkZShLFO4ZDkuqhcsTxTRVGAMY6lIJVpz3spU4a/nrEo1YmhCdc76
x4bUoCYl1qI2dfjtGX9Zlwacth6nrM9Jf3rCHx632EZ8tzHfPGZTjvrVFsTS
jC8257NH/GSBLTlsK/L96CHb0JZ2tOeDyXSgI0MYSic6k8hBuxDHe3vyzq70
IJ5uHLA7eb51v0Xu84177UVv+pDraxN4ZV/6sceX9mcAux3ILl+40+fucBA5
Dma7z9zmU4fxxK0+NolHbjGF4Tx0BA9MZSSbHcUmR7PR+27wnusNsM67rjWN
cYwn2ztOZgJrvO1E0lntJFZ5y5XedIVTmcYNp3Pd5V5zBjNZ5lWDXDGDWeEa
l11qoVn+A0X60uc=
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 2, 3,
              2, 3, 2, 1, 3, 2, 3, 3, 3, 4, 4, 4, 2, 3, 3, 3, 3, 2, 3, 4, 2, 
             3, 4, 4, 3, 3, 4, 3, 3, 3, 2, 3, 3, 3, 4, 3, 2, 2, 4, 2, 1, 4, 3,
              4, 4, 4, 3, 3, 3, 3, 2, 3, 3, 4, 4, 4, 3, 4, 3, 4, 4, 4, 2, 4, 
             2, 2, 3, 4, 3, 4, 3, 3, 3, 4, 4, 3, 4, 3, 4, 2, 3, 2, 3, 3, 2, 4,
              4, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{55, 55, 3, 41, 1, 55, 4, 55, 27, 33, 3, 1, 5,
              1, 53, 4, 52, 52, 8, 53, 15, 55, 31, 53, 2, 49, 20, 3, 34, 8, 
             55, 52, 47, 55, 53, 2, 2, 45, 5, 3, 55, 1, 54, 17, 52, 1, 55, 5, 
             12, 5, 5, 54, 15, 1, 53, 53, 39, 52, 3, 52, 54, 3, 40, 54, 2, 1, 
             54, 55, 52, 54, 52, 53, 5, 17, 2, 2, 2, 4, 54, 53, 2, 38, 53, 4, 
             3, 3, 53, 1, 2, 2, 55, 2, 2, 52, 55, 30, 55, 5, 4, 4, 4, 47, 5, 
             4, 5, 53, 54, 5, 55, 3, 54, 55, 55, 1, 53, 2, 3, 31, 29, 53, 55, 
             53, 1, 52, 54, 38, 54, 54, 4, 45, 52, 55, 55, 55, 7, 4, 54, 4, 
             55, 12, 1, 31, 5, 15, 23, 53, 52, 27, 10}], 
           "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9k2tQU1cUhUNrIaV1eBa0CESkQqpoFIULAU7Q1qbVSsBpAR+ggMj4CqBI
Wq0JMig+YCLiFBAkGEgDdCRaWtKi7AgELo9ggPAUNQSIibExJXQaRaTXH/Dj
zJ45Z83as7+z9soEdtRBKxKJdJ04umUHo919zoPyY09bY7ACmOHsTJWoA1Ij
1N/8lHQPCTaBIiCmBMg1/xky2D1Asl7uhe8ZAHKKlc4/vweKnhntlAlSxLrZ
/WSbTR1i0Vz7y7mNSJpzmKda8RzxVNC2r3QExDtEs7K5UVh2M7pZVS4DnfPb
uD0djeC7LT2vVooDfuTJCfd0OQyD7yONSYxMWFd04LV20BUcJGdRxYgxXyJ5
mKCEokhN3Qt2DWLuXfPrTI4USFqKk3i2GQmuN7gmUuRIXBVsn7KhH+G1r2Sp
VC3gLOpcbl8NWvAVB7wVeCiVoK73L/2ktw2kb6s5O1qFiH/88JUfXHqBUZrv
oKr5EySJVruEhC/HbXQ9X6sC8qfm5B+1txHLQR+pNLYg9ZHY0BOEv/3zJfNT
egWw/sLWcM/0AW0yHNvrNQz40Y5VQa8rEZ5ZqDiQeQ9Spq0rtwu7AXNqT4fN
BLfcq/R1c41owZfMpGpSBy4gjkdsR063EvYPVDBcW1Xgq7LWjnUAsvzbZAkl
/sFU4HDG5+g0Klpf5RKWVoB4v5wL0RQTvAXe41u2XUW8PNuIyOoy2K8PGc/8
DgdleLBbq98U8MyWk1uJe5oLT+9oVqBlnWfdqiafAfnGhcC1vjJQXr5R8SVL
DjG1fnTPlc8BC3EuyT7eBrwwrl39sBw4p9iPPsvWg25odntDpxykZTtXn+Y1
Q8zFF6/cXccgJXzwn7qPJGjYLvZQvFgEtJdpYz0bhyBVF3T6FsFRZ+S/10Lk
JkY17+GQMQWcD0q2xrvLgWUp7z9E6MWYwc9Yz0O5acKkrA1y0OUHJW06OYZY
u7+owTc9RJxGbDLCMIFill7lan0agFZIp50ieKirP6TYCGsQJX5VrxdRSYb8
rzYndgHLGMZVEv1ZhqrfuoiqfhNWRa0nfKM2Ok+iXCDdLxhon5KgovvZppPv
A4j71O0VPuNo/9EB1Tqirxjr0YfubgGp+FbcRdeXaCEngrnohuXEvBjXMyWM
eLeU9j++a/MH8PNEHm2Pm0DqmIBTl4wiU/GkyI3Q6dqDZqisbhBMqZIUxBzM
tRI/p+khwFiFFwb7WkE2Vss0eHUCMzn+6/n0uwiT5pTvWCtDpsqEWProBEhE
T6+8yzEWa9pynXN3cc98lyTnmGjNIO0K7A+zbwP+TFlnnAMOlgDHrOmZbkR+
7f23WdkCamvjsabGScDwTs3ZHB7yTnxS6EixZciMEd/TzXpgCm//rJnvX8wh
ZbX/HcbNYWRijwXu3PU72Nfu3gLnJbDihJOOE+DA4Edu/vbayANkn+ez7zLB
JYR+zjxo68bAbllnTF3WQFGdf/ExG+Win2ziRpRiYgQt7C25Iu3iOy4U/NIb
8bhkUSf4nLmUbpEhvv7AhqfcDuA/bZ+2e3gH+VatLCgbeoD+BxWigpg=
            "], "Children" -> CompressedData["
1:eJwdiXeYFwIAQN93obtE2bJyGZHEGWdFjoZDxV1FpbjLDbfvd3vfdXtvSqLs
jKQotCiVVcqeZW+FKAqvqz/e+773vdDY9Kj4ICAruEdRMXkRgUBMQXRIT0Sm
ZcclxAXCwhP3/+4egg7Qi4M4mBpqOYTehHMJwYRwERfTh0M5jVX25TB0pYfT
j/9dYX+O4D9DOZKjOI7jOZpjOJbl/utL7vVF9/iC/7jMAZzA3y71RJ73JJ7z
ZE5hIEvc7anscrF/+ax/OoidLvJ0zuBMBnMOQzmLZ/zDhf7u2QzhaX/zKXd4
LsN40u0+4a+exy+eTxgLvIDHvZDH/NlH/clH/NGHvZSHvJ07uIzLuYLhTONB
r+QqfnAKI5jvGK7jauYZwTVcy0i+9wG/cxTfOppvvN+vnetX3mck1/OlNzCR
Od7IWL5wHBO41/HMdps3cTOzjOIetxrN597tZ3b7qZO4hS5vpdPJdPiJ7U6l
zY+9jY9s9UOn84EtxtDs+zYZywzuJI4KGo0ngSKKec9EUkjlLhpMot5k6nzX
WtOoMUAW6VT7jhlkUuUWK93sTLOp8G1zyKXcPMrMp9QCStxkIRsttoRS3rLI
Ny3jDct53UJfs8CZ5FtJnlVUs8Fc15vjOrOtI8t6AjaQ6as20kQzLWTYTrqt
pLnWNtaYagcpdpLsK3bxst2sNsl9RmY0xQ==
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 4, 2, 4, 4, 2, 4, 3, 3, 3, 4, 2, 2,
              2, 3, 3, 3, 2, 4, 3, 3, 2, 4, 3, 2, 3, 4, 3, 4, 4, 3, 2, 4, 3, 
             3, 4, 3, 4, 2, 2, 3, 2, 4, 2, 3, 2, 3, 3, 2, 3, 3, 3, 3, 4, 2, 3,
              2, 3, 3, 3, 2, 3, 2, 3, 3, 4, 4, 3, 3, 3, 4, 3, 3, 3, 2, 4, 4, 
             4, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 2, 3, 4, 1, 3, 3, 3, 4, 3,
              4, 3, 2, 2, 3, 1, 2, 3, 3, 4, 4, 3, 2, 4, 2, 4, 2, 3, 4, 3, 4, 
             2, 2, 2, 3, 4, 4, 2, 3, 3, 3, 3, 3, 3, 4, 4, 2, 3, 3, 2, 3, 4, 2,
              4, 3, 2, 3, 3, 3, 4, 3}], "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{48, 55, 40, 3, 19, 2, 54, 53, 47, 41, 15, 17,
              54, 52, 3, 4, 52, 1, 5, 31, 3, 53, 2, 6, 5, 17, 12, 10, 3, 3, 
             53, 5, 52, 52, 25, 52, 53, 55, 1, 4, 45, 2, 3, 54, 53, 53, 55, 
             29, 19, 2, 55, 55, 2, 15, 53, 52, 52, 2, 27, 52, 5, 52, 55, 54, 
             3, 40, 3, 2, 55, 3, 22, 2, 5, 4, 3, 54, 3}], 
           "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJwBdQKK/SFib1JlAQAAAE0AAABo8B09y7LBP7BWB6zka7m/wNh9B0fgvz9I
zInNzTTPP+BrE6WjGMQ/CJ03buRntb/o9o4rvTrgv/jcvsWwuci/uP6peEzE
oz+YwVX/jcKxP7BDTWr2EaY/KEVYcg2guj844l4go/zov5DUShbrj8i/cDT8
hESOpL8AVL9XQOPNP8B40hwvG8m/eANbzAi+xT9gmMvcuwe2v+ARyCiL4cM/
4NQWtFly17+oH7JCUevEv3A//nTPMte/6O7wjI9hzD+os+S3Gxfcv2hB1vGv
C7A/EI6Jo3OHqD8opSGSndfBP4gWwPzPNM8/iHtRjoG42z/wOiKgLSzFv8g8
6EyaIde/GHY0u7joxb+4PJLb473Fv3gSA6KN6L8/qBc1yOiQxb9oHkGvMLbq
PzgrDOEXt86/WPOILMb92r/gn4CgxFvVvwga82Z65q4/0NKJzKn7wj+Qk4UI
T+vjP3hlLoRtrdy/0F7lkpUhyL+YauKg/dDHv7gfDtwzVNI/UJ7M3kYHrz/g
Vn6vGNmyPxBJWtWtDNa/yGtANXcLsL9Y6VN26xywv9gHE5ug+8I/sIyBcZHz
wT84K0OjSzGqv7hV74okpMW/QAS2D1QSxr9Yq9w4oPvCP9B7liBVSKc/CLkv
zbsh5j/I5NateHWBv2CGTZzLvu4/MEMN8Mjrq7846TruAivnP9AQq7WYj7G/
qKU6EGgx0z9wy08QxDTPP2CRKPIoKMC/YIVy1CsL9j9o0DKmTevjP6ilOhBo
MdM/2EuB5M0y178gryqrHRfcv3hxleZhfrS/0FQ5jwT+0j+Abhh+CA/ev1AA
jmRWcte/IvxKqQ==
            "], "Children" -> CompressedData["
1:eJwdiWlTDQAAAHcKXZJQuZJyJbocObokpYf3Jb+gZopPmXmaafwtJRHlFqJy
hEQiR65cUUnbqw+7MzubXnuquj4COB0dVnVNU1koVHPmeEw4Ag2NdSfqQvkF
J+d+MEzEPJEsYCFHGHQRUWTzwmhiWMkqYolDB1zMc5eQQDzPnPGpS+l3Gcv5
byLTPvGfK5gymSQeO+kjJ0zhrw9dTZ9/3MIa1pLKOjbR67hp/HYD60nnlz3+
NIMfPnAj9/1ut5u555h3/WYmW8niq3fcRpfbue0Xb/nZHD6ZSx757GAnZdx0
F7sZ9QAfLWAvN9zDdT94zX3s571XLeSKRXRaTAnvLGXEDt962Tde8iDlHKLd
CioZ9qKHuWCANqs472tbHfKcR2nxGM2+MshLzzoL6y6k/g==
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 3, 2, 2, 3, 4, 2, 3, 2, 2, 4, 4,
              3, 2, 3, 3, 2, 4, 4, 3, 4, 4, 4, 3, 3, 3, 2, 3, 3, 3, 4, 3, 2, 
             4, 2, 3, 3, 2, 3, 3, 3, 4, 3, 2, 2, 4, 3, 2, 3, 3, 4, 4, 2, 4, 4,
              1, 3, 4, 3, 3, 2, 1, 2, 3, 3, 3, 4, 4, 3, 3, 4, 4, 4, 3, 3, 4, 
             3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{55, 27, 4, 49, 52, 22, 3, 1, 55, 15, 39, 55, 
             55, 4, 19, 39, 4, 2, 55, 2, 55, 5, 38, 53, 3, 52, 55, 52, 54, 4, 
             4, 1, 4, 53, 53, 4, 52, 54, 2, 4, 53, 4, 55, 31, 34, 1, 4, 5, 52,
              52, 17, 52, 8, 55, 54, 54, 30, 31, 29, 34, 38, 5, 54, 10, 38, 4,
              53, 53, 6, 2, 3, 46, 55, 17, 27, 50, 2, 53, 53, 3}], 
           "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJwBjQJy/SFib1JlAQAAAFAAAAC4XqUrO83Av9B7liBVSKc/CIbKfsRb1b+g
lbcXYyDFP2zPDBfxpQBAqKU6EGgx0z8QRW1TcSnmv6BmMUriJt+/EI5fdhEV
zr9YC5UNH/XPP3D+TeUNxq4/GNNXrcWm0b+QQuOa+7bQv5hQudQ4GNa/cK6c
P3i1wT9w/k3lDcauP/j+I7NifrS/2EtTPvJntb8Qy3RxqxPRv/CkYlk72uO/
+MJtpeBS0L+AaX4h9wLoPzjIyuJ+hYA/0PXgmarCyL/oUh3zxDTPP1gmnPhp
rrw/ANoFhUR80L/QVk6bBNbGv7B0TgfTpqo/WFNNfcZb1b8YW8IH5oviv5CN
EG3fJt+/WFgwnzF03D9Iis+JAMWUvwAkGWPjsIE/ONj8uosX7z+Q5wJTVSTn
P/A4hQhW+fU/gPBt9O5ntb8geTpjWUKCv9jTH48iB9A/eJZZiW/E0D+oJTXP
C3/Ev+ARyCiL4cM/yFAp/YjSqj94kZaYCr7FP6gbvO1VfrS/wOYw5yT9uz8A
t3kKO+TTP0gIjNpi1se/8PiIfPE2vj/oqF8rGCG+vwAiYaj2bLE/wHcOMssn
zz+APV/Eha8AQCxUzZnnYgdA2COppM5/sj+YUeKv7G+qP1CezN5GB68/EOYS
qAeAqD+QS5xHHiJ9P4g+JamaIde/2Huk2nqx1z8opSGSndfBP2jrnKigjoE/
0Mgs6zb23b9w4JBy8YK/v9hsCqGaW5y/4FZ+rxjZsj/YX7g5j+bUv4CanwNQ
6+M/UJ7M3kYHrz8wij2p7eu/v1ic7ZbgFck/kN/H8g/PsT9QnszeRgevP9iL
rJuM5tS/ACW9V4b0u794gKGXs9q5v0DR1+y5yLI/iQhUyQ==
            "], "Children" -> CompressedData["
1:eJwdielSDgAAAHdCOiVEolJCRBTlphBF0dQT1EzqV2a+mmk8FSqVI7nlTqRE
jgiVMyoK6+PH7szOplQeKzsaAtSFBVVW0ZAfCFQcLw8PRlFtfVV1VSArt+bf
Lw0S8p8ZzGQWuWwmlGem89TZ9KthhBNBJE+Mos8/9vrbaOYQw1xiWcBj59Hj
Lx85n4dO2+2UcSxkEfE8MIlkfrqYBJawlC5/eN9JE5nwnuMu47tpfDOFVO46
5nK+escV3PaLK1nFLT9709WsIYO1fHIj6+g0ixt+NJP1XHcD1/zgVbO54qiX
3UQOI15y2ItuYSt72cc2Oszjgttpdwfn3ck537uLd+7mrWfN54x7aHPIVgvY
zxtbPMBpX1tEIc0O2uQrD3KIRosp4TBHeGkpLzzlc0864An/AtP3qvs=
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 4, 3, 3, 2, 3, 3, 4, 2, 4, 3, 2,
              3, 2, 3, 3, 3, 3, 4, 4, 4, 2, 4, 1, 3, 4, 3, 2, 3, 2, 2, 2, 2, 
             3, 2, 2, 3, 3, 2, 3, 4, 3, 3, 2, 4, 2, 2, 4, 4, 3, 3, 4, 3, 3, 4,
              3, 4, 2, 3, 3, 4, 1, 3, 2, 3, 3, 3, 3, 3, 3, 4, 4, 2, 3, 2, 3, 
             3, 3, 3, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{5, 8, 1, 53, 53, 55, 4, 1, 55, 35, 9, 5, 53, 
             15, 53, 2, 52, 52, 1, 55, 55, 38, 53, 55, 2, 3, 52, 53, 54, 5, 
             53, 53, 53, 1, 52, 4, 52, 54, 53, 53, 1, 4, 54, 55, 4, 55, 1, 54,
              52, 52, 55, 54, 53, 54, 1, 15, 1, 34, 55, 53, 2, 5, 3, 39, 54, 
             4, 5, 5, 48, 53, 16, 5, 5, 5, 38, 54, 52, 1, 53, 13, 4, 4, 2, 1, 
             55, 55, 5, 5, 55, 46, 48, 53, 46, 50, 19, 5, 55, 38, 54, 1, 10, 
             38, 4, 55, 54, 54, 3, 5, 55, 55, 4, 53, 53, 4, 55, 3, 19, 34, 22,
              53, 5, 53, 55}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJxFUn1Q0ncYB61kVovQktPpcOWpy6t1t/P13JfumuJZif3RWMtCa8ou37rb
6pR5gtjG0hnTu82pJUvruFQgtYQZPpAgP98GyUuGmyEJMbwSX9pYHbpff7j9
8dxzzz+fz/N5iS4oO/45kUAgcPExXrog/bBCi+LevUjahd1Cak98bc3XU+C2
9ZS89aIX2I2fvXqd0AnJp0oFEZUPgVoyc7rHbAUyzFXp/DbgxNfGCApHgHl9
YjYjSIZI4SuFlS4pkhCupEeF/Q4Sx7gtePYeyOv5F35Y0SBWdeCrpPwhYO6f
/fXvKgdQEwMOPPzjAbCtkichP2JgTKX4A4Z0KHQHy5ewO5DO2fY4d/GyEUTZ
bZlR71UhRuATRUX8CJBT9de2H54AsuWr0gbJLfBSOpr4ihkUt63WlzapB6N/
6H1DMAbi8xGWoJ3PoNy2ZTwc/wfL+cdWEq4HqqBprL5aD4qUkOmfafdB5LoO
WlyPZGg29NzZEaC7Xkx04ToJGfzYQuEweLW5fsduOaix1VXPsgrUm5NGsX06
EBVP1fFwv3z0k96Uk8OgZhRX1BgtIP5ok6iRaQCszNzwjGSADzL6xE/pk2Cc
XuAM4zxuPYnXPWoCe4qDJFwagekseTRPNQzCv4pqWxcnka9IpOATncDaUxc5
YDwKm3pNj3ZVEumEQ9mV5nc8aMNP2idnDlrwm+yiSIJ4EqT+Jqyu7LkOGLaI
up0DP0HzjS6iq+guMMz9jT1B94DnWP40raETyteOOrePSBEjirD1l5pFxNZI
K5KoVhAd2zrxJjeWiGM81fYYON7I9PFeDaIzmnIpWTOIacsrw2oAyYt3JOz1
DyIS90v2fJoGsa8OlrZGPwJagSztweVzSHEn2zQosENzW6Iz2KyF5CydjMJq
Aerb7YnHVtRoA5d5dVWVhPtGvq0IeMPPbl8pLMLztDtRpgD3VbHuVe67ZEdx
vZED9vxBoK3KNvsC3Mh9glvwEt8Kysf6nkzjf/0jqBoteqccJS/EREy2/9/L
jW0/H3Kzg6pF9PzfznTEziGGS9bVWdMNhNixxdcZOYge+cVkaJ8GykN4CXyc
39j0/Uvhd0q0octb/+26c92E3HmdazFcA9ivbCklzv8J4j31RXnhHsDmwzz5
LWPgWwo7K8bx1d47/VyHAUi6azPrugkgHVbOO+oc4Jteer5WPQrNFutcQ4wM
FJZ02lMcl3Tk9KEDaRhwFlbuN9PGwM2TtOxn3UUYM94vnLqNJDdTyZyDJjQt
KFSekCpB3m3NuYHz+FTlF/uO9IOwVRY/t+xF/wIz5hw0
            "], "Children" -> CompressedData["
1:eJwdkFOQEAAABXfyZdu2bZt32Vdd5uX6zbZt27Zt27Zru/rYN7Pz/jZNq26B
bcMBPaOETWBw3zKhocH9gwLCpErXXiHtQkLzFGz/7x8YRrj/hCcCEalLPSIR
mQpURKOQnwIEEJVoHDA6+/3jPmMQk1jsNS57jE0cfrvbX+4yHvH5aQISstMf
7vC7iUhMEpKSjDSk5Zvb/WpyvpiCz6bkk6lIzTY/utV0pOeDOXlvBt6Zg4xk
IjNZyM4Ws5KNt272jZt87UZfucGXrveFuXhubp6Zh6fmJR/rfOJaH1uQwhSh
EGt85GqLssqSrLQYK3xocUqw3AcusxRLvW9pyrDEsiz2nuW4a3nuuMhKVKYq
1ajCQm+7wFvOtzo1qE0dblqTWszzhnO97hyvGUgQs73qLK840/rMsDktaMB0
G9KIyzbmks1owjSbMtWLTvGCk21JcFj/SbaiNf2Z6Hnb0IvenDOEtkzwrO1o
Twc60okzjve0nTllV7owzpOO9YTdOG53jtmDUMbYk9EedZRHHGkfRtiX4fZj
mIcd6gCGeMjBHnSQfwFkmQDf
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 4, 3, 2, 3, 3, 3, 3, 2, 3, 3, 2, 3,
              3, 2, 3, 4, 2, 3, 3, 4, 3, 2, 3, 4, 3, 2, 3, 4, 3, 4, 4, 2, 3, 
             4, 3, 2, 4, 3, 2, 2, 2, 4, 2, 3, 4, 3, 3, 4, 2, 4, 3, 3, 3, 3, 3,
              4, 3, 3, 3, 4, 2, 3, 4, 4, 2, 3, 3, 4, 4, 3, 3, 2, 2, 3, 3, 3, 
             2, 3, 3, 4, 2, 4, 2, 3, 3, 2, 2, 3, 3, 3, 3, 3, 2, 4, 4, 3, 2, 4,
              3, 3, 4, 3, 3, 3, 3, 3, 2, 3, 3, 4, 3, 4, 3, 2, 4, 3, 3, 3, 3, 
             3, 4, 3, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{2, 52, 2, 2, 4, 2, 39, 2, 53, 3, 9, 45, 27, 
             52, 1, 38, 27, 15, 4, 3, 14, 1, 52, 55, 38, 3, 55, 15, 4, 1, 54, 
             4, 41, 5, 53, 4, 52, 38, 54, 10, 52, 4, 2, 4, 34, 53, 53, 1, 5, 
             54, 55, 5, 3, 50, 5, 3, 5, 1, 8, 8, 47, 54, 5, 5, 31, 33, 52, 3, 
             1, 31, 16, 53, 30, 13, 31, 2, 4, 54, 54, 33, 3, 53, 38, 1, 38, 
             54, 52, 19, 3, 52, 38, 4, 53, 55, 5, 54, 4, 52, 53, 55, 21, 53}],
            "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9UmtMkgEUxaXJKohaT8yF5VpmNkxbPtKL1IytbKyHsdaDnDrKTEpLLGdK
kljDms7mD3Ms3QRtgmZFaV5EeWRmZIWpKwlf37RSy5KlYp8/7Mfd3T07u/fc
s+MTl3I4wY1CoSSSxV4G297s7EIip8Np225CIsBXeHfoAzqZhtUdJM4qpqU5
7jhQWDlxfk9PP4pdMYM0Uw0wrhyShpGzc1jku2bCjMLBhOKz6gdIZf5KvDZU
Awudk590+YmiCYRLkjzcjpuRXc90fZ9sB/7HRN/ws0K412f+ufxtLRCFCdQc
PxWwtrqtrDK1gHh8vSbVbwidhUeTzx2wA/Ey0ubZZATOG6NMJNPjuMiavqte
j6w4TbhBFg/Cpovuu8n7DIpthyCtBVmW2zOqr1pgcNP6B0j9lumd2pzMTmTU
JMYF7utCnkwumMdLmo/NKQy1IA9ld4VmtAJf2r9/+J0R5ZlWHvtEC1Jzj8KL
W0YUjZaqlAU5QESXhmat+gPWIsVvef5zEGi4eeqrRtRd3KUNIvkSavojBekf
lVPTVs2VooXvNyvvrIJxg7/KNTIJzhSq1LHUjCVux6W2DSOw7j0tTO/5FLV3
1cwzlwbQORaLz/5qUUnPXFHqQ+qM3BvNH+0Hfln7l2hPDeg7D9D8ZxtAdXO7
JIbERfYLBT7kzC4iNi0m/dFNR9BVvQ0g+Va8ijvSCDqXWnKwtRwYzGk/ccwr
pATpKGySz6J/N2yZ35PBexwe1fx/v7g8KkrTaEJxrEQIBRWo3No22jrbgywv
rpkeT/J6TqVYpAjWtutdW7or8dNmdUXHjToQjXtHvK5rBquHrDwr7yUov9yO
mM8RJTcuqpf0IURRFvTwfi9aar95Nc4QuHBPe72ZsyjwIyoZ1d0ndSYMsbQ5
smTZYFmrKufyjbiQE22fgFcbb0X+k9gjSz8b0R6bpVnXXQfEXIS2PfgtEP42
qjfdgKqQ0YAf9dnA61mygeV4DdSBXBfnqgF5ywNO0T3eIYW2MbnOdxiImdM2
QR+BHHtJd/7aMZA/ck+dyjNhtrTw84RJj/bAE6Kp89b//9nZSetZZcH4D9KA
spM=
            "], "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwO4uBMVWDOzAQgzUQ+w69E6fdOZ0xvFT7O5ALFSwu7C7
u7tzPX3YndnZ+OwZgXAMMDM2qkBwdmokEpyTGReN9OmzQlNDkeSUaf9+OErM
f4pQlGJUpgrFKbQ8FShBLHrGOEryx1KUpgy/PW1ZTvnLk5bjhD897g8rUolj
fveo3zziV6uSxGGrUZ0a1KQhh/xiLT570NrUoS4H/GQ89ajPR/f7wX02YK8J
7PG9ibyzwEbk+9bdNqYJTdnlG0M0ozktaMkABtKKnbYmmdfm2Ya2vDKddrTn
pTtMoQNd6MoLt9uRbXZiq53Z4nNz7UZ3nrnZHvSkH2mkkuNTN9mLjfamD0/c
4GP78sj1PrQ/D1znfdd6zzUOYrVZjOCug8lglUMYyjAC3HGlmazwtsu95XBu
usyRjOKGSx3NGMYyjusu8ZqLvep4rrjICUzkspMIks0lF3rRBV5wMuedwjnn
G2aeZ53rX/b71uU=
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 3, 3, 3, 3, 3, 4, 2, 3, 3, 4, 3, 2,
              3, 3, 2, 3, 2, 2, 2, 4, 4, 3, 2, 3, 3, 3, 4, 3, 2, 3, 4, 4, 3, 
             3, 3, 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3, 3, 4, 4, 3, 4,
              2, 4, 3, 2, 2, 2, 2, 2, 3, 3, 4, 3, 3, 2, 3, 4, 4, 3, 4, 4, 4, 
             3, 3, 4, 2, 4, 3, 4, 3, 2, 3, 3, 4, 3, 3, 4, 4, 3, 3, 3, 3, 4, 3,
              4, 4, 2, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{53, 31, 55, 8, 2, 53, 4, 1, 4, 54, 30, 34, 
             16, 55, 7, 54, 3, 53, 2, 3, 41, 15, 12, 52, 1, 34, 5, 55, 54, 52,
              53, 4, 54, 55, 52, 52, 54, 55, 20, 52, 53, 52, 35, 4, 1, 53, 55,
              55, 33, 53, 53, 52, 53, 54, 52, 38, 41, 10, 54, 3, 15, 53, 4, 2,
              46, 30, 53, 3, 4, 35, 52, 42, 3, 54, 54, 55, 52, 3, 4, 53, 2, 
             52, 53, 2, 53, 42, 54, 54, 40, 1, 52, 4, 27, 52, 19, 3, 55, 1, 
             52, 3, 17, 52, 1, 2, 55, 55, 41, 53, 55, 52, 55, 54, 1, 15, 52, 
             5, 55, 53, 47, 30, 1, 55, 6, 15, 53, 10, 55, 52, 54, 54, 4, 5, 4,
              54, 4, 1, 1, 2, 54, 53, 2}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJw9k30w1AkYx5dj7B2yZQ7jcqEZKp0o7pziWU5I9lqk6OVaLrUyjpxqRxm/
cte4yoyTqw29jdtawi6i3Wvy7GJf2m21Uvy8nF1LWpVa3J2u4u73j/54/nnm
O8/3M8/zfbzScxIzrGg0WilVvL0Lts7jauQnmEQvc+qgLOt67/ELciRx1ZDJ
IgT+NufGeoc+1FtV5Mze1CCtVTJjH0qC+OiGqwYfA/LvXWrJC9KiJ/626czH
ZiRX1v7eXdQMlpnzhTV/3wNhqa+sOOkOWFhhASjtwLKEYNb5ATno5f4DQ7O9
yC8fGUyr1CDjG+/gzN3NGOAAa3Tr+9EtLZ3gUn2a/bKWKx6dwJ2ubJmeVwHd
ffZAwUQjlAxMOWlr1Mi81RtHb1eAmr16vuQRxe+3cMJ1/i4Qh7usVzTpkSOa
3OQhHEPOnuss72olprwuPO9BdCAvKYkM3tWJngv1dfxDZmQe6Nu8Jf8hEtdc
2Z8lKLAk/9DsjmdKVG+J+dlvqwrZXmsbxL4qFApCGdzAXiDsxkXJO+Ro9GUx
vkqWIhFe5HSbVCD7yoORaDsR6NeeKAyl5tPdp7dFsBVIjqb73DeXIy9O+ue/
NRpUO5y1bvLRfdC/cda+MruWY6z+O2NQUj2SPlfnHM91YkDkze1HLi1jWpa0
Sw3dJBD6o4Zflt7H2GtfONmqvweZS5Yjk9cOqwRe5Zf75UAf+yP3bvY4vtGn
KjjU/jzVZ94LR8UgseeEdO9uR37clxLTWRMyGnV17w+2fvDnWjzCtM1yIAov
5BUMm4C7i5RG115GIjEt/SmlX9TJMmtTek6pkHa7w9UnSwtEiH8c+8UYMETr
AnM3zgD74tI1N6pHwW0vzcbBtge5y0vzwpK6MFekb9MEPQTjkTROYP4wiDfE
PI+rrkGGvtzzLcUR+87F9/gxJQZs/SRGDkrkzEVfrBDeQHVG0cDOFhku5khY
Ecz4lNQh9y+Bw7iXEQNciMllszp4I4hyyE6pRItTNu/XbgXK0vD0OsqnzKCa
cXrYBJb3L8L3+ynRTAgr/VNaISVDOnlSMgRuF1qCDJpuJBQNXn3Ln4O4dvil
Tesd5O96MXhQ047ciL5pkb0YSI35+j8bqbw0eMs2Uz5CTuOKdxR3SFXe+lW6
biwJmmeRYuqP5Mn/lXY0QW6eVe4DPwGSUY9Kewp0yCnW/pQ8KESe1ehx1tda
JKeKT/YPvQWLlbVFNzYAi3eiTxQ8iJoyAW82njtnbYaQ1NU5+77VI3PJ6ZY+
mycgWajlxXfVAO1e+RPVUzHwj71rYFE85j3pMysZj8GY5SyocesCmUX5OmO/
Bnj7lIrAzi5czAcHMz/fOVAF9Iw2F7RVYe5CrVt8rBHJxL3nHD+yYUoi7myv
f9yHIT9U1rm7DiP9fuWtHuEEMF7FV6jyDMiM+TE7O/IUut0lwhXzg0i8PJy6
pUqCjNAYvZ76W1JpF20KHkGGVPCsrVONxjSS1Rspg/8BAOJiGg==
            "], "Children" -> CompressedData["
1:eJwdkmeYDwQAh9/nrEMkI4rKlRkpKauSQ3Eyj8pK7nLIzP+O23eO4+64y5a9
yy57ZVZkVPYuI7NQaFtvVx/e3/O8z+/rGxI5ILxHEBAdnDvhEbGhgUBEfLuC
uRLWPyaqZ1SgZu1e//05uQT9Tx7yko8HKEJ+tlmQQhQgGN3qfbd4z83etTB3
3GRRPjeWOB6kGA+x0dtusDglKEkpalOHhynN06y3DOv8x7U+wqP87RrLstpy
PMZfrvJxnqA8K/3TJwlhhX+43KeowO9+5m9WpBKVqcKnVmWZt1zqTZdYjeo8
w2Jr8jw1eJYbLvI5FvqrC6zFJ/7iC1z3Y6/5Iledb13q8bMN+cn6XHGeLzHX
l3mFy86xAbN9lVlecqahNKIxM3ydpjRhuq8xzYtOtRlhXHAQzZliDJN9gxa0
pBXn/YDWtKE3H9mWcCJ5jx9txzknedb2vMlbvM1EOzDBM463I53ozDi78i5d
GOs7jPG0o+1GBD/4od+b4ymz7c4oTzrSE0bRgyyP25Nj9uKo73PETPvQl35k
eNgR9mcAhxzuQdM94EACDDOaoe43zX0O8TsH862pxpPAN6aYSBLpDCeZFIaS
7F5TSSPJISS6xwR3G+8w4txlrCPI4GsHu9NBZpLFDkfylaP40hizc4v5wmi3
G/BfRc0kzQ==
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 3, 4, 2, 3, 3, 4, 3, 3, 3, 3, 4, 4,
              3, 4, 4, 3, 4, 4, 4, 2, 2, 4, 4, 2, 4, 3, 3, 2, 4, 3, 4, 2, 3, 
             4, 3, 2, 2, 4, 4, 4, 2, 2, 2, 4, 3, 3, 3, 3, 4, 4, 4, 3, 2, 3, 4,
              3, 2, 2, 4, 4, 3, 4, 3, 3, 3, 3, 2, 2, 4, 2, 3, 2, 4, 4, 3, 3, 
             3, 3, 3, 2, 2, 3, 3, 4, 2, 3, 3, 3, 3, 3, 4, 2, 3, 3, 3, 2, 3, 4,
              1, 3, 3, 2, 4, 3, 3, 3, 3, 3, 4, 3, 2, 3, 3, 4, 3, 4, 3, 3, 3, 
             2, 4, 3, 4, 4, 3, 3, 2, 1, 2, 4, 2, 3, 4, 4, 2, 3, 4, 3, 3, 2, 
             3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{54, 48, 15, 2, 17, 19, 38, 2, 1, 3, 5, 4, 3, 
             2, 1, 3, 55, 53, 22, 19, 54, 6, 48, 55, 4, 2, 40, 5, 2, 3, 36, 
             46, 7, 4, 55, 55, 45, 16, 52, 1, 13, 2, 5, 30, 4, 1, 55, 8, 2, 
             53, 53, 53, 1, 53, 54, 55, 54, 17, 14, 53, 2, 54, 55, 2, 52, 38, 
             3, 55, 4, 9, 38, 2, 52, 55, 55, 53, 55, 1, 54, 19, 2, 55, 1, 1, 
             5, 34, 53, 10, 4, 2, 31, 55, 54}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJxFkWlIkwEcxl8tjzRjlZYJlZWRGmQrc2rHf1LYOsSREaIda1EOzA4LMpVS
PNKxpVnmoJqTab0m6ppZ1tL/tF05r+Y8WpuJ6essCk3EFyVsX6oPz8ff88Dv
2cC/fOy8E0EQpxxh1Icwr+z+BZyKYxMN1RoINLtS1g8IPZCsFFJm7Lk8roHZ
pzCcvLJK7qsBNrWdt2pXNthzk+Jql/ZjT9gjcXamCRkhM5nXgiiUNagSI29q
QO1y52oqfwAl53o7g6ufoDv17dAey1dknzgY3cWjQMJ0E34+bAQ6hD+6N6ET
ichafxdhO5JVkQwBs/ffnuLAck/hsyG0/5wUFZ3tgMFN1ZVdt5XA5p6urtvx
Ef0r1seEXbdC2ikvz6Xy5/CXb6J7fRUB4zB4tvx1TkY/cPbtj+Z+/wqDNUty
gNENXGnHULRbPUheksnxKW9BPd+4Z5ejhzchPretRY3cAc91/o+NyLhbKL92
hwRSvEWdE/caFAIWwWINAh3Bm/1hMiHRXNKnH1NAPK9Wnlgkg3D+jYVZZzsI
JtfuNSpbgVzp7KFP7EPeQmqE9rcF6Wxvj3WH32MxKy4qRVcHirl8yWxSI3KU
oub0DBsQECXVyXUYaCly5XLUqFiWexwdHGfDhHf2iAaaVvANQYstwOFcjEoX
GZG4180rNY4BmeEsdWe0Au3l/anVroPhgI35KUNanGzTrn6o0qM9dmzBOjSK
BREsZWepFgVHX7UXstsxK2A+1PZCh75lb8vyvE5CFt+sbg3tBslmv7npNTIo
/jI1wHR4cfebvpBO1UG4oX3kVl4W0EZZXs18G9AeCQvzKg0yOskEma8G08SL
rgaHvMMm2+jWjikNBnpNkTUvutD9OTO/zWCGeFH9/p0lw///pOUlx02NSMaa
Fvv4NCDXzA0tzc1EIsaFJX1XjIbPqkcqt1fIoFaQblkkGC7FuMaWi7Dnvnim
oPANpDlZ/UlzPwpayG7K4ZGw3T9SEKuApoQDaTsf6EFWeSbyqcyT/Qczg4gT

            "], "Children" -> CompressedData["
1:eJwdiedTDwAAQN9ltexNRdlbJKOkqMisX0ZGH3IXPnH34875d4yMrJC9yp7J
XsnO3qMiz48P7929e/FLVwWWhQGrw0MKFK3NCAaL1uVHhCJn5Zri5cXBxOQV
/35hiLD/NKM5d8znti1oSSvC6U4PIoikAx3RKP7Ymmhu2eRN29CW396wHddt
T7W/vGajnehClQ12pt6rduWKP+3GDy/bkxhmc8lYLvrdWcRxwV70Jp7zzuSc
CZy1D33pR39ymM4ABjKFMw5iMJM57RCG8s1TDqPSr6YxnBF8cSQppJJIhaMY
zWdP+skkxpDMR8cygROOYzwfPO57j/nOo771iG+cyGsP+8pJpHPIOjN46UFf
eMBMsshmv1Mp97n7nMZen7nHp5b5xBk8dre17vKRO53DDnPJo8btPjTAA0ud
yzzms80CFrKArd53i4vYbCElLmaTS9joPTd41/X+BTa9xO4=
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 3, 2, 4, 3, 4, 3, 3, 4, 4, 3, 4, 3,
              2, 3, 4, 3, 2, 2, 4, 3, 2, 3, 4, 2, 3, 3, 3, 3, 2, 4, 3, 2, 4, 
             2, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 4, 2, 3, 3, 3, 3, 4, 3, 2, 3, 4,
              4, 3, 2, 4, 3, 4, 2, 1, 2, 3, 2, 3, 2, 4, 1, 3, 3, 3, 3, 3, 3, 
             2, 4, 4, 2, 3, 2, 4, 4, 4, 4, 4, 2, 3, 2, 3, 2, 4}], "RootIndex" -> 
           1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{36, 53, 48, 5, 54, 40, 55, 4, 53, 5, 34, 5, 
             19, 55, 42, 2, 54, 15, 50, 55, 4, 5, 52, 41, 41, 4, 4, 50, 38, 
             55, 1, 31, 4, 27, 53, 55, 5, 4, 38, 33, 55, 1, 5, 53, 2, 55, 4, 
             52, 3, 47, 54, 55, 55, 55, 20, 48, 35, 55, 52, 49, 4, 1, 33, 53, 
             53, 41, 55, 3, 22, 55, 52, 29, 40, 54, 2, 23, 39, 54, 53, 4, 4, 
             53, 2, 2, 55, 5, 55, 53, 5, 47, 2, 55, 4, 52, 17, 52, 5, 5, 6, 2,
              54, 53, 52, 30, 34, 53, 4, 27, 1, 20, 3, 2, 54}], 
           "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9k21MU2cUxzu32YtMdwcTJ/hSQ5Y182UQWEBQzyUqwWyaQtRdISpsjHZZ
lCo6CwGtMHDzjQpMFLXeDGW3sBVQEcZkB1oKxba0iJSOFETNSp2onQykoLLL
h8uHJyd58s/vnPM/5yz7Mj3h6zcEAsE+7jmqfPKAtEKNzlu6NK8DHcGaK51H
rgEVfK/nxSw3eCLzie3eUUimc3SK+fchpHfCmEjYUCDzK1ibqEfVvPX1yx2I
7KmT8rDMVpAHqRPiNL+DSFqS1yi8iW4lW7aKroO4IxOL2vUmlPTtTDfmIoii
NX672QpsFi2p2lb7H6jONCm/GbsFErV5IFZYDWKi2DK0yYySBwdLWpJ60LO4
r3+a5znsHLre3oaSyo8XpX6rAT4q85MUER/YkXhnQvrbXTvyHNnjiyxz+ii4
X5JT+UE2ZDtT1ra96sNz8Q+qh9MrgS48n1nJ6Un1QHxGazMwq37Wdnbpcdyb
fCZ0+DZ6nv8wilzeSOf41nauDp7H8wVRb91Jiy9HW623q5XjihN2RJs4vfJJ
UkxBaTayPcFZha67SPqGpUzFmlHwcsO2h5QNlc66mJoIAzIBA8u/01zChtca
xeet5SCJXar9ItQKovQ33ys6bUVjWbWdOmpC9+Eh/WigFdmrUaQstBv4OfF1
kKYD+6r8u7B5x8pU//UdyPxUv+ArkQGo9xV611Q3iLc8u+/7p2FGT1iajKWf
zqfoZznFi5U6ZHY9nD0Z8QuIz6sLafNxJNISReZwK/D5khnp6uyz/eBRiG1v
W4wz/oYEKB/5jVhAsfDD3Z3rHmHksbN4guuXCBxJy3JpQf56899z27RACv1L
/D9pQdnTXm+HtwlpOuRy6AEnqNR794dxe0QX5d4gsq5i3OabmeykDsaFKnc5
Fwe3z5EVfWZFJtOZtmSBEwdPqFpydY0oqbojC3lcixSz/3Yg98/7J6aOGab9
dkhX5xxKsSB7cOLQdP/J4cOqwR+NKIux/1vtWwMN4ZvqVMv0KG9qcBRTQ2hz
aANWvvoD+H2Vj/yVMXmhAOgVeam3fP7Bmus7DRujngJZr7WO/to4cyeky48V
KlmgWnrnjvkw6N7zUUb0WD+q7rU/f9daCxLCVebzffbM3ERCwcLuig6MM2VU
uKV1uCY6d8Q+J4j6H0495dg=
            "], "Children" -> CompressedData["
1:eJwdidVOEAAAAG9YYHcXdisGdmBjC3aDEhYIujl/wlbs7u7u7u7u7u4Tfbjb
bhccnRgRGwCMDExVRNTosOTkqDGRQakRnjAqJi4mOSQ0/t9PSiXgP2dNQ1r0
jOk4bXoyEEgQ8QwmI5n44ykzk4X6NCAr2ajNSbOTg8qcMCe5KMZxc3PMIhw1
D3nJxxF/e9j8FKAghyzEQX95wJ8W5of7/W5RvrnPrxYnmBJ8sSSV2GspSvPZ
MpRjj2XZ7Sd3WZ6dVmCHH63IB7f73m1WoSrV2Gp1thjCZt+5ybfWoCYbfWMt
Qtnga9dbh3XWZa31WOMrV9uQRgxilY1ZaRPCeOkKm7LcXvSmGc1pQUteuMxW
LLUnS2xNOG1YbFsW+dyFtqM9HVhgRzrxzPk+tTNP7EEEkTx2nl3oSjfm+sju
PHSOD5ztfWd5z5netQ/9GcAd+3LbftxyhlFM96YDuWE0153mNVOMIZarTjWO
KV5xskOY5FAmetkJXnIYwxlvAolcdJwXHMF5kzjnWP8CFQ3s2g==
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 2, 4, 3, 3, 3, 4, 4, 2, 3, 2, 3, 4,
              3, 4, 2, 4, 2, 3, 3, 4, 3, 3, 3, 3, 3, 4, 2, 2, 4, 2, 3, 3, 3, 
             3, 4, 4, 2, 3, 3, 3, 3, 3, 2, 3, 4, 3, 3, 4, 3, 2, 4, 2, 3, 2, 2,
              3, 4, 3, 3, 4, 3, 3, 3, 4, 2, 3, 1, 4, 4, 3, 3, 3, 4, 3, 2, 4, 
             3, 4, 3, 3, 3, 3, 2, 2, 3, 4, 2, 3, 3, 3, 3, 4, 3, 2, 2, 3, 3, 2,
              4, 3, 3, 3, 2, 3, 3, 4, 1, 2, 3, 4, 3, 3, 4}], "RootIndex" -> 1,
            "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{30, 4, 2, 54, 3, 52, 4, 53, 21, 47, 55, 54, 
             54, 55, 9, 53, 47, 14, 52, 5, 54, 35, 54, 54, 34, 47, 31, 1, 3, 
             55, 54, 55, 55, 52, 2, 2, 47, 53, 1, 53, 53, 4, 54, 54, 55, 5, 
             54, 31, 36, 55, 54, 31, 55, 10, 17, 52, 52, 1, 41, 1, 54, 4, 53, 
             53, 55, 53, 14, 1, 53, 53, 55, 55, 54, 47, 1, 41, 55, 52, 3, 5, 
             3, 15, 54, 5, 19, 5, 1, 9, 23, 4, 4, 54, 53, 52, 41, 1, 2, 46, 
             54, 34, 52, 3, 8, 4, 54, 53, 3, 4, 54, 3, 54, 8, 9, 53, 2, 1, 55,
              3, 5, 47, 55}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJxFkmtM02cUxv/KsKDgGhKRQcEWE1b5AEhgEMNyCi7QTF2BkNggAjolxTFh
BrbSXeiWVBgiEAwXG8fAgfyBlJbCtspWDlB7QygXYS3CoBDoSgPIIk46EFaT
UT+8OXlzcp78znMexuXc5Kv7CIIodDx2Y/JyV+sjyBw98upUqgqZ3qcjUskH
mCdKaslM3wDdjzVD8eVNmLjRTqg5KiSsHt8v3VpAVsLH8giRGgll1aR2SQaK
nVb+2Uc/gUKkn41kD+N6SgWtMG4KfH4NKxFKzEBoi33vumjQzfd5lsDSAQpx
92A8vJlbDzi29lngJBBjknBNSC/23atR/kb5BcNCRZbxv5WYWD80G0+RQsN8
wUvWp0vI6jguv1DehVSLF0kRkk4dul+c9vCVfggruRb79VfjGK0f1oQ6+Enb
S92N2wbMM0zXEqemgGy+OC648QoaPvKS8HJbkDxySMCImwN+6b78Csf+rAOp
TwzhRtzT5Rol+NcXamQJWtKKHLqsb6XxPT5qFPp1SOp3G5B3q7pz0eFL33dP
r52+cB7oH4hSUx6rgGqnlCTELoLwxG6BxHYfoi8zlIm+RqhLWpCu5LZBZVLk
uTtT/SBUWH22CodwM83Y1tSEuNdnV+tb+jPGkNnMqPrB2A9152MqTMMa6Ov6
svq++wrIeFFEVJQJuLTHzEmaDRLbgmlXPmkF7nEZU+jgrLtbcGIreA10je+f
fM3HZXA+P3gTUdjj2Zu9qMbNlLWHdnoZWjky102TGPfukLf61MODK0Y364Cl
mD0B5pxYZTZHg0R4/mG5++9oLcuqHUzUoZurIdjfe97pf8nC4MH5oDnkpRiy
pPxu4D707u6yjmL0zju01WM65J4syPA3KVCRLCgOODqD5jJoH4kYAbqudJuc
lwH/X1tQ3fYE5L39DcXP0bcKSXEI92eg1lz38nf8FTFzxPXXXP/naK8Skttv
hebPQOZKgl/zizEIy+A1/rlhgoa02v13XuhQeIYP+wdUuOePSaIMofaqgZej
vVpumXDmq1JeZXg2O+PMFcnY3Ul21SLb4GJPFw8iEXiJ/CenE/qCPEcsu09g
1LD8rv2iFX3A+73IQ1qkBnsGjj/Q42hoVHTp0Wewnv7H9L2pZczLtm+rHXua
VbqiCX8bmpA5vbBOvuGX2le32qvR/KG1vnlrAMgmWpGLg49+qc1dfGAEzc9v
nunRyYE4S6+Maet0+s0O0Es42bPwH6HyAh8=
            "], "Children" -> CompressedData["
1:eJwdiWN3EAAAAO/FZZvLrmXXsrHstlrm4v5Atm3btm3btn2tPty9d+8Cw3qH
dIoG9AuIUkjooOCIiNDIRnGiomav/uGdwyOCinf59yOjiPafk0YnBjE5YTDH
jUVsAohDClKicUnAMf8Yj9/G55dHTUgiEpOEnx4xKYf9YXKSccjvHvSbB0xF
atKRnq/u94tpSMs+P7vXDOyxIrvNSCY+mZmsZCOQXX40Cx/caXZy8N4SvDMn
hQgiF7l5ax7ys8M35uW1+XjldguwzZcW5IVbLcwWi7DZ526yKBstxgafWZyn
rrck6yzFWkuzxjKstiyrLEd5nrjSx1bgkSt86HIrUZkqVGUgy6xGdXrSixrU
pA1tqUVtGtGYOtTlgQ2ox1LvW597LvGui71jQ0JY5G0X2oSm3HKBzZhva+bZ
nBa0ZK43nWMrZnvDWV53pu1oT1dmeM3phhJGBzrSiWmGM9WrTvGKk+3MJLsw
0ctOsBvdueR4ezDOi461N3244Bj7EkE/+nPe0Z5zlAMY6VlHeMbhDmIwpx1m
JEM95RD/AhdR/NI=
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 3, 3, 4, 4, 3, 4, 3, 3, 2, 3, 2, 3,
              3, 4, 3, 3, 3, 2, 4, 2, 3, 4, 2, 3, 3, 4, 3, 3, 3, 2, 3, 4, 3, 
             2, 4, 4, 3, 3, 3, 3, 3, 4, 3, 2, 3, 4, 2, 4, 3, 4, 3, 2, 2, 3, 2,
              2, 4, 2, 2, 3, 2, 3, 3, 3, 4, 3, 2, 2, 3, 2, 4, 2, 4, 4, 3, 1, 
             3, 2, 4, 3, 4, 3, 3, 3, 4, 4, 4, 2, 2, 3, 3, 2, 3, 3, 3, 3, 4, 3,
              2, 3, 3, 3, 4, 3, 3, 3, 3, 3, 2, 3, 3, 4, 4, 2, 3, 3, 2, 2, 3, 
             3, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{53, 48, 55, 3, 2, 4, 35, 55, 6, 52, 12, 54, 
             5, 55, 2, 34, 55, 55, 3, 31, 1, 1, 45, 2, 53, 47, 1, 29, 53, 5, 
             55, 36, 53, 3, 54, 5, 3, 4, 53, 12, 33, 52, 53, 39, 38, 55, 5, 
             41, 2, 30, 3, 3, 17, 52, 5, 2, 15, 3, 20, 8, 31, 53, 55, 55, 4, 
             1, 34, 54, 55, 8, 55, 4, 52, 4, 4, 20, 3, 1, 4, 3, 52, 5, 3, 54, 
             52, 55, 52, 53, 53, 54, 30, 55, 52, 31, 38, 5, 3, 16, 2, 3, 54, 
             4, 50, 8, 34, 34, 53, 2, 1, 9, 1, 20, 52, 4, 5, 3, 6, 54, 4}], 
           "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9k29MU1cYh8vMQp1z3hIijKGCS2ZNZMNsIBHkrcuyALOhdRnpXEZwjHI3
DFSMo060BRVwpdjBtoCMiRbjhRkoDmqBwNvyp7STwS0wrcCw9LJSKZtttiHD
UXdJ1n04Ocn5cM7z/n7Pif6o4HBOEIfDKWKX42mKvqO4D0nvtgN3bpmA/32h
u/NkPya0PLdD5GEgtjFPG8M3IrXoIxKPDKDou5HZt4PbQBAkr9hYch/cSury
q5JOUOZYqZDKYSSqLmpPlFMQe7XFGtbqQdFQ5MbIsBm0zC+Ud/vGQZfIi06a
YpBwhVDBSgoIsnf4oa8DRXqX9/z2PozKP5hPvzEGDp6Fr5obAF2n1ndYchl1
lQ3RRN8QcCP+kH7uagVyuKhrv28GyaXUooUoMxr8zfJDg1qg5uLMx07QEOCU
d6Ru7no8jNwi84VtLEdCSrJZrLwKGnGcsOa+CXSlyfTfZcNIfp1x7R2aBnKf
IXTZ8xAlaTGpu9Z6wH7pQ63SMA2aH23ZjMqJKfXNTIRejwGOwDuxY6ffr3ne
iu6fQm8mTfWizC/8dbOZ5fR8SzVWlYBl9XSf9RUaOZM3zqxz1Jree6rubwfu
RItYcMUExu3/xNRN6EFSH36vcLcLo0yutwbYHMiDd31tm3QgeP2TH/K8Qxju
wgf10fdQ+VpyhONNI2Qxe2Z/2zQIhro6w2qWA6nr+wly7wS4My80bSWNUCt2
ti0VtMDK9M7Q+XINijJrii3HadTkf1p5aqsNvT1HGm5O3kX5x6fmqmdpsIh2
r1WMtwDRFv/72qoXsvbVEwUJI8jZeZRaPtYOcuaQO/8ZM3JKOzJWeHcg1hc0
eqmQAYHX5r/B3rOSOyr5IuwRBDiyXogUrc8j42Sc/zlyEWQJV1QHWI+8Binu
qGpCpSgpXq7oxyxrx4PeYD1GZectJbPn5Nm0c1LuLFLCJ5mhZYPI5+kaZUlW
lPtLtzCTA6jZ85cw6PpFrC37Mk1a0YXGXxaCz37gBPvLzU2jiltA+3I/U3NG
0ZLe06TwDCE9FW+rdoxASmPMlmct2WA/2eB+ie1BpvyGN8bmTKl3Gc+9extW
ZnJevPakHyzhx+OErP9etd9p27uIpH8DsZ5ToG878qedXtbfgMf/7ZbM3seq
Dd1ojw9Jn8/tRFKqal2fO+CL4FF1uqJ4/P+e+M7lr85030Yys+TPedYvrsLR
wySawNE7qj7a3ICB/1VrJhhf3SwSUmG7OMwK/wLdaQKd
            "], "Children" -> CompressedData["
1:eJwdkVN3EAAARu9ZXLZt215ebstetS1jW3X6B9m2bdu2bdvWbfVwv3Pu+R5v
zq79QyICgOiEsRMSNiQoKipsaGhgrAT3iwmPDI8qWa7Hv39ILAH/iUNc4pGb
PMTnlDnJRQISEkgikpCUxJxUT/jH4/42GTk4ZnKOmoKU/PKIqUhNGtKSjcOm
45BZOGh6MvDTjGTigD/c73cz8819ZmWvX91jdnb7xV1+dqef3OFHt5uXfHSi
Mx/cZn4KUJBCFGerhdnie4vwzs0WZZNvLcYbN1qCkpRig6Upw2vXW5ZytKM9
r1xneSpQkUpUZ60vXeMLK1OF1VZlldVY6XNXWIMgnrncmtTiqbWpyzKfWIfH
LrUe9QmmAY9cYkMW+9A2NGKRjVnoA5vQlAU2ozkhzLcF87xvKPec611bcsdW
tGaOt51tW2Z5y5nedIYdmO4NO3LdaXZhqv3oTxhd6cYUuzPZa04ynIleNYJI
etCTCfZivFccZ2/Getk+XLIvFx3jAEYbRTQDGeUFR3reGM45iLOOcHBs2TMO
97TD/AsAIPjU
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 4, 2, 3, 3, 3, 3, 2, 2, 3, 3, 3,
              4, 2, 4, 3, 2, 3, 4, 3, 2, 3, 2, 4, 3, 3, 2, 3, 2, 4, 4, 4, 3, 
             4, 2, 3, 4, 4, 2, 2, 3, 2, 3, 3, 4, 4, 2, 3, 3, 2, 2, 3, 4, 3, 3,
              4, 3, 2, 2, 2, 4, 3, 3, 4, 3, 3, 3, 4, 2, 4, 3, 3, 3, 3, 2, 3, 
             3, 2, 4, 2, 4, 3, 2, 3, 3, 4, 3, 3, 3, 3, 4, 4, 3, 1, 3, 4, 2, 3,
              4, 3, 4, 1, 4, 4, 2, 2, 3, 4, 4, 3, 3, 3, 3, 4, 3, 3, 2, 3, 3}],
            "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{8, 27, 1, 15, 53, 39, 22, 5, 54, 28, 3, 3, 
             54, 55, 16, 52, 1, 1, 52, 4, 36, 54, 53, 50, 53, 53, 55, 4, 53, 
             4, 4, 5, 3, 1, 54, 4, 53, 5, 31, 2, 4, 4, 52, 5, 6, 4, 15, 3, 30,
              5, 4, 48, 31, 3}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJwBvQFC/iFib1JlAQAAADYAAACAb8/xe9y3PyDmv2GiFcA/kGjgZ31ZyT+g
3RQMD3jHP7D46KdXQMm/cP5N5Q3Grj+opToQaDHTP6iYl0yhJ+E/qFoFH0Nw
6r94EgOijei/PwDsT81usaG/2MkpSVDr4z9I01inhAD2P9hUPaI0x8a/qI0n
wINTtz+AOJKTmI+1vyiXFAzkJt+/iJHEfNYc6j9oqkelZhnJv/DkEtri/9M/
mLSoa1htuj+4PRMh9Y7pv4izYQ8gk8e/UJ7M3kYHrz9ozh+ie5Oav9AacfTj
Wpc/sCXZpfT30L+gnlD5xFvVvygesTEEx8C/uKsbDm7cvT/g3XxQOfbdv2hP
C2BEqrE/KETorGSxob+4wSFxBiLEv6jjm88mhNk/QF8DkS1Dgr/YEJUNs631
P4BbCb83ecQ/mFHir+xvqj+YEjTsrAzWv+hPkDtifrS/wM26n8db1b94kmiv
YMi0v5iIJveeIde/6IComi5YtT+4OEoVxFvVv3jVrm30/Lo/GKh3KHMp5r/Y
I6mkzn+yPwAzt/ky/bs/sHC9IKb10T/YI6mkzn+yPyAbQscOZME/sIyi8va9
v79mPufy
            "], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -26}, {36, 37}, {5, -27}, {6, 
             7}, {8, -28}, {10, 11}, {-1, 9}, {-2, -29}, {12, -30}, {
             35, -31}, {13, 14}, {15, 16}, {-3, -32}, {17, -33}, {-4, 
             33}, {-5, 18}, {19, -34}, {20, 21}, {22, 23}, {
             24, -35}, {-6, -36}, {-7, -37}, {25, 26}, {27, -38}, {
             28, -39}, {-8, -40}, {29, 30}, {-9, 31}, {
             32, -41}, {-10, -42}, {-11, -43}, {-12, 
             34}, {-13, -44}, {-14, -45}, {38, 39}, {53, -46}, {40, -47}, {51,
              52}, {-15, 41}, {42, -48}, {43, 44}, {45, -49}, {-16, 
             46}, {-17, -50}, {47, 48}, {-18, -51}, {-19, 49}, {-20, 
             50}, {-21, -52}, {-22, -53}, {-23, -54}, {-24, 54}, {-25, -55}}],
            "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 4, 3, 3, 4, 2, 2, 4, 2, 3, 3, 4,
              4, 3, 3, 4, 4, 4, 2, 3, 3, 3, 3, 3, 2, 4, 3, 3, 3, 3, 2, 2, 3, 
             3, 4, 4, 3, 3, 3, 2, 4, 3, 3, 3, 2, 2, 2, 2, 2, 4, 4, 4, 3, 2}], 
           "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{2, 2, 33, 39, 53, 53, 54, 48, 52, 40, 5, 5, 
             53, 55, 38, 13, 5, 52, 53, 4, 52, 54, 5, 46, 13, 7, 2, 4, 19, 52,
              27, 55, 54, 53, 55, 5, 52, 53, 54, 19, 8, 38, 48, 4, 2, 55, 54, 
             3, 53, 41, 15, 1, 52, 5, 2, 55, 5, 1, 15, 52, 4, 2, 3, 32, 54, 4,
              5, 1, 54, 3, 2, 4, 52, 52, 1, 4, 6, 53, 5, 16, 52, 4, 4, 53, 55,
              55, 52, 15, 1, 5, 4, 55, 53, 4, 38, 54, 55, 53, 4, 54, 31, 52, 
             21, 53, 41, 1, 48, 1, 1, 5, 53, 53, 54, 15, 5, 4, 15, 3, 55, 2, 
             55, 54, 15, 53, 55}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJw9kX9Q03UYx4ddRu081o/LcXQ5kBOi4CYNgwk+OyicFYZy6cx2hwQE8Vuo
gMRGCwqQOeSMDbzawtEXSpgM2fjV8xUY+9qA7eSnhDIa2AgvqaM5DpC+/AF/
fO7zz/t5P+/n/fJOyDqe5MZgMIroZ1XGT5uDJ9A21nwobMqOsd8P3ot+qgWy
H8fM7xpoBluCrqD1ComsDs2f7X0UioRRj10lf+Hk3sarw1+2AiMjq1y8y4iE
hs9K2T8CWs/zKW8U9IMiMeg3oP8U5yj3s3kSqXcPH5Ul1GHK4hVCJSuGrfns
zHOvhdM6xusxcTrxAIam7onk3O9D/88bjs1V/IGOnWEwltGHlO4CbykqD2M3
+vZt+m7l3PJRtBFpooxOYDBzx4fpe/xNeC+bZ0aHhKgNEt0AQdnK/ma1EeUz
pn89LNdBlOm3w6twEJdCS9xPrPwHZLQm53h4FzpCwuPEqxbkLLc86drhACq5
JuSZhyZkGSzmy0cpJIcilDW5C2hLe15Tz6Zz+5whnOnX4duYDU/lno+287Cs
vvaQvGmQv//2g7T3yoAR4ee7U+cmmJTcrHpB9BOGfqIeGeJZwKUUHnPx+zG2
KeClxLRGsPFTfULKEYQb19ae/tUIrqjbTLHShEKvqEfB610g0rBLy+6Pojz3
alV7uQXl6uA8r93TyJ1bVBjXp9BxKcm9+BUCyIDq5eWJfiTn8uJMp8fQtlc/
8THRgBQERhYbfof85574sdKxucdLXTpcD+xkb/MBOi83nGnwo/dQTQv1C3fa
gKzL2PjUTIGIV5pqbbiF+UUPYppWe4HwmToQ4byLEt3P77AjjJhyMWxEFjOA
S7m1nMOiWmR7vjXDpf1sJ863sO+0gvWk/lFvRQeq0gs1r9L+RKUfKY3TQ/zB
h50GlQlVaZMrmzlZlTJ3/gd9yG3yLvDQq3HymxuNlk47aD32JUrXb9L8rTLi
w16UV/VIUp3doJWelfbSd2eXCHICaF9hd2QZRfvE99i6v+juRfbuAXlkfhco
Lp0y/zI6jkToYuDfbRJwlT9bKXMbRwH8oP9aZERHnZxTPZ+DSw51OkHrHJUH
e/Knbej+1WxthRbBuhoyVOR9e5uvSmFWG0wkKJYvF3wnboHYQmncJi/y5bVA
5Ug7MKINZzzpHlz2/NQs6Tmab/JY0Ca/I928jkYCDYs4EhCvRznTrq923UIO
Vb5GzGpB4jZz2p/WkaUF/GC6v22eSXWHRun+J6v4xtlIhkD1T9BJ84VBVGVm
hJ1KGED5mszJY74o2NJzm87WHLnbiLHXiqre9KXwf+rxHtg=
            "], "Children" -> CompressedData["
1:eJwdiVV0EAQAAO/RQ+kQ6e6O0d0NGyk5ZGzUgNH1Q3d3d3cjrbSghJJKd3fD
Mfi4e+/eZWjTJahdNKB7nCgFhfQuHxkZ0jc4ICqqR/QIDQuNLBAY/u0PjCLa
d6ITg5hk4KixiE0AcYnDEfWwXzzkD/zITxz0s/FIyh/G53cTkJBPJuKjB0zM
fj+YhPfu853JSM5e37rHFPxMSnb7xl2m4jdTk4a07PS1O0zHdtOzzVduNSOZ
yEwWetKLrGyxNnXIRnZykJO8bPalm8xFbl6Yh+du9JkbzMd681OAghSiPBUo
zDqLs9YiBPLUNRZltcVY5RNX+tgSPLIkpVhhacrw0LI8cLn3Lcc9l3nXilSm
CnesxG2XWpVq3HKJ1VnsTWtSg0XecKG1WOB153vNedalHleda33mGEQwV2xA
IxrTkNn+7yyb0JT2dOAXmvGfoTRnppdtSwtm2JJWXLI1F/2VC4bQhumed5rn
nOq/TrEdk/3HMMKZ5Fkn2pFOdGOCnRnvGcd52gi6MNaujPGUo/3bSLozyh6M
9C9HeNLhnrA3fRjmn/alH0PtzxAHMNjjDuSYg/wK7rkE3Q==
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 3, 4, 3, 2, 3, 3, 2, 4, 2, 2, 3,
              3, 3, 2, 3, 3, 2, 4, 3, 3, 3, 3, 4, 3, 3, 4, 4, 2, 3, 3, 4, 3, 
             4, 2, 3, 3, 3, 3, 4, 2, 4, 3, 3, 3, 3, 3, 3, 3, 4, 4, 2, 3, 3, 3,
              4, 3, 4, 4, 4, 3, 3, 4, 4, 3, 3, 2, 4, 4, 2, 2, 3, 3, 3, 4, 3, 
             2, 3, 3, 4, 3, 2, 3, 2, 3, 3, 4, 4, 3, 2, 4, 4, 4, 2, 3, 3, 4, 4,
              2, 4, 3, 3, 4, 3, 4, 3, 2, 4, 3, 2, 2, 2, 4, 3, 2, 3, 3, 2, 2, 
             2, 2, 3, 3, 3, 4}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{4, 53, 53, 48, 53, 4, 2, 19, 55, 2, 55, 5, 
             34, 55, 4, 9, 2, 5, 54, 53, 3, 31, 52, 5, 54, 55, 52, 54, 3, 54, 
             54, 55, 52, 54, 2, 39, 55, 54, 55, 5, 4, 15, 31, 55, 2, 52, 1, 4,
              33, 47, 1, 1, 55, 50, 29, 2, 52, 54, 3, 52, 15, 5, 4, 6, 52, 54,
              55, 54, 52, 55, 15, 27, 2, 53, 52, 54, 2, 3, 53, 17, 35, 52, 29,
              52, 53, 3, 3, 46, 12, 2, 53, 55, 53, 1, 1, 53, 54, 55, 52, 55, 
             3, 31, 1, 52, 54, 47, 1, 4, 2, 52, 55, 1, 13, 2, 34}], 
           "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9kX9Q03UYx2dl++aNu6GRXylku+TE7NjOFreD2Kfk0F1RglBtwgUuRMIf
7LBsJMUClBmS3ECdlTE3mWzABgj6xQXP2MY2nbElMgJHjc0xSOHI8kamu779
IX889/zzvvf7eT1vpqhs554VFArlEDnupOmkbO8A+pWdEBIS/WA6JZw7n29A
JYtxac6eIYR9/aC4ubkfGsdSE7K2VoM0YW16B80Dvg++MuATPQijNeawlNdB
9kl0c0GbBhTS3uhZ/3WkZJ2Tr39sRIy6Rwuj5WokmArdL33TCbI1kROsXRbA
cnkrw5eNqDD8jHN2bx84eGU6G/UyEHkFV7n5d8CX//Y3g4Fh4KY3vJV1N4DY
+kEW/4IFYac5tqnDNmCbP69rYY6D6bOGok0bfGDi0S8dWPUzlOi2txavuwZt
W46cPXp4HhHQumq/9hwIwhna5PANcBd4/aMVIeAX0URRmAsEO1dmv5bmgC6P
sVs1GAIGzjzdRfKJI+8Go2x6hHeLwnUbXEBxHokJ7hcgClVgHorSgLQmIy2l
woqU6+OnXid5JGP6A38/uooU2X7DvTIdSuyXdb3zkhsUnjNVYZKPfnZbZpTb
DjIm1VVdeRMS7+xqNueNQdaPN37bRjUgIqKVZFrVyDT+w0FqeR7Cgn0N75/4
HWGXvMqOteZl3ZNdsnm7a/r/v/2zcU9dpxOV2G7nEifvokRTTkvStxdA8fSr
KudNGxB+Qayo3IaWLOMd68g+JD0pE8F6P/j2rWlV41bErroYe2jvCBJHtHgm
3wfSlKJW10AH0M/vDuyOHwbxpHWy6Scb4KMfdg5rfgH+PmG/Me4KWkqOrI7Z
bEECe4v9jckAELf+FDw8dg3wo6nt80u9IM6pDbyn/QN8j2Ws9n/NyEcczHNz
XIjRF1e/gAbBXRayorBmmcc9kyFnlDqWOU08Yv6Vagvw09un8YsOwHzHRdwa
Czg40bxh0ueJDov9q/iLGT0Sb3G8qCJz8KIVcq2H1OeLr2xqcgOueyomJ8YB
smdpxpmaSnDkfqx8ubYSZBOpz71gJP1nbxVIVEEgTtb37uC5QUaT5yarjFDY
xHXc1qnBxJljjpB5XOHi1lOSHqS4Jy0vFHwHjB3Pf1+qt0Lhai93zvtwuT8M
eB9Vkf6NQoaY86kXNS44u3ktQ6iNfUZTRVjAd9yeFl/rBHoFd9a60YMoA/Ix
e7AL0Q3HRjrJ+xfvN32pfjCA/gMIJ+3m
            "], "Children" -> CompressedData["
1:eJwdiWNzEAAAQN/FLdtadi0sY3m5LXurIW21ddf1H7Jt27Zt27b92u3De3fv
XlBUQnhMKiApIFnhkaNCExMjR0cEJkdY/Mjo2OjE4JC4lJ9MqhRSk4a0tKAl
6UiPlieAQP5Zjgxk5K/HzMRRS1GazGQhK9koSCGyc8Q/FiAHOfntYX+Zi5/m
Jg95ycchf3jQ7+bnmwf86n6/WJiS7LMIey1KMYLY42dL8MnifHS3H9zle3f6
zjKUZYdv3e4bt/narVagIpWozCsbUIWqvLQewVSjJlt84Wars8nn1uCZGw2h
FrXZ4FPXW4d1PrEuj11rfdb4yNU2pBGNCeWhzXlgE+67yqY0454rvesK77jc
27YigeGEscxbtuambWhLO27YnusutQNL7EgnwlnsABYZQWeu2YVuLLQrC7zq
fLvTg57M84pz7UVvLtuHS/bnon3pxxwvONtIZhnFTM87w4FMN5oYYpnmOaca
xyDOOsXBDOGMQzntZE85jHgmedKJjmCCiYz3hONMYqzHHeN/esvw2A==
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 3, 2, 3, 2, 4, 2, 3, 2, 3, 3, 4, 3,
              3, 3, 3, 3, 3, 2, 4, 4, 4, 3, 2, 2, 3, 3, 2, 3, 4, 3, 3, 2, 3, 
             4, 4, 4, 4, 3, 3, 3, 3, 4, 3, 4, 3, 3, 3, 3, 3, 2, 3, 3, 4, 2, 2,
              4, 4, 4, 3, 3, 3, 2, 3, 4, 2, 3, 3, 4, 2, 3, 2, 3, 3, 3, 1, 4, 
             3, 3, 3, 3, 4, 3, 4, 3, 4, 2, 4, 2, 2, 3, 2, 3, 2, 2, 3, 3, 3, 3,
              3, 2, 3, 3, 4, 2, 4, 2, 3, 3, 3, 4, 3, 2, 3, 3, 2}], 
           "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{55, 55, 1, 48, 54, 52, 53, 54, 12, 21, 46, 
             27, 53, 4, 2, 22, 2, 54, 16, 52, 52, 5, 2, 1, 4, 55, 1, 54, 53, 
             1, 55, 53, 4, 5, 4, 53, 2, 3, 55, 4, 53, 6, 34, 4, 53, 54, 54, 5,
              1, 2, 1, 14, 41, 5, 19, 55, 21, 27, 46, 54, 52, 3, 31, 4, 4, 53,
              53, 55, 8, 55, 55, 55, 54, 31, 55, 38, 34, 2, 52, 55, 2, 4, 4}],
            "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJwBpQJa/SFib1JlAQAAAFMAAAAgBw/pUGmPv0BMIYO2jtG/IEVMBHx80r/Y
I6mkzn+yP/hkyoSrAtw/2AR8amaGyb8w/xEfM0X+P0g9Z5k9fNo/EI6Jo3OH
qD9IoVLps6nEP1CezN5GB68/mOfuD9BiuD+wA4ObIUHJvyBlo78xdNw/qCaR
NHPRtr+opToQaDHTP9j1SFgZLOO/MAcnSvDH6b+ojSfAg1O3PwDlm8yRHsi/
aH7ZfCQ4yL9AF3A9+QLoP0jx1e3PMte/OC5a1H980r/IcqPP5Yviv3Cxohe8
Psy/eOeZNHx80r8oSFMaRcbnv2Cpzk2+V7y/sOAbywy+xT+wytyj4W7Qv5Dp
FmuV4MC/aLj4IzBaw78YeDAfswe2vwi7FGs9WsO/wBC6l+IRqz9o1mKaOtrj
v8i9GoVO6+M/8Mbm2j5Ssb/Atq1/5Iviv/hs0v5k38a/6IComi5YtT/IUCn9
iNKqP0gzEK0FlKs/6Oob/JSVmL9QlXWqajrhvxAGO+LUp8S/oLO7Wzp5xD/A
o6XIxP3av+AUw83NMte/OCizlxxFyj/wHh/ucSLVP3BP4Ep9ZLw/uG3XfK0H
tr/gaxOloxjEP5i9g/B0A7+/2COppM5/sj9gU0f/Sn2pP1CezN5GB68/AHXG
g5XB7z9YTRJTpR/Fv1j75MwoqZ2/MK6+L0ikwz8IGjAZBrCRvxhDCViLF+8/
gBlVOx4m8D+gGramJejSP4D6nZLD9ew/KB92CBXIpj/IlRFsP6HGP+AqY8zP
Z9s/UGa1oMoU4z9oyp26pQbjvzCuvi9IpMM/SO67eTfY0j8AJ8rv+0ZPPxDm
EqgHgKg/6BrUIqr7wj+4WUq1M7bFv9iROsXhQgBAwFKYQB1r3L/I1Kab4kDQ
v0AJ+v41dNw/nSVcNw==
            "], "Children" -> CompressedData["
1:eJwdiWlTDQAAAHei9JAjhByJIuQIFaLkrpDe+wXPTOpTZp5mjP/kLpIQORJC
7jNUknJU7iPr6cPuzM6m7tkX3BsD7I+PKhg+UBiJhA+GAtEoqqouryiPZOVU
/v+hKDHDjGAksWxmC/rUOEbx13hWsJIATxzNGMby2CGXk8A4xjOBNB75x4dO
5IGJTGIy903inlO462/bnModpzGdXybz09nMYCY/vO13Z/HNW341hTmk8sVW
53LTz85j0BumM58BF7CM62bQYr8LWcRiMrnmEpbyyWY/etUPXvG9l83ikn02
2esq3nnRbC6YQy6rWUOPhayl0TzO+9ZzruOs62mw23wKOOMG6n3jaTdS5yZO
2eVJt1JrMSV0uo0Ot/PaIl5Z4w5OGOK4L93JLo5ZylHb3U0ZQV54xOce9pmH
/Ac5qLD4
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 2, 3, 3, 4, 2, 4, 3, 2, 3, 3, 2, 3,
              3, 4, 2, 2, 3, 3, 4, 4, 4, 4, 4, 3, 3, 3, 2, 3, 4, 2, 4, 4, 3, 
             4, 2, 3, 4, 2, 2, 1, 3, 3, 4, 3, 3, 2, 4, 3, 2, 2, 2, 3, 2, 4, 2,
              3, 2, 3, 3, 3, 3, 2, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 
             3, 3, 3, 4, 3, 4, 3}], "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{40, 42, 19, 52, 3, 52, 8, 53, 52, 27, 41, 52,
              54, 53, 27, 46, 54, 54, 4, 4, 47, 52, 3, 17, 46, 52, 54, 4, 27, 
             55, 53, 1, 52, 55, 5, 5, 53, 55, 1, 54, 1, 35, 30, 2, 53, 2, 5, 
             53, 5, 54, 3, 4, 2, 53, 54, 54, 34, 54, 52, 52, 52, 12, 53, 55, 
             52, 55, 9, 53, 31, 4, 52, 54, 3, 52, 55, 3, 4, 4, 52, 52, 2, 53, 
             4, 5, 1, 4, 2, 54, 55, 54, 1, 2, 3, 52, 5, 4, 53, 53, 55, 53, 2, 
             52, 55, 54, 55, 1, 53, 55, 54, 1, 1, 5, 52, 4, 2, 52, 4, 55, 1, 
             39, 47, 1, 54, 53, 54, 30, 55, 1, 5, 4, 53, 52, 53, 1, 53}], 
           "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9k39Q03UYxwcXAhrnxMwReI1LhEVeQxEmAp+ZFjsCGyA/JBuD0kaEW0De
+L2iyyFKcJEg8UtHsBHhsHCQzWdj+24TOBjGz/GbwY5jeIwyWHBAX/6IP54/
Ps8fr8/zfj/vxz2JG3nFhkAg3MCL8VWt348rQ0h821NRECVDvJYqxG9TIulI
2JRPvAY4sUFHqr5rBYZas3fpjg4E3L6V7HEZ0jcHOzqs6KDkxKPL54J1wI4K
2Q7NlaA6lnHPhn8jorloiLXRT4F0OJTc/eUCCJNLXkzl6oBemJLWdvsJYtb0
TL5n/wAJnPZZnTpmgPTDmdVUpQl4FEMSjTQEvHkrVXN6Atq3JPwwtQgxfJ/P
jWXqgOcujDpeXA887rHUmYaOXc600evksk4Dwk9jafOb00iQxEo3Fs3uzmWJ
sw1lmfXgxZpYLHUGIMSf8xPkPAO+1vtobI4WSg4I7d+Xa0G8Wu7jengc2rtV
rzrIOsFyCrDsagA2KSMjab0bqLLSVzLiKqEiOiymfLYDLFb63cqCHPh/jpE3
JPW9+Q+ReC1tJS97CEmb8hKNAbg/Ma6GQtMAEC6vbXpsPkYcEcf2bKAWOL/1
GFzwN+Pa7ChxywQc/raS66gC6b5vPPeU/YwI9GqPOWkAEnSEHiriY0DPuoTZ
HF8EDisIUbiDQDQ5i+0FYmQZLhA9S5wAntpFLkzWgsIscWZJNSCdoQXUxmrB
4bW/r2aZWpA1XJhQaOkEctXa/oveehDcM/S93t2FqFneDY4kDIjFhaL0G2JE
IDVI95/9HagtT95m1KuQOH+0BPtwEPgWl0OXQjTAfjz6z+k/jLDAvxKB+fYh
3ptV5KOtatynzxJS3J4CQW9rp8X7+smD19OShoF0vsgy/M7X0P49M5b8LQZ1
H91/2NWPgS4vJ7B+vQf4Bdj2YJkKFG3nqZ34P4yBXHN81Siw12kw4LaIqP76
jaaBISByGim9J4aB3pxYnU2+idr3nrvYSekHXu9YOSFgFJHAtla1aQDey9HO
9RudqILgk880G5Eg7bmn0gMDpnSrywv3W9omd/4F5zmYN4IjmtVAs28McdzC
gNFqmoxpmkQcJTMr3U4BVu0Rh2J8b4z5jWp0CwPF5k2flEwN8BqOpXqvjkEd
9x5/fK0L+J9HLO3kCee2hT4CYER+nI9RVMB8sO7Zio0hmuh+wp+4DmvgT7Id
PYRPwn1PZqoR6YXZozKoFMQmO/k8nteFmFsX+nB91n5VXPcCBrSDLPaZnXtw
I611OepRRQlFFoznj7cVPu+kaUG79/EX961BnKuuqTsV2WNDt7rLDcvTWuQl
WPr1C9fZ3VzGLZia7xSowEtyrZ0sx7l3/TOLRT0w8i8VC5qqQYoDc6j/uhlV
vJR81W65FTEl6R84dZQB2+9dHyXuK9uJaB90QYP+A9qvRvQ=
            "], "Children" -> CompressedData["
1:eJwdiWeYCAQAQN93yB2SUjZ1LSrUGScZdaW47LuyU3e5QbnT3Ylzdzhu0DIi
K3tU9l5ZEdmzNGxll73Xc/nx3ve97wVHJ0bEBgDJgXmKiOoRlpQUlRoZlBfh
CSkxcTFJIaHx///cPALuk4/8FECX+wAFuesyAwkijNcpRGEeoTh3LEJRHuK2
D3LLpd60GDd8mOsu8ZqLfZTHKEkprlqCKy7ysgu9ZGme4mnKUJZyLPCi8y1P
BR5nnhd8gvPO9ZzBPMkczzrbZ3iW15hlRWZaief4zxk+z3RfIoQX+MHKfG8V
vrMqL/Kv0zzjVKtRndO+Qg2mWJNQTjnZWkzyZWpz0omecILHHW8d6nLMetRn
nP841lf51r8d41FH+wYN6E0f3uQtjtiDhowymRQO24hw3qYxTXiXVjSlGYeM
oDktaMlIDzrCA37jfocbyTD3+Q5/+bWtGWoXPqINbfnTdvxhe353iHvtwHt0
5H0GG8cgPyCK34zmV7/yQzqxxy/dbQy7jGWnXxjP5+6wM9v9zI/pyjYHutUB
JpBIN3JNIsdPyHaLWW62v5vszkY/5Rf7ucFM19uTVPr6s71Io4/p9DaDDNeZ
bl8yWWsWP9mPNfZntWmuspfZpLrSHFaYy4/29B7G8xjT
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 3, 3, 4, 4, 4, 3, 4, 3, 2, 3, 3, 2,
              4, 2, 3, 3, 4, 2, 3, 3, 2, 2, 3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 2, 
             3, 2, 4, 3, 4, 2, 3, 4, 2, 3, 2, 3, 2, 2, 3, 3, 3, 4, 2, 3, 4, 3,
              3, 3, 4, 3, 2, 1, 2, 4, 4, 2, 3, 3, 2, 4, 2, 3, 3, 3, 2, 3, 2, 
             2, 3, 3, 3, 2, 3, 4, 3, 2, 2, 2, 2, 3, 4, 3, 4, 4, 3, 4, 3, 2, 3,
              3, 2, 3, 3, 2, 4, 4, 3, 4, 3, 4, 4, 1, 3, 3, 3, 3, 3, 4, 3, 4, 
             2, 4, 3, 1, 2, 4, 3, 3, 3, 3, 3, 3, 4, 3, 3, 2}], "RootIndex" -> 
           1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{15, 9, 53, 2, 46, 53, 4, 3, 52, 41, 38, 40, 
             53, 41, 7, 2, 53, 10, 52, 1, 16, 55, 1, 3, 54, 54, 5, 19, 54, 15,
              55, 55, 2, 3, 1, 2, 3, 55, 55, 53, 54, 2, 52, 55, 1, 41, 17, 52,
              5, 19, 47, 3, 53, 53, 1, 38, 10, 53, 2, 53, 15, 4, 2, 52, 41, 
             38, 54, 52, 1, 27, 55, 54, 41, 30, 47, 55, 3, 1, 52, 53, 3, 5, 1,
              3, 52, 52, 5}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJw9UVswlAEY3R4KubQ8oInsTooyZNFENX1ySWJYjPYfsrGRGrFCaKRQRmVm
3YYxBq1s2ZVYRbkMn90Vv+t6kU1CGVkr2dCkcZnWAw/fy5nvO+d859A53MCo
PRQKhaUZQrdY3+KPHKi8p9WJOULIN3D/YKNAFCdedRCuS4FZOTh5UasBFI8q
Zsn1UlTQl5piJzqAlmsd5L8wA6YmYXXZB+eBomv0rtJcBjcXyoV8XibYG2fM
G60MAelpl+pt1YfM2hNmkTEiKG0SxhCxbaAc8sXzzyVAOfOGtvdZP1K5Sj1O
+TCEp6Tbrx3rQ5pd8euF1UFgjodxySyE6d+R2QbBcqTuv8cdNVOBc7evoZ9G
XyxEvg0xAOTf6yUmLmpYM17REVvOgTJDWGZHNINzGyeFlbcIysIo7czjQlAm
99yvL5Ag1avobsj3VZhmfx4cchjDabmqKUBUgSMb8QVLGl3aUYZ6WIO3dFq+
LfbvRGaC9AvDcQS7ls1Dx1T9SNKDooxzZUiM3uDb/phD11BXtlyzzyQcQ1aK
epEyMcUy9+pBcY6+1bZfPntm3/rpGtCu4/m5ekpA3T5lO7IpwbWEANMurfcY
X18Oqc0SaNkSpfp2V8P0AY9vPjwB8qviKnRK/kE+w721lVUOYlOZqnNzHGmc
hrPS7EiwfkkvrBiTQLhyw0quJ4QnzVsXOHl8WEv2Mb/tqMnjViNDoGoHNVdw
mREiQ2ZjVMRmdDPmu5U+DvCW7vaywxcvEBVxDeeBOicijT51o9rL4oqFZz+M
pJXQgi/VAMW0M0tLQSL/0AO2y50p2LmndBSO9s6Kd/0r3IweRiRJkVasMyZ1
koPS3l3HiShDJRApp+Zl6Mwj0ydfkehccCRwu8cMdprVudpGsM9ocPqo+Y84
vJxkED2AipM/r8X96sGWFzaxsKjJVbvKwYP+Ff4Di59nRg==
            "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9FKQplj+ITShoyMgplVUR8ST/nLvykuy93zn9k771HiCiK
7GyyV6WQ59MP7929e4H11cENEUBNdFjByq0FoVDltrKYcBRv3lK1sSqUnbPp
/68IE9FLH/oSid4zin78dRXRxLCCEvozgAwyiaXFHu8axx0HMojBxJNAs39s
8re3HcIthzKMXw5nBI122+BIRjGam04lnTHccCyJJFFvl9cdx3gCTOCn10ym
zimkMZGrTmIynabQYSrtXvGHl/1urd+85Fcv+sULZjGNzy4nm+l8spgZzOSj
551FDnnMZzbn/GAuczjre+cyjzO+87RtnnIBJ13CCReSz1uPW8Ax37iI1y7m
lUd96VKWUcgLj1jEYZ97yGce9KkHbHW/T1zJY/dZymrWsNdH7jHIbstYy0N3
+cBy1rHTCnZ43+3+A5aQuPQ=
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 3, 3, 3, 4, 3, 4, 3, 2, 4, 2, 3, 3,
              3, 3, 3, 3, 3, 4, 3, 2, 3, 2, 3, 2, 4, 3, 3, 3, 3, 4, 3, 2, 3, 
             4, 2, 3, 4, 2, 2, 4, 2, 3, 3, 3, 4, 3, 3, 2, 2, 4, 3, 3, 2, 3, 3,
              3, 2, 4, 3, 3, 2, 2, 4, 2, 4, 2, 3, 3, 4, 2, 2, 3, 4, 4, 4, 4, 
             3, 2, 3, 3, 2, 3, 4, 3, 3, 2, 3}], "RootIndex" -> 1, 
           "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{4, 3, 3, 47, 6, 17, 2, 42, 2, 2, 47, 53, 53, 
             21, 1, 6, 4, 53, 4, 55, 52, 52, 3, 48, 41, 54, 9, 1, 2, 13, 21, 
             53, 52, 54, 4, 55, 54, 4, 52, 47, 4, 52, 47, 55, 27, 9, 55, 53, 
             17, 45, 54, 39, 15, 13, 55, 54, 1, 54, 3, 3, 2, 19, 40, 54, 54, 
             15, 55, 3, 17, 3, 54, 52, 52, 53, 3, 4, 4, 53, 4, 5, 2, 52, 34, 
             35}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGAIAeIP/2/yWkcd3l8grOIa1bdk/wzZoJJTJuftd/xbWeFz
ZLH9i3cfevoTz9gH5EWU7Pmx1f7GAhG+T+lb9zNsOSSuln3afof1/E3xK5bt
lzh/Xb0ESMP0LXg3R8zA9dj+ioq4rH1rV9vfUF655Fz9JnsJ+QyhyzKv7F80
rJilF7HVvkLS7vOT7kf7P5iqTTxpdWq/x0G12Y+AfInmLvNruhf3SzD8yFk4
7ej+Fd/sVZeYPrP/USjh6/f6sT3D3klXjz/dYH9ALJvXoWKf/YwPcWn/zj3Z
zyH1Oa3q2Tr7GWoLZOpqLu3f0a6Rd8ro+n6Y/TA6QK+G8cL2jfsXSH9YunH6
8f0eDm8lv0w6Yi/hFuh73PLu/hXPD8zV0ji3X+fGHM8L+SwOCvWy8cejr+5/
wWZpfzX3MNyfHZZ8WiuuXNufcGRzRpjcUbg4x6LWW5LvD+xPCHb/71W70h7m
ro7l6gtfXdy836FK1vHX7qf2GY7XPq7n3gCXT1juU5PJ83B/wT/fp7zH1tkL
SPy4lH5hrX3GB1nb05sO2j8Im3D8/O/z+zcYTH/2+81n+4q5K7a7zt6xX+PO
dcMQyTf2B1Jn211ZdnL/grsbjIs1n+2fcNOHY9nvQ/DwToioPVQh+tC+wpHh
pPGyA/sfvKu7+0Fw9/4Nzr5Z3wSX2T/we86xfNWO/Rae/08XAfWvqGaaxyFw
0P7FQuMZIH7Fk9eugs3n9ldc2qGyS/zAfoH4i6tWKx7a73Dh45UpkkC+a25w
IUjdpuIpJiV37GdkaParOzftd6it/P8l66X9hhMbxc2A4hlOzzQ1/u62V0hz
Tb3jdMB+hX/XTgHJo/sn7OW4nHRmj33AvDP33NjX2wMAgK9nAw==
            "], "Children" -> CompressedData["
1:eJwdj1lTDQAARs9ku1lLiEJKhFKuKIREUXY3f+CaufTEzK2Zxm+ylL2s2bJW
srdYQ8i+Zuu4PJxv5sz3dNK37QptjwOqA7EJhWtLotHw7sr4mFTsrInsiESD
BVX//q0x4v4ziMEMYQELGcowAnSpnQ7YYTz3Hc4IRjKKP+YzmjHkMY8E7jme
CSQylt8m8cu7/nQcP7xjMhPJJodJpDCD26YymX4zmcItv3vTqaQxjXanc8N0
2syg1W+2+NXrfvGaM7lqFlecxWzmcNnPXvKTzc7loh+9YC7n/eA5g5z1vU3O
54zvPO1bT1lAYazrpItYzBsrWUIRfZ5wKct47RaWU8wrj7uCRlfS4EtL6PWY
qyiljKO+cAOrOeIaynluBetYz1oO+8xD9njQpx5wI5vYTL1PrPOx+31kiIfu
84F77XaPfwGYYbL3
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 2, 4, 3, 4, 4, 4, 4, 3, 3, 3, 4, 3,
              4, 3, 3, 4, 3, 2, 3, 3, 4, 3, 3, 4, 4, 3, 2, 3, 2, 3, 2, 3, 2, 
             3, 3, 4, 2, 3, 4, 3, 2, 3, 4, 3, 2, 2, 3, 2, 3, 4, 3, 2, 2, 3, 3,
              4, 3, 4, 2, 3, 3, 1, 2, 3, 3, 4, 2, 4, 4, 4, 4, 3, 3, 3, 2, 4, 
             3, 4, 3, 3, 3, 3, 3, 4}], "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|"FeatureIndices" -> CompressedData["
1:eJwtj81OAkEQhGtnZxEOGgkhHjwQNRE5IJDMz9mj1/UJ1mTVkyYrCeFReFu/
acmkurv6t+bu/af9cJJ+x5i2O7wMQ3d8m0Bev/f9Zz/s0lcFOwGvqEaPeKeg
EbbBZ1VkPP6WeiSbjGWtqDrV1G/0oMk5WxkSuNJCU63pCLCGnOOVG8+6tmtl
e6MnuxiJ16C2DVFjKlkX8HIjko3asiPAPHZJnA1zNNe8mS7p9dqgdGTzS/qC
6Vpws0z96094b/qD/TWYqmD/y2wrOrzFRV8NVrbFsTnBysw9iv4AoHcbQg==

            "], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJw9VG00lGkYHq1zzNZ2UpuPZCNtDDYskzNOdu85ObVktWOrgygTaVnLjNR6
K6xUJ9bHYtgmlSWWmZKGlDFr3S/GzPieanw7SD7mVKyVnZyj2NcPfjw/7vM8
93Vd93Vf59kZwvs+TI9Go92kDiGtD1AGdqNlpntOpbkcWcU1/p+ZDGH469ui
wszLQIsPdlBR9+x1xGSncy+yEnjRd40VqE0S5Tv4Pwa1RygRISpFdeyMzvWC
HDxVQ7WKYAVKt0TTvpLJgE4cDm36MICiDYT3y7QxZBckKN1MezDF3MLrKNmK
hgXDvrFyElhbg0LPWDUi7Y6AaGdOg4g3Z9NK8dHeezGSj46BVOj7+TjVnzXd
H5cX1on+mkHjqfJ25NyzMz8dKQbTAfvILu86lGS83f2U6pMUOWxyEt/Bwtyi
4txhNdDN3p65OFkBnIL24YMGD9dq0s+g5oGmB/nucs32Bw1I7HXhTHs2IqN5
QJcY/wy1RxUTvRtkYLrr1GaN+SsQFmQEG4Y8A363q3ilnt1hMRNj1Q1OFfWO
niVNoOZNyeFd6Rq+k+5SmG1mCSY5NXJmz00Bx8DowkqfZVJ+gNTgCfLtmYIO
Cz22IYcsW/GXuJxFFi82Qkm1bT8WObOFIYc02ewpXNXNGTjBUyUjjP4Qut7x
3BCwJj5+nflehoU/Wh1JXWzAhb/NLrWRJBY63snZ8eEv4PonNBJGL8ApISKi
mdrjqL3NY9bASyx8NN93xH8eOFFFKffPteGqXmlszI2Sqx3IcpwISj1eilz9
h9vl1P6Sop8vGv3Zhuxo3hsJT4nEm7yt+1/VAT83/7AZxcMKir6y/eJTzPLd
6yPobwDDE5fsOpldkDSyzU5MzSPdeiCvlarVJ+v+W9fTjGT/06ZvOM3I3uzs
ojNtwr5d4pLOX6qAkyVSTLBf4gK3qsZYpkDDvMWaK9JB0PawE1v2J+NCgNXN
IlcV8pd8JjYqKsB0eEvi+bJBtHS4dbVpuQ0X3nor8yJykR4/GTcS3rKGu5rn
8Oy4NvqX3Tg7bm171nZyLcer7xgy60dZkxqkZ4tZ+443oXRJTHwrLwZuJtPF
7Ho18CtuA/G4AfqQMTg2KwJaYH3ru3VaWNWjfRNuaU2okOHXqw68pkT/9Pe1
aSb/AKF135OGDUhPfpGfJsG1HDKyjc+7rfDctY+CaSWqr98IbSmuQppH5Hea
/SQId3/NnG8eQfbpGTPnsCgUlrcEJHRQ+Pss2Cu4q/m3LHyi6NaXo9amw9Wt
R4mzcetvpFNzcOt3TCSOKZH7eyQpkKhQok3Vu3WrALUzNdxjJQOgsnZoPvxT
LYaT47+e/qQShILYa8F76lDoXuqns2pDSVrC9OCpkLU80wK9dp7/bQ74+tov
tuXeBzYjR6AvlGO44NOMnvX3kNNy9SM73Rxo5e9+Nlv5RwKdq07mt6LUY7fv
AuWTsOHYckZjJaiYG8+M0rtwgRj6o/IAiUKT8p2XfYYxa0Q5t6mrEpLcyzKP
VGuR7v3vJtJGCbOR19OCQ55T/sTIznqMQsqh5aWT6RJwYm6+PdRfDf8Dc1yM
1Q==
            "], "Children" -> CompressedData["
1:eJwdiXeYDwQAQN93UXepaKd9WtoOidKQUhrGnbSk7nITN363uTt3uD1xs8wm
Cu1SiJStsjcNpV32qp7TH+993/teaFRSeEwQkBrcrPDIzB6BQGR2REhz9E5M
i46NDoR1iTv5m5oJ+p9TaEFLOtGZUzmNs1mgBhPC6fznfFtxBq2Z55l86r9+
4j+exXHn2oaPPeZHnsO5nMf5dORDj3oBF3IRR/zAtlzMjdzEJbzvFVzJYS/l
Mt7zct71kO8YyttexxzbcRVXcw3XMtuDzvKAb7nfN91ne67nBvY607+d4c1M
9xbe8C9f91ZeswOv+qdh/OEr/u7L3kYX7mSat9OV35xqN6b4q3fwi5P92Ul2
5y7u5h4Kmei99CCOeO7jJXtyP3t80QfoxSCe5Scf5HGafIje/GijD9Pgbh/h
Uep9jDr70Jd+1PqDE/ze/nxnOBGMdwDj/NYaB1LtEzzJLp/iaarcaaU7fIbt
VjiY54ih3G0+TyRRbLXMFyg1mhK3OITNFrvJImMpdKNjTWCMwxntUArc4DDW
m28io0wiz2RyTSFAKmmsM8d0Msgim0xGutYRrjHbEWQ5mkxHkkMuGY4inzzS
/cY0vzbVryxgtQHHkOIqx7LSZIsoZoUllFFOKUkuN9EKKllmA0utYokTqGa4
NYzjS8fzhcNc7FBrqeNz61lkgguNt5E4m4j1M2M8AfzDPME=
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 3, 4, 2, 3, 4, 3, 4, 4, 2, 3, 3, 2,
              3, 2, 3, 4, 2, 3, 4, 3, 2, 3, 3, 3, 4, 2, 2, 3, 2, 3, 3, 4, 2, 
             3, 2, 4, 4, 4, 3, 2, 4, 4, 3, 3, 4, 4, 3, 3, 4, 2, 3, 3, 3, 4, 4,
              2, 3, 3, 2, 3, 4, 3, 4, 3, 4, 3, 3, 3, 2, 3, 1, 4, 4, 2, 3, 3, 
             4, 2, 3, 3, 3, 2, 3, 4, 3, 4, 2, 4, 4, 3, 4, 2, 2, 2, 3, 3, 2, 2,
              4, 4, 3, 3, 3, 4, 4, 3, 2, 4, 3, 3, 3, 1, 4, 4, 2, 3, 3, 3, 2, 
             2, 3, 2, 4, 4, 3, 4, 3, 4, 4, 3, 3, 3, 3, 3, 4, 3, 3, 4, 3, 2, 3,
              2, 3, 3, 3, 2, 3, 3, 3, 3, 4, 3, 4}], "RootIndex" -> 1, 
           "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{14, 55, 30, 4, 52, 19, 3, 52, 5, 21, 52, 4, 
             54, 4, 52, 3, 5, 3, 5, 20, 2, 38, 8, 39, 10, 3, 1, 4, 30, 2, 3, 
             54, 2, 4, 55, 2, 1, 27, 2, 52, 53, 9, 3, 3, 5, 53, 52, 15, 53, 
             21, 3, 1, 50, 31, 54, 2, 4, 34, 53, 17, 4, 5, 6, 3, 53, 52, 52, 
             52, 53, 54, 3, 17, 5, 55, 54, 52, 55, 52, 2, 34, 2, 55, 15, 53, 
             1, 52, 2, 31, 55, 4, 55, 55, 17, 5, 52, 53, 53, 54, 3, 13, 1, 4, 
             55, 1, 53, 53, 47, 38, 55, 52, 1, 38, 38, 52, 3, 3, 4, 8, 54, 3, 
             6, 3, 54, 4, 27, 55, 8, 54, 4, 3, 29, 52, 53, 2, 1, 5, 26, 54, 6,
              55, 27}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJw9k2lUlGUUx0eOyghYFHDC4hAkknNMY1EZEbyAHRxRYaAiCkyWkKlIMIwI
owZQQ5FtKCAyHATlBRXeYR3WO8My89aMMjADDbKDIMtRkaXDCZBePsCH58t9
7vP73/vc/7UMjvAJ3cRgMFLosyj46JsvTwyB3/z1OAFbipx8n8mK4lZwcRkL
HEkewfSEbdzj2RRO8IncfX5VwMvstbJLLcSkrLsVuiSFM9etG6rV1aDdWVz4
8Ody0H7x3W2rZxTyawMybD9rQeE+x/7Cm1N0nrNoKVoB6XbVAUePUCiOSjuh
W/wn8s+Jw81X6iFdSxZEscbRYr5sy6LOBBC3HQ15tmoQtvs2po5rkPHu38+X
3L1gJn7BhDfWCJEvT41tl5WCKjNlIelqLXCej6Z8S79nH7oc1202BZK5twXO
bgm4XpfEse/TZJrjcqfc9wKdJ152cEgyn6T76K9Zi6te+CpGV9VgES0ZHrN7
iBZXRcfS1nTfk/1m0NQG6YPy2VfbRSAJMlOm0PEcbvXN1AtSZFgXbfG+WIPM
N+fOxo6XgrDjDGuNz165tEt55y/kmTkwSKsnYLM30YkXVIdsx0AD/V4ZWlDX
lolhEkih/12FaSUyGgVd8jESOPOnMo3of9HurOa2rTxCbp5ywF23DFSPDnYI
hpQQmTXrGeA2CekK4/xnYVVI1XAEhKYbKS5rJamzBNIdNY6nQ54Cz7X7RZk+
CSoDt5779D1R0Kd0/qEVIktvQEyVFDjq1fvN+9uB0RvmmqWqBb+CqLrWuFIU
Gk2T2x/LMUmf9f1ithxzQh+UGD6uQvbgGw2WW9UY6OmU0+dfv8En/+Nqsy3/
QVXXa9uMNa3op1OZudo7AYFxA0ElUS2okmx1t09rR0In26M7sQ3FfNG0fkEJ
GI6/TujyCUgaNKm9u9QMMQ2z9iOJKpwQhDLjWQTMsBWfOGTKMdDj3CUPv1wU
u1KHD+nLMOfg11MC4g7alDa9zylsAb5P0Fde0UoUF3mh3YU+4DRKzgdbtyIV
mend7/AAmRGhJom+92B3Z9uevLU6B70nerzlaDo20tBoUIy7b4muOZ1uQh75
ebXBEzVSy27H48W9G35mj9+zktBzmPHew9xP8106Us/MhywAjxks2Uz7gqFk
/7pjWIKBdTt2cY2kKH5ZHHOytQB40zcIYWo8MC31KvXYLWATVpRHnpSh8GiG
j5r2J99Utjnkylkgk+Oe9gYFA1PBOi+dkaFqZH6UT+sLc8tipPR8DFVWowdo
XcY7QcS/4SIwlRaHsRKeoNbc80OmbdfGXrIX7V2qqHKw+TE2/EiPGicONFdQ
/l247lvC021pde/yBsfpcMJct95bLpHWt343ljfDYlvGZQWtt+43rqJKluor
B7L+2MBAbAVG5mvC1/aBKrBveoXuW1K5qfODIg1ouX/8EmGtAElKyJB10RQO
+f5UZtpTDkPughpRcg2oLmZZfMwpgv8BEYtlnQ==
            "], "Children" -> CompressedData["
1:eJwdiXWYDwYAQN+nbWJymJzO6encdB6mxhxOx/zuOKedjtPd3WaaYdOx2Sx0
m+7ueI4/3vu+971MLbsGtYkBhMaLVlBwePlAIDiiXvzoqNolLKRtSKBA0XYf
flQ0MT6yz5jEIjZ7bUs74hCXeMQnMZ/xCXvU3X7KLhOw03cm5K2JeONvvjYJ
hShMUpLxyuSk51dTsMOXpuSFn5OK7aZmm2n4xed+QVq2mo4tPnOzGcjIUzOR
i9x8ySYzs9EsZOWJG8xGdnKw3pys87FrfeTPPnSND8xDXvLxFfm5b0Hu+ZMF
WO1dV3nHlRZhhWUpR1GW+zXLLEZxSlCSMiy1FEu87WJLs8hbLvSmC7zhfMtT
gYrMsyrVuO43XPNbKlGZKsz1qnO84myrM8sQZlqDmtSiNpedYR3q0prpBlGP
YFpSnwa0YJr/O9XvmGJDJnvJRjRmkk1oyvdM9KITbMZ4mzPOHxjrBcd43ijP
2YqzjvaMozztSE/ZhpOOsD3D7UJXOtCRTgzzhJ057lCPOcQf6cYgBnPUAP/Z
m1DC6M5gIxhkDyINZ6A9GeC/9rcX/fzHvvahL3/bjwEMpD99PGJvI+nlX0b4
pz0dQriHjWIowxhOD/9wNL87gpF095CjOGiYBwx1vwHfA7DWJM0=
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 4, 3, 3, 3, 3, 4, 3, 2, 3, 3, 3, 3,
              2, 2, 4, 3, 2, 4, 3, 4, 3, 3, 4, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 
             3, 3, 3, 2, 1, 3, 2, 4, 3, 3, 3, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2,
              3, 3, 4, 2, 4, 3, 4, 3, 4, 4, 3, 2, 2, 2, 4, 4, 3, 4, 4, 3, 4, 
             4, 2, 4, 2, 3, 4, 2, 3, 4, 4, 3, 4, 2, 3, 3, 3, 4, 4, 2, 3, 2, 3,
              4, 1, 4, 3, 3, 3, 2, 2, 3, 2, 2, 4, 4, 3, 3, 4, 3, 3, 4, 4, 3, 
             4, 4, 2, 4, 3, 4, 3, 2, 3, 3, 4, 4, 3, 4, 3, 3, 3, 3, 3, 3, 2, 
             3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{4, 3, 50, 19, 30, 22, 17, 54, 15, 55, 38, 53,
              55, 1, 50, 4, 13, 21, 1, 52, 52, 2, 5, 4, 13, 1, 38, 2, 54, 1, 
             55, 21, 52, 38, 53, 54, 6, 55, 4, 3, 39, 5, 52, 35, 4, 54, 52, 
             47, 52, 54, 27, 52, 3, 54, 45, 53, 54, 3, 5, 21, 54, 15, 52, 1, 
             5, 55, 15, 27, 2, 53, 27, 5, 5, 3, 54, 2, 5, 53, 1, 54, 55, 55, 
             1, 3, 3, 14, 52, 48, 54, 41, 52, 54, 17, 53, 55, 38, 53, 54, 5, 
             55, 54, 54, 48, 47, 52, 53, 53, 54, 2, 5, 55, 41, 52, 52, 52, 55,
              1, 21, 27, 3, 3, 17, 20, 6, 53, 5, 54}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJxFk31Q0wUYx4cXg8sQjBNWvA04BVQ4ZlkDhw8ThInI7ZC31OKlE5ea/cjO
Jpc67JaIBGQoO0pe3LCtFCYehCI8Y2ywF+R9OnHKmwwEbo18aU6D1l2jP56/
npfv8/089/jnfJG834FEIp2yBYcU41zo+QeYG9tj80KMyK7qeRTn1AAzJnNx
aXYP6AMlot5TjSCui3Tj0IaAXhWW7prVC+xP2w/+9lyDVFXRa/G4FCzai8ZY
oxI5cz+La0oKQHyP97RLdBMtEmbiJmsl8ta/kTrsPQv2+RSf8b4zNl2O2SdK
29gBrNrkJzckCpD93nR/yFZH8Iljey4qMdopJ4ffoETKR6GelgNNWPOjNcDX
04D6lNur3//KsLwf/fN0Xwb7f33uqlUrLr+SAzdJHUz4D6A52XJrqy3P3ejF
v1GuQXuf22Kk41/1XUipuFXBd9kHnD5V6WurHARPdBVC/hjO8MSVYRlNwG1O
a9Ue7kXisSkg19AGPDdj8geSS0gs7ppy6aqHLGLEMdb/IbBiBoM2V3Qvc6Se
PDw3cW4C9QPHt9PWDQErTxhH3tmNLYsSbqJCCOYITFvY2oXhunjuwvpBLBvt
/tO17zqI48p3bfmuG4OtBwTu+hYcC53fsVEzis7vPs3NN9YDQf518u5qxBnH
YnVK0SxmFH/plF2pQXbktvve//L5z5/ZunagYM0szpzf71wQIgaxnFFWuNSF
Zsa4X0xGJZL03BOXg8ahRrhbzczvxLIf2nifvbgNWbvjlxJOSIAgUoktI5PY
r51fjJDIUTBtcu3PaYHwZ1e2+dh03LTl0eccRjD69EjUkgMT9MxrJF3tIPAS
EoL6Nt1DQZ6A995xBfRTz14JXKFAOu3BPLldCVQozfTO7QFVz1XT16hG8d6D
hW0vNWiJT4v59ptBJBUxApk2vmU/fewRXCJCs6+fKS9AB6qjcz4uzzqX/c3s
pTysoxlQ0JG69L38OrCODO+JzVQgNTN2XUqrFjjMuwsNK6UgfeQd7nFBicSD
sg1OdXeQrtJMnOTzQNAR0FDdykPCa8rDuvIxsl4OpzU7NWPLkdFjz8N6kf72
9kyRnwncDr0ZnsTuRFLbeV33lBTs9xO/gLWizUagVKXLh6tlyDL4BZ6d6gd2
X1TBzjEZcEOEoQM2DjL30RAvGy+elLrGsEENNZ9Mkl99+AtwKz3eKplWYrDW
5Jd0aRpk6qzTV1Ud2FKdZfa5IARqeiZNZ/sHuy795mz2taMNIPt73xyZpkMK
oyc/1F+Kdp/2Px075F4npCggI6kmsUl0B6Jrp94Z1p0BqYUyuCNCDv8ARhca
FA==
            "], "Children" -> CompressedData["
1:eJwdiWeYCAQAQN9n5Eh2Mgpnk1l2yBE629nb4WxOd8c568rOrOxV9t577y2i
7E1G9i77dfx47/ve9wJbhYe0jQdEBsQpJDQ6KCIiNKZO4rgI7hoV1i4sonCx
9u9+bBzx3nPI+CQgIQf9iAN+wH4Tsc8A9pqYJOgePyQpb93tG3eZjOSkICVd
6EoqdtqOHaZmu2nY5sek5RPSUZlvSU8GKrHVjGwxE5l57ae88jNeutksBFKC
kmQlGy8sznOz85+bzEFOcrHRfOQnNxvMw3r/NS+fs85nrrUABSnMFxRijU9d
7RNX+diVfskKi7DcoizzkcV46FIfuMRSfEVZvqY0i71vGe65yLsutBwLDKI8
d5xvBeZ527l+wxwrMttbzvIfZxpMFRrQkJtW5YYzrEZ1alCT69bnmtOtRW1C
+M16/God6vK307zqVK84xctOthGTbMZEL9mYJkywKeO96Dib04KWhHLBsZ63
Fa0Z4zl/sQ0/G0ZbzvqTZxxte0Z52g50pBOn7MxJR3rCER43nL8cbje+I4Jh
9iCaSH40iu786VCPOcSeDLY3fThqDH/YiyMOsi8DPewA+9HfWH7wd7/3f0CX
CNs=
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 4, 3, 3, 3, 3, 4, 3, 3, 3, 2, 3, 2,
              3, 3, 2, 3, 2, 2, 2, 4, 3, 4, 4, 3, 3, 4, 2, 2, 3, 2, 3, 4, 3, 
             2, 4, 2, 3, 4, 4, 2, 3, 2, 3, 2, 3, 3, 4, 3, 4, 4, 4, 3, 3, 3, 4,
              3, 2, 3, 3, 3, 2, 3, 2, 3, 3, 4, 4, 3, 2, 2, 3, 3, 4, 4, 4, 2, 
             3, 2, 4, 3, 4, 4, 3, 4, 4, 3, 3, 4, 4, 3, 2, 2, 2, 2, 3, 2, 2, 4,
              3, 3, 4, 3, 1, 3, 4, 2, 3, 3, 4, 3, 3, 3, 2, 3, 4, 3, 3, 2, 3, 
             3, 3, 2, 4, 4, 3, 4, 2}], "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{36, 34, 3, 3, 22, 38, 55, 2, 14, 5, 46, 52, 
             27, 3, 17, 4, 15, 55, 3, 53, 15, 54, 55, 2, 53, 19, 3, 53, 34, 
             54, 47, 53, 1, 3, 55, 3, 55, 53, 9, 1, 53, 2, 2, 5, 54, 3, 35, 
             13, 52, 38, 1, 34, 53, 3, 38, 53, 17, 54, 52, 54, 52, 1, 53, 5, 
             52, 55}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJwBHQLi/SFib1JlAQAAAEIAAADYqwmDPxDPP3AbnlJIqbk/SD5DRlDr4z/Q
A1Ce+mDgv6ilOhBoMdM/SKAtDwXIYz8wKVXm6VN/v0CqrPEo3Lq/+JJUbWlL
4D9owfh4HBfcv1CezN5GB68/MHbHzHXsxb/4Nv4SFSvDP5js23hzKea/SEMX
st5VxT+ApYCjMHTcPyDIivyo4bA/aAzZUe+F0L/g+J/7cinmv4AgLYuIgMK/
KNQG5tzJvz+4qAi6VbbdP3Cd0sDDzMy/0Lkz7Dna478AChLanCCtv+BWfq8Y
2bI/qFNyks00zz/Q2JlaVavIvxDmEqgHgKg/+OG5vFY+8T+4/ql4TMSjPwjS
ink1p64/mH8a71aM3z/IyTMzqn+7P1CtfZFEJMi/KETorGSxob8IFZJ6K67Q
v6iyzKGlBJq/CBrzZnrmrj+gDoc4Ab7FP6CNd2gIE76/CEgFf9NCwD8A4PoR
4Ge1v1jZfQixJOc/EGnFCXhN0b/YHk5TCDHVv1CezN5GB68/AL2S1cflsD+w
EOoAOhHIv2jrnKigjoE/2B3WdjJm0L8Q5hKoB4CoP5BXhBlOw5Y/aBDvXFSO
pL9o65yooI6BP6CjeovqFuA/aEHW8a8LsD+IBzyutg3lv/CMRaj018W/ONw6
jzSQ4L+IbbpXyWW8v9jABNFGm7i/0H5ZV7tu3D/Ih2IyQHnEP3CjQUGvvMa/
WOwaAL1oxb8CNhPW
            "], "Children" -> 
           RawArray["Integer16",{{2, -29}, {3, 4}, {5, 6}, {-1, 61}, {7, 
             8}, {-2, 57}, {9, 10}, {-3, 56}, {11, 12}, {39, 40}, {
             13, -30}, {-4, -31}, {14, -32}, {15, 16}, {17, -33}, {19, -34}, {
             18, -35}, {-5, -36}, {20, 21}, {-6, -37}, {22, 23}, {24, 25}, {
             37, 38}, {26, 27}, {-7, 30}, {28, -38}, {
             29, -39}, {-8, -40}, {-9, -41}, {31, 32}, {-10, 33}, {35, 36}, {
             34, -42}, {-11, -43}, {-12, -44}, {-13, -45}, {-14, -46}, {-15, \
-47}, {41, -48}, {42, 43}, {-16, -49}, {44, 45}, {52, -50}, {46, -51}, {
             51, -52}, {47, 48}, {-17, -53}, {49, -54}, {-18, 
             50}, {-19, -55}, {-20, -56}, {53, 54}, {-21, 
             55}, {-22, -57}, {-23, -58}, {-24, -59}, {58, -60}, {-25, 59}, {
             60, -61}, {-26, -62}, {62, 63}, {64, -63}, {-27, -64}, {
             65, -65}, {66, -66}, {-28, -67}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 4, 3, 2, 3, 3, 3, 2, 3, 2, 3, 3, 3,
              4, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 4, 3, 4, 2, 3, 3, 
             3, 3, 4, 3, 3, 4, 3, 4, 2, 4, 4, 2, 4, 2, 2, 2, 4, 3, 3, 3, 3, 3,
              4, 3, 3, 2, 2, 1, 4, 1, 4, 4, 3}], "RootIndex" -> 1, 
           "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{1, 4, 3, 48, 8, 17, 2, 5, 54, 16, 20, 52, 23,
              54, 4, 54, 55, 54, 34, 54, 3, 2, 55, 40, 39, 17, 4, 1, 45, 52, 
             3, 5, 54, 52, 12, 1, 4, 52, 55, 39, 2, 4, 52, 3, 53, 36, 53, 38, 
             54, 54, 54, 8, 33, 41, 1, 55, 3, 1, 55, 1, 54, 53, 2, 29, 5, 54, 
             3, 38, 54, 53, 27, 41, 53, 5, 53, 2, 1, 52, 31, 5, 53, 2, 45, 52,
              55, 34, 4, 55, 2, 17, 4, 52, 2, 13, 47, 55, 55, 2, 4, 21, 55, 4,
              4, 8, 53, 50, 3, 15, 3, 3, 40, 52, 16, 52, 52, 17, 55, 53, 52, 
             47, 4, 15, 30, 5}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJw9U39Q02UcnkZt3eXxxVKGEg3ZLTj7MTiQKdS7dqLLkL7ZMRAlAQOmrAa1
O7mGhNuZUxTix+WItZtN8TsRGhg1Sv0Mwf1ghJuMMUURWiwYh7c7jFtHQF/+
2P54//nc8z7P+z7P84ktEh8oXkehUKrIgzkd+3JzvweDPcKRInmEjCfO5EkS
vEC51ThqntYj7hnpJ6rtZoR/niu5GehBHNlAmFzqQgzfppzoyEfgb3n7jd/u
TQP+MF9skQEiruzChIkjKLC7dWetwgy0LQslX3k70WS61HvJ2gfxCedvHObJ
wPBuTsy5A/PIsMereSVmCOiD+YnPSnyAeTcS1BoCWa69FZbGmAP9r9kf4nMe
NIP1YvVEGyhaNEti+RAEdcpX9k9vMHUimrh4k1xwHVWyNc8er/F/0Dwnr7of
0qevXKVpqCZgnCJ6aLofQNmbEqeOHQP9+orFqOMTYHGxhEnFphDeEkloefhd
EIrX8z21fwJn481hepYZ3MzRS5Y7QxDUrWw/InckkTwcUf0aLvBS0d7TqB/w
4bgLOKnjP8rq9LQ1wbcfpexvetCHlNt0E7QdJO+citDUnULxTykjWYK/YKad
2lDX/RgYWTPji9YpoGwrJBZFXQhXD03sof6E/PmY+rrBiBSGUd8U6wnYd0c1
afl2qBlj8sJLbUARqmeLyRz94ant2v/sQNQxG56QOKKsQ7I8Oo/sgu2Lw6kD
wM9iajuW7oR4+WDO2ErmyG0sXD1L/RsY0c3ZX5L546MlzLTCAuTnnKYJ/v0H
0b9xRec5zVDw8d7VfSd1yLi5bAO38jYS3tJmZ561wmRye3of9Rco2PJ6TMSO
biBU1pULXidwPtt8aCTah+xjr95+/pwFJiMs8bVT/Qj/8aIo46oTscvLDh/C
rCDsyufVk/ig/5q7Ya1bX7ZCLsvV+hzbEerFTEUDnp7XD5oXxrw+hw0YCVhV
2kMPBPOnW4/VrPVYw6t4s+mkBTTKyOr50h5wx+kuD3/djQwrusrMAS0yEqIj
UsEg6L/zvJMsuQEal+pELanP5soNbPJ+EK8PZ30qX+4D7uBOWRI5p6hfXL7m
dIXyKaDiIwvND0J+KmhRs6Xr3kMYPXC/1N6BlLOxqbbke4jz/qrtC9LXYG/j
uydEmVdMob3hH5RFXfQ+Rdh4ka18wY2UOen17j9MaDL2513HG22AoQzVuKwF
3DmMEo/UGPqH4iCIX6tuQ4FjXYmXfb+H3q1Yqm7uPepE/wM2qQYO
            "], "Children" -> CompressedData["
1:eJwdiUOQEAAAAHeybdu2bXfZXXWZl/HLtm3btm3btrFdPXZndjZliy4BrUMB
3SOEKCCwd8ng4MC+tSKGRMXOPYLaBAXnzNf23x8QQqj/hCYMB9XShCUc4Tng
H/cbgYhEIjKl2GcU9hqdPf42KtHY7S93GYOYxCI2eclHHOLy053+cIfxiE8C
EvLdnCRiu9nITmK2mYSkJCM538zKV1OQitR8MSWf3Woa0vLJLaYjPZnJQgY2
+9FNZmSjH8zEezf4zvW+dZ1vXGsO1vja1b5ylS/NRW5W+sI8PHeF+SlAEZb7
zII8dZlPLERhlvrYJT6yKMVY7EOLU4JFlmShD1zgfedbhrLcsxwVqcRdy3PH
Ctx2nresTF/6UYWqVKM6rQiiBjVpxFwDqMVN63DDOdZmtted5TXrUo+ZXrU+
DWjIFWd42ek2ZpqXbEJTmtGcqV60JRcMpAVTPO9kzznJ1ky0G8G0oS3taM9Z
J3jG8XZgnB3pxGk705WxnrILJx3jCUfbnVEed6Q9GGFPhtuL3hyzD0cd5hGH
2p8hDmCwhx3kIQf6F06NAt4=
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 2, 3, 4, 3, 4, 3, 2, 3, 4, 3, 3,
              4, 3, 3, 3, 3, 3, 3, 4, 2, 3, 4, 3, 2, 2, 3, 4, 4, 3, 3, 3, 4, 
             4, 3, 2, 3, 2, 4, 2, 3, 3, 2, 3, 3, 2, 3, 3, 2, 4, 4, 3, 4, 3, 4,
              4, 3, 2, 3, 4, 4, 3, 3, 3, 3, 3, 3, 2, 4, 3, 3, 4, 3, 2, 4, 4, 
             4, 3, 3, 2, 4, 4, 3, 3, 2, 3, 3, 4, 3, 3, 3, 4, 4, 4, 4, 2, 4, 3,
              4, 3, 3, 3, 4, 2, 3, 2, 3, 4, 3, 1, 3, 4, 2, 2, 2, 2, 4, 4, 2, 
             3, 3, 3, 2, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{55, 12, 4, 4, 52, 15, 17, 55, 36, 52, 3, 31, 
             3, 4, 15, 54, 21, 53, 5, 2, 17, 1, 55, 1, 52, 5, 55, 53, 5, 53, 
             55, 52, 53, 54, 4, 2, 31, 2, 3, 4, 4, 4, 2, 55, 48, 53, 15, 53, 
             53, 17, 27, 52, 4, 52, 52, 3, 48, 55, 15, 1, 4, 52, 47, 52, 2, 1,
              1, 54, 36, 5, 53, 53, 2, 2, 54, 4, 53, 1, 4, 53, 54, 52, 1, 53, 
             4, 52, 53, 50, 36, 54, 53, 17, 1, 4, 3, 19, 4, 5, 52, 38, 5, 8, 
             1, 3, 46, 52, 1, 5, 27, 5, 31, 4, 14, 47, 53, 4, 53}], 
           "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9Un1QkwUYX3DKojDSlK0DGWq5XWqDAwU8fDgpmJ0aUzhWcceS0GkfGIgh
QYCra2DO9+jQVYCLj/lOGJuSCRY8TPYFw+3VWLxS6BhKI1EXZ4MTit7+wD+e
f5577vf5RO3L35P3FIvFKmJGMurO/s3Ug6HKqqbCL0lQk7v3jZ/wIOvquoKk
t/uQfnUq56MHFix2tX/4aP4KeHXOZfmnLCArK5B9o6OQEMft+vqmEdIf1l6m
JSYkw8LDCwUTqBJ79FP556H3ku71FG09xm9WxvS940JDyq5D/uc1QEmFxvuE
B2S+iCT7RSNQ941kWasVpdyS+h+CfkTRtvpljphhJD8NaGCHGoHn8J4ZLWpH
oSDVWZBlRTadU2T+ZwRlmjjT2KE2kHKOr489ZgLDHX/NwGkHerfcLM9dYUaF
OiQ7htmLklt6hm6NgVvZsjPphV7kK16jJFwLqteIg3szLqFo68GGWZ0TqJD5
9+4y/t1Lq1ZfY/gXfVCr1k+XkBoUPsq6F8n44VWWFyX6R5Fqjm20Mr5sM6f7
bQmjmGze6EgcGUd3ayF/SQCFou/3THZoTUBEGLojyqzorcljVwpIUBymBc8U
9aBQvHCbS9iQyv/DBDMakO5NW3ijTAvkkQPqtDgzcq7zG+8s/AK+7Lnx7c1m
nC34TEnK+1DN9b87EOsEeq222VF+Edh7cxLlyQPIs1XPk2MGIN7MnAvoMYN7
8pW/tjA9elMv5G7NtGLnv9rinaYmcNOPjYTegqpt7X9q566CULthcClzX3y2
TX9M8i0SP/s/sbfMw2K/qo7AoOo2K8bLd9R4pZ1IRKd0dWXVAXuDY0I5MYS9
2wMtTQwOxcq+0bbJDYbuqsgEhpfHcaUM6K+gdFNjfDCDLzlyLqQq7CEQ8se+
M+YOkOoOqMLtiBV5/eTyr6xoKOGuiur+FaX7zfa19RZMr5X+NDV0AyX2aA9/
XT96JWnTIqIP0xsGb6UG6YFufVoOoU7wjVDaszvuoi33O1q1//KTvwndrJ0s
lZeiaCQ4nOexQ+/U3112Jjf3+ytamjgmoLPNzdWMHvcHpuMvhv2Oit1D/LcK
+1F2r45UKyuhM+Ul8WyAF/iRR9krbRqQeU+e43xeipzAo+eXRLue6Cge31ia
kGrFCoi9ZrhOI0dwiv4fj7htnX7OeQHolw/ONkQNY2edIvPZQTtIMmrj4pl8
fKsjH3y8xgWLvRiWz5ysHbPi4YwogYfpvSL5i5CVwzb8D2SS/Mo=
            "], "Children" -> CompressedData["
1:eJwdiWN3EAAAAO8tbdnWsm0vL7dlb7WWV2t7vf5Ctm3btm3btutafbh7794F
R8aE9Q4AhgYmKCxiWEhsbMTw8KCECB0UFxUdFVu2Up9/Pz6BgP8kIjFJ6EBH
kpKMMMIJJIjiHDE5KSjMYVNySE1DKg76x9T89oBpSUd6MvDLgmQkEz8twA8z
k4X9fnefWcnGN7OTh73mICe5yM1X9/jF3X52l3nZaTD5+OQOP5qfD273vdt8
ZyHeutUiFOWNWyzGZl+7yRKU5JWlKMNGS7PBl663LOUoTwXq04CKrLMSlXnh
WquwxhDqUpVqVGe1tVhlDVb63Jo8c4VPrc0T6/DY5T6yHg9d5gOX2pBGtGKJ
jQnlvottwiLv2YymLPSuC7xjc27bgpbM95bzvGlrbjjXNrTluu1pxxyvOdur
zvKKM+3EDLvSjct25pJduOh0u9ODC04zgkhiGExPejGQQZw3inNOtTdTjGay
fZjkWfvSj4n2ZwBnnOBpx3vKcZ50rEMY4wlHG8sojzuUOEZ6zHiOOsK/bLX0
1g==
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 3, 3, 4, 4, 4, 3, 4, 4, 2, 3, 2, 3,
              3, 3, 2, 3, 3, 4, 3, 4, 3, 3, 3, 3, 2, 2, 3, 4, 3, 4, 3, 3, 4, 
             4, 3, 3, 4, 3, 4, 3, 4, 4, 3, 4, 3, 2, 3, 4, 3, 3, 2, 3, 2, 3, 3,
              3, 3, 4, 3, 3, 2, 3, 3, 2, 4, 3, 2, 2, 3, 4, 3, 4, 2, 4, 2, 2, 
             4, 4, 3, 3, 4, 4, 4, 3, 3, 2, 3, 3, 4, 3, 3, 4, 4, 2, 3, 3, 2, 3,
              3, 3, 3, 3, 4, 4, 2, 3, 4, 2, 4, 3, 3, 4, 3, 3, 4, 3, 2}], 
           "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{21, 23, 4, 53, 52, 54, 52, 5, 2, 54, 2, 15, 
             1, 3, 2, 19, 1, 55, 55, 4, 53, 15, 55, 52, 52, 52, 4, 19, 53, 53,
              52, 2, 5, 5, 55, 17, 53, 55, 54, 17, 52, 4, 53, 2, 2, 2, 55, 54,
              20, 1, 54, 53, 14, 53, 4, 3, 55, 5, 52, 1, 2, 19, 1, 52, 2, 4, 
             3, 2, 53, 5, 3, 53, 5, 53, 53, 15, 53, 52, 6, 53, 20, 52, 1, 23, 
             3, 31, 52, 38, 2}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJw9kn8s1HEYxw+1jh19a1rXpTrt4nI6ZyGhPlhmzeaOOISWhq5ZsWSd/OiO
lUv5seqPm+QssUPcpQkpzx3OfRF9T86QNSk5yWLINT/Wtz/yx7P3H8+e7fV+
vx/HS6nhSRYUCiWGHMq7h0b9tBphxfeq0guUCEuq2n3yfBfgQVzxWede8NZu
pl+t1IM4y40Q3p+F0hnLc5GsGdTKfx/H3DsBygkDb+lyM4ga65+MzfeBCWvD
SpQ1INKVa0Ia+xGVscgPEOgAc7E9PFTTC/6MUAaHrYFJYa6KPtaEcAddYHb2
EMhermxat+EwSegzDPsM0BoRzEgPzAOMzu5vWGkHJl64rvyiRkSl1KuURgA9
HuLldjowSQfNI649wJvzXlqwJLU78VgteWeSKMu40c0Ic6ZN40QbpKUsthD7
e4HOUalNJTgIfk/6F30fBubtgvUDG+1o9KargkGqoDGXH8oygDLLsoKKaZFo
NSoocXYEye7GlTlsdACPY+UV2ToH1NSkPfnCFygtThR1okQHC1zFITzWCNQg
v9hcIw7MfM1O1VonogfGcqtJxcxu8lz3auRfIx6osO8HuRP/l0r6DZTVPpjI
/SOSuGyLHHb4gSTjIWqrM/OIXhHVOazQgNnWfkxr6kG8xzEtfX5doElwbfYl
+zEnugVTa5+CLLGQheVpgaBZn/LJ7Ebi5ebrC8Fa4D2T8uw6dEh2NCWgmPT5
P4/SHHWDILoMZMI/WqJbDzIbpqSO5DOxlx543phA9I7PlEGPD8g787jnv3wE
b5JvmV2aQOKUPXSEzEeZcUegJ/diCWfAka8Ds3WX9UHyD3D51wTmNR3ytogK
CtnRsdUXJg6bdiwfR/S3leYcm1dbHAT7wq5w2hT6758tmrVYky6jUkXKIw+S
jxpxevvq63ZkToouCy1+DvKwKdXP1DqkuVIbbcjTg8CYzPJNuIhGPxVx6kn+
vwghcTE=
            "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9FFEUIkRXKHoXM6JOVZHxl9GPuwk/cfXXn/EOyGpRR9t4j
VLK3UvaueD5+eO/u3UvauC24KQIojgorWLg9EAoV7siLDkf21pKizUWh1PQt
/35BmIj/dKErkaxlHd3ojubxx7tGEc1ve9DpGnoSQyy9SOWOvYmjwzH0oS/D
uG0/4hlKne32J5FbDmAgCdz0l4MZxA1/et0fXnMIV/3uFb952a8OZwRJfPGS
I7noKC742dEkc94UzvnJs350LOMYzwQm8sEzvve0kzjlZKYwlZO+84RtHjeN
Y05jOjNIp9VcZnLUt+Ywi9nModa5zKPFGjOYz1KO2OwCFnHYN2by2gALOWQW
B31ltYtZwkurfOEBl7Hf52bzzOU8tdInruCxFa5kFY8sdzVlPnSfQfb6wD3m
s9v77rLJ9dyzgEY30GCp9e70Lz1/vPI=
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 2, 3, 2, 3, 4, 3, 3, 2, 2, 2, 3,
              4, 3, 4, 2, 2, 3, 4, 2, 4, 3, 3, 3, 3, 4, 3, 3, 4, 4, 3, 3, 3, 
             4, 3, 3, 3, 2, 3, 3, 4, 4, 3, 4, 3, 4, 2, 3, 3, 4, 2, 3, 2, 4, 4,
              3, 2, 2, 4, 3, 3, 3, 4, 3, 4, 3, 3, 2, 3, 4, 4, 3, 4, 2, 2, 4, 
             2, 3, 2, 2, 4, 4, 3, 3, 3, 3, 3, 3, 1}], "RootIndex" -> 1, 
           "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{4, 53, 39, 1, 2, 5, 33, 17, 52, 52, 2, 10, 
             23, 52, 53, 55, 3, 53, 19, 5, 1, 1, 1, 4, 7, 15, 38, 53, 54, 19, 
             6, 55, 17, 53, 13, 55, 13, 2, 3, 17, 19, 54, 31, 3, 4, 38, 5, 54,
              21, 54, 2, 15, 6, 8, 55, 53, 54, 31, 54, 54, 54, 52, 48, 10, 53,
              2, 1, 52, 54, 19, 2, 54, 55, 5, 6, 55}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGDwAeINp/KSjkdf3V+wXW1PHfvx/RMCtk/elrvC3iDx0oNp
9y7YTyg0eXLB6Pp+CwXBYNPKI/YB887cc2Nfb38i56Sy5a8l9gnta38/Yz26
/4bHlTOT7h/b76GuqZK4Ytn+C5N7v3Z07rTnkPqcVvVsnf2FB1/n3QDKH/hj
3Odx7dD+jJdv3s242mPfwPc2wf/1Y/sLa6KaP8e8sH/RsGKWXsRW+4ytTYWW
QPsmHNR2122p2V9QepTngdr9/RI3IxjMI2btX2Fx7qVt1OH9N1ZzNtsLnLc/
MSfhbJ/2IfuM13NWLOhrtG/YpJg+o2+TfUUr39qzYg/tH2QLL10scQRu/odp
HY5n4h/YZ1yPTl6pesJeoF56erLUif03lFcuOVe/yd7hzSXbfazn9nssDHq5
eSVQn5scw9rfh+w/GO+bdsbkvP2F/OdH7L8vg5uXcOvdlohDIg4cTQ9ndW/Y
b78joyb3OFCdgCRbT7f4e3uN6S8CfsgF2v8QVGE0+rvb/kBWbe6C/hdw+yJm
+fwqrny1/4WuSkL/syv7FU50/VnxcAPCvY1fRTOe7rU/oSuf05F0eP+KF/9c
L1ybtn/BWwWzXXVAfqXHZmvHg/YrnF8ub4t8sZ8juqrRKPv5fgG5D35JEi/2
B9T2TMldgfCfxlLFSXOvH7R3eLc59dXuE/sfXF1nZ3nr8X4Blqs6H7+csZ/B
mjppptTJ/QfU37zNmfxyP8wdJ6ZNK1gBDAeDLc86bZa92J/A9tg6Z9GR/QHe
m7xexly2fxBWt17i5ib7HfX/dlrynNgPAETySy0=
            "], "Children" -> CompressedData["
1:eJwdkFlTjgEARs9kq2gRKYl82SWVJUTpK1roKr+gZsKVZj5mTL/L0kIRihKl
spOIKErWSHW8XJxn5sxzd0K19dUno4Cz0cFU15wPRyI1DSdiAqk8c67uVF0k
L//0v78qIOo/C1jIIpJZxWJeuYRodMgYXrqUZcTywnmfG8czl/PUOeNJIJFZ
n/jHxybxyBU8dCWDzjhgCqn8tpzVpPHLnayh3y08MJ21rCODzfS5nl43ct8Q
98ykx2k38NO7bqLbH3b53TtuZRvbyeKbt91Bp1/N5osdTnnLz+aQSx672E0x
N510D3vJZ8Ib7qPdAq67nwN88pofbfMgrY57iEKKGPOqHzzMe68YpsUSSjnC
UUYt453NvrXJERutoJJjXPaNl3zt8aDXRYe94F9EsKL/
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 4, 3, 4, 3, 3, 2, 4, 3, 4, 3, 3, 3,
              1, 3, 3, 3, 2, 3, 3, 3, 4, 3, 4, 3, 2, 3, 4, 3, 3, 3, 4, 3, 4, 
             4, 4, 3, 4, 2, 2, 4, 3, 4, 2, 4, 4, 2, 4, 3, 4, 3, 3, 3, 4, 2, 3,
              3, 3, 3, 4, 3, 3, 2, 2, 2, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 3, 3}],
            "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{13, 7, 39, 55, 54, 2, 3, 30, 55, 52, 1, 17, 
             55, 8, 55, 53, 2, 3, 53, 55, 1, 53, 55, 2, 31, 48, 27, 53, 1, 15,
              5, 1, 17, 3, 6, 2, 52, 1, 1}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAABIoVLps6nEP5i0qGtYbbo/kFC3k7ZtqD9g
zyufgBmuvxAWDFEpFvI/cABnd8wy17+AV34AT+vjP9gjqaTOf7I/IAcP6VBp
j7/wftzns8fGv1iDOczVHOo/WJztluAVyT+IS7VxCpDJvygfdggVyKY/8AJl
qQbHw79wZd7OQJTLvzA4oQYj3Lq/2IkCQnapnb/ArotvfVbcP4CwIBXcK8k/
gNHi89Qc6j9o4L6jMnveP8CKExFG5FC/ENVmJT+R3b8gG0LHDmTBP9gjqaTO
f7I/OLnqYa1zrz/Qy/hV47G8v6Cc/V4CIsS/eNWubfT8uj+Q6nVjO3nEP7gM
BzaCfNK/aEHW8a8LsD+IiY65yjTPP+BrE6WjGMQ/aGJ4RtNCwD9wFt04ismy
PyB1bDJX+sE/AL6NgDtQxb/4VKCn
            "], "Children" -> 
           RawArray["Integer16",{{2, -18}, {3, 4}, {5, 6}, {-1, -19}, {7, 
             8}, {-2, 39}, {9, 10}, {34, -20}, {11, 12}, {33, -21}, {-3, 
             13}, {16, 17}, {-4, 14}, {15, -22}, {-5, -23}, {-6, 
             18}, {-7, -24}, {19, 20}, {21, 22}, {24, 25}, {-8, 
             23}, {-9, -25}, {-10, -26}, {-11, 26}, {29, -27}, {27, -28}, {
             28, -29}, {-12, -30}, {30, -31}, {31, -32}, {
             32, -33}, {-13, -34}, {-14, -35}, {35, -36}, {36, -37}, {
             37, -38}, {-15, 38}, {-16, -39}, {-17, -40}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 4, 3, 3, 2, 4, 3, 3, 2, 4, 4, 3, 3,
              3, 2, 3, 3, 2, 3, 2, 2, 2, 3, 4, 3, 3, 2, 3, 3, 3, 3, 4, 3, 4, 
             3, 4, 3, 3, 3, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{55, 31, 15, 36, 3, 5, 14, 3, 5, 6, 30, 3, 54,
              53, 23, 52, 55, 55, 54, 54, 53, 5, 3, 54, 2, 29, 33, 52, 52, 55,
              41, 1, 54, 3, 47, 2, 3, 5, 5, 55, 54, 55, 4, 5, 52, 3, 4, 5, 55,
              54, 1, 17, 1, 1, 54, 55, 53, 52, 55, 4, 52, 1, 53, 2, 4, 30, 54,
              53, 1, 53, 52, 4, 2, 52, 52, 4, 38, 52, 3, 55, 55, 15, 2, 3, 53,
              55, 31, 35, 5, 2, 48, 4, 54, 2, 9, 1, 3, 55, 1, 2, 45, 52, 46, 
             53, 52, 54, 53, 45, 45, 3, 5, 54, 55, 54, 38, 52, 55, 38, 20, 53,
              53, 4, 21, 2, 47, 54, 50, 2, 31, 2, 30, 55, 31, 52, 53, 3, 3, 
             38, 54, 45, 15, 52}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJxNUn9Q03UYniG4A60BKjMBB4YOixygNij8rLzDcQEOK1k7BOSXawiMwQUZ
nWwVKiSgZEMobidjfQGBpZMbIb5LBgwmuJv8WJwpMNgWOBhiSPLj+tYdu/74
3Hv3eX887/M8r09S1vHUDQQCoRR/Y1rO6EzB10AUjVeVyAGpbN1zqSl9qFKB
pbMzfkUEmeR4rr8JGKcGEmr3jiOb967ZbN8hRK84HEgxKIEYenlKgv9bZm3f
lZ26jwy766UD524iYrBAlIP3sUUXY5uu9oGEX/B5wBECg/j6QtpZUzNayrYK
ezqFiPoM/vhYPwDKIteo9xO6oNxl0coWjAA1qdi9iKZBmDQxO8bpJvA7lIYK
hhk0H6g3CvC5TMHWO3NhOmBoDfGNy/cQq+b+4/BNLfZI9nxiq5X3APfAj1GE
PzVgE2rmCpx0wGrY55mSXo/Y33a2D3pOIyqJm/wcWRHz8JFw1owRKdfq8yPV
tQi7XPZuqWkQysXff/of3iGJ0MvjESydfXvVG4+M6EQ9pbUfDEmE0HR9G2IO
PltQhPcDdvSOaapkAhhz/i934nU2TFtV9U0P0Dy2erVvHwHCfOTTg7mPEGs+
hLkDz4+19ok+ND0AQ9yr5d1uU0CkconD+F66LLMavZAhQmwmUb06CqTg5dpP
qpVAvl5tzUuehqUoXtMhYT/IH3vStl/FdStbIJ0Ud8GYVMtZiNRCfm8YHOB0
QuErKaX0Td1AX5xRdOFz+E4NxmFXAHlcayJHfxsoTaJ+I77vum82i4D8ou13
RFtxDpFa28DgdmKLsEAPZFnmRIJPN+jW7m7ZeUYNmJhxbvLfvvM6xyxMBpKX
l/5WDKiBzpuouRXcCRZJyFdBOD5hb9/ccvgxJPF1VHuMd4PFnO1MDByCsaIh
+TZ1MWAOw2/5mfrAciWVKPTHEPOL8+37qCoo9OKIL3BkYLOa2bt1o8hiSef4
7tFBZcxEy9OsBrvPF4p1LTU+I8CcpzQ3bR6285A/WWnBBoeBG1EY857IjOQO
ETdKcD/t92fl54pwXuyfg8QZ1/WItvm3fL9eXM9sXvVRVhfwb9X3PD99217P
fJPlKY9shHVc7i7XK+4HNWCQ+1Tm6TWQnxPqnnliGoiCbUHJxxT2vvVIDneM
6Jf1AnXPSdkvb5gRt/xLv4E8IyyJGaPRETogNUmdBx5MAkafCZhVFCLDxgJe
WlEvqPZT0EScDjR1Pyy6qj5DWF0oiRv4EMmd69ccE3qB7hLo1thhRRIsOun/
PtLTMqKpuI7r9zwWFuiv7jDa9yev3nCZx/mt65n4WtaGS7g+Ku+VgGsPW5G8
7gyFFevCoDXf3c+UdqLKa7yfZnh/IaqxooKkVSFmfO5p3b0eUErqJt8pldp9
xlL5OzLiV+y8KZriFWxcjqgf5ZAd8pXwD3heYQE=
            "], "Children" -> CompressedData["
1:eJwdiXl4DwQAQN83wpRIVO67HKlEy82cDYUtV0omOyjkt9nlmo0Nmyn3mbvI
TacrVJSo3EKlcisq9/mMP977vve9Cr0GhEcHAXEFchUemRgaCEQmRwTnRlj/
+KiYqECtkNh7PyeXoPvkIS8PkMIG87FejSc/BQhmnW/zDgV5kIf40hi+sBAP
U5giFOdzH+Ezi/GpdyzKbR/llp9407U+xuM8QQlu+DLXXWNJSlGa1V5zlWUo
y1XLUZ4KXHGlFVnhkyy3Esu8bGUuWYWLLvUpqlKNj63B0/xvdf5zif9akxep
yzM8ywUX+xwfed5a/OPz/G1t6vChL7DIc4Zw1oWesR6nrc8pF9iAhjSiMS1p
RRPme9JQmjLPE861Gc1pwRyP+4F/OdvWvMSftiOMWf5hW9ow02PO8Hen+5vT
/NVXaE8HjtqRTkw1nClG8CpHnOxhJ9mZLnSlG78YzWtM9A16cMjuvM4ED/q+
b/KePYnkgOPdby/eIsd9jnOvvdljFLvN9mezjGWsfRjjT/blR0fbj0zjyLA/
oxzAuwxkpLtMd6cBfjDNHY7wewfxnQkkkmoSw91uMtsc5mCGMJShDieVbx3G
Nw5xBIMdRQZppPi16Ywk2a0mmUmiY0hwNIPcYrybHctXZpFNnOMIuMkcNjrQ
u39BJsw=
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{4, 3, 3, 3, 2, 4, 3, 4, 4, 3, 2, 3, 2,
              3, 2, 2, 2, 3, 4, 2, 4, 3, 3, 4, 4, 2, 2, 3, 3, 4, 2, 4, 4, 2, 
             2, 3, 2, 3, 3, 2, 2, 3, 2, 2, 3, 4, 3, 3, 3, 4, 3, 3, 3, 3, 2, 2,
              2, 3, 4, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 2, 4, 4, 2, 3, 3, 3, 3, 
             2, 3, 4, 3, 4, 3, 2, 3, 3, 3, 4, 4, 2, 3, 3, 4, 3, 4, 2, 3, 2, 3,
              2, 3, 4, 3, 2, 4, 4, 4, 4, 3, 4, 4, 2, 3, 1, 3, 3, 1, 3, 3, 4, 
             3, 3, 3, 3, 3, 4, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 4, 4, 3, 2, 2, 3,
              4}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{54, 5, 4, 55, 53, 53, 53, 55, 55, 52, 16, 5, 
             52, 55, 46, 48, 5, 52, 2, 53, 35, 5, 52, 2, 1, 4, 47, 5, 55, 52, 
             4, 5, 2, 2, 53, 4, 55, 55, 3, 1, 2, 55, 2, 54, 52, 52, 2, 1, 52, 
             27, 54, 5, 53, 55, 21, 54, 4, 30, 19, 41, 4, 3, 53, 47, 2, 2, 55,
              2, 55, 3, 54, 31, 1, 3, 46, 1, 3, 53, 52, 53, 38, 20, 53, 2, 52,
              14, 29, 42, 52, 2, 53, 1, 53, 27, 9, 2, 54, 4, 54, 55, 54, 4, 
             54, 47, 52, 55, 3, 53, 54, 55, 1, 5, 52, 4, 4, 53, 50, 17, 17, 
             55, 55, 15, 1, 3, 2, 15, 54, 4, 46, 55, 54, 55, 52, 53, 52, 1, 4,
              53, 41, 53, 52, 52, 2, 52, 5}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJw9lFlQ01cUxkPG1sBQjWNVSlkFG1BpEWgbSvEisoSlJYh2QitOYEqbGUsT
h9oiuwGGKKIBLVBkJ8SACIFC2T1JyAaypMhWQAmyGFZBEVAi9M8DPNync849
93y/71zzEOaZUB0cDpeGHRVZXpGapAbbjoXHxodGQJliG2//fSuwEjzi3rOU
AyW506jpagMiZ+rsC6qRg8Djw7fzD9qAes9KL2tBCYQjhEKfC91A6230dCJh
8VSSKCGgDglOuipX8RokCPEgLrGloMlU2aRG5wA1r+Opx+5KNGhRyuuKq0aE
lL/vfV1WhbifNoyT1XLgniLoe04MgPCDaTth292d/KzP7aP06yRAkcr15jKU
UHDfpCwuqh/Z9vqzdj+UIatcmaHdbyOofqM0wldajOKz474tJo0hnFua+0BX
O5it/Mgg5SlgbWPpctBIC4qgOEjsr0iR7aqr6PpUL2iCtNlF4aOQJe1oLcQp
wIBflXbdlQ2LDN6cKKoTVBa/joaPdcOaTqPwLV0NqpTdpuJ3Q0Dz1ehHC/hA
WdO9c8dYBYzZlFzHoXHgZEQPnz6oAXrcKp86JgezGQ5T7qIATj5X7NJTC5wj
9GfcZi5QjKP1BS1ioAd4bnrHlCKRaY9xU98EFMQU/ZRjPgCahIKVoZFUoBYL
SzqzVYBrSe9TTAqRWUvsceq7ERBtFMY6YLwYi8bOj6rFSH1xf0mxgRRlic9t
pkqqkGBmiei0xdNBm+h2kwcUXbmd45wMtnWK8Ev/o0K/H+j1Z7tf/lwLBR3r
kmNRT5GBr9pnay7u2OXXdYYqIOfy9rhj9WsuV9jzZf0I9+S2D8dPiDTTj8Rx
0T1QgO8d98bi27zqL9zQbnFx2YiMpW7Vbe43VKRLIf68N+CTFEAOO1vlFypF
ZGX7s9ikeCQo+YrIOPEYcUu56Xffn0UGu8iaTrsBMCv6iGuGl8GiienCpcN9
aPt+6lAQU8kGJDygVYhI/0BEQNDyMvZ+W62eI2++AeLPdOvKMT7cNrZh5Mww
IjfMBD8Ir0TEm9eKw5MFaO0TVvsElr94bNPz4gTW9xzzi/u9mA7j+esxpv8i
UUiN5SlKJ3CsM5oPs9TA4v21IPmhD2h4kt4cBe+yrZ+KfzRM4/wEEZgio8Tz
r5Cq08LrkvUU4FxJt+urREB8zjX/cgXbE4LOiUndbrAKbPgz8MYoUt8iZFZZ
PkcFrJqF8mEZMKqHHYIxX1JtCV72mI9p5ey9kboPd/QkMEMPJHxXjmhvvHr9
kpsQrfbNi4YIFdA49Gv++1SgSQ8lXLUWIIpJzrQ7LRusVmllEoduRHb+ZeR0
vhhF9FWELWsbEaWmsp396iWi838PTDn0YkdPQh7ey/JjGagS9QNlxweBsGfY
bZarBKKNl1OaqBmEBlpmPrsVXPgkOqurGhg6c0e9sT6M13aOn2H+oqNdg6ST
yh3fZUkm/3M2awRRYf83wuApRDRU1hcXjSHWwSL/W9i+KddtNve2VKDBylQP
I+zf+R/3wnE4
            "], "Children" -> CompressedData["
1:eJwdkmeYDwQAh9/nrCNKVimE7JEupSGydWQdMrLudEfijv+dO+e2Pe64yw5l
b9kyUkYoskdGw4i0l1HW29WH9/c87/P7+laIiAmLCgJig3MnLDyhcSAQntix
YK6ERsdF9osMhNTr/9+fk0vQ/+QhL/l4nhfIz04L8QAFCEY/sSAfe98dFqYI
9/zIB3mIpwmhKA9z1+0Wozi12WYJtnrHLZakFI/wKLf90NI8Rk02+zibLENZ
/nGj5XiCv91geSpwyxrctCJPUokbrrcy66zKWquwxut+4F9W40+r84er/d1V
/mYtfnWlT7HCOiz3F5f5DEv92SXWZbHPssiffI56LPRHF/giLzGYIdTnZX4w
mgY0ZCDzfYVGvM08G9OEa75vU5rRgpZ873s2Z65XneOrhNKDnrRitm1pR2ve
9TVmecU2fOdML9ueS3akA2FcdIYXnG4nptmZ1/nWqXZhil15x27k2J1s32Cy
3zjJr+1FP7LsTaZ9mGg4EfRlgl8ZyZuM97zjPGcUZx1rf97ijAP40jGedrSn
HOVJB3HCkR43hmOO8KgBYonjiBkOJZ5U0kgg3WRSGEaah03kkMNJItUvTPGg
yR4wyXSGO45EMxjmCBIcSbyfO4rRjOEzx7Lfoe4zzr2O51MnMJFYMwm4xywm
McTJDDY7t6DdxrjLaP8FBgYsyQ==
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 4, 3, 4, 3, 2, 3, 3, 3, 3, 3, 2,
              4, 3, 3, 3, 3, 4, 3, 3, 2, 2, 3, 3, 4, 4, 3, 4, 2, 2, 2, 4, 3, 
             2, 4, 2, 1, 3, 3, 4, 3, 3, 3, 2, 3, 4, 4, 4, 3, 4, 2, 3, 4, 2, 3,
              3, 2, 4, 3, 3, 2, 2, 3, 2, 2, 3, 3, 3, 3, 3, 4, 4, 2, 3, 3, 4, 
             3, 3, 2, 2, 3, 3, 4, 4, 3, 2, 3, 2, 3, 2, 3, 3, 4, 4, 4, 3, 4, 3,
              2, 2, 4, 4, 2, 4, 3, 4, 3, 4, 3, 3, 3, 4, 3, 3, 4, 3, 2, 4, 3, 
             1, 3, 2, 2, 4, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3,
              2, 4, 3, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{55, 22, 23, 4, 3, 15, 31, 5, 53, 54, 6, 33, 
             7, 53, 2, 29, 19, 54, 19, 5, 4, 38, 4, 54, 55, 54, 54, 54, 5, 21,
              8, 53, 15, 53, 3, 55, 39, 4, 17, 4, 5, 52, 54, 3, 53, 38, 1, 54,
              4, 54, 31, 10, 2, 6, 53, 55, 2, 13, 53, 53, 5, 48, 54, 1, 5, 53,
              54, 53, 52, 41, 47, 53, 53, 12, 5, 54, 54, 54, 1, 55, 48, 54, 
             31, 55, 55, 54, 17, 55, 8, 1, 36, 55, 53, 2, 3, 53, 1, 21, 3, 3, 
             17, 2, 2, 1, 3, 55}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJw9kn1QywEYx385abtKc+6EOY1yhsMiIS+PJjPvwznjRKu4qNR5nXBNHTcd
Z5LMIrmiZbHR22TzrMyWTBut2Sx6IZbXqWvmpZ35Y/54/nr++Xw/3++ExIwN
O/0IgtjjPVpzddJu+X2U3oihpES2Amls/66s93dAGG3TC0O/AV3qadg35T2K
zqsFu10qEK/vln/OuAVibXPrjyEOUBiNfWESPQoH8zbHxHVi5p0rwK9pAE6x
4Q0rQA7iamkqN70eTDmWNcQvHfI3X1pV+bvx/98hkEpmcGsg0/6Ckh/RBY6v
zjPneAYQXZ5eOPeIFkgROU+iD7QDI0AGIWY2iAdaqf+4GAa/gih/OwgKLIN7
H9UjJ7fj6LpR7eCIm1M89mcvcknXGo6GfUTu4qdD7WUdYA2vKGvJvgdWpNu7
nVJQvpaVzyTdRlpT3h9plwJooR6VIl+PHO01VnOUEay2PXUdZB2KOHUXatOl
oCnRMWZufYSmjA9a+HETmoJYaYUeMxAHA1vmezkzS2Nj5SodujcmyQqqjOj+
NCtNNeoliubWtAXMfoy0RPmCxpPJwCUygxsHX6GTIalgyF4h+8u6MAMzBxUD
fsuCRr9Fn1/ThbMDwtP3gb7DdbHolwF9npTxTUP8Ch+jKHlDiMJfi6Tlb8xl
Xp++fITt8KJjD6YDhTzmYvSZKliS3VF50mBCQp3fpu9RgDLf9PAW2QXuQ+FC
y7iP4OAu39QYUIuaRTHB7EtqFPDu9uSyv0CK2dk+NEuLDGF4qiFaj854SnGl
UgNKTwV/tbYUEorSmdSYOuSXl/J1TD36drNE4OZRQ9vRdP1sZJ/6LTombVow
hdMFNN7TVWuTvwN9e3Zcr60aHKkTQnIGm8HHZY1a8eLDqU6kUZn64ckNkEK+
WdU1TAedkzl4OHUHupuCOIcGepC+jLsvuKQeNPUtvbX+EiQm8qSutLvgiEhk
0tQWtMrIuUAxQkI5eurOvQOx6lmR64YO6dOuTu1hGdE6fu1GUmQbsvf3H8+K
9/aybQt/Klfy30/C9q9g8vZfQu1OOqG0Q0qs5bs8UAHuY+6l/3ZL6mPbnjM1
IHje3W/2+ptHCeQtXFmAmryRI1jvOPgXHAzElA==
            "], "Children" -> CompressedData["
1:eJwdkVVTFAAABnewwMTuQLETAztQDGwPuw89QB905nTG8YfY3WAndnd3d3d3
rqcP+83sfI8blzYxkB4FTIqOTCA4JSkcDk5NjYlIyoTJoYxQOCEx898/PkLU
f3KRm8v24ZJ5yEs+ounNRWPITyEKU4CC6AX/eN7fnrMIZ/3lGWMpSjFO241T
FqcEJTlpa9pQitL8tAw/PGFZylGe4363JRWoSCUqU51jVuGo8RwxjsNW5ZDV
OOg3D/jV/dZgnzWpRW3qkEBjvliXetTns3v95B4/2oAPNuS9jXjnbpvQlLcm
0oxdvnGnr91hc7bbgm2+cqutyPGlW2xLO1642fZ0oDObfO5Gk9jgMzvSifUm
s86nrvWJXejKGh+72hRW2Z0e9GSlvcj2kVk+dIUPXG5f+hEglUyW2Z8BDGM4
A1nqYIYwiCXed7FDWeQ9F3rXBY5gvnec521HcstR3HQ0NwySxhjGMtcM5hhi
tunM8rozveYMx0UqXXW6V5zmX7y+3uE=
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 4, 4, 2, 4, 2, 3, 2, 3, 3, 3, 2,
              3, 2, 3, 4, 3, 3, 2, 2, 3, 4, 2, 2, 2, 3, 4, 3, 3, 3, 3, 1, 3, 
             3, 4, 4, 4, 3, 3, 3, 4, 3, 3, 4, 4, 3, 3, 4, 2, 4, 3, 4, 2, 4, 4,
              4, 2, 4, 3, 3, 4, 2, 3, 2, 3, 4, 3, 3, 4, 3, 3, 3, 3, 3, 2, 2, 
             3, 4, 4, 4, 2, 4, 3, 2, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 3, 3, 4, 3,
              3, 3, 3, 3, 3, 4, 3, 3}], "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{5, 8, 53, 53, 1, 3, 53, 41, 4, 53, 55, 2, 4, 
             23, 31, 55, 14, 1, 2, 13, 48, 7, 9, 52, 3, 2, 6, 5, 53, 3, 6, 54,
              54, 2, 47, 55, 54, 5, 52, 54, 15, 53, 52, 53, 19, 5, 53, 54, 54,
              53, 53, 55, 55, 1, 1, 3, 53, 54, 55, 52, 55, 6, 19, 55, 1, 1, 3,
              2, 55, 23, 53, 4, 55, 5, 1, 27, 2, 41, 52, 54, 55, 3, 39, 5, 33,
              4, 54, 54, 5, 4, 52, 54, 55, 2, 5, 1, 48, 29, 38, 17, 53, 55, 
             47, 53, 55, 53, 54, 35, 12, 42, 3, 4, 52, 52, 54, 55, 36, 54, 22,
              4, 54, 5, 4}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJxFkntM0wcQx0uYwnRgYRutwnhIpkQ2qYONwjavhSDdhKXAJMSIVjewsZAW
mLMrIgWSWUCw0WxrUEYjG/uhs7COR+V1rbwKLVgoLQVBeYkFMwRhiVFh+5EM
9sfl/rjL9+6+9/E7JYxPcaBQKNlkEJ0qf1/aGMpDE9jpXSpIahgMG1rSoyxn
yHpO2YQao0OO9PwgMiNL2Nwn0yDq2J3Wx+pBrYfAhSVuAy2z1u4abgPq60u0
ueUeZEXeKBgvuIMTgXvrmaPTqAw+GjVVPIXOu5ZTJbMqmHDTBxRPtgMlLPPY
jtv9uOjts5Cx2wKi3/ihFq95UD4ccPyRqEJK6xVL96NasPlX/9KfqwZ53Iex
V0d0sKHDO7ul8ep8J8qcd86ddmCDXOQvks8OoV1KlO1Pqgf7zHCqx2ozMByH
dPGuahRHJXieqi7frCepHl+YjbDBc8eMF1PNVmRG32QZPxhGzVq1OKajEjSG
UPNBahc6m4P+effNeeTHe+wPJvUokvJtMv9uVKRGeb0f2Iu++qJXxGQtLFpd
tEjTo+arQeFjeicSmty+p3eqNufxdkrK65wakGP8Lkv45SjYj1sk4pUqkOud
fUr2/Q0cl3OfVvgRIO4Wuj8P5AGF3pbvZNOj/dmemIH5DlRk3js8d1aFREzV
S+3qKPKnG7av/4N+Js9nlqEGbnRZWuHROWQYXlDY9AHUchIOnVjoQl5u07Vb
xq7/ffkvm97w2bYQ3ofik8N/tZN6xMiNlLtk5sUecHrbpsEAY8jJvGwryB7I
llpqTEgtLazMukiAzdU0VXn4LopfvkNLH2sFaun1EyyZCYkc5VsVfsPIXB4P
mdzzEFmFgsz6kjaQBh3cNRGhBe7NfV5fC6qB4CS614n0aIoyTap+WgFCLRgr
EhpQ/Dl7SRdyD0RrsY9cSA7prufd17nk/mx8cMipBpTJYTOMb8bARI9bybzc
CNziW5PHmu6DJutMgA/Zx3BTm2W0pyCVBeORVx1IJG4tK3hvCJNWLuVcYeqw
Ni+yKLxCB9KL5mRPsl9r+daQ3SLHDb425vCfXCeUpXnAZ1uXarbXAv/aR2u+
M+Og+ELCTHAzbfKh96SZ4bN2tAv8duSv9oJibPG26nQjco4fKU4R2Tf33uCV
O5os1OcjLH4clW9Yv1P1wyeF5L72Z1tae/u1SC8O35r6Rzf6LiQmz91vQf33
cWV700ygqCMESelNII7OuPSnczMQv4ZT+QfMIP39NYv3hSrSr2p6DGcCNREl
Kd7kXdSekdUg0qd/AVYRB08=
            "], "Children" -> CompressedData["
1:eJwdiVN0EAAAAO/lZdu2bZtb9qplLtdvtm3btm3btl3X6uPuvXuXplW3wLbh
gJ5RwhQY3LdMaGhw/6CAsKjStVdIu5DQPAXb//sDwwj3n/BE4JgRiYQeNTJR
iMYR/3jYAKLy20P+8qDRiUFMYtGO9sTmgHHY70/3GZe9xiM+CUhIG/aYiMQU
YrdJ2OUPC5KUZCQnBd/d6TdTkp4MpCI1adhhOrablm1+datf3GJGMvHZ7GRm
s5/MShY2+dGNfjAb793gO3OQk/XmIjd5WOdb15qXfLwxP69d4ysL8NLVvnCV
hSlCUVZanRoUozjPXWEJSlKK5VZkmaUpQ1nK8cyllmeJT13sEyvw2EVWYqGV
qUJVFvjIajx0vg+cZ03mGkwrajHH+9amDrMNJIh71qURs7xrPeoz0wbM8I4N
ue10b9mYJjSlGc256TRb0JIbTvW6U7zmZFszyatO9IoTDGG8bRnnZcd6yQ50
ojMdGeNFR9uFrnRjlBcc6XlH2J0ehDLc/gzznD05ay9604e+DPWM/TjtEE85
2JMO4IQDOe4g/wKVGgDf
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 3, 3, 4, 3, 2, 4, 2, 2, 4, 3, 3,
              4, 2, 4, 2, 4, 2, 2, 4, 2, 4, 3, 3, 3, 2, 2, 2, 4, 2, 4, 2, 3, 
             2, 4, 3, 2, 3, 3, 2, 3, 4, 2, 3, 4, 3, 4, 3, 2, 3, 2, 3, 3, 4, 3,
              2, 2, 4, 3, 3, 4, 3, 4, 2, 2, 4, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 
             2, 4, 3, 3, 3, 2, 3, 3, 2, 4, 2, 4, 4, 4, 3, 3, 3, 4, 3, 3, 4, 3,
              3, 3, 3, 4, 3, 3, 4, 4, 4, 3, 3, 4, 3, 4, 4, 2, 2, 3, 4, 2, 2, 
             3, 3, 3, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{10, 5, 21, 30, 54, 3, 41, 1, 1, 46, 5, 6, 12,
              48, 40, 1, 3, 1, 34, 34, 9, 3, 2, 53, 52, 55, 53, 1, 52, 6, 53, 
             4, 52, 2, 3, 16, 4, 2, 4, 54, 41, 55, 27, 54, 5, 54, 52, 2, 53, 
             54, 52, 5, 1, 5, 54, 4, 8, 52, 47, 52, 55, 5, 3, 54, 4, 53, 54, 
             2, 6, 55, 54, 3, 2, 23, 52, 54, 17, 47, 53, 53, 5, 2, 53, 1, 42, 
             4, 3, 53, 54, 1, 5, 54, 52, 4, 20, 52, 5, 5, 3, 55, 19, 55, 15, 
             54, 54, 4, 39, 53, 4, 2, 52, 30, 2, 5, 55, 54, 1, 2, 31, 52, 5, 
             4, 5, 50, 5, 3, 55, 38, 1, 1, 52, 52, 55, 54, 31, 4, 36, 38, 41, 
             55, 55, 5, 53, 53, 1, 5, 3, 1}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJw9VH8w22cYD6XS7mxRxXet7qK11tbb0q0/plWela1yRheqmuk47Oz0qhVt
tyWmFbpb9Eob1ZLhxk3xZR2hqinWJ4IkSCWING0NVSJFTUvLpmXf3I0/3nvu
ee99P8/n/Tyf53WLSQiJtaLRaFeopcvOfJF+/jZ8ut75iKtLHxo3lV/rTKmB
pSi+zCpnxuqwKCX3fucOLUhmrgpyIqog/e5sSnR8N0i19W1sbh5yftX077er
AmFvVsg6CmfwmGNJMdEC9HXT3yaZKiFuaoN3R00TRHHPKPhOj0Ao521oef0A
Pf0y93HGHwMtvDXv0eYBZJjWkHZCEpbjxfPFp0QkMK2uW516z4TmssQrwh8N
IK9MDvg+txWjDOSAY44a6dEx857+SiR+NriG61XI1W4//nxGA2IP703XfdVo
FpJ5H3JvwmBk8f3AbjWq7yW7T2X/DukVhhmbd9uQNr/vRSqFy/cpHD9J1eE8
iEhQpyHMmbV+6iO9KHVme9/9+B4yep8+UVI57dVFrXR4BCVNhxYzFdVA5rhM
EtiM4gHV87e01cDf/Jz1nWgMzdnz+XPWZiC2//HlPz+MoXhidIjjpkZpu0GT
YdLjVETtGSeFBDlDxI1W6zGkE/w/+xxVSGS9o9j8ugHmfunzeONOKwgF9nur
3UeBOHw5Up3/BHn1HlsVFh4bo8mX8dUgvjTNiKD0kC2U8wNbioHDcFrvv7IZ
pWvcs07YdOE24yrm/jI98A7bOiVS7zPafxJbNDyMwqRscbrL30Cyct8WnFWh
dDXRoawbxUHDoDPLQ76sG9EVPVLp1Ii0O41FopVGJApCx3a6SdEclnFAS+lC
D/Wxna1rAOYE7TOvXhUK2wWvDtr2I9vPpab/UCss8aK3Z94SOzRj1IhIszCh
xPTQ+McFbvcwamWcrGJeAUbRtZ0+BUrQ2fknH7X46v8+8LfmFlbqDWhEkSBV
9hB4U0pNhddPwCuwj20QdyD33G5Nr+sYbOOy2zwFLeDh5Vx4o64LdPUO2wO2
yCl+4QMjF4aQLNnDiPuoBzh2YYqeA4jMxUgvy3nSr7aDoHwrExjzLfoMrh3S
Vk+242DY2Srifg3Qn33lclN9F6UZqYlZ001gfN+zpz9dB+qDVYmh/Wrg+svX
mih83kLQiL2yEiT63RHXwptQXB/k+5tvGs4FSwN1lE465qQ+pl+xPGf8NMbD
DmrffG5yvtmuDmmlbK+4dg3KZiNFTzpkQHReFK3Y2IK03ZnXL1F+kQQPVU0k
VIDUZF2UUKJAHWsvvZW6xxFHrK6g9KHZH1VZfLI0j3Ga4VOWXLKr7a+e0jaU
/zv69OiuTiQ9xz+YrBUCW3iwUbXFAOwTt4KTk7tx26rTgXbsFowKP2L1eZIK
zac938zfYwA6WXppxxcjsFSfYXvORFL1JLXkMe7xeljC49uIsqqCZcArK08N
eKZB5tcZrEUrDXIuNK4QF1O50tUhkqaHufnuq01WFK944qSe6pu865uFl9Sc
FN1mxVv+A1lQSG9fcxP8B41EfVw=
            "], "Children" -> CompressedData["
1:eJwdiXeYDwQAQN8n6cgOhaxQKDIyyh6ZZZwUGTm5kePO/e7OOXfuODfsM86o
zDIjijIKFQ17lQZl07ZHWc/xx3vf975XaUB0cFgeIDYoV8EhCS0DgZDE7vlz
o0NUXGh4aKBOg4h7PyeXPPd5gLw8yHQ+NR+f+DAFeYi1BpGfAqxRP/aOH1mI
wgSz2tuusghFKcaH3rIrxXmEEpTkJVZ60xWW4lEeozTt+MAyLPdxylGWZd5w
qeVZ4v9WpgIV+c9KXHex13yCqy7yilWoyvs+yVNcthpP8wyXrM5Fa3DB9zzv
Qs9Zk1os8F+fpTZ1+Mf51qUef/scf9mG+jSgIfNsQlP+tBHPM9cXmGNj3vUP
37EZzfndVrSgJWd92zPO9rSzPGVrTjrTE75IW2Z43Bzb04FjduSo0/3NTvzq
NF9mqp2Z4hG7cNhsf7EbPzvZ7rxCD15lGpN8jYlmMZae9OJ1JviT4+1NH/rS
jx/N5A36c8gkQhjnDyYygLF+75sMJJQwwhlElgfNNIIM3yLdA45xv5EMZghR
RLPPNPc6lHiGEcNo9xhgt7HsMo6djjKBVHc4nO2m+J0j/dYRfGOyySQ5khGm
kOjXpjKK0WwzjXSGu9UxfGWCX5rBFw5zi/GOI87xTGCzsW5yIpMJ+LmT+MwY
s5nCRoc6lWg3GOV6h5jDYNcZ6V0KRjLG
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 2, 3, 3, 3, 3, 3, 2, 2, 4, 4, 3,
              4, 3, 3, 2, 3, 4, 2, 3, 4, 2, 3, 2, 3, 3, 4, 2, 3, 2, 3, 3, 4, 
             3, 4, 2, 4, 3, 4, 2, 2, 4, 2, 4, 2, 3, 4, 3, 3, 4, 2, 4, 3, 3, 3,
              2, 3, 4, 4, 3, 4, 3, 3, 3, 2, 4, 3, 3, 1, 1, 3, 3, 3, 2, 1, 4, 
             2, 3, 3, 4, 4, 2, 4, 3, 2, 3, 4, 4, 4, 3, 2, 4, 4, 2, 4, 3, 2, 3,
              3, 3, 3, 4, 2, 2, 3, 3, 4, 3, 3, 3, 4, 2, 4, 4, 2, 4, 4, 3, 2, 
             3, 4, 4, 4, 3, 4, 3, 3, 3, 3, 4, 2, 3, 3, 4, 4, 4, 3, 3, 4, 4, 3,
              3, 3, 4, 2, 4, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{14, 5, 4, 7, 55, 5, 10, 54, 3, 3, 16, 55, 1, 
             27, 23, 48, 13, 54, 1, 54, 32, 54, 1, 31, 52, 54, 52, 54, 53, 55,
              3, 1, 3, 54, 35, 4, 3, 2, 9, 5, 41, 1, 45, 55, 54, 52, 52, 52, 
             38, 55, 2, 39, 4, 2, 4, 54, 15, 3, 19, 41, 52, 55, 3, 53, 52, 53,
              1, 3, 3, 54, 53, 54, 53, 54, 45, 52, 15, 3, 3, 3, 54, 1, 20, 55,
              53, 2, 5, 2, 52, 4, 52, 54, 55, 53, 5, 34, 5, 30, 53, 54, 2, 55,
              53, 4, 54, 8, 15, 52, 34, 34, 53, 55, 15, 55, 52, 8, 54, 4, 2, 
             55, 3, 27, 3, 53}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJw9kntM0wcQx38G5DEFKmPQsAn4QpiOALJY0XGdjUrYkMJw62aCLQukw/Hq
2CzKaidbBqtdOh1Jp1AYsVjeUB6WiL1Sy9MyKLS8JFpBSnUMC4auApOVP+CP
++su3/vcJ7crOTMhZQtBEHn2svj5z2fvNkDZq6vdpfufAFceOT4jmMKxatd8
IA2A2ONKH9pKkC79lZy9PAmD14VLBYVtkJWp90tSPQRR8mpCTrAJe/bTXsb9
PQ1Es9on8PwDMKYGPL74rQDZbjXUK3lDSC08z2kRKsElMWrrv613gbh3zdA9
0wBjeypv/XVZDmSvR45HrhtR9SKpen2esSRrl5Q/Ra6nQ7nQjKD6h8t0WjIB
W/bzJdV/E0j53HK8iCsHht4rv0isQeOz8cw9RjOG1sVzM3hdSOm95vSR2yQy
Hd8vMNB+QMWZhX29ykEs050LXuelpH/md4zeiZS0P4f7IwYgwNWdPJH7DOkS
7aOTzvUwKDykO/zFfeRvy7vNsc9Hx7Dqby1r0cX3ZepFUx3YaIEndvpMorjj
zJpQ3QhmatRJ/TvPYbN/c99Xnzb1YbTgNIv4pA/N4RfaZj00aGG0HHD98j4W
cBTeoQYNUnr6png/8YG/M0Qfs60VFWklkroVNWS9jp1x66oDxsKK4qidQ9TM
ba/dPoLGGv/ZKv0IBjFN0oX5WQjo+WVV9qQBSDWxH65zmvmyGyGMFtjgYn4g
feUo70TqfOnBuTgdlr1VTLiEGTCAU8Y7a1Fi9Kj0PYndF9EoGvLg3kXiUI6V
y7iBxmDJeD/0Q+g392qz13Mnjq1cajIj3SHR3clbjkEPJXm6oWlkXHZYPsxS
oqjju6oZzZ3N+8lFSt/0OjVu8LFzyBXrOQrzCVdGZQlaJp8PqO3eGQbv5PR6
ByrZn+05bPcnk0aS2GHDwGTFLrRrHyB1oVMuYWlQNKeNF5j0GJRKZPU6t6JL
eIpPld2TJXFujR+iwayp3OquswYUL5WfO6XvQqp85OmPcTNojqi1lVXw0Ojn
a329oxVtht9zbu4aRZLJU+bMlwE9abX2SK5m8w/ZI3tjTpM6kG7l0TzU0xCQ
zzRpw0dRoTZtHbbehjFd2x9VhArprlEZqbxmVEid4j+O96KKw4oPbtG1g2KK
4ZvM6QKb4VSTubgHs96WJERXtsHGPkJMJ7st9uCgKu1oYnMDNtBi06w7KqDB
c+9vGY46tHVbc94d0gOxmyWzft0I9PTvfS9ELALpamSJwOcFsOmFFSPHVTC4
3f+N+ch+pJQGrr05pkDR4+5Fj4FGEElSQvsqelHkTrtzYAzxf0yKE0g=
            "], "Children" -> CompressedData["
1:eJwdiUOQEAAAAHeybdu2bXfZXXWZl/HLtm3btm3btrFdPXZndjZliy4BrUMB
3SOEKCCwd8ng4MC+tSKGRMXOPYLaBAXnzNf23x8QQqj/hCYMYdEBhGO/7WhP
eCIQkUj8cZ+/jcwv9xqFPUYlGtGJQX0aEJNYJCcFsYnDT5MRl3j8MCnx2e13
d5mAhCQiMd/c6Vd3mITtfnGbn93qJ7f40ZR8sC6pSE0a0lKbzb43HRnJxDvT
k4FNvnWjmdlgDnKShfVmJRtvzM5r1/nKteYiNy9dYx5WW5lV5iUf+SnAC1f6
3IIUYoXPXG5hivDUZRZlqcUozhNL8NgKlKQUpVniI8vz0DKUpRwPXOx9F3nP
hd61IpVY4B3nW4V5VqUa1ZnrbWtyyxrcdI4BzPaGtbjuLOsw02vO8Kr1uOJ0
G9KItkyzMU24bBsu2ZSLTrUZzblgIEG05rwtaMkUWzHZc07yrBM94wRPO95T
jrMDYz1pPzoyxk50pguj7Uo3TjjKYEbalxEetzs96EkvhnvMYfZmqEftwxGH
eNjBHrI/Bx3kAQf6F3d2At4=
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 4, 3, 3, 4, 4, 4, 3, 4, 3, 3, 3, 4,
              3, 2, 3, 2, 3, 3, 4, 3, 2, 3, 2, 3, 2, 3, 2, 2, 3, 4, 3, 4, 3, 
             2, 3, 2, 3, 3, 3, 4, 1, 3, 4, 3, 2, 3, 3, 4, 3, 4, 2, 3, 3, 3, 2,
              3, 3, 3, 3, 3, 2, 4, 2, 2, 3, 3, 3, 2, 3, 2, 4, 3, 4, 4, 2, 3, 
             4, 3, 3, 4, 3, 4, 4, 3, 4, 2, 3, 3, 3, 2, 3, 3, 2, 4, 3, 3, 3, 2,
              3, 2, 2, 2, 4, 3, 3, 3, 4, 3, 3, 2, 3, 4, 3, 4, 3, 4, 3, 3, 3, 
             4, 3, 2, 3, 4}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{5, 15, 53, 3, 4, 1, 46, 52, 47, 53, 4, 54, 
             54, 54, 4, 4, 17, 4, 52, 46, 55, 34, 4, 55, 2, 5, 52, 39, 54, 5, 
             55, 5, 55, 4, 3, 9, 1, 53, 5, 38, 52, 52, 31, 23, 3, 55, 55, 55, 
             5, 4, 5, 54, 52, 45, 52, 53, 55, 5, 8, 54, 2, 4, 7, 53, 52, 31, 
             2, 6, 53, 2, 53, 30, 55, 54, 1, 1, 54, 20, 3, 54, 13, 33, 52, 3, 
             4, 31, 55, 5, 4, 2, 4, 53, 4, 3, 54}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJw9kWlM0nEYxylLbK0kqWR5TLNNza2kw2HTHjpMN1PRcNExo9bxL1eSOkfa
4VaZyyya2ZwzwYEbuFKRmYTpA4ngPNK8RkWGhKhYi7SDzFx/X+SL34tn+3ye
4/sLPJWRcmYJhUI5QT7CpvGRBI9CXPqRF81+TUB0c7+7X5RgmWY6KTvUjvUd
Su+IbDOwLg3P5F/tR05l98gBah0wkoajGLlOUM8rhAf1UqA9oFs9o4uxLGeG
+6nIivzcXpelNw20X4R89x926HvcqtjZM46SSs5v/bEhFDSHdi5w8ryllR40
HThVGS0RR9sw4E/q00I/4+IcYbPnHIfyBml2Lzk1Xw75Yad3sEiOBQkXJDWt
yAvaHmM/14iWzce3R1/Rg6CoJ5ieZkDBfMLYKkMtmB5y6Ym+/WCxNrU2U59j
yOTHjrDITiR+K6VNZO30Olzz09yLErFSY2P3YYBmhJ9J3u2xYeZsrr0WiOtZ
J4d8HaC+yYmR9iKyXvn3GElPFF8R67/xGshz3nOSLimxY/VcJ3dUCeG1rVvj
ZG3w37dMyV7svy9Dvm2PIraiAbR36WsO2Dg4kbJtrQ0KUUDNrRGT+fN44WIm
mbNFBam+3mZk2MdXnZh0oIUIY6qz2hb34TxKZQo0RhSYBllfxXoMybSqdl8u
RfW6kE4f0ptIuy1bT2jB+exoVAGWQ4AqgSi2D2If8sp/rekCUfLOhJK3OhCl
VHDzAp+ia1+0MtxhwLJka93njBrguyW+EpG8JZ1eLWXoQVg1q9WdaUfK+eU5
ktlu9Bg+xo46ZAZTkEL2+kYD0Ih515Z4svvsyBPxhz5kT7t7DpN5hcTU3dL9
fYemG8z6l1R/trx6F41gDgDrb450pUmNgkO3PiUqHEg4/aK7GnTw/78DXJKz
7wY6MD+SsiyI5FimOU2R91dgHXHuLRU2gGgTe2yPQ4dxypHGn0snoP7aN7dk
cwuUGYzjg3u1IDJx3twheYnblLFA246u2JaSBZ/CGHtycUUb3rtcZSjJdGf/
A9Aflbs=
            "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9llb1XVoQoIyNkldUw+5KVdLkLP3H3cef8N/YqskWIUrL3
yt6yySbPxw/v3b17UYtXBJaEASvDQwrkrU4OBvPWZEaEIm35qvyl+cH4hGX/
fm6IsP/Uoz4NmM4MtCGjuGIjwomgMS257B+b0JxLNuWidTbjtxf8ZQt+et5W
tKYN52xHe37Ylu+e9ZsdiGcIHTljJzoTyWljqbILXfnqKbvRnS/2oDd9+GwU
PelFNJXWWuEnT9qXcj/ajw/G8N4y39mft54wjuMOYCCDKPWNxxzMUV97xKEM
I4ERvHI4NZb40sO+cCTPPeQzi01kNGMYy1On8cSDjmM8SRxwEvtNZgKP3ecj
J/LQvU5mCg9M4b5TSSWNe6Zz1z3ecbfV7vK2Rc5kpznscBaF3jKDAAVmst3Z
ZDGHbc5jq3PZ4k03O59N3nAB2Szkuhu95gYXsd5c1nnVtf4FXfLI7A==
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 3, 4, 3, 4, 3, 3, 2, 2, 3, 4, 4,
              3, 3, 2, 4, 2, 4, 3, 3, 3, 3, 3, 3, 4, 3, 3, 1, 3, 2, 4, 2, 4, 
             2, 3, 4, 2, 4, 3, 2, 2, 3, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 4, 4, 4,
              2, 3, 3, 3, 3, 4, 2, 4, 3, 3, 3, 4, 2, 4, 3, 3, 3, 3, 4, 2, 2, 
             2, 3, 4, 3, 4, 3, 4, 4, 3, 3, 4, 3, 4, 3, 2, 3, 4, 3, 2}], 
           "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{52, 3, 6, 3, 55, 19, 5, 54, 55, 54, 33, 53, 
             1, 14, 3, 34, 3, 5, 54, 36, 5, 54, 1, 54, 55, 2, 54, 52, 1, 54, 
             52, 55, 5, 47, 53, 53, 2, 54, 1, 54, 17, 3, 34, 5, 2, 2, 5, 2, 4,
              4, 12, 55, 31, 53, 4, 55, 54, 53, 52, 47, 33, 53, 5, 55, 4, 53, 
             53, 52, 27, 55, 33, 52, 1, 54, 1, 39, 27, 55, 3, 54, 27, 3, 54, 
             54, 8, 55, 14, 53, 4, 54, 2, 5, 17, 36, 54, 53, 54, 53, 5, 30, 
             15, 4, 55, 23, 41, 55, 27, 53, 55, 9, 1, 53, 3, 5, 52, 4, 55, 4, 
             55, 5, 4, 3, 17, 54, 55, 55, 38, 8, 4, 2, 38, 53, 13, 5, 4, 2}], 
           "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJxFUn0w22ccj7UbpiqoNm2VoFWhp6HlYjpfZtNc1bFOya2beW9auqZYZ6ao
VZfDXK42VYaZ0h+9kqh6qdg3iLciokiwFmWxoNMw29Gq7edu7I/nvvfcfZ7P
8/28WIRePBWhRaFQ+OShb/k+cLftLLDdPL385qZgIsq4tIQmBZ0jMamxjGmk
muu6RVu0ojqFyLPnPIDOrhhb0f7fIXfqaFaptwyW56MjHYJakel+Wqt49xj6
FfaMeWlXgXr03gXd+WqUt3/eNGk9jsv6O0aa1e3QeXdFwiN5eXsLT7HLG4DX
8gP9UHkBUu11PFlfSYFekKSVzFKB4EMnn+yRZkh5yWLZv24EqlJzf9jkBQgy
R8K8/NpQ8l3YhPWdWaRymzpmFmqQvW3vg8zpQeSVKsWzSw2Qe3Lp5sxYC3K9
nZ0UprPgHn5/JMBgEoQ7gltr0ztx+WeZOSOrDzW/fuS0k+SvXyuPPyktAZuZ
58V9CgkKmkvCfM92IF0ZFZBB8hKGR/P87/UjLyLQY/svbSBXtIZ866xGrodi
oUpPCJytxoMx635NGxHaKQSk2L0qciH1SByFjS6jUygZtmKvz+DDOrrr/gn3
Zy70OiqRf7lm5beMSWSqSnumyKmz58/IhOlKEFQY5xi59SLlabY331cIGnFk
eEGhFIV8FTLjnoBG+iw2WPYP1CefUG8/O4HyXKXUu1aKtDHi1bm5NtzQs5GH
/JhWQX9WG/J6HNjmu56g+pPQRSvqIHDq5pTSM0NICXtplxfSjsMG6oMO5h1I
XXCNW8zqQMF4x6JBnwgEB2YSX1fK/s+XjnVLJP6nTAePzzh5yJl0qSrbNwMp
71ibBpB33pqPSr+d1PHf+9zZ3tWPRx8DwapoeGPtMVCl8p3RPS247LxmZGLX
CoLCCOajsi6c+JLQK1L1ozpTkOa0TQaaq3+ZcFVNkHKafj50sR41ZubzlyyH
QKg/4yjsysfOWw13495LRYmC/zD0INkH3+Zmpo0EaXpbRo9XiGAjn9waIopz
4SGoz4vudFupgZ/EWIr5QoTc2FXaM4EGNFh0hpVYjdRDjLcLLJQ4bFV+W5Zc
DeobETpXGQTEh6VnHyZ9p4lXg2zNujZz8quwNQ2PKgf3PW/yF8S9yH7rFjMx
Xgwan+iggW9kMLzV9aY/o3sTz6mYGBog+8i7/P6NBkYR1ieYXfHMuo31szmi
Ru1anBiQOVVflKJNXsI1YlCBEjol0DBIjpzsVWsXmgLZJ/LTjgX0oU5pUukR
sl8cjt31dZx7fuqIv6h4s4/cSOu6proVIJ66yQvFEiAMP33UOipHemiVa0ta
OFAsQ4i/o0UgORBUnr7rBXSe+8Pm2tcKEHj/eNzM8gpwje0HKz5oQ65m37vd
1c1AfT58SUzuxxt30aok/xOULWVmuObAv1kXRCw=
            "], "Children" -> CompressedData["
1:eJwdiWeYCAQAQN93obuMCNl0aViF4hBChEPiLjPr5AZxlzPOcWecW/bILntm
Zmak7IyGnT2iKNmr/Vx+vPd973vBXePCogKAPoFZCotIqBcfH5EYHpQVobF9
I6Mj4yuHxPz/M7MIeMwTZCM7aXxtDp5kOKkE8pW5yE0QW32KL9Wc/OcW8/A0
/zqEvGy2JWHk4xnyU4B32WRBniWEjRaiMK9ThX8swt+WpSjFKE4J/vIL/3SD
JVlvKdb5h88RzPM8tDQPfJEXWOt91/gSL3PP1Zbhc++6ynKs9I7lqcAr3PZV
blmZm1akEiu84XKv+xq/u8yqLPWan/mbS6xGdWrwBg1YbE1q8RaLrM2b/God
rrrQKy7wF+tSj/n+7DzrM9fLzvFtGnLJ2TaiMaHMsinN+MkmXHSmF/zUd/jE
5szwvNNtwTTPOdVwptiaNpz1PVox2TNOsi0f24mJtqM9p53gKd/npB04YUd+
dLydGWcXIujKByQwgOOOtRuRRBFNDz7kmDF0Z4xHHe0RR9mTXvSjP7HEcdje
fMRIDznCg2b6g/F8bx++sy/fmuEB091vmvtMNZHhDiTFQQwziaEmM5i9DvEb
B7vHoQwj2RSS3O0gdznQnSaazgB3mMF2M9lmgo8ADSwa0g==
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 3, 2, 3, 3, 2, 4, 3, 3, 2, 2, 3,
              4, 3, 3, 3, 4, 3, 4, 4, 3, 3, 2, 2, 2, 3, 3, 4, 3, 3, 3, 3, 2, 
             2, 4, 3, 4, 4, 3, 3, 4, 4, 2, 2, 3, 4, 2, 3, 2, 3, 4, 4, 2, 3, 3,
              2, 3, 3, 4, 2, 3, 4, 3, 2, 3, 4, 3, 3, 2, 3, 4, 3, 2, 2, 4, 2, 
             3, 3, 3, 3, 3, 2, 4, 4, 3, 3, 3, 4, 4, 3, 4, 4, 3, 3, 4, 3, 3, 4,
              3, 3, 3, 4, 4, 3, 3, 2, 4, 3, 4, 2, 3, 4, 4, 1, 3, 4, 3, 4, 3, 
             2, 3, 3, 4, 2, 4, 4, 2, 2, 4, 3, 3, 4, 3, 2, 2, 3}], "RootIndex" -> 
           1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{55, 48, 2, 54, 17, 54, 15, 15, 52, 38, 54, 3,
              2, 39, 12, 52, 1, 36, 38, 55, 55, 55, 52, 5, 54, 8, 52, 1, 14, 
             52, 19, 53, 55, 5, 52, 3, 54, 54, 4, 5, 55, 6, 4, 4, 17, 52, 1, 
             27, 52, 53, 53, 1, 55, 53, 2, 55, 52, 53, 54, 38, 4, 3, 31, 52, 
             2, 38, 52, 55, 3, 54, 53, 34, 47, 54, 1, 54, 52, 55, 38, 54, 35, 
             31, 3, 1, 3, 52}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJwBvQJC/SFib1JlAQAAAFYAAAAwKVXm6VN/vwC9ktXH5bA/oI/eq6D7wj/w
SR7Rndj1P3BvJm3hprk/KEUzXQaq3z8gyIr8qOGwP1gLlQ0f9c8/iMMa/LsG
w78AJ8rv+0ZPP1iJl8u9vNg/SD5DRlDr4z9gD8ZePNrjv3D+TeUNxq4/CBrz
Znrmrj8QOvFn8IvIv/BJZSvfJt+/kFE1TZPZwT9o65yooI6BP6BOZ4N6fcu/
EJECZ1upy78QwsuJ2z/Lv3Cl1WZr5Me/qHszp5NA578QO340TlrnvwAiYaj2
bLE/GMPqpdi3xb8AGFu3Uliav/gNFNnB6MY/MNLAlVyDx7/ogKiaLli1P3jJ
m9Zofse/+KxJy/Lxyr+wackhI/27P6hMU8HLFsS/aKa6D3Ip5r/QPMijJU/I
vzCyFcYqvt2/qBbNfDFaw79o8Ma0sCTnP+CZsF8bE8u/6IComi5YtT9YCofM
OVrDvwjEF33ii+K/aEHW8a8LsD9ge+B28mbGvwg5rYMIIsS/OLnqYa1zrz8Y
K/guFfPDv1DPYCxm7ac/YCvUNz3Bwz9A5PBnVozfPwgoq7cAAba/uFSgIQp2
4D8owwGH10LAP/h24t6j88a/YByH6rzkkj9olg9qSVeavzBRteFBnhBAkEuc
Rx4ifT/4U1WkiRfvP4iJjrnKNM8/0CwI2fBKuT+w4v/g4KbeP9CojEJyqKa/
gBjGBGOGZj8QniObyo7Jv2jMQ9GHEsk/6BvhAgkx1b8oGvQqEarlv6jvbn/h
4PI/EOYSqAeAqD+4/ql4TMSjP5h8RfGQgfI/kDBl/Ht80r+QmlvnBDrlv6hn
1e8JQKi/oDIFTIZX1T9o65yooI6BP9i/svHmxec/UJ7M3kYHrz84WfBClXiy
P5ifUQP7N5Y/aEQ64ydYmr9ArGuWzDTPP4jzcvWXesS/O7ltTw==
            "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9llVVWRkSEjFQaZvTJKqu+6PfcJT/l7uOu8yclsiV7k8iW
hCKrCCWzeL788N7du5ewfVdwRwSwOzKsYElFIBQq2VsUFY688j2lZaWhtKyd
/b84TMR/BjCQQQRYxWCGsJJHRhLFMh46lAfOJxkdxnDuO4KR/DWaP94zhruO
YjR9jmEsd+y1wXHEMp4JTGYKE5nEb+P45W1/essf1vvdm8ZT51SmkcANvzmd
Hq/71RkkMpNuZ9HlHGZzzS8m8dmrfnIu87hip5ddQAoZXPKjF/1gKmkspMML
tpvOe8+bSRaLOOcSzvrOxbz1jEs57RtPuZxsXruCNmt95UlzqPGlJ8xlNds4
bqtrCFLEWtbR4nryOWYeR33hETdw2I1s4rmbeWYBzW7hqYcs5KBNVruVAz5x
v41WWcw+H1vpP7yrtvU=
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 4, 2, 3, 2, 3, 3, 3, 2, 4, 4, 4, 3,
              3, 3, 2, 4, 3, 3, 2, 2, 2, 2, 3, 3, 4, 4, 3, 4, 3, 3, 2, 4, 4, 
             3, 3, 3, 3, 3, 2, 2, 3, 2, 4, 2, 3, 4, 3, 4, 4, 3, 3, 2, 2, 2, 3,
              3, 3, 2, 4, 4, 4, 3, 3, 2, 2, 3, 3, 4, 3, 3, 4, 4, 2, 3, 4, 3, 
             3, 2, 3, 3, 3, 3, 4, 3, 4, 3}], "RootIndex" -> 1, 
           "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{22, 34, 54, 5, 55, 5, 52, 38, 53, 34, 5, 52, 
             4, 52, 54, 2, 5, 55, 31, 9, 38, 6, 54, 3, 52, 54, 54, 54, 5, 52, 
             8, 50, 15, 34, 53, 5, 1, 4, 53, 4, 55, 47, 4, 16, 54, 27, 55, 2, 
             53, 53, 1, 3, 1, 4, 38, 2, 3, 39, 8, 54, 55, 53, 38, 1, 4, 41, 1,
              2, 2, 40, 54, 45, 19, 52, 8, 53, 2, 2, 53, 15, 54, 53, 3, 55, 3,
              54, 52, 4, 52, 3, 45, 55, 53, 54}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJwB/QIC/SFib1JlAQAAAF4AAACopToQaDHTP/Dyk32j9b0/qOObzyaE2T+Q
d+w5OHnEP6j6XTil4sC/QLLYK/gC6D9g0TqWEAHlPwAnyu/7Rk8/iPBevlTp
sr+YtofLbfm1P5iziNlIqrE/EK19fhR6w7+QtptFxFvVv3DgtDCoMMW/EMnM
mCLGwb+wc1wyqPvCP3grYj3kO8E/MIyfWJpl0b/gEcgoi+HDPxCOiaNzh6g/
GC12JozsVz/ogKiaLli1PyDUJYgXG90/AP5OE8Y0zz/Yf2BRmYTEv5gmT++v
geS/6Hdq8wTu4j8YdhCGxKbQP/DanKAbF9y/oAaJJC4Rw7/Yvyjb4vCoP1Ce
zN5GB68/kJG9gGn2vD/IUCn9iNKqP3ADUPlvDIm/2II8/q0Htr+I9gBKE0rZ
P4jBzRk1dNw/IFf3qNmRk78QhG6prtTWvxAyJ215uM6/uP6peEzEoz+AjAhd
rdTWv1DaXW/Igr8/2JR7jbrZ3j+Q38fyD8+xP4Dt5ti1Y82/4Ax+7fFntb/o
qT421rCIv0jBbVmtuoy/8Lh9SsbI1D/IaHo4TuvjPyAcFpsHvsU/6FYcWOOL
4r+oOOst7rSAP3hp/h8TXrC/iC+LPVDr4z9w/k3lDcauP+hehaQWaMA/yKMu
5pm3wb9AENef81/xP8DAMYHCrcI/QOYwYBY1gT8ga9JGU4zfPwjiysI1dNw/
oF7jBvs3pz9gyttmwf3av9iLrJuM5tS/CAH3Sw2jqj9gWH3CeBXhP2hC+e85
Xtu/CBrzZnrmrj/ogKiaLli1PyjAR1hfOMm/gG/P8Xvctz8sQPprZaosQGAP
xl482uO/oDxEhc0y178wA2fp1KO7v7BDTWr2EaY/mMYQ4/GZ3r/oJpdIX5+2
v1j75MwoqZ2/OFRry0y/2D+QA00DzqbJv7BEEQuKp96/AH5i35o9w7+YZXgW
44viv7gpWQq12ci/qBHGiTchsL8IGvNmeuauP7iPi7RPPtC/CNSrBFbsxr8I
jHYVPlXHP1XhkmY=
            "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9lFSLZK0okOyOiaKdE+rJHd7kLP3H3cef8OfbeRGRn702y
d2Z21vPxw3t3717svMWB+WHAkvCQAmXLMoLBsuUlEaHIX7S0fEF5MCl54b9f
GiLsP41ozGVLuWQTmtKMcHLJI4KLjiKF5rSgJZH0JJZWtKYHF4yiDd2JIZrz
dqIz2pZ2nLM9Z/1jBzpyxt+e9pdd+Okpf9iVbpy0wRN+t9pvHverx4yjFyM4
ajy9+eIR+5DAcA7bl0N+diifTKQf/fnoQesdwECqHMRgPnjA9w7hnUm8db9v
HMZrK61zn8ns9ZUjeWmFL9zjaHY7hlTSGMtzdzmOdLLI5pkZZLLTp+7widt9
7DYfmcNDtzqeLc5ms/kUMIFCHjiDiUxiGpu8bxH33Gitkylmg3cNUGMJU1jv
VNZ5x7Xedjq3XONNZ3LDWVx3tXNY5TXnctWVXnGFfwFez8bt
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 3, 3, 3, 4, 4, 3, 4, 4, 4, 2, 3, 3,
              4, 2, 2, 3, 4, 4, 3, 4, 3, 2, 4, 3, 3, 3, 3, 4, 4, 2, 3, 3, 4, 
             4, 3, 4, 4, 3, 3, 4, 2, 4, 3, 3, 4, 3, 3, 3, 3, 3, 4, 2, 3, 3, 2,
              3, 4, 3, 3, 3, 2, 3, 3, 3, 3, 4, 2, 2, 3, 3, 4, 2, 4, 4, 2, 2, 
             2, 4, 3, 3, 4, 4, 2, 2, 3, 3, 4, 3, 3, 3, 3, 3, 3, 4}], 
           "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{14, 52, 2, 5, 33, 21, 2, 7, 54, 52, 5, 52, 8,
              54, 5, 3, 54, 33, 47, 4, 55, 1, 4, 2, 54, 5, 52, 4, 4, 4, 2, 3, 
             2, 3, 1, 52, 55, 5, 55, 8, 52, 1, 53, 5, 3, 52, 10, 3, 5, 1, 5, 
             53, 3, 55, 47, 3, 54, 38, 52, 55, 52, 5, 54, 54, 4, 54, 15, 54, 
             2, 19, 1, 52, 55, 54, 53, 52, 55, 52, 5, 55, 52, 3, 4, 21, 1, 54,
              5, 53, 54, 4, 15, 38, 15, 54, 54, 38, 53, 4, 2, 54, 55, 4, 2, 
             54, 5, 3, 55, 27, 4, 2, 1, 52, 55, 55, 53, 4, 20, 52, 52, 4, 31, 
             17, 27, 3, 2, 52, 52, 3, 54, 52, 54, 54}], "NominalSplits" -> {},
            "NumericalThresholds" -> CompressedData["
1:eJw9knlM0wcUx8GMAWFondwwzgAF56gDtUPHYziBgcxyqGUQLQy2MlAwGKwD
pFwGaIQOM1AEVhGhdQrlkNWBvhIKLYeEcxwqthzlhyTjSEGCgPv94/54f7wr
L9/v+9hFJ4bEamtpaeWQsVEcdiEuUAkCzYqzeY8cCW+Wqu/LMcwbc5L4PWgA
RmXflK9uPWg9LR6Vz4nBn7a5mJX6D/CDDwXdnGgHxT6en3prHilEg6QyVIEb
lXPiZ7otyM/SZ3xXqkDiXG61CVsK1DviDmGVClgGNh73nFXAuKjghogqMCk0
Z+Z70Rv8cEeyI+KclN0D292zR5Ojx5D9yUTwUu4A0jm8ZxuaPhCG7Zgf+6ED
JQ2ffVuoHkHJ1/vs1goX8FbCcP36LgL0RD9eNDRWIO2U0ZonOScePr5w/loz
ch4RRbO8aeQMWt/8anIGN/QP7fXK7sCklOT1zKAptB3hxVnBINomWl2JThgC
70dOmoyRG+h90i67pXAQkzRVTU9IXXmepwZj0+dBr1jz4Oz4c+Bs6RhcKid9
W+htz0gbQqYkd3+6byP6J6jjrUxf4vLVc4dtxiVIG9QOudEnQ+p9u+KKsXag
hMbVW5L1gSuX6jyuymD5RWRL5/Yk5jUZs+lkPnB9jmdX14E0iLwdtDgDCvvn
jWlP5fjBH2aMq5nOzhBs7GK6tr6YRSF98cC/zVwgfM2O9H4kQ4G/l/Heqec4
Hv96pL6qC4UrveoTdq+AKDlBbSCUKM2a/OV4xFlgSkVm8ohR5L+LMdKyV6Kt
omBLqBKDuIryZjl8GsXztzt7SR4IrrDsC+ZjEOeYu3zDLEPGu+tq/T/lqHUt
X7fot24UG28LH1rPgqDVa/u0iQxZpbuNViK78FZEnXawph+lOtlRUNoGzK21
WkvSFyIyetWBMgL0aZVuQZkck1xNvJJd1MiqSQnnmS7BuIOouj+jEWi1fj7c
8G4wi1raotxZRH6le5HHdisw/pY6O7qXo/fDqIpU2wJQ8Ghcd/LfRHGsXqaL
ENiL5UJBYSb8nwfkOzZJEOl7VqnTh1uRH1juZ22fDt7rv7pli5uR/+lBsdvl
l+C/OSC8u9mHenX0leoDBDKcLEyP1XUjazqQoib54bp5WSh9pODdbdjTOluB
nPd+mqPkvzgxZwLDSJ71xmMEDTGtyAr1ex+QLgLKFC1yjtyjPtYvGSf3uH07
Ag3JsbhHHq+yliP7c4FH6R45MgMXLWg/96BSNns5eLoL+YaSxgDTbhDe96Sw
Dw4DK1WZsvpTFyra9tdUkBxJDAYcj5B66eHLPr9zGiEp0emCquYJDKSW2J72
rwUWo5MfWliN0rf5q29dR5HukBY5ES9DRX+X+nXbMihyHSZ9yL7/x4w/sixf
ASd7zolKJYBxV2FTc34SGdZs5Zm/ZPAfDKE2sQ==
            "], "Children" -> CompressedData["
1:eJwdiXeYDwQAQN939opsZZaV2VGXsinZ4y5khLvcyO5nnHN3HM6okK3sncqq
jJItsvfehIyQPes5/njv+973ikR0D40KAnqmT1FoeGzNQCA8LixDStTr1isy
OjIQHBLz/CenEPSCVKQmDbretKTjdYqSnnVmZq0ZWGNGMvG/q/3P383CS2Ql
G6+yypfJzlN/84k5eIVfzUkuHrvSR+YmDyt8aF4emI/7Lveey8xPAQpSiLu+
xh1/8baFKcLP3vIn/3WpxSjOTZd4wxL0I56SvEEpFnvdvpSmDGUpx4fU5R/L
U5NavMkirxlMBSryFm9z1fe44kJDeIdK/Ohl3+Vvf/CS33vRylRhgVWpxgWr
U4Pv/Mv5nneetXmfc37AWed6xjmetg6nnG096nPSJjSgIY2ZZSNmesIZHne6
x5zmUZvSjKmGEsYRP6IFU2zOZA/7rYdsyce0ojVtiCKatnxCR77xoJNsx0QP
2J79dmCf4UQwwU8Z717HGclY9zjG3cbwOaP9jK/tRGe6MMqujHSXI9xpN7rz
lT340h1+YYDh9mSY2+1Fb4bahyFuM5atJhvHYP90kAkMtD9JbjGRzQ7wDweQ
RH8HMohNJjqYBDeazAbjfQbXnhLW
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 2, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 4,
              3, 2, 4, 3, 4, 4, 4, 2, 3, 2, 3, 3, 4, 3, 3, 3, 2, 2, 2, 3, 4, 
             1, 4, 3, 3, 3, 2, 3, 2, 4, 3, 3, 4, 3, 3, 3, 4, 3, 3, 4, 3, 2, 3,
              3, 2, 2, 2, 2, 3, 4, 4, 3, 4, 4, 3, 2, 2, 2, 3, 4, 2, 4, 2, 2, 
             3, 3, 3, 3, 2, 3, 4, 4, 4, 3, 4, 3, 2, 3, 2, 4, 4, 2, 3, 3, 2, 3,
              4, 4, 4, 3, 4, 3, 2, 4, 3, 2, 2, 4, 2, 4, 3, 3, 2, 3, 3, 4, 3, 
             2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4}], "RootIndex" -> 1, 
           "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{3, 52, 4, 47, 2, 14, 53, 5, 41, 8, 3, 39, 4, 
             52, 3, 5, 21, 5, 52, 53, 39, 27, 22, 55, 53, 52, 3, 53, 54, 5, 
             38, 1, 41, 29, 4, 2, 3, 3, 3, 31, 1, 15, 4, 34, 30, 10, 53, 53, 
             54, 31, 34, 47, 5, 1, 34, 4, 46, 35, 21, 52, 5, 55, 4, 8, 2, 33, 
             35, 41, 55, 2, 53, 4, 54, 52, 6, 53, 53, 20, 54, 54, 31, 54, 54, 
             52, 54, 3, 31, 55, 53, 8, 52, 53, 54, 23, 34, 53, 54, 36, 53, 53,
              4, 54, 55, 3, 5, 55, 17, 47, 3, 55, 1, 1, 55, 54, 2, 17, 1, 52, 
             45, 23, 55, 53, 53, 16}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJxlUW1UkwUUfpsiI0dgR/lQ+QrFWR0cBNv40DvxxFlMkEwJUjmToshU5slq
mOSkDgdRcEJ6Jp7j2YB0JG58ZE4Q7mDAXiLdEIHNEV/yMeBYc4oQU2n+2P70
457nx733uc/z3KCM7J2ZrxEEcdxeZGSZT3JxJQ53Tx77OIxEoao5TbunF1Uv
q4Tb2ypALAgWiCfu43zJrkNf8oaBXUzmDl4hkZC4ZJZvGAFJy+7FotZaMCDd
NGqRg+Tslr+pYb0oeJk47t6hAP3jlK6Hiz3AP00znBVpkRHxutuRjROY9XRx
ZI5iBkNwVeXdE3VQEDjct/FFI4jZnH6/cwNgCOJtTvpA4+QRD2mtHrpakP8S
7ZkV1gPCC75LW2/rMDD7MJl0sh3VC4ztigg7VpBvu9nvJ//akR9w3QbUi9do
5dYpnF9X8a3C9XckNvzxjy1+B9C90g75/nQcpekPl9lYVyH58p+D8a5KoCeY
xAlxeUhf+YnREKeGrN6cjkhKN3IvVX9/90on0vmb3vU1qJBKDaXMrpdDwSVZ
uJedJ5AsfC4fqYHhlZ8dHj89ihZraW7FbJPTn760aLbg1C3Qa5uMq6rtOaTM
KXcMaZDfwLNp6juRnWaJOy+sA8+JN+WuIjk48lf5M6djctpAlBFTdH/ttLNf
Y0rwfnXHoduBRFNJr3a8BlIPWBIrjSSqZQ2ym3bfnvlnQqbnXDiW2OC5Mfse
8dZ++bODteBpMK/994sb/+ORPD2fc2GfEtRLF643ZOhRJR470x3ej3JeBI1m
nQH9MiZv1M5TsKXiK/d1BEff+N4TXTyJZpG8LDT1Bqj2FgcxykuR9PLWhc9I
nX8j+Qe+2dXZCAIuZfOYYgoYiuZN3EoNSNf8kB51ZAiES/bWUZhG4OfG1J67
psXknK+fR6X3gyQl39QSoQNHTuapR0c9fe8ge8mJ6O8m3+E4/BCsras7D/6G
/IGLIcBE5BQW/kXMTyJ19ZPPj00oQLDm8k5u1S3g9lUxB8c7UNDTFVy/TY3i
DyMTS40tMC+MvffGo2YUhy3kaSVt6ONijb65vxp8Rvd8VNnUB/ypok9Dm9VI
tbHGXukRR+2eDvAeQLV/fZm/Wytmbe17rFxe4/wfN265TG+fE6QdvfNzoQYZ
EyXS9hcPUFW8uE1tR1GPO+tkUydKn4neTwowozSqkK20tQI1O3PVjynVQN6j
NXBSy5AIkfl1LVx1+nCgWsdeMehxGzkmD95MXjuKKH6srlgNJj/Yl03mIfwH
BboKkw==
            "], "Children" -> CompressedData["
1:eJwdkVOQEAAABXeybdu2bXfZXXWZl/GXbdu2bdu2bWO7+tg3s/M+N2WLLgGt
QwHdI4RMQGDvksHBgX1rRQyRip17BLUJCs6Zr+2/f0AIof4TmjCEJTNZCMdZ
IxGZ8JwxAqeNyCn1pFE4YXRiEJXj/jEavz1mTGKRhKPG5oiJOWwcDhmXeMTn
oL88YAL2m5B9JmKvP93jD3eblF1+NxnJScE3U5KaNKRip1/d4RfTkpFMfDYd
n0zPRzPwwe2+d5vv3GpWslGXLWZns3nZ5FtzkJNcvHGjudlgHtb72nXmIz8F
KEht1lqIwlRmja9cbRFW+dKiFKM4JVjpC0tTkhU+txTPXG4ZylKOZT51qU8s
TwWWWJHFVmKRj11oFRb4yKpUozo1mO9Da/LAeQYw11rM8b6zvWcd7jrLetSn
ATNtSjMaMsNGTLcx02zCVO84xeZMtg2TvG0gLWhJKybamgneMoibjveG42xL
O67bnmsG04GxdmSMV+3EFTvThdFetivdGOUlR3rR7vRghD3pRW/6hLQdbl+G
2Z+h9mOIFxzseQd5zoH+BUgiAt4=
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 3, 3, 2, 4, 3, 2, 3, 3, 4, 3, 3,
              3, 2, 3, 4, 3, 3, 4, 4, 2, 4, 2, 4, 4, 2, 4, 3, 4, 3, 2, 4, 2, 
             2, 3, 3, 4, 2, 2, 4, 3, 4, 1, 4, 2, 3, 3, 3, 4, 3, 3, 2, 3, 3, 4,
              4, 2, 2, 4, 3, 2, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 2, 2, 3, 2, 3, 
             3, 3, 3, 4, 3, 3, 4, 4, 3, 3, 3, 2, 4, 3, 4, 3, 4, 3, 3, 4, 4, 2,
              4, 3, 2, 3, 3, 2, 3, 3, 1, 4, 3, 3, 3, 4, 3, 2, 3, 3, 4, 4, 3, 
             3, 3, 3, 3, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{55, 10, 31, 54, 17, 31, 5, 38, 40, 55, 38, 4,
              17, 5, 53, 29, 55, 53, 2, 41, 31, 54, 4, 5, 53, 52, 4, 2, 54, 2,
              54, 55, 54, 52, 1, 2, 52, 1, 5, 3, 52, 3, 55, 3, 1, 1, 5, 2, 52,
              53, 55, 4, 5, 5, 5, 3, 52, 52, 55, 1, 53, 47, 55, 3, 54, 55, 5, 
             55, 1, 4, 15, 52, 5, 10, 6, 1, 4, 14, 2, 52, 54, 13, 34, 54, 52, 
             52, 50, 40, 2, 54, 5, 53, 55, 29, 8, 34, 4, 54, 29, 53, 53, 5, 
             50, 52, 3, 38, 4, 55}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJw9Un1Q0gcYpk86W4tqGfYhWql4uzMu9eTSehGvMi/L2lrMthub4VltyzLr
59QOzDPSLLSPs6ygUqNuWbgzWLa9gCSQGpgSrFoCBQHpBqN2ujT384/84733
j/d53vee53kjv9u7VTCJQqF8T5Za47VBqgbNp6rfio/9ChGLuPqPd2qAiMuM
L+lxAm94Q9/mo21gn2NgVjnaQfWDteQm9Q4K6R1Tcypygc8r1RLzHTDD5VN0
HelGceZY2DlGDshq0myOsV4QvxfceDyrHWSDu7LCFzxDWrnv23kDGsi61PV8
HfUWmCVOwTXmA+T9vOGAd40RDaKhfy1cNdRpto1VaxXA/tLPPUO0gDxhcYWP
50ViWp6S/aIb8kKOR0kjrUgJGQiLumdAOyOyV5akR3ZhUpuryonpln8sQk8v
DvFTuSu2+FD99EKg+Z0WKNrylpb2P4E9mOMoffcQ6aenMKddcaOKCGSbqHpk
3nsickb3o1iRENNA4lUrYkxctR45l29cvNVjQzERnvQiWQPir3Pp+2PdaMhP
7JsSrUdD3ScdxgQT8L3ZL7dndqKt+gmnS0vywrcbM652oawpjj0n4w8wiEpW
LSZ9iNCnUhvJ/UP+VsbhQ/fRzzi8ekcR2Qui4obXG5B+ZOEv4zok+WOyZtJv
2+d3q0NH20CWXq+qJ3XTH302uo+8r26fPFJ+Voecs/XzigQdaHdErX7bqMH0
vuLEbN55jLAV0KbX6FD1/jqxUXcVzAXRs1t/NyEtnjebdaIB6exBxdQGFzAr
s970SzuRGJF4x3NibzyaUhGvRbUvtrys5BGybSN3qxb8DZ5awQxRrBxuf7Rs
tHWtDu0Hnxcqlr8CZmNk7UWrBjxC+fk4XitQ1i8ZKCZ5rJshpeM6/OGMv/Yt
tUBestzbudKKnrV7js0MMyDxnzU4PWhHym+1Fr3rNtDcc+VUoRxsbmqNuc2E
ZqOz/1JTB9K/SBkgHt7HD3/DChV65wa7wXOSr/tK3oQpyWXBxyGLOBLlfOG4
v/l2yf5AGSKHZpUGvwlM/JtwrylQ/Ew5cafuYIL0R24ZMguHci9zX03g6JVp
LZt8ShT+NGv3IdcwqE4uHFSSOXyYcyozrrE+NWJ6UerTJdCDHDeLH5ooAl6y
Ms3BMaPfKI1pFr+G/wHSgtC8
            "], "Children" -> CompressedData["
1:eJwdkMVuFAAABSfFWrS4S3GHIsWleHG2uG9h2yKBZCEhfAeuxd3d3d3d3d1t
WDjMSybvNnEpYwOpUcC46MgEghMSw+HgxOSYiCSNGR9KC4XjE9L//aMjRP0n
E5nJQkc6kZVs6BmjOW1zWhBDdnJwyvwUICcnzUVu8nDCP+YjluPm5Zi/Peov
j1iQQpTlsIU55E9LUYSiFKM4PyzJd0vwzYN+9YBf3G9p9lmGvcaxx8/uthzl
+WQFalGbilTio7uszE4/WIWqVKM6NXjvDt9Zk7du943bjKcOr21KXbZaj/q8
cosvTaAxm21AQ164yec24pkbfWoTnrjBZqz3set8ZEse2oYHJnLfVtyzNXdd
a1vWeMd2tGe1HVhlEiu97Qo7s9xRkWJd6Motu9GfZXanBzcN0IelJrPEniy2
F7254SKvu9C+LLAf873mPAeQ4UAGcdXBDGEoV5xrkDmOZLYpDGM4IdKZ5WVn
msoM05juJad50RFccKrnneI5J3vWSf4FeD/i3w==
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 3, 3, 2, 2, 4, 2, 3, 3, 3, 3, 4,
              4, 2, 2, 2, 2, 4, 3, 4, 3, 3, 3, 3, 2, 4, 2, 4, 4, 4, 4, 3, 4, 
             3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 2, 2, 4, 3, 2, 3, 3, 2, 4, 3, 3, 3,
              2, 4, 3, 3, 3, 2, 4, 3, 2, 2, 3, 3, 3, 4, 4, 3, 3, 3, 3, 4, 2, 
             4, 3, 3, 4, 2, 4, 3, 3, 4, 3, 4, 1, 4, 2, 2, 4, 3, 3, 2, 4, 2, 3,
              3, 3, 3, 2, 3, 4, 3, 2, 3, 3}], "RootIndex" -> 1, 
           "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{4, 4, 27, 52, 15, 53, 9, 55, 5, 55, 52, 53, 
             27, 8, 5, 3, 52, 52, 20, 1, 2, 53, 1, 52, 1, 1, 55, 2, 34, 47, 1,
              2, 1, 2, 8, 17, 53, 52, 41, 53, 2, 52, 2, 17, 53, 35, 5, 54, 53,
              5, 47, 27, 54, 55, 1, 20, 13, 54, 5, 3, 4, 55, 31, 53, 5, 33, 
             54, 14, 47, 52, 3, 54, 1, 4, 13, 4, 22, 23, 5, 55, 2, 35, 53, 3, 
             52, 53, 4, 4, 52, 15, 55, 2, 53, 1, 52, 1, 2}], 
           "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9UX0s1AEY/nFx94fqt1ahcEezqa1iky7FW0mZmI+y1MaOSjYrX31IXVHK
CXPM7JQkZKeGk9jF8t6du+PqyuE4RVxyF92uROoWqd8//PHu2bO97/M+7/O6
xidHnrUiCCKOKnJ7QI7fqS5k32Qm+lPIOXbkXzC3Hlgh4T9qM1UoKshOLZ6T
gqUxNO158QNgHPe3+d3WAfp1ukbyjAL1bxJo+67KwXLywLlckQYlb6fOslap
MIju6ZyuViJZORaRLpeAeMFvjXCkAzgN37ofueqQLR5UhJk+g1DENRdtUSJ/
Ld2P+KVA4RNfMtFrAPhsc7b07wfk2eX3ZgrrcCrdUDD/BZHns8tvyOkreEyW
J3jFKpFV3VJx43o/ZtRZu2VRGH55m1vUrAarxvtoZdRcT/jWv7z+pyBeqs8I
kddASv5L7S2qj0zWThvOtSI7QMrLpji/yafTRPFh9BiZmBGC8Jp1JYOUggMt
of19nBw53L3Nxc+6USCN+lcoawaxY1iovl2BvDDvcVWBGgW+HnasaSVGq813
lyid6ApzmX6DCjx/rrYQOa0QXqkeO0xvAsbMfYOM3obDtKKJeq4eOW1lMZlj
etD49u0uqlHjss/9eUlprYWdULX5Ruye1HEgNzTL3WnvcCowRKal7l/OiXhV
MthtEEHPz9uTTrkm4BHlwR2Uvihx9vT56n7grP9SbcifwBTfnYt3c2TIYOyw
nncXgmfEpdfZvBpkeMf8YdqP4rI/z+hDTHneD5hxYX5LdRtcyc3hzt5nZssL
5McvRl7cakTJFe5FWcMnFGutnCM1IxCk896YZ/8dJC6L28sH2iArKl0lOXhr
5Z+MTXMJmcZGmPIixRFPm4Fd8nB9pUmF5NBpJt+oXdmvWTqhO8AtQ6LKv0vj
3QusD5NZFaUCrFrg9bQMlSI76WOn08Qb6BkbNmuERsiYGxxaW6JED62tcVSF
MGywoX8+2osCyQXd4wUZiNrt+TaOu/ZnBTgl2nYqIGjay1SrkaGlIbB9NcWJ
Odd7zkmj+B+43qLR
            "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9llRXZW0iyM7JCUUgJX0q2z134ibuPO+efsffOCAnZW1ay
995b5vPlh/fu3r3YOQsDcyOARZFhBYJLUkOh4NKcqHBkLFhcMK8glJg0v+oH
w0T8pxrVqUEKqWhN/nrJWkQSRW260Z061OWPXfhtPX4ZR33KjOaiP21AQ2Jo
RGN+eMEmnLct7WjKOZtx1uacsQWnbUkrWnPKSk/63TZ884RfPe4X2xPLMT/b
gY4ctRNH/GSpH+3MB+N572HfmUBXDvnWg76xBwMYSE968doSe5PIK/vQl368
9IAv7E8SxT53v8/c5yAG89S9DqHIJw4nmaE8do+PHMZDd/vAXY5gJPedSho7
zWAs6RR6z1GMZgx33eEdt5vJNm+71Sy2OI5sxrPZSeQygYnccpM3DZDDRm+4
wTzWW+E6J5PPFNZ63TWWu9ppTOeaq5zBSmeywlnM5qrLvWKQyy7zH2uSzOo=

            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 4, 3, 4, 3, 2, 3, 2, 3, 3, 3, 3, 4,
              3, 4, 2, 4, 3, 4, 4, 4, 3, 4, 2, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 
             3, 2, 3, 4, 2, 3, 2, 3, 3, 4, 2, 3, 3, 2, 3, 2, 3, 3, 4, 3, 2, 3,
              2, 3, 3, 4, 3, 4, 2, 3, 4, 4, 3, 3, 3, 4, 4, 3, 3, 4, 2, 2, 2, 
             3, 4, 3, 3, 4, 3, 2, 3, 3, 3, 2, 3, 3, 2, 2, 2, 3, 3, 2, 3, 4}], 
           "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{3, 55, 55, 3, 34, 6, 52, 54, 30, 53, 38, 31, 
             6, 5, 54, 3, 4, 52, 55, 5, 55, 50, 52, 54, 52, 55, 55, 1, 54, 52,
              3, 2, 47, 34, 5, 29, 35, 55, 55, 54, 5, 4, 4, 17, 53, 55, 2, 5, 
             55, 48, 52, 46, 54, 35, 2, 30, 4, 15, 2, 31, 53, 3, 2, 3, 1, 3, 
             54, 13, 55, 16, 2, 54, 54, 1, 52, 53, 53, 13, 54, 27, 12, 5, 4, 
             6, 5, 55, 55, 2, 3, 54, 55, 4, 4, 47, 10, 53, 2, 4, 8}], 
           "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9Un1QiwEYHxdFFy/VlO9V171OFH0Y4dnCboeriShfp7oyckpx14fy5uN8
5/Jxh8iS9HYyM6UZebZrtbV1GrWxSobaJi6pSzlH3n/sj+ee+93z3O95nt/v
4SSlx6aMY7FYyUwIV68RiL5+huvhl8buR+cjK03bEh7UjLThJpm1wIaEbTrt
StHgoOibi+NrQRIx/2xA6C8QJb/c/2BYj+/8q+69OiYHmceXpbLmEhR/vUVL
igrBOOFUecHperCmeVaU+2jguoZ9YPaMLqTc/bqrtRYUZ9nLWsNagVDWe4Qd
7gJCdUMQuFCHbqmHJWNDr5AyFSuv8OzIs9w2+dU1oqi0pVvg+gj2eHuPJWma
MCNz4sj2ERsQJ2oSGjubUMZbV0o2tCC5pHZlRKIauctP5Ztn94G1WukVvOU9
xBe/8eo7r0bjSElhJnMXzY6o4XQpUfG3KnujphwyZpXGCqueAe9o7kmW/plz
3v+sUMapWh0GNH6piIl+bkDKZw3/Ib8dRhdvhnPlLTjwMNa7YYcJM6YL+nvG
2sCYbtfAyH3gmldUfT6oQCqxIs+gMODA0VZHfp4ZiMHelNHxDuAFCtOuRWmd
Oko+ZnL9O3TO+SHf+9fm8LVObDVb2cGkytkff5f8IG03o7jxlmqD1ACql/zE
EKZO6e9MKVzP+GWhIn2f9AMrSRcSw/isy5k33LO3FmVF+n1BRffwTIpe3M7o
RKeWyIMZTD+9ULnKtw/FA3NWGeRqcKtr2PGt9zmKOnal644jkHMPrlzA8O9p
Jly5nJ+Qzdm2t/mBHbh/LoabGB7J48lSwTQVElcndbj0FoNo2D9UcbUMnHwu
i/IvuPQAUdq9KUujAreZQ6m5NinE608L5QF2EE2NY7fRNrBuLXjkY5GDopLi
RuYw/0PVTHN80oNjZ9KgP9EOboNCy+soFXDPvh8gmb2Fu+POp2Q4UJfgbur1
toKMpZBKEqvB50eep5bx5b/PZAXn8u23aiAPcYKGltWjzuM3v9NVj+Ijxuhq
Rsfsb9e8ovpewD9fhqIW
            "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN8llOxNRPYqMrIjOzNfZI+vLvyUu48753+xN2XvkS1kZG/Z
K3uveH388N7duxefNT8wJwJYEBVWILgoNRQKLs6IDkda7sKcuTmhpOR5/352
mIj/VCCSimg2lahMOuOJ4oZViOGv0fzxulWpRpnXrE4NkrlqTWrx2x7U5oqN
iaUOdfllPX5anx9etgGXbEixjbjody/YhKZ057xxnLMVrWlGc74Zz1eLbMFZ
W3LGL562DW35bKGfbMdHT9mek3agI504YQLH/eAxEznqezvThSS6csR3duOt
h31jga89ZKkH7ckBe9GbPuy3Pyn0ZZ/92Osr9/jS3Q5glwNJZRA7HcMOB7Pd
Fw5hKNscxlaHs8XnjiCNzY4k31Hk+czRPHWTTxzLODb62A0GyOCRWUxgvbNY
50QymcRkHrrWB06hxDVOZRr3Xe10ZnDPVc5kpXdd4WyWe8cgt13mLZd60yWW
A5Y80Og=
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 3, 4, 2, 3, 3, 2, 2, 3, 3, 2, 3, 2,
              2, 4, 3, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 4, 3, 4, 3, 3, 3, 3, 3, 
             4, 4, 4, 3, 2, 3, 2, 4, 4, 3, 4, 2, 3, 3, 3, 4, 4, 3, 4, 3, 3, 3,
              3, 2, 3, 3, 4, 2, 4, 3, 2, 2, 3, 4, 3, 3, 4, 4, 2, 3, 3, 1, 3, 
             4, 4, 3, 2, 3, 3, 4, 3, 2, 4, 2, 4, 2, 4, 3, 3, 4, 3, 4, 3, 3, 3,
              4}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{30, 14, 35, 53, 3, 2, 55, 6, 55, 3, 47, 55, 
             19, 55, 55, 55, 38, 19, 3, 3, 13, 7, 15, 5, 13, 54, 41, 55, 53, 
             55, 41, 19, 55, 4, 52, 3, 20, 3, 55, 3, 27, 52, 2, 41, 5, 4, 2, 
             27, 47, 3, 53, 4, 52, 54, 55, 5, 15, 54, 55, 17, 4, 2, 1, 52, 30,
              17, 15, 54, 52, 52, 17, 8, 54, 54, 38, 38, 55, 10, 54, 55}], 
           "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9kVtM0nEcxak50ZdGF401cyGbE6/YXJpmX3xRSqt/3vZf6YYXDDWHkms2
zTCbs0ZeWBkyVJqX/Wkq5qUxw36KgOkgmDE1s8K8oc36z1m5mRov+nCezsP5
nHMYmcJE/iEKhYI5xX2ZuNqn0sOWNLkgN94OWLPpayxVDRG0zUUf5jgi5qNu
jYZZgPa7p8l8dhqJDYPRQf1WZM8/3t5K10MhoWDhKTbg+p6wiVjLSLOrKknQ
t4LVWx5MZ8+DQ0zIg/EB4KYpb39a4iMsjbkdmmdGEe43V01bfUjwQ0EoayrA
8ZOU1GaYQNZyLMTizMNsPupzNW1ohqlq+/CgF2T9RD5eMAjvFTxzTYAONJtE
uYH65sAPc1x3Oe/uwZFtPr/XkK4Gu4dcvbJuQZraF1nfV74BKZwLv5o0gMh0
WnOnZviASxxzQ9fJMqIZ7aOnO5xZII2erplFo4gmZIiKnH2I9kiaIPQjCFwL
fa44eTh78h5LphWR2tenmDMaxHVtZJeVaMHRtUG5phhD1V6eSFw6Bdgrf6/s
fBVU322c9N55C/SEVPes8n7k51UmkSzbEC8pbu/yfRXs74XP5RGpomlE3Akq
DswwIJ5a1dltm0JiP9ORhUId4jCklWO+ayCYIqMmis3IrltITm2bBYeU71bB
ImAY3+oKoDqQAOuNr3y4BETp4WY32giwn2WEPD75C86UixY7tnWAVa3VV5RN
ImX0Li5hGw72wxXrDXaPcairHxLn/tGC5p2nv3zpMxJfisuJjDUi5Ryevasw
IqtwRQ9/O6AuPCmmwNgNvKrIBM6/RSCrT1+cfGJHYrrRJasqB/Z/xQJlXy6Y
J8CvnSFtmh4Bkh+aQu2zIx7vaHHLxhD6D/VkUwo=
            "], "Children" -> CompressedData["
1:eJwdielSDgAAAHdCOiVEolJCRBTlphBF0dQT1EzqV2a+mmk8FSqVI7nlTqRE
jgiVMyoK6+PH7szOplQeKzsaAtSFBVVW0ZAfCFQcLw8PRlFtfVV1VSArt+bf
Lw0S8p8XzuC5MxlwFqHM5pnhRKBh/PGpkUTx23lEM4dfxjJtDHPpd8on/rTP
H/Y6n8cuII6FLKKIg8TT4y4euZgElvDQRLpdygMn7TKJ+yazjBRS2cY9l5PG
hHddwUrG3coq7riJ26azmjVksI5bfvem31zLmJ1mcsP1bCCLbL563S9ecyNX
/ewVP5nDR3PZzGU/uIVRLzniRYfdzg463MkF39vubvJ4Zz572ccezvvWcxZw
1iEL2c8ZD9DmG1t9bYuHOO2gzb6ymBKaPEyjRzhlKSd96Qn/AkRzqvs=
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 3, 4, 3, 4, 3, 2, 4, 2, 2, 4, 2,
              2, 3, 4, 3, 4, 4, 2, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 4, 4, 2, 2, 
             3, 3, 3, 3, 3, 4, 4, 4, 3, 2, 3, 4, 2, 2, 3, 3, 3, 3, 4, 3, 3, 3,
              3, 3, 4, 3, 2, 3, 2, 2, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 2, 4, 3, 
             4, 3, 2, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{53, 52, 49, 55, 1, 27, 1, 54, 48, 2, 55, 5, 
             14, 5, 53, 12, 6, 3, 38, 5, 55, 52, 53, 1, 54, 29, 2, 2, 55, 12, 
             5, 4, 2, 54, 55, 3, 3, 5, 2, 55, 54, 2, 55, 55, 55, 31, 3, 52, 
             55, 4, 31, 4, 2, 15, 3, 8, 12, 55, 4, 8, 31, 55, 52, 53, 31, 55, 
             2, 52, 17, 15, 1, 34, 1, 52, 38, 4, 2, 17, 3, 55, 5, 54, 3, 4, 6,
              54, 31, 15, 54, 21, 52, 55, 3, 34, 1, 4, 41, 38, 3, 8, 31, 27, 
             55, 55, 34, 52, 4, 53, 2, 5, 4, 2, 55, 3, 1, 54, 3, 53, 4, 48, 2,
              42, 53}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJw9kn1MU2cUxqtucN2o1AEF0cyqICCbY7MyiK6HmAwRmCkzmi4OU2GMKm6E
jww2gZWaaJEEjcsQK7DLqOwWBkWGrAnIKQT6wUfp+GwByYUupbg5WTrItcyx
u2Tyx5uTvCc55/c859mTlv1hxiYOh3OZfeKaziMr+9rQNrI1nlduRvLbnwPT
Bf3gEjYzZEMJVmk7Hk7segwJXneiigq7ILzR6BsqUWFQR+phn3vTaNunUVu+
boO46L1pR6cd6DqnyjdktGJhXX1X9Z4pZLj+9h6XAWSL8r6Pq+2o97K+n282
IhHs/vQrZwu45JTqoOQBMD3ZyztsOpT9Vk2RFaWgEwX67QqcRZInetTnHkYi
kbnYVmbEqsfqN/bbjShZzyRjWI7lKJUmqmkaxbVDc/HeWnApw8JuUA1oKvip
O4+t9HQ3/0KsFXkVZfV51yhYzpH7Cti5RIjCHJ0/C3T91TNXLk9C+IlDS2N/
LCJ1w82/U2REmn9INiIcAd3FEesgW5UB7tHbrB7r7ZxF9Vov2PKuflHMHUA9
R6F8PaUXJfEnX2lk/2XbPSVzBwZRvCaqm3BbkJLyyU+kg1iVsqD9PbsR4jKF
q96Zg5hQ+c07CXdNKDmVv3it1IpWn2P25vFJJBTzqvJWBP1+7ohzfQwIv2RH
7H++3sogSiMooJnv1nIjnMjZe55avXQfXvioK+leEvYMIJF7N+swq0u39t42
aqYTXuxVHr95PYg2YEzaPeVUkxEFk1pxhGpggyshsNT+y58mpNrL5meO6YEK
yg/4zNKLsqmz6ZpQE4SPezlnzQi6uVcltSHDyHO+RnnLKZBUP92pKBpFpbTr
wJjBgPQWviNWcBqorO1hjvIFLLzwz26/c60oqX5SSQeYgZoszjldocZwdcHq
D8GIUjxaJvqyDwTv2ooebe4H0lPTRbw9gUzFMiMtaUf6TIk2yN4GUSFuTkFu
PxLEwc0roRQITNf/puZbIcgnKeWD77s3ctj65GnSj897UMz1VASeGEC6s4fx
SOkN3pjdLy0NOezAuaSs+5Xl0/OzuHGF3ZBAvun7sikdiJ0tzniWb8Pf/+8h
PXV8PbFYA1WhwR73DhLEU9FZwyt6NIkjnitHG4HTlyx4K5KCm8+YjzTsHenI
1LmqZAtI6HbSkfkAZZ4G34feHSiIFtW2sH3y/uSWJjYvYoPMvGAdQvmEf2ip
bgaIk+NC/0Q7SLZd2WScn0LeX9pEC5s/V3mksDnJBsyR816GsxMbesPdiWG5
bM7F06nZJgUCWfd5zdbKZ/AvRZ8RYg==
            "], "Children" -> CompressedData["
1:eJwdiVN0EAAAAO/lZdu2bZtb9qplLtdvtm3btm3btl3X6uPuvXuXplW3wLbh
gJ5RwhQY3LdMaGhw/6CAsKjStVdIu5DQPAXb//sDwwj3n/BoBGpy0ohEIjJR
qEBFAojKH08Yjej8NjcxiMkvcxKL4/70mLGJQ1yOmpgkxCM+P0xAQhLx3SN+
87BfPWRSDvrFAyYjOZ9NwSdz8NGUpGK/H0xNGvaZlr2mIz3v3WMGMpKJzLxz
t2/Nwht3mZWdvjYb2dnhK7f70m2+MBfP3Woe8vLMfDy1EPnZYgE2+8SCPHaT
hSlCUTZajA0+cr3FKUFJ1lmWtZZijQ8tzQPLcN/VlmOV5VnpPVdYieVWozqV
WWYVllqVJd51sTVY5B0XetsF1mK+talDIEG0JJi61KMZzalPAxrThFs25Kbz
bMRcbzjHpsz2urO85kyvOsMWTPeK02xFay471Uu2IYS2XHSK7ZhsJzrTnkl2
YKIdmeAFx9uFrvSlH90YZ3fGet4x9mC0ofSkF6PsTR/OOdKzjvCMw+3PMAcy
1AEM8bSDPeUg/wLu3ADf
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 3, 4, 4, 2, 2, 2, 2, 4, 3, 3, 4, 3,
              2, 4, 3, 3, 2, 4, 3, 3, 2, 2, 3, 2, 4, 3, 3, 3, 4, 3, 3, 2, 4, 
             3, 4, 3, 3, 2, 3, 2, 3, 4, 4, 2, 4, 3, 4, 3, 2, 4, 4, 2, 2, 2, 1,
              3, 2, 3, 4, 4, 4, 3, 4, 2, 3, 4, 3, 3, 3, 4, 3, 3, 3, 2, 4, 3, 
             3, 3, 3, 3, 3, 2, 4, 4, 3, 3, 3, 3, 4, 3, 3, 3, 4, 3, 3, 4, 2, 3,
              3, 3, 4, 2, 3, 3, 2, 2, 3, 4, 2, 2, 4, 4, 3, 2, 3, 3, 1, 2, 3, 
             4, 2, 3, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{38, 31, 14, 15, 4, 55, 52, 23, 11, 52, 3, 54,
              1, 8, 1, 10, 5, 2, 4, 4, 1, 53, 4, 2, 41, 1, 54, 2, 3, 38, 17, 
             17, 55, 3, 55, 2, 5, 54, 3, 3, 52, 5, 5, 53, 31, 5, 54, 52, 2, 
             54}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJwBnQFi/iFib1JlAQAAADIAAACITf8ZmR9jP7iciFUMzMs/+A0U2cHoxj9Y
C5UNH/XPPzhL6Hs3GNa/QCk3Hkg+ur9QW99nSjfIvwga82Z65q4/eBIDoo3o
vz8QkANRy4LBvziEgnNO6+M/8HVod8IJ6r+QLJOO4JKeP7j7PQ6o27s/MCsH
OX180r/Qk431iIm5PxCrDGmLrMe/0NriJssy17+AlHHhYNy9P+BIE43EW9W/
IMy+6wit4D+w+OinV0DJv3AL1CphfrS/kAs4sIJ71j+YwVX/jcKxP+hAPkbU
HOo/2H8xsLwHHkBYowaZgnvWP7C3VU9Q6+M/gBjGBGOGZj9oQdbxrwuwP2hB
1vGvC7A/0AwfCu46zb8QFAiITuvjP5hwPAjyXcG/EPWJKaH7wj8gd8DYMP27
PzCmybgmNee/8DtFgss0zz9AEyCXcSnmvxiLOgZmsce/2CZp+J4h17+Yq05X
UiLAv+j+x0GGdqO/OFnwQpV4sj9QT8MBLv27PyDFwLZkA8S/MM97WZMMyb9Q
XXiVrgzWvyRT3YGnBAdAZj7JsQ==
            "], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {22, -26}, {
             6, -27}, {-1, -28}, {7, 8}, {-2, 9}, {-3, 21}, {10, -29}, {
             11, -30}, {12, -31}, {13, 14}, {-4, -32}, {15, -33}, {16, 17}, {
             18, -34}, {-5, -35}, {-6, 19}, {20, -36}, {-7, -37}, {-8, -38}, {
             23, 24}, {-9, 25}, {26, -39}, {-10, -40}, {27, -41}, {28, -42}, {
             29, -43}, {30, 31}, {-11, 32}, {-12, -44}, {33, 34}, {-13, 35}, {
             42, -45}, {36, 37}, {-14, 38}, {39, 40}, {-15, -46}, {
             41, -47}, {-16, -48}, {-17, -49}, {-18, 43}, {-19, 44}, {-20, 
             45}, {-21, 46}, {47, 48}, {-22, -50}, {-23, 49}, {-24, 
             50}, {-25, -51}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 3, 2, 4, 4, 3, 3, 3, 3, 3, 2, 3,
              3, 4, 2, 4, 3, 4, 3, 3, 4, 2, 3, 3, 2, 2, 3, 3, 3, 4, 3, 2, 2, 
             3, 2, 3, 3, 3, 2, 3, 4, 2, 2, 3, 4, 3, 3, 3, 2, 2}], "RootIndex" -> 
           1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{4, 10, 55, 4, 55, 52, 55, 2, 55, 9, 1, 55, 
             55, 4, 54, 52, 52, 4, 12, 15, 4, 2, 52, 15, 52, 5, 23, 3, 38, 53,
              3, 2, 55, 52, 1, 52, 52, 1, 47, 4, 55, 52, 1, 41, 4, 17, 54, 46,
              3, 55, 53, 17, 5, 5, 38, 52, 54, 41, 53, 1, 31, 53, 12, 52, 5, 
             2, 2, 53, 53, 8, 47, 1, 4, 3, 40, 5, 54, 3, 5, 53, 3, 53, 55, 53,
              52, 55, 55, 54, 52, 4, 54, 55, 3, 2, 52, 3, 54, 3, 53, 5, 3, 4, 
             53, 53, 27, 30, 54, 1, 1, 27, 55, 1, 6, 30, 40, 55, 17, 55, 3, 
             53, 55, 47}], "NominalSplits" -> {}, 
           "NumericalThresholds" -> CompressedData["
1:eJw9kmtMk3cUxgurs0tGUoRhLW4rgS2FGS2GbLVz/DvdWEds7LyEl81BIA46
m43qTORWKYKhMGAqhlWCUMNlbx1IU622Y3Kw9G5bOlqgrDC5bKVKtI0IY3HF
vftQPpwvJ3me8zvnPEmFJYe+iiKRSOVElWqHcs1fjIOrpWlFVq9DzCsdP2D2
BqBNiWy4ZwLYiH9CcX0IGJBVtSw3Qoj/AQt0ehB/uRYMFWsAi8k9z1oaBQp9
uajcfwOx6M6rksox4HlPh/eRRwHv8q0XNrhg9vRI2w3CT37SmU33qQBn9k+4
z5kBu2OIF/cZAS+pSfvz+/kNH6bnZf+0FRC2zVOjJHSCFIZ7kZjHeGlG21Jg
AiptbazY1Y8UnxwrbySbQVE2E84sM6CInvfgQj5FeRXYFtv82fNSRP033vgt
1QjSxqAyp7kbWKda3wgSftSLh97PtjtByhr8VLLahbDiO7FnCX5tVEZnBnkE
8Merj3urR4AnyKz1bH+EtOvK0gOGLsRLfr1xgeBlVlNVbQseJHyatX9nqhaE
eT5pJaEXXE/bflykRF7vgd17V2cAr4juoFDvIfZDzpPodxaRoMP+R9bmAcSu
nwkxCR5BkUZhi19A7MA28rLIBq6SRQP6uxe5zt0qa0+aBEstptZsvg3CpXZc
0VyNxDmv7Wq1GiHAid1CHV9GkXniF/l1K0sjMFuyJ9dN8Lp2UKZC2Toko5NH
zDvlG/flURp/L5wwA+PZwKa16ADi9uXvk1ZMIMWe8IP+53oUQAM/1TiuAXvp
rURHpwm8wPTNh/CN/RUZ4HgXawMZ+5jUSOQHK1cFHb1WwHs4VGG6G+EHfQfp
W6fhQieniM/Sg2Wy7h9xqh8C6sTJlPAgUqXGtZw5oobhDkfz/31x8i89/M6b
oL3/njuTagJZ2fR6VsKvEBIkKjP1FmD8/KK+yWQEWkya9lrwLpSqPyraKyHy
NJ3aPrdoAObKwKaGrUHEpNWl9554BAp33HC19T7I7OyVgjYbBHZ5fmz0e4DG
D3zz5kkLeJN0iq+JvlyQw9l9bw7E/TGffUdwsLc8SRh9dhuwo2phIsFPGX5+
xJkxirDDfImJ2JNUcLj2eKwMWG8nkK504sCtF53SNA0hb7Ky21mlRsMSXXYY
rwJx3v7P56ZuIeZTSUVFrhVJ27gfRuUNorWP00WeHU6E/xatT6qthFlRXE8X
zYBIdy+Nm/9Socj9ZtdvXm5dHUOR3IS4/phXUnxIdrF7rJVhA4rc8WqfxgT2
M7Kjlx5SuJG//AeAbg+3
            "], "Children" -> CompressedData["
1:eJwdiVN0EAAAAO8t27btWrZdy26r5VYt959t27Zt27Ztd60+7t67dxlCegR1
CAB6R49QUHD/8uHhwQMbxIiI6mF9QjuGhhcI7PTvD4og4D+RiMxBS1OGKEQl
GtEpQiAxiEkODhiL2GRlv3GIiyYmHvFJSCISsM8/7vW3e/zlbn+6yyQkJRnJ
+eFOU5CS7+4wFalJw3a/uc2vbvWLaflsOj6Zngxk5KOZ+OAW35uZLGz2nZvM
xkbfmp03bjAnuchNHvJTgLys97X5eOU6X7rWgqzxhat9biGeWZinrvKJRSnO
Sh9bjEeusATLLckyH1qKBy61LOUIowflqUBnulCRJXZgsZWoTBWqct9QqrHI
ey60OjW46wJrUovazLc986xDXepRnzuGEMRcb9ucBszxlg1pxGxv2pgbNqEp
zbjuLK850xbMsCWtuOp0W9OGtkzzisFcdqqXnOJF23HByZ53kuec6Fk70okJ
nnG8XRnnabtxyrGetDsnHGNPenHcgYTTmwGMtg+j7M9Ij9mXfozwqMM94jAP
O9RBDPGQg/0Lpvz+0Q==
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 2, 3, 2, 2, 4, 2, 3, 2, 3, 4, 1, 4,
              4, 3, 3, 4, 3, 2, 3, 3, 2, 2, 4, 3, 2, 3, 3, 3, 4, 3, 2, 3, 3, 
             2, 3, 4, 2, 2, 3, 3, 2, 3, 2, 4, 2, 3, 3, 4, 3, 4, 3, 3, 4, 3, 3,
              4, 3, 3, 2, 2, 3, 2, 2, 4, 2, 4, 3, 2, 2, 4, 4, 3, 3, 3, 4, 4, 
             2, 3, 3, 3, 3, 4, 3, 4, 2, 2, 3, 4, 4, 2, 3, 3, 3, 2, 3, 4, 2, 3,
              3, 2, 4, 3, 2, 4, 3, 3, 2, 2, 3, 4, 3, 4, 3, 3, 3, 4, 3, 3, 4, 
             4, 3, 4}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{5, 4, 54, 5, 38, 4, 43, 39, 20, 29, 52, 53, 
             1, 38, 3, 1, 53, 55, 55, 8, 55, 54, 53, 54, 16, 17, 53, 38, 52, 
             53, 17, 3, 5, 52, 2, 1, 2, 38, 41, 3, 48, 4, 55, 1, 53, 52, 2, 4,
              55, 2, 2, 38, 55, 27, 42, 54, 55, 8, 7, 54, 55, 31, 9, 53, 3, 
             54, 31, 55, 53, 38, 55, 16, 21, 53, 1, 10, 47, 53, 1, 52, 55, 21,
              1, 35, 5, 54, 5, 6, 35, 55, 52, 54, 54, 2, 5}], 
           "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJw9UmtMkgEUpey1mflVupzZRllqUqmUlmXd+VhzlQna0pZFmiHNGvSa2jRQ
M2tGc7IZaSZp6ac1pZJEzV0wCdQWmJnEfCC+yLJoWSNNF/3QH3dnu3e75+yc
sz6BG3VmAYVCYdmGOGkXvnamCQQTxYM7LveC5EaQ+KhyHPUpW0pdbXuKZ/v3
6f2R4PJ0YZ6P7Z66yq5MaEbgzUaMOLypAfLxboLj1wWMB2/79y+tBfmKS3SM
KgTdhJLMeKJGXn8/GcRQIefLfVJyJxPI8cHMw1+GYJc7L14xY0Bqp1uNk6ke
OHXWh1yDFnl7soylLXK0ZP5y5ow0A+PGZr/I3g6U0+l5pZ9NKPV2GEmmDYNk
rCi4m2ZEUuipyI6uB825NvfAqUcgnoopSV7zAqkJtXtachJBsI/vWKdXoSWE
yoy3VyIn+OOPWnspCOzTKy9uHkXi94XCxqUvMT9lecZnvgJj64cqJ5NkaBUV
eBy7PQCUrcwLPl6K+X+Mam+3xOQq4A1fCbPz60a9e9Wjd/zncGr4aYiCrUYi
705GoL4DYzed3dDtNg66l02qojoDWC05ytOhIiQdyvMqpluA8JOFpYVkoUbk
8SGOqQSxgmwesPFSiJlFMzac80s6xIrx+ZML1oDZVc6018AwnOBqshCWrdZp
D/aNouB3W5mHth3zd0YHn7flkc/0jxB9UgK5cZjN9xoD34jKcO+QBhQzTbVf
udWwzPUn++poDVgnXVm8jlbU+CwP+O+DxeokvxymA93inPJruc1gdDJpn31r
R5c/jSulvq/m9bj4hy6hlQpxTgfHsm5vx3MbX/2Be0yWDKkVV4Q/J9+CTiT8
dfNWA8hnq1IPtZaDvvcv665Wg5Zn0eeknXqUl9HOw4QaJVGOgiM9WqQ0F3Sr
R6QQ3na8Mz39Pc71SddjCizzHARqsdlCFBpBgn2JQWmtYBaQRdtiZfO9I86o
0pShcvDKHkuK0L1B4nuuShTzEcXHzPSj243AYUfK3tF7MLawJO56cRf8A9cS
l5k=
            "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9llb1XVoQoIyNkldUw+5KVdLkLP3H3cef8N/YqskWIUrL3
yt6yySbPxw/v3b17UYtXBJaEASvDQwrkrU4OBvPWZEaEIm35qvyl+cH4hGX/
fm6IsP/Uoz4N0GQact0/jqYR4URwzQSu2pgmNKUZdV6xOS347XB+edmWtKI1
bRjGJdvSjk505qcX/WF7vtuBjlzwm+eN5JyDOGsXuvLVbvSmD905Yw9O+8Uo
PtuTXlQZzSlrrbQvMcQSxycr7Ed/PnrSD5b73jIHMJB3nvCtxx1MPEMo9Y3H
HMpRX3vEV5ZY42FHcMiRFDuKRF560BcecAz7Hcs+xzGe5+41iT0+c7cTmMgk
dplCKpMpcgo7feoO00hnEYVOZRpzmcd0ZvDEAmey3cdmMYsMHhngoZk8cJv3
nc09tzqHLd51s3ecz0I2uYCNVpvNbTd4yxxuut5c1nnDtf4Fj/PI7A==
            "], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 2, 3, 4, 3, 3, 2, 4, 3, 4, 4, 3, 3,
              2, 3, 2, 2, 4, 4, 2, 3, 2, 3, 2, 3, 2, 3, 3, 4, 4, 3, 4, 2, 4, 
             2, 3, 3, 3, 3, 2, 4, 4, 2, 3, 2, 4, 3, 4, 4, 3, 4, 2, 3, 3, 2, 2,
              2, 4, 3, 3, 4, 3, 1, 3, 4, 4, 2, 3, 3, 3, 2, 3, 3, 3, 4, 4, 4, 
             3, 3, 4, 3, 4, 3, 3, 2, 3, 3, 3, 4, 2, 3, 3, 4, 3, 3, 3}], 
           "RootIndex" -> 1, "NominalDimension" -> 0|>]}, "Processor" -> 
       MachineLearning`MLProcessor[
        "FirstValues", <|"Info" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+JZM0HgpD0hOkWRO/KE07RRmk40Axh8wEkDAI1Pnak=

             "], "Type" -> "NumericalVector"|>, "Key" -> "(f1f5(f2f3f4f6))", 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], 
       "OOBConfusionMatrix" -> {{0.25001021205676266`, 0.24466636283924065`, 
        0.07787431932519003, 0.2288111302475244}, {0.2499965959810791, 
        0.24734484146338212`, 0.18517281153751422`, 0.24376578027132723`}, {
        0.2499965959810791, 0.2606572799982943, 0.500569413589354, 
        0.28862973034273565`}, {0.2499965959810791, 0.2473315156990829, 
        0.23638345554794168`, 0.23879335913841276`}}, "Calibrator" -> 
       MachineLearning`CalibratorFunction[
        "TemperatureScaling", <|"Theta" -> 1.876569953287592|>], "Method" -> 
       "RandomForest", "PostProcessor" -> 
       MachineLearning`MLProcessor["Identity"], 
       "Options" -> <|
        "FeatureFraction" -> <|
          "Value" -> 55^Rational[-1, 2], "Options" -> <||>|>, 
         "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
         "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
         "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
         "Implementation" -> <|"Value" -> "Default", "Options" -> <||>|>|>|>, 
     "TrainingInformation" -> <|
      "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
       Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
       "PreprocessingTime" -> 0.188068`5.725859899595604, "LossName" -> 
       "MeanCrossEntropy", "BestModelInformation" -> 
       Dataset[<|
         "MeanCrossEntropy" -> 
          Around[1.1130065344199256`, 0.029329806949628636`], "Accuracy" -> 
          Around[0.6086873292218694, 0.04068197879930933], "EvaluationTime" -> 
          0.000022348252015324235`, "TestSize" -> 283, "ModelMemory" -> 
          255864, "ModelUtility" -> -0.8055660938413114, "TrainingSize" -> 
          1131, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
          2329856, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
            Around[1.1130065344199256`, 0.020739305384974736`]}, 
          "AccuracyHistory" -> {
            Around[0.6086873292218694, 0.028766503081078986`]}, 
          "Configuration" -> {
           "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
            Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
            0.5, "Implementation" -> Automatic}|>, 
         TypeSystem`Struct[{
          "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
           "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
           "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
           "AccuracyHistory", "Configuration"}, {
          TypeSystem`AnyType, TypeSystem`AnyType, 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Tuple[{
             TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType}]}], <||>], "Configurations" -> 
       Dataset[<|<|
           "Value" -> "RandomForest", 
            "Options" -> <|
             "FeatureFraction" -> <|"Value" -> Automatic|>, 
              "LeafSize" -> <|"Value" -> Automatic|>, 
              "TreeNumber" -> <|"Value" -> Automatic|>, 
              "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
              "Implementation" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.247202291168413, 0.015647389189071638`], "Accuracy" -> 
               Around[0.5586634981337953, 0.049448528868826495`], 
               "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 200, 
               "ModelMemory" -> 85984, "ModelUtility" -> -0.91661399140447, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.01, "TrainingMemory" -> 
               156848, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[1.247202291168413, 0.011064375003457626`]}, 
               "AccuracyHistory" -> {
                 Around[0.5586634981337953, 0.03496539008284597]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.1415842296829957`, 0.021021716318006495`], "Accuracy" -> 
               Around[0.6077523232657355, 0.019810981149131546`], 
               "EvaluationTime" -> 0.000019952623149688793`, "TestSize" -> 
               600, "ModelMemory" -> 93741.33333333333, 
               "ModelUtility" -> -0.8292999761979101, "TrainingSize" -> 50, 
               "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
               234074.66666666666`, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.1251583479796599`, 0.027407086320993274`], 
                 Around[1.1580101113863317`, 0.014941724817118411`]}, 
               "AccuracyHistory" -> {
                 Around[0.6094760748897424, 0.027803841835105467`], 
                 Around[0.6060285716417285, 0.028018804642146074`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.126797176194803, 0.0074431792679123775`], "Accuracy" -> 
               Around[0.603791266606859, 0.010218126170371303`], 
               "EvaluationTime" -> 0.000019120344713572696`, "TestSize" -> 
               2264, "ModelMemory" -> 135322.66666666666`, 
               "ModelUtility" -> -0.8139160472791294, "TrainingSize" -> 250, 
               "TrainingTime" -> 0.08628854898161875, "TrainingMemory" -> 
               654957.3333333333, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.1240179948230564`, 0.01012865668847846], 
                 Around[1.1295763575665494`, 0.009437795206031423]}, 
               "AccuracyHistory" -> {
                 Around[0.6042890330553146, 0.014578271853215924`], 
                 Around[0.6032935001584034, 0.014292872470478342`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.1130065344199256`, 0.029329806949628636`], "Accuracy" -> 
               Around[0.6086873292218694, 0.04068197879930933], 
               "EvaluationTime" -> 0.000022348252015324235`, "TestSize" -> 
               283, "ModelMemory" -> 255864, 
               "ModelUtility" -> -0.8055660938413114, "TrainingSize" -> 1131, 
               "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
               2329856, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.1130065344199256`, 0.020739305384974736`]}, 
               "AccuracyHistory" -> {
                 Around[0.6086873292218694, 0.028766503081078986`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.000022348252015324235`, "MeanCrossEntropy" -> 
              Around[1.1130065344199256`, 0.029329806949628636`], 
              "ModelMemory" -> 255864, "TrainingMemory" -> 2329856, 
              "TrainingTime" -> 1.003085874359093|>, "Index" -> 1|>|>, 
         TypeSystem`Assoc[
          TypeSystem`Struct[{"Value", "Options"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5]}], 
          
          TypeSystem`Struct[{
           "Experiments", "PredictedPerformances", "Index"}, {
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
               "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory",
                "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
             4], 
            
            TypeSystem`Struct[{
             "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
              "TrainingMemory", "TrainingTime"}, {
              TypeSystem`Atom[Real], TypeSystem`AnyType, 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real]}], 
            TypeSystem`Atom[Integer]}], 1], <||>], "MaxTrainingSize" -> 1414, 
       "PreprocessorEvaluationTime" -> 2.10546875*^-6, "PreprocessorMemory" -> 
       162512, "InputDimension" -> 55, "OutputDimension" -> 1, 
       "BaselineLogProbability" -> -0.9603219837180875, "VariableBudget" -> 
       True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
       False, "NaturalStop" -> True, "AbortStop" -> False, 
       "LastReportingTime" -> 3.879358295348941`16.34133488180639*^9, 
       "RoundPartitioning" -> 
       Dataset[{<|
          "TrainingSizes" -> 10, "TimeBudgets" -> 0.008024686994872745, 
           "ElapsedTimes" -> 0.01473, "ExperimentCounts" -> 1|>, <|
          "TrainingSizes" -> 50, "TimeBudgets" -> 0.04012343497436372, 
           "ElapsedTimes" -> 0.060896000000000006`, "ExperimentCounts" -> 
           2|>, <|"TrainingSizes" -> 250, "TimeBudgets" -> 
           0.20061717487181863`, "ElapsedTimes" -> 0.250929, 
           "ExperimentCounts" -> 2|>, <|
          "TrainingSizes" -> 1131, "TimeBudgets" -> 1.003085874359093, 
           "ElapsedTimes" -> 0.775341, "ExperimentCounts" -> 1|>}, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
            "ExperimentCounts"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
     None, "Log" -> <|
      "Example" -> 
       MachineLearning`MLDataset[<|
         "f1" -> <|
           "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"Materials"}, 
            "ID" -> 2846111867015398573|>, 
          "f2" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {20.857}, "ID" -> 
            41728420326286313|>, 
          "f3" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {24.308}, "ID" -> 
            1436697572522429983|>, 
          "f4" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {227.299}, "ID" -> 
            536027689597629633|>, 
          "f5" -> <|
           "Type" -> "Text", "Weight" -> 1, "Values" -> {"Estimated data"}, 
            "ID" -> 5753609278033805624|>, 
          "f6" -> <|
           "Type" -> "Numerical", "Weight" -> 1, 
            "Values" -> {106.653196777609}, "ID" -> 8080186329754682489|>|>, <|
         "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0,
           "RawExample" -> False|>], "TrainingTime" -> 2.432032, 
       "MaxTrainingMemory" -> 3307968, "DataMemory" -> 1910920, 
       "FunctionMemory" -> 493880, "LanguageVersion" -> {13.1, 0}, "Date" -> 
       DateObject[{2022, 12, 6, 23, 31, 36.66302`8.316803215071124}, 
         "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, "ProcessorType" -> 
       "ARM64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
       "Evaluations" -> {}|>|>]]]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, 3.8788070723199997`*^9, 
   3.8788071152477303`*^9, 3.878811629852172*^9, 3.879149119975829*^9, 
   3.879325483862817*^9, 3.879333011347499*^9, {3.879354686929783*^9, 
   3.879354697354436*^9}},
 CellLabel->
  "Out[525]=",ExpressionUUID->"27c452b9-df69-43e4-8b3a-9c241ef5ecca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"cm", " ", "=", 
    RowBox[{"ClassifierMeasurements", "[", 
     RowBox[{"cRisk", ",", "testset"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Test", " ", "our", " ", "classifier", " ", "on", " ", "the", " ", "test", 
    " ", "set"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<The accuracy is: \>\"", ",", 
    RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}], " ", "]"}], 
  RowBox[{"(*", 
   RowBox[{
   "Plot", " ", "the", " ", "accuracy", " ", "of", " ", "our", " ", "model"}],
    "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"AccuracyAss", " ", "=", " ", 
   RowBox[{"Append", "[", 
    RowBox[{"AccuracyAss", ",", " ", 
     RowBox[{"\"\<RandomForest\>\"", "->", 
      RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Plot", " ", "the", " ", "Confusion", " ", "Matrix"}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.878619179671941*^9, 3.8786191833045883`*^9}, {
   3.8786192222213593`*^9, 3.878619249704307*^9}, {3.878619342065884*^9, 
   3.878619346687873*^9}, {3.878619378625424*^9, 3.8786193862338676`*^9}, 
   3.878805729554159*^9, 3.878805819596631*^9, {3.878806143346759*^9, 
   3.878806195391272*^9}, {3.878806763106118*^9, 3.878806811062291*^9}, {
   3.878806841172628*^9, 3.878806863962813*^9}, 3.878807078662706*^9, 
   3.878807117804838*^9},
 CellLabel->
  "In[526]:=",ExpressionUUID->"99020af7-66ff-4247-b63c-5a1edaef53dc"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"The accuracy is: \"\>", "\[InvisibleSpace]", 
   "0.6129943502824858`"}],
  SequenceForm["The accuracy is: ", 0.6129943502824858],
  Editable->False]], "Print",
 CellChangeTimes->{3.878806864557898*^9, 3.878807079067741*^9, 
  3.87880711843373*^9, 3.87881163245848*^9, 3.879149124769641*^9, 
  3.879161018527553*^9, 3.87932548708288*^9, 3.879333014353814*^9, 
  3.87935470072289*^9},
 CellLabel->
  "During evaluation of \
In[526]:=",ExpressionUUID->"9d2feec3-b4d5-45f8-9920-8f14c30d5554"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBghWIQGwI+2BNLe9dc7Fwq8c7eI3vm3G0z3thvaLwfb5L0
nGj95NLdzNPdP4q+sZ+vHbFqQtATewOr5X75okdobi+Mflglss794S17BhRA
O/ta+Dcsv/z3jX1yx+qj8z1e2EtPe3NDef5NmvuTWvELAID8f2w=
   "], {{0, 0}, {5, 5}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.002824858757062147`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "B", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.002824858757062147}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["56", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "56", "\" examples of \"", "\"C\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.15819209039548024`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{56, " examples of ", "C", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.15819209039548024`}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["217", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "217", "\" examples of \"", "\"D\"", "\" correctly classified\""},
             "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.6129943502824858`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7600700525394046`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{217, " examples of ", "D", " correctly classified"}], 
         Row[{"Precision = ", 0.6129943502824858}], 
         Row[{"Recall = ", 1.}], 
         Row[{"FScore = ", 0.7600700525394046}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["79", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "79", "\" examples of \"", "\"E\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.2231638418079096`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{79, " examples of ", "E", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.2231638418079096}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.002824858757062147`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "A", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.002824858757062147}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 4.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" of class \"", "\"B\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " of class ", "B"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 3.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "56", "\" example\"", "\"s\"", "\" of class \"", "\"C\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{56, " example", "s", " of class ", "C"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "217", "\" example\"", "\"s\"", "\" of class \"", "\"D\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{217, " example", "s", " of class ", "D"}], 
        Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "79", "\" example\"", "\"s\"", "\" of class \"", "\"E\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{79, " example", "s", " of class ", "E"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" of class \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " of class ", "A"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"B\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "B"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"C\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "C"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "354", "\" example\"", "\"s\"", "\" classified as \"", "\"D\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.6129943502824858`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{354, " example", "s", " classified as ", "D"}], 
        Row[{"Precision = ", 0.6129943502824858}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"E\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "E"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "A"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{4.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 0.], TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 0.], TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 0.], TraditionalForm]}}, {{4.5, 
       FormBox["1", TraditionalForm]}, {3.5, 
       FormBox["56", TraditionalForm]}, {2.5, 
       FormBox["217", TraditionalForm]}, {1.5, 
       FormBox["79", TraditionalForm]}, {0.5, 
       FormBox["1", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["354", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->13,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->228.,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{
  3.878619184460875*^9, 3.878619347255011*^9, 3.878619387156837*^9, 
   3.878715848704851*^9, {3.878715890521706*^9, 3.8787158953838463`*^9}, {
   3.878805538696899*^9, 3.878805553604134*^9}, 3.878806818221781*^9, 
   3.878806864604879*^9, 3.878807079111846*^9, 3.878807118477005*^9, 
   3.878811632503502*^9, 3.879149124818185*^9, 3.879161018757894*^9, 
   3.879325487125759*^9, 3.879333014394899*^9, 3.8793547007651587`*^9},
 CellLabel->
  "Out[529]=",ExpressionUUID->"c6e87123-6884-4bbc-a209-f8479dcf8fd4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["SupportVectorMachine", "Subsubsection",
 CellChangeTimes->{{3.878805416699134*^9, 3.878805417721744*^9}, {
  3.8788071343093243`*^9, 
  3.8788071382069473`*^9}},ExpressionUUID->"707033d6-fc97-4519-873d-\
86d56ff114d1"],

Cell["Train a classifier using a support vector machine", "Text",
 CellChangeTimes->{{3.878805704170437*^9, 3.8788057223306637`*^9}, {
  3.878805766632689*^9, 3.87880578974465*^9}, {3.8788071511686087`*^9, 
  3.878807154470745*^9}},ExpressionUUID->"072a572c-19ec-4e50-8160-\
bd35294883af"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cRisk", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainingset", "->", "\"\<Ratings\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<SupportVectorMachine\>\""}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Information", "[", "cRisk", "]"}]}], "Input",
 CellChangeTimes->{{3.8786185865414057`*^9, 3.878618597824006*^9}, {
   3.878618646892776*^9, 3.878618648994371*^9}, {3.878618877270843*^9, 
   3.878618880432907*^9}, {3.878618998083866*^9, 3.878619004451974*^9}, {
   3.8786191510115213`*^9, 3.878619159945651*^9}, {3.8786192237272882`*^9, 
   3.878619223941098*^9}, 3.8788071411539087`*^9},
 CellLabel->
  "In[530]:=",ExpressionUUID->"0ad5282a-88fd-4696-b81a-c71cc5893931"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"Nominal\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Text\"", 
                    ",", "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                    Annotation[#, 
                    
                    Short[{"Nominal", "Numerical", "Numerical", "Numerical", 
                    "Text", "Numerical"}, 10], "Tooltip"]& ], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"B\"", "\"C\"", "\"D\"", "\"E\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"Nominal\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Text\"", 
                    ",", "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                    Annotation[#, 
                    
                    Short[{"Nominal", "Numerical", "Numerical", "Numerical", 
                    "Text", "Numerical"}, 10], "Tooltip"]& ], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"B\"", "\"C\"", "\"D\"", "\"E\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["1414", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 1272600, 
              Dynamic[Typeset`embedState$$], Automatic]], StandardForm]], 
          ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           "Choose", ClassifierFunction, 1272600, 
            6420125018425373962666226766477588188488008592213082777280, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm, 
            ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
          "SummaryEmbedButton", ImageSize -> Inherited, 
          BaseStyle -> {"DialogStyle"}, Enabled -> Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 6420125018425373962666226766477588188488008592213082777280,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, {3.8788071459712963`*^9, 
   3.878807157009053*^9}, 3.878811636198832*^9, 3.8791492018173523`*^9, 
   3.879161026375566*^9, 3.8793254916927137`*^9, 3.8793330181206427`*^9, 
   3.879354706216084*^9},
 CellLabel->
  "Out[530]=",ExpressionUUID->"12288c2d-67d2-4c59-a005-68c44af668bf"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12],
         FrameMargins->{{10, 5}, {-4, 2}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.96, 0.96, 0.96],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Data type"], 
                  TextCell["Data type"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{
                  InterpretationBox[
                   Cell["Mixed"], 
                   TextCell["Mixed"]], 
                  StyleBox[
                   
                   TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]},
                 "RowDefault"],
                TagBox[
                 RowBox[{"{", 
                   
                   RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Text\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]],
               Annotation[#, 
                
                Short[{"Nominal", "Numerical", "Numerical", "Numerical", 
                  "Text", "Numerical"}, 10], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Classes"], 
                  TextCell["Classes"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{",", "\",\"", 
                InterpretationBox[
                 Cell["B"], 
                 TextCell["B"]], 
                InterpretationBox[
                 Cell["C"], 
                 TextCell["C"]], 
                InterpretationBox[
                 Cell["D"], 
                 TextCell["D"]], 
                InterpretationBox[
                 Cell["E"], 
                 TextCell["E"]]},
               "RowWithSeparators"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Accuracy"], 
                  TextCell["Accuracy"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{
                RowBox[{"(", 
                  InterpretationBox[
                   
                   TemplateBox[{"60.6", "2.0"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                   Around[60.6099222739597962573`3., 2.00320136308778185`3.]],
                   ")"}], "\"%\"", "percent", "\"Percent\""},
               "QuantityPostfix"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Method"], 
                  TextCell["Method"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                InterpretationBox[Cell[
                 "SupportVectorMachine",ExpressionUUID->
                  "cc1bd382-ca69-4138-a19f-076079a734f6"],
                 TextCell["SupportVectorMachine"]],
                StyleBox[
                 TagBox[
                  
                  GridBox[{{"\"KernelType\"", "\"RadialBasisFunction\""}, {
                    "\"GammaScalingParameter\"", "0.009015626168004075`"}, {
                    "\"SoftMarginParameter\"", "0.4`"}, {
                    "\"PolynomialDegree\"", "3"}, {
                    "\"BiasParameter\"", "1"}, {
                    "\"MulticlassStrategy\"", "\"OneVersusOne\""}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                   False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                   FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                 "Verdana", StripOnInput -> False]],
               Annotation[#, 
                Style[
                 
                 Grid[{{"KernelType", "RadialBasisFunction"}, {
                   "GammaScalingParameter", 0.009015626168004075}, {
                   "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                   "BiasParameter", 1}, {
                   "MulticlassStrategy", "OneVersusOne"}}, Alignment -> Left, 
                  Frame -> All, FrameStyle -> GrayLevel[0.84], 
                  Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Single evaluation time"], 
                  TextCell["Single evaluation time"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"3.95`", 
                
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}], "milliseconds per example", 
                FractionBox["\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Batch evaluation speed"], 
                  TextCell["Batch evaluation speed"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"14.1`", 
                
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}], "examples per millisecond", 
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"1.1434482023994907429`3.", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0483032040007377664`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "1.0468417943980152796`3.",
                   "\", \"", "1.2400546104009662063`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 1.0468417943980152796`3., 
                  ", ", 1.2400546104009662063`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Model memory"], 
                  TextCell["Model memory"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"1.27`", "\"MB\"", "megabytes", "\"Megabytes\""},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Training examples used"], 
                  TextCell["Training examples used"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"1414", "\"examples\"", "examples", "\"Examples\""},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Training time"], 
                  TextCell["Training time"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"3.31`", "\"s\"", "seconds", "\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.25490752953645723`}, {
                    3.912023005428146, 0.3158647652529874}, {
                    5.521460917862246, 0.13404843603409314`}, {
                    7.030857476116121, 0.1412105783766618}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.25490752953645723`}}, {{3.912023005428146, 
                    0.3158647652529874}}, {{5.521460917862246, 
                    0.13404843603409314`}}, {{7.030857476116121, 
                    0.1412105783766618}}}]}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.20967383416264765`}, {
                    2.302585092994046, 0.2981833789731263}, {
                    2.302585092994046, 0.2981833789731263}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, 0.2690889609775296}, {
                    3.912023005428146, 0.36055001684653926`}, {
                    3.912023005428146, 0.36055001684653926`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.521460917862246, 0.09088677313088947}, {
                    5.521460917862246, 0.17542399521557225`}, {
                    5.521460917862246, 0.17542399521557225`}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{7.030857476116121, 0.04698512422563771}, {
                    7.030857476116121, 0.22731711763995294`}, {
                    7.030857476116121, 
                    0.22731711763995294`}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {0.7586295071817292, 0.11982027645961603`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{0.7586295071817292, 7.254177846456518}, {
                    0.11982027645961603`, 0.3158647652529874}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.6094760748897424}, {
                    3.912023005428146, 0.6053970550702149}, {
                    5.521460917862246, 0.6060992227395979}, {
                    7.030857476116121, 0.6086873292218694}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.6094760748897424}}, {{3.912023005428146, 
                    0.6053970550702149}}, {{5.521460917862246, 
                    0.6060992227395979}}, {{7.030857476116121, 
                    0.6086873292218694}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {0.7586295071817292, 0.5846284790212801}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{0.7586295071817292, 7.254177846456518}, {
                    0.5846284790212801, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.25490752953645723`}, {
                    3.912023005428146, 0.3132916657754129}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.00009288110391137902}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.25592963409949}, {
                    3.912023005428146, 0.3513602528803901}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.02097370297590717}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.2799096307056217}, {
                    3.912023005428146, 0.33289863553511173`}, {
                    5.521460917862246, 0.13404843603409314`}, {
                    7.030857476116121, 0.14897182422706282`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.009015626168004075}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.27732338999310846`}, {
                    3.912023005428146, 0.3158647652529874}, {
                    5.521460917862246, 0.14720162693277353`}, {
                    7.030857476116121, 0.1412105783766618}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.002124330120261978}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.28362892416721086`}, {
                    3.912023005428146, 0.34978344850317267`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0025623678443745905`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.26491186042327797`}, {
                    5.521460917862246, 0.13962456681522625`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.02009336652753943}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.28485996194640034`}, {
                    3.912023005428146, 0.352325199058478}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.009616375252521653}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.27414543607878217`}, {
                    3.912023005428146, 0.3790375116720155}, {
                    5.521460917862246, 0.1463525952059948}, {
                    7.030857476116121, 0.15026678708773497`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.012635549525476825`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.28138605528540633`}, {
                    2.302585092994046, 0.28138605528540633`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.014218558865435826`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.2826388984054038}, {
                    5.521460917862246, 0.14189878637979678`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.018863208951362828`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.25490752953645723`}}, {{
                    3.912023005428146, 0.3132916657754129}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.00009288110391137902}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.25592963409949}}, {{
                    3.912023005428146, 0.3513602528803901}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.02097370297590717}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.2799096307056217}}, {{
                    3.912023005428146, 0.33289863553511173`}}, {{
                    5.521460917862246, 0.13404843603409314`}}, {{
                    7.030857476116121, 0.14897182422706282`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.009015626168004075}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.27732338999310846`}}, {{
                    3.912023005428146, 0.3158647652529874}}, {{
                    5.521460917862246, 0.14720162693277353`}}, {{
                    7.030857476116121, 0.1412105783766618}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.002124330120261978}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.28362892416721086`}}, {{
                    3.912023005428146, 0.34978344850317267`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0025623678443745905`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.26491186042327797`}}, {{
                    5.521460917862246, 0.13962456681522625`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.02009336652753943}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.28485996194640034`}}, {{
                    3.912023005428146, 0.352325199058478}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.009616375252521653}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.27414543607878217`}}, {{
                    3.912023005428146, 0.3790375116720155}}, {{
                    5.521460917862246, 0.1463525952059948}}, {{
                    7.030857476116121, 0.15026678708773497`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.012635549525476825`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.28138605528540633`}}, {{
                    2.302585092994046, 0.28138605528540633`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.014218558865435826`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.2826388984054038}}, {{
                    5.521460917862246, 0.14189878637979678`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.018863208951362828`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {0.7586295071817292, 0.11487665054510426`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{0.7586295071817292, 7.254177846456518}, {
                    0.11487665054510426`, 0.3790375116720155}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, -1], 
                    Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, 
                    Plus[1]], Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{330., {120., 126.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 11, FontFamily -> 
          ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[0.8], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Background->GrayLevel[1],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, {3.8788071459712963`*^9, 
   3.878807157009053*^9}, 3.878811636198832*^9, 3.8791492018173523`*^9, 
   3.879161026375566*^9, 3.8793254916927137`*^9, 3.8793330181206427`*^9, 
   3.8793547067346563`*^9},
 CellLabel->
  "Out[531]=",ExpressionUUID->"1be49ab5-133a-4fec-9ba6-e44e37ecf3e7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"cm", " ", "=", 
    RowBox[{"ClassifierMeasurements", "[", 
     RowBox[{"cRisk", ",", "testset"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Test", " ", "our", " ", "classifier", " ", "on", " ", "the", " ", "test", 
    " ", "set"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<The accuracy is: \>\"", ",", 
    RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}], " ", "]"}], 
  RowBox[{"(*", 
   RowBox[{
   "Plot", " ", "the", " ", "accuracy", " ", "of", " ", "our", " ", "model"}],
    "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"AccuracyAss", " ", "=", " ", 
   RowBox[{"Append", "[", 
    RowBox[{"AccuracyAss", ",", " ", 
     RowBox[{"\"\<SupportVectorMachine\>\"", "->", 
      RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Plot", " ", "the", " ", "Confusion", " ", "Matrix"}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.878619179671941*^9, 3.8786191833045883`*^9}, {
   3.8786192222213593`*^9, 3.878619249704307*^9}, {3.878619342065884*^9, 
   3.878619346687873*^9}, {3.878619378625424*^9, 3.8786193862338676`*^9}, 
   3.878805729554159*^9, 3.878805819596631*^9, {3.878806143346759*^9, 
   3.878806195391272*^9}, {3.878806763106118*^9, 3.878806811062291*^9}, {
   3.878806841172628*^9, 3.878806863962813*^9}, {3.8788071595906687`*^9, 
   3.8788071669267473`*^9}},
 CellLabel->
  "In[532]:=",ExpressionUUID->"21382602-c388-449e-99f7-a16ab30307db"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"The accuracy is: \"\>", "\[InvisibleSpace]", 
   "0.6129943502824858`"}],
  SequenceForm["The accuracy is: ", 0.6129943502824858],
  Editable->False]], "Print",
 CellChangeTimes->{3.878806864557898*^9, 3.8788071688546124`*^9, 
  3.87881163954853*^9, 3.8791492075417137`*^9, 3.879325494817211*^9, 
  3.879333021517658*^9, 3.879354710071299*^9},
 CellLabel->
  "During evaluation of \
In[532]:=",ExpressionUUID->"e8edba5e-4eda-424c-838b-6db9cbf77e70"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBghWIQGwI+2BNLe9dc7Fwq8c7eI3vm3G0z3thvaLwfb5L0
nGj95NLdzNPdP4q+sZ+vHbFqQtATewOr5X75okdobi+Mflglss794S17BhRA
O/ta+Dcsv/z3jX1yx+qj8z1e2EtPe3NDef5NmvuTWvELAID8f2w=
   "], {{0, 0}, {5, 5}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.002824858757062147`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "B", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.002824858757062147}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["56", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "56", "\" examples of \"", "\"C\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.15819209039548024`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{56, " examples of ", "C", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.15819209039548024`}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["217", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "217", "\" examples of \"", "\"D\"", "\" correctly classified\""},
             "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.6129943502824858`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7600700525394046`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{217, " examples of ", "D", " correctly classified"}], 
         Row[{"Precision = ", 0.6129943502824858}], 
         Row[{"Recall = ", 1.}], 
         Row[{"FScore = ", 0.7600700525394046}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["79", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "79", "\" examples of \"", "\"E\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.2231638418079096`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{79, " examples of ", "E", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.2231638418079096}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.002824858757062147`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "A", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.002824858757062147}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 4.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" of class \"", "\"B\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " of class ", "B"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 3.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "56", "\" example\"", "\"s\"", "\" of class \"", "\"C\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{56, " example", "s", " of class ", "C"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "217", "\" example\"", "\"s\"", "\" of class \"", "\"D\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{217, " example", "s", " of class ", "D"}], 
        Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "79", "\" example\"", "\"s\"", "\" of class \"", "\"E\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{79, " example", "s", " of class ", "E"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" of class \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " of class ", "A"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"B\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "B"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"C\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "C"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "354", "\" example\"", "\"s\"", "\" classified as \"", "\"D\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.6129943502824858`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{354, " example", "s", " classified as ", "D"}], 
        Row[{"Precision = ", 0.6129943502824858}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"E\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "E"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "A"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{4.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 0.], TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 0.], TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 0.], TraditionalForm]}}, {{4.5, 
       FormBox["1", TraditionalForm]}, {3.5, 
       FormBox["56", TraditionalForm]}, {2.5, 
       FormBox["217", TraditionalForm]}, {1.5, 
       FormBox["79", TraditionalForm]}, {0.5, 
       FormBox["1", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["354", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->13,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->228.,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{
  3.878619184460875*^9, 3.878619347255011*^9, 3.878619387156837*^9, 
   3.878715848704851*^9, {3.878715890521706*^9, 3.8787158953838463`*^9}, {
   3.878805538696899*^9, 3.878805553604134*^9}, 3.878806818221781*^9, 
   3.878806864604879*^9, 3.878807168896861*^9, 3.878811639592146*^9, 
   3.879149207590951*^9, 3.8793254948586063`*^9, 3.8793330215591373`*^9, 
   3.879354710115163*^9},
 CellLabel->
  "Out[535]=",ExpressionUUID->"6ed708d4-f91a-4b46-b795-48555a21a976"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Nearest Neighbors", "Subsubsection",
 CellChangeTimes->{{3.878805416699134*^9, 
  3.878805417721744*^9}},ExpressionUUID->"9942841c-f629-4f6a-b284-\
312b9ff53265"],

Cell["Train a classifier from nearest neighbor examples", "Text",
 CellChangeTimes->{{3.878805704170437*^9, 3.8788057223306637`*^9}, {
  3.878805766632689*^9, 
  3.87880578974465*^9}},ExpressionUUID->"5dfadb55-1804-475e-af67-\
fd5a3fa3ada6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cRisk", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainingset", "->", "\"\<Ratings\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<NearestNeighbors\>\""}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Information", "[", "cRisk", "]"}]}], "Input",
 CellChangeTimes->{{3.8786185865414057`*^9, 3.878618597824006*^9}, {
  3.878618646892776*^9, 3.878618648994371*^9}, {3.878618877270843*^9, 
  3.878618880432907*^9}, {3.878618998083866*^9, 3.878619004451974*^9}, {
  3.8786191510115213`*^9, 3.878619159945651*^9}, {3.8786192237272882`*^9, 
  3.878619223941098*^9}},
 CellLabel->
  "In[536]:=",ExpressionUUID->"81eb6b46-1115-4683-ad4f-4a7788f50766"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Text\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Nominal", "Numerical", "Numerical", "Numerical", 
                    "Text", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"B\"", "\"C\"", "\"D\"", "\"E\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Text\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Nominal", "Numerical", "Numerical", "Numerical", 
                    "Text", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"B\"", "\"C\"", "\"D\"", "\"E\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1414", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 1414, "ClassNumber" -> 4, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "GICS Sector Name" -> <|"Type" -> "Nominal"|>, 
           "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
            "Type" -> "Numerical"|>, 
           "Carbon Disclosure" -> <|"Type" -> "Text"|>, 
           "Revenue (USD mn)" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|
               "FeatureNames" -> {
                 "GICS Sector Name", 
                  "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                  "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                  "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                  "Carbon Disclosure", "Revenue (USD mn)"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 6|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Nominal", "Numerical", "Numerical", "Numerical", "Text", 
                  "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|"(f1f5(f2f3f4f6))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+JZM0HgpD0hOkWRO/KE07RRmk40Axh8wEkDAI1Pnak=

              "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 1414, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Text"|>, 
                    "f6" -> <|"Type" -> "Numerical"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4209554619632865690|>], 
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 3407689957052572250|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 6386559724484824442|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>, <|"" -> 1|>}, 
                    "MissingCode" -> Indeterminate, "Version" -> {13.1, 0}, 
                    "ID" -> 6398143214224852052, 
                    "Output" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {195.3790406242356, 61.646977913209476`, 
                    190.01452218184144`, 2221.139431539642}, 
                    "StandardDeviation" -> {1024.181623136537, 
                    293.22971478478104`, 196.3462516724107, 
                    8256.563224223488}, 
                    "Output" -> <|
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 5272605604417048922|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {11, 1}|>|>, 
                    "Boundaries" -> {{-0.5, -0.40909090909090906`, \
-0.3181818181818182, -0.2272727272727273, -0.13636363636363635`, \
-0.04545454545454547, 0.045454545454545414`, 0.13636363636363635`, 
                    0.2272727272727273, 0.31818181818181823`, 
                    0.40909090909090906`, 0.5}, {-0.5, 0.5}}, 
                    "Version" -> {13.1, 0}, "ID" -> 6197818036640951475, 
                    "Output" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>, 
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Spans" -> {
                    Span[1, 2], 
                    Span[3, 6]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {13.1, 0}, "ID" -> 
                    8353511239162088478|>]}, "Invertibility" -> "Approximate",
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{-0.016529304250428277`, \
-0.003977987447750752, -0.012477440984088895`, -0.04545168631433546, \
-0.040285349722368934`, 0.9979311128491188}, {
                   0.01596574457173288, -0.006708263073187452, \
-0.00040598392451674106`, -0.014556730175053777`, -0.9989129253090748, \
-0.04075535107125976}, {-0.6653732185251798, 0.1124523798151379, 
                   0.11146524296590558`, -0.7282974622862278, 
                   0.0009043213447041751, -0.042313479935505466`}, \
{-0.4525941812355412, 0.18835870882694628`, -0.811184280639024, 
                   0.31857507990246814`, -0.012693627641696917`, \
-0.0028908558170766944`}, {-0.5865457203965476, -0.1266413177930213, 
                   0.5322936369719147, 
                   0.5964308669513955, -0.018364869771830078`, 
                   0.022858938234849496`}, {0.08872982681677569, 
                   0.9673554726846854, 0.21462337975498835`, 
                   0.10042505493141408`, -0.007130485725141593, 
                   0.012295392549469028`}}, 
                  "Precisions" -> {0.7412798880639702, 0.9964373275433729, 
                   1.0673796022522453`, 1.3993993968464005`, 
                   12.201704677895991`, 16.393220731846185`}, 
                  "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, 
                    "Mean" -> {0.011739285984329209`, -0.006302120975041767, 
                    0.00004772992030729378, 0.00009223757588118813, 
                    0.00010485167865102885`, 0.00022815565912183614`}, 
                    "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4890335152835729504|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6.|>,
                     "Key" -> "((f1f5)(f2f3f4f6))", "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, 
                    "Mean" -> {0.0117392859843292, -0.006302120975041762, 
                    0.0000477299203073033, 0.00009223757588118716, 
                    0.00010485167865105884`, 0.00022815565912184035`}, 
                    "StandardDeviation" -> {0.2507752898157967, 
                    0.287088148869262, 1.0003557397467897`, 1.000479951290525,
                     0.9999589168221408, 1.000059389178472}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 6, 
                    "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    2255176406760574746|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, 
                   "Mean" -> {0.0117392859843292, -0.006302120975041762, 
                    0.0000477299203073033, 0.00009223757588118716, 
                    0.00010485167865105884`, 0.00022815565912184035`}, 
                   "StandardDeviation" -> {0.2507752898157967, 
                    0.287088148869262, 1.0003557397467897`, 1.000479951290525,
                     0.9999589168221408, 1.000059389178472}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 6, 
                   "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   2255176406760574746|>], "InputDimension" -> 0, 
                "OutputDimension" -> 6, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"Materials"}, "ID" -> 6891347935690616595|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {20.857}, "ID" -> 7118546871732690271|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {24.308}, "ID" -> 1379309737266346865|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {227.299}, "ID" -> 837637490153197528|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 3439309116171360036|>, 
                    "f6" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {106.653196777609}, "ID" -> 
                    6782593871927012987|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.056363, "MaxTrainingMemory" -> 746208, 
                  "DataMemory" -> 281808, "FunctionMemory" -> 77680, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 12, 6, 23, 31, 52.374964`8.471698712438371}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, 
                  "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-6.55632279314249, -6.55632279314249, \
-6.315785215489547, -6.162522934782237, -6.1398787535563875`, \
-6.126269610777768, -5.9899705977166935`, -5.796356546713496, \
-5.78340630206846, -5.713199421330183, -5.524175855523637}, 
                   "LeftBoundary" -> -6.315785215489547, "LeftScale" -> 
                   0.12026878882647152`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[36.064732818660545`, 0.5889388483539343], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 5495059474424677337|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f2f3f4f6)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                 "Version" -> {13.1, 0}, "ID" -> 1126745677642804853|>], 
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Version" -> {13.1, 0}, "ID" -> 6097991814255900671|>]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f2f3f4f6)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Mean" -> {195.3790406242356, 61.646977913209476`, 
              190.01452218184144`, 2221.139431539642}, 
             "StandardDeviation" -> {1024.181623136537, 293.22971478478104`, 
              196.3462516724107, 8256.563224223488}, 
             "Output" -> <|
              "(f2f3f4f6)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 5442548032159666094|>], 
           MachineLearning`MLProcessor[
           "ToLowerCase", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 3704118531076445188, 
             "Output" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "RemoveDiacritics", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 2201451281876833381, 
             "Output" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
               "f5" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Index" -> {<|
                   "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>}, 
                 "Output" -> <|
                  "f1" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> CompressedData["
1:eJxTTMoPSmVmYGBgBGIeIGZlwAAN+PgP1e7vB1IHGqqv2QPpBMkbO0D8BXF3
9oL4Dt+ZXoDoB/U1l8DiZ42ug9WbrZwLohWedD8C0Q4WlUdA6hquN9eA+A9u
OB0Am3d22Umw+k7x9yA+w0aV52DzziU8A8tf//4QbM7Bfw5g/T8FT4PF83/d
AdOfvpwB0Qesbj0GqWtInXUKbN7j/5dB4gsWqj8Eu/PQ31sg8YTKFcvA9vu9
fgzWfzT6Klj9bEWwuxN8ImaB7Vv++xBY/qTJebB7jEog9smI3wHrZ993FOze
3mdXwPYWaT4D6zeLOgzWr/J3N9hdV2RegfW/T98KVufQtwQcHquvXAOr282+
DSzuHHAUrF9X4wBYntUQ7K6EXU5NYHmPVRvB/kjMuQSiFX7UQsL1uhc4PBTW
HjsMtm+yw/P9ADP/nVs=
                  "], "Version" -> {13.1, 0}, "ID" -> 436404844719395216|>], 
               MachineLearning`MLProcessor[
               "Sequence", <|
                "Input" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f5" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Processors" -> {
                   MachineLearning`MLProcessor[
                   "TextToNominalSequence", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {13.1, 0}, "ID" -> 1494710476529535751, 
                    "Output" -> <|
                    "f5" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                   MachineLearning`MLProcessor[
                   "NominalSequenceToTFIDFVector", <|
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f5" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> CompressedData["
1:eJw1lMmNHEcQRedAC0Q6IAMkxL6YMIBONIEHAjzpQPkPvaqswmAajYjMH/GX
7D9//Pv9598fHx+/v/Dxz6/f/31+48tfq5ZqtlObuTmrehqzJq3SttarI5Hy
NFLTt0tbuZXm1U9DsyT6Oh6zpV51Gj2Z3ZKWmdPrE/o2bLyYrhLFIC6eRq6I
erdppU+N7ttILQ+p2hkZz/JnRjDV2Gbb1zk1740oUD1Xu3xYgiNPI9hDbYUJ
3su8B4pjFhrd9FO1rONtmCoE0tFJlqUe5l7SsqAoly41O59GhGtKO1vNpaE/
w50dZcRjmivcf9W1lGWlDll64NrbUOzxipnJQtF2Ow2tiUIjbOwtkX6Za0Yo
Cl4ULLBs4vPrEbG7+qKsY4bK9fkHdQsMgrlentTG2l2OuFYcWEhHl0H6Lida
uqn4XPrWnDIMERxWh7BY3uVNCc4anxNsGnKvogoymJIT49DIPfUsHMyC9Ehf
5r11tpaFSxb6mZC9u16tAU3gxbFUzO46iiBjJEFL499l7rrbdDjUSY1IrD/4
DlewBK3INT6Yn3p2BfpBE5CyIdpfbxFYBb/LEjhO9Jl7i1UZ/F3ZaEacujrJ
gVdu3d8evtDlbXQVA+qaEwcfy69HyFvbRSf8PXzJC2kj/OqM4HnYsbYu24bb
0QENI4yn3shLDjbQYnkmefQnYO5O2JEtROGcp95+PXmAXasKpc55fh4GBQrF
SObIu8/yeALjQQIxIDb/A7nYyuk=
                    "], "Values" -> None, "DefaultValue" -> -1, 
                    "HashFunction" -> 
                    Function[{
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {13.1, 0}|>], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJxTTMoPSmVkYGDQA+LbOV8TL6mwOBw7IXtlt7CwwxbBphMcRQwOqRteRSf4
sTmsOeD/Yv01AQeWGe1G7iyycPF1vPubIlI5HO5cfCdz9KCQQ5dapabS3f/2
MPWPGe/VOXn+s4fpg9ljs+zsl6UcgnD9MD7MXJh6dPqPVVvx3HMMcH7NVut+
3jSEO1gWxq+amceIIS9q164wfz0jnA/zJwMENEzYtWkV15Rl9l6+IXk/zNjg
7nmpqDPn/CEGDP+jhwPM3MteV9rLFp+zh7lnh0nPFrMpYnB5mD4AXlSO/w==

                    "], "Version" -> {13.1, 0}, "ID" -> 6967355064030955657, 
                    "Output" -> <|
                    "f5" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                 "Invertibility" -> "Impossible", "StructurePreserving" -> 
                 True, "Missing" -> "Forbidden"|>]}, "Invertibility" -> 
             "Impossible", "StructurePreserving" -> True, "Missing" -> 
             "Forbidden"|>], 
           MachineLearning`MLProcessor[
           "MergeVectors", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
               "f5" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f2f3f4f6)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Spans" -> {
               Span[1, 5], 
               Span[6, 51], 
               Span[52, 55]}, "Wrappers" -> {Identity, SparseArray, Identity},
              "Output" -> <|
              "(f1f5(f2f3f4f6))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+JZM0HgpD0hOkWRO/KE07RRmk40Axh8wEkDAI1Pnak=

                  "], "Type" -> "NumericalVector"|>|>, "Version" -> {13.1, 0},
              "ID" -> 3066956983799749125|>]}, "Invertibility" -> 
         "Impossible", "StructurePreserving" -> True, "Missing" -> 
         "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|"B" -> 1, "C" -> 2, "D" -> 3, "E" -> 4|>}, 
             "MissingCode" -> 0, "Version" -> {13.1, 0}, "ID" -> 
             3368851722935717418, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {4}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "B" -> 0.004231311706629055, "C" -> 0.1607898448519041, "D" -> 
        0.6036671368124118, "E" -> 0.231311706629055|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Ratings", 
          "Order" -> {
           "GICS Sector Name", 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
            "Carbon Disclosure", "Revenue (USD mn)", "Ratings"}|>], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {4, 5}, 0., {
      1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "NeighborsFunction" -> 
      MachineLearning`PackageScope`NeighborsFunction[
       "BruteForce", {CompressedData["
1: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
O2PfpbSsly/yWatVL2vYf6bLSTv8HnNgz4zesMvQpGkt7PO0Ov2NxnulhDd2
z/C+csfIHRfe/bBMOVJ9UDnmvTjiWCk4Jmxsc/g1X7XNGN77gA/Le+C5X/sP
jcZ6P7bznfnIiwzr2NU45wxuadsO83xoGp6KONzpHvIZdpaaeTZF/ic0eNIe
58iRC9vXwn6s9jnzDnhPn15cpwH6S7WlCbx99Jl/nHn7mUlR3a1hT+O689fj
XDBIbWI7Xp1s+p6JdWtAZJ98rLvbP0w7gnzcesdlJz53qfZpEfx9v5byYlzX
CVi4EH1EP+37ULwHeRY06o4ZxbUaZ97h969+Tj29cI63G2fJq3sf/4YD8H5+
y8XrXVF/oQmXDVDnfQ9lv0D83APeFGLfnG2y+gveK18urZEBO/NveS2DvsyQ
dn5NqHH7jDR833VRbkpq2lCzws0FFqe/1ZoZ/jDb4nJU4sxuY9Is9ibrjTWm
vm/s6tUtkvr8TM06na+PzbIY6lfiEWO9zuJv+MFQQ+q++q2rvTtFfa9ee1v9
ntT1r9cVTw2p505rGGhjfMOj3RakU8/VObk0q+DvgxSn2IZdMd+VCKWeRtT9
F/psextGPX8i9X2/aGrcGz26rZ6Wm5yyKihxO+ad/PyOSw9qnB/ju2zAfSPH
u1/rTl0fSTxyOJq6XtZ6m1EfahyHVjNfY9yErhfmRVGfX8nesl6//zqLDrUL
rnSj7s8q/ZZqQjGg5M6REkpHu+cdA6G3lfsq8xuUvtq1jg/dpPEh5d7Iukcw
fva0+inm1PcHvu0Jw3iLur2ZgHli21kW4HurUPeS7tT1uG9nxhlR18G5akvx
+bYe7Yf3oz4fqjy0GPPej3k9IoJ6PuRdxWL4daz68K5FlM6GQYfqlVB8PmD4
ddh1bp/98GLqelgbv1cFFEfP8buNz+tlqW4FNZVul8GvrdwjylZTfhpgadMM
9qzJK/t5dSz2KYW88fcV9y2/Ql1vtN62+yT1XKpzx96wa+bqpcXalD96lj2y
QBy6zXIfjHg3GDNZtxf1XN2o77Ogyzo+vRv83aWl7x/oCH2+tzri51f8NBJ2
am619f9Kzb/13deAEVScita2f415Zvc4dSud+vx7n0UPcN1OZfUT+Pno5CJd
U2p8zX3LGsK+2/pXjd2o5x79zpntSNFi1/o1xtT3oc2zTtSm9FkFv9JCHP9J
OZCO+9V6ePXoS33vWbdWb/jh1eOJfQqpcTeVXh1YTLFOwqVTiEN6W5UZYdfS
UtwWbzDpTV1H7NzQYzI1/qyyGndh18AOScdOUt/H1464+FvtVspMtaijuO/w
n/VRmG9dhYE3qORkPR32zggMHOBCPf87opMzdHQYtdtlM+VH+1F7ZyCu1W27
PYV/jBatNkN+1LcPjfSlvq83o5trV2rc8GvzPODH6g/3X8FzKU6ud1Kpcftm
NemOeY5d7XinB3VfUH6xD+LQ8OxMTcRvttV0PcSnsa3d+jGUP8sC7hu/pVgU
tnE4xj106cQk2B2h2/Eh4p8yWfUg7BuTozfsBfV5tVN+i/yp+T56P+iEuNYr
jt+SQc0b7xGSDh1DvdzN0qhrO/d51rjucmnOOtix/0DHWSbU/QvsTg+HPV3K
ft1G/lv/HboS8bTpO+sQ5psa0XId8uD6EJXPyOsuyzPX4nPnEWd8oV/zaxMH
2NPr6sCNGK+HSk4gxmu8NSeGl88nh05APtSrUep1iorHmn0Fu+DfIr0mR2DH
ngy36ah7nSitpajLL76H1uH7sL9bkpH/7+ZdMYR9tvqZPB2tArqfiKPGSbzZ
NRn39fBalwd7esV5vUPeZ68urwc7xqx+ZYW67GK4fxr62pV9jy9eo8a3bj/x
IuKmbuRU/TXlZ63Mzb1Mqe/v+gWUN6fysWHvidsxX+HgnaoOVD7MPnyqB/pg
+ZKg8bC3os3nROhqlmw7bgz1fcbkjftGUry9vfoxxGmiRUga6mDC7xXNYY/L
1d3bkReD3usvRt222vP3HeJt0sVx1VTquZ82IU2ha96tve1OUnoynsSZQs/g
9YVPkS+l/aekYL7n6fPjUBfPeo9Z7UHd19b9iulo6vkXerX8JlF8EHl6qxns
ttczRJ8ZOWqZL/JucMH442DHSZpLoyi/jSq/3gBxDOsQmQ2/hTjtc0Jftk9o
92guNc6+2zqdnlHjL8jKWIP5c6zHlKMudC9pqsH+YP1nJs8p/U8OtBgK3bPX
qY3rQd1/2vJ9DOrLuEmvtvDXfPPjLo+oz+c/ii1E/QwpT+iKzx1frCrEuC2j
Bv9F3th2/LIQ/d/Oq06fWRRtc08exH3pr247QLd505WluG6h3/oI9KaqbW9V
Ss1f5Ns8EevQydkVn1AHJu8XNYH9rbw+eOA+3xFxv5Cnprs8PyNOh2b2Woq6
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
+/ussqVYF6ZoFHdBP/EJrxiCPLq+9Hc36H3dfutwXn8M6zAecVh3+esHjDfi
TsEU+CdUe2YBvjdrv20m/PBkinoDXBsG+jTEPurrzpPTMN6fvn2bIJ7NJynP
gl92Z3YfDL97nTVyTaB0P3S/1Af+ePZm53LkeenqOh2Qh1ZhySqoR50dWSXo
L93XjmkJnWtVnm9EXKY3aDkWdtyqfb8R/HHuydsVyAsz262DEH8z7zMrsd5P
fLzQBLpKvA5m4b6ehlnu8G9Un2cx8O/fsoa8c5zXpTmjwik913Zv0sf+WHuT
8ljUgWukR4fhlP3b++fMn0NR1bxmK9RxtWGtnkN30d7NbtBXNqFFIM5Dl1I6
3Ue9LzC/lgt7bD/YR6F/6GwcMgv+mLx5ZBE+Pxw8NB7XHhlJcVhno88W/0Lc
QiKbZsC/LmmBfrC/MMHrKu5r8dzxEfzcRX9UW+je1+fUVVxXL91UivX7m1N2
Ns4lK4xuz8B19pHVjRDv6IaHesPvpalHz6L+7wx62hzz+V0LmQmdExpcNYAf
HXI1zPZQ9s/Y26E56mxX095N+1LrSmSZVSP449DxF0vR7/RaORQhPyZ//NEV
cU4ec3My+rpXyYgC7PeCPFfnYry7g25EQ2f9e++Hwo6XM4qWoh7mTmiiBDtV
s69Fwi8PDzqPwf2mndN4flEPafcL+2urGcFPUS+qb4+roP8HuNaNw7xr38Tt
mUF9X7DyXRzivcvLwRn9XmVs9ELsm1/V3hWZT9n/zyS3J4h/tZzZeXiumn3v
2+hDuWYOBrz8Dh0RyuvnU1WPoi9tfDJnIuyY3WaZGvzdpqhoAs4Z39e+tMN1
4IoINeRl3fA/C9ZR8xi0KaqF67uaafb4XkVH9QLyYlvYtCmwe1afYWp4fuLQ
9B2oc58dPa7h8yeDkjdhvqPFmaOhe8rVQHPErXzp+X+Qh0OKFlxDXZ7yqZ8L
PfmeTk8Q5wEW+Rt47xl0+iVCv8VB60LoD+n1ygB1sb7H+EcYL2WHbwf4s4aB
7ZpIal1TKhnrCP9VDHsQjfg/WNzyHPRebZ3XF+M2CfqYdIy6z0vvbCG+P+sY
cxZ6/apPDkKfc/p96SP65cs4l7cYv8YR9xbw4/qLObz3HcEeCWsxX3TqHh/k
x1ev5QboU1otI9qg7yzQjTyL50a3TTmB+lhx60Qk8rNhF1172Glvb14AXrKe
bQj/RCXee408+GBXeA7r2DxX81rQ2/7VxLHok9uKSiNQv6alD7sgvzV0G7ry
9sWWKabI82mbjrWeTvnzH0P3ttDxd0nmNOhTmucyAvZMbrj0I9bNVw/75yDP
gua9PYp+sfxlRF3k+UrH747oT3dMa0Rj/tLYIzXh309FVieg6+iEobz3Vt9j
U6ZjvsxlS9tC39HWDVSRb/2sTtoijpafvh1BHobo2s7EPiX/fuw53vmpjv+y
j5Q/baufnAn/bUq0n4U6WNDPszV0hbnpXcX6P67vlu2Ij0bPVVGIx2Mjqy7w
48ymyQlYh5N9d5tg3QzytOqNvrV906Ki6RRVE/fzzn9vq2tfhb8m5tbzaUDV
8eCYV3Xhhx7PsqohT3elNm+EPJxZquSG+tz7t9F15JPZxWtusGPY2goz+KP9
hBkWuO+iR+dXnahxjObr8M6z9dZeVkP9XchfkAR7WzjNrg62n/MyE7rTCh2M
4b86nw+Ywq5rhTUc8f3d0sdvinnvJ44dgt2HHVJ4++dnsat80Ueb6o3SQx42
Thg8C/02oU+HRYjPlPT8Mxj32sC7q5A/Bg+1gnH/ueAtqhgvrmRJLexXSmZM
3ox9QLbO3Y043x7au2QgnreZrdIT8Rqb/t4L9uZG2fZEvjpNDSuDnad/t9wI
HScmx9zA5zbTbfWgP31QLxtcrx5VpgF7c6/W5Z0DTfQOL0Q+xSs/Gw1/fB0y
ZAzqs3bOn3fQ2aCj7hdXav4cl1of8Pz7hQP0kY+f++0xRXzy6pX9xuefW1/4
hX6/6kYTZ8TrqEbUXdRXpztHW/L0viobifjnBywux3rjkbWK977Z/5+DOujT
n0a9PId+rjNsy1bkrb7FEQfsY9LuZB6En/b8ci7Dc80P3rSDfWGji9+qUXHc
6vMoA/2yIixsJOyYMvzMZOT37kZf/bC+ej5ST8A+3z0y5zXs7RWfm4z1c2d7
22HIvwWTDtVDPu5r6Fsf9t51NeTt3zf3v/MecU2YOOg+xnM9b5/Bez9nammF
cbRCL4Wgnt7cCvu3rgbGz+K9r3J9ORj3W1uf74v6LlYtcISOsw9u9oedEfte
vsXn5gNqpyKPVg4+b9ef0v+guV9r5H/suSd2WFcy3/oPQ/zNjfzGDKc+P3pq
w334Oe3PvF0YT9tpI29dik/S4MV/746rWnhuRp1RJQeo+3d9XOKG+YIbekZC
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
M95WbyKl70jUuvawO2OU9wL4088sbyP6p2nM2kNY341+t5mGvnVaU0kD54zn
n35mwY9LdptnoD69pkb4wp6Fvo0L8Xn7X6ssoEclc6Y98nLi5ehy5PUQ5yft
YMdjN31e3/jmnbIbOrrrpyRhfu1NzzvCD430E1WQ743b1V6KfJsU0/0z8s9U
yzkMeXpsfP2tGEct2m4m9BStHHAI64zXRnsX2L3rknNj2HH/c91bGL80c1yz
Vhq5Fl9GJlX0Xpaekhr598fVOvEWjtPWz+v0+2LKMacstRbU95+6NZx8nfo8
R2Ppu+A2ORZtmnf2GxIRm9Lc9fQjE+q++EUq5snU99suJnsYU9fPXW6Nb049
l/F9XA9tiuVxzzUPUs/1nRVV/bDei5Rn5jdXmlLznfPOGdWcuv/R8h2LL1HP
v5victicGvfFuz5nviu9THk08WnqFepzm/faB3WocW68Ojo9g7ruoGGfD90u
s87YQO+6ge9rdaDGWdphW40+1LgNjHTu4rl1Y0I3YbyDq3v0bEndX+tD1kbo
mjv/4ZqjlI7yVx4W7ajn5mVrPd5P6Ru53HNvTPvSlJdjvg5sTd03/MmjFhj3
2dfQWrHUeGfsHL5oU9cGXhP7a1HfX3VVT9WhrvXz9R1x/2/rcbugs/XmGUdb
UZ+Xbp2bp0ldu26d0S+Set7OulNWM+rz+w6H93SFv4vWN+9HUa2k2qoL1PcH
p7/vZ05d39Vv0akvvr97fmYq9fkWq0sj4ykm108cAf1vHl8MHkTZVePw23j4
oU2zQaXQr2vaYLEuNf7snQ4pe6jrWgf8TRCXM+t0vsKu1+sKMm2o59J1dE4e
ouw3dnDXxvjRTdNOdKeem6pUyNN1d3uyF+JekNs7zYS6fpN2u/learwDquqT
Yd8i82/lPalxiotUR/6g4rRkd78pp6lx6r+7334A9blmjvGks9T1kHvTmh+h
5umSZ3fXiBp/ZdI+B9gVOOju16/Uc8OTV5Z8oTjxe87sttT3LU/c8O1PPT/p
sOMzY+q+Dt99aiIvOz+/MViD+t729YQ+8GPDXYmq0G9lGjQK45eX3UyE3R/U
1wcEWpZaaNer1gHXD3emaGAeO+NDwzHOwF8rXYOo7xe2c5k792duyo2vE/rr
U/fVqnYkAHHwtEp+iXmd3e7FwJ8f1UN08XyDe0+Se+H5f5SDYyk/dtr8Ngxx
yKmlHIh4dc1x3naZ0tUo/bjLaep7I8uRd5AnRWvvDEKeHG1xpkUc9bnu5107
Q6hx73lfLsd8DyPMfyD/f69v2SqJev7J28vnDajr/s6zCw5Sdr1NH9PBkvLH
5B+d1o+i2P6g/x/cH7A73hV1tO11hBHyrtXoJ2ssqfG04tKD4JfbLV82gk7l
RSlxLWCfxkgP1O3DnmstkQcGk4fP4enw+t0f99VSm2EN/1CLcy3Uc9QXIxXo
GTpjgwbytX/+qT+nkCfxnyaingvTZh8H1Xa+eYm8bHDhz0Xk4Y8tz6Yhjst0
NgQiH96GBD6HPXOH34lKp661y6a0SKNYryjeBvNsTUwejnioNnpwvwc1f4up
ufOQf98z3g3GuOf+BFdAd5BvF0/oW+M28zPycsL5mD3w5+n962Mxr/aBHwk7
qXFqB0ythecvJqgMAMOyOprA3i23pgxrTc337bjb2M4UTyb2XYK6tPY+t+kA
Nb5z7oQf8MPwah9LelN+VhtlMwT94vTwzrHW1PXW4o238P3+ifss0Zceu/t1
wnPDU5pHIK9rvsvIg66UhRODkc9t4vP7gBsGmLVDn9nS794y5Kmtc83f+6jn
6uxatQf+i8zJcUccQtPy9yNurwM9O6OerCzbl6BfnkuqNaMvNX+/K78bQs+T
YTqf0F/HjEzVxvNfvbpFoy5ydrm+saPuG3XCYxr0dT81YhDmn1P4tBXqYMe0
/Jao4/vNT25CHs9T7l63J8WUmBMtAii/aS5ttSGO8vfY7aZa+L6TxvDqiI/f
+m6bMd63yBOhQ9FHkzf+1qM+P2z3jy507rF4/xH1k+4xvBPy8dvd/vqhlG6P
sBbPoSfsm9pTQ+r7taWxDqin5/HL7jlTnzvuOH0J/p+s7Hcdn3+zm1IEO4La
jPiFfuWd3vMC9If/nFzxjWK3r4edkAdftl0JRJ6semP4Edc14+5mdqeu99y1
2oX5m900OIP+oLs54SLq58GmTUpNkP/eHom4r1Xf5CjUbdCNhPGwq9dIsy7o
azpL+yeeoZ7rpG3b6AwV5xdNPlxG3Ud9OT4W+XVcNXIb8m3FpWqrsQ7MOfss
HPG4U0vtvRnm37LrOepkU3FBC8Qlz8+pOp5vEaBth3g3crv9Ac8Z7W99AXnS
Okv7CsY9o/nuKfyw6Ox0G3Bry9/rYVexY/07yNN3bR0et6HY7tDPMdC9JV/9
xQKqb/3tqDvFkfLj2bEeWdDlbBqljvjtHOL0FPYPrfvgEPIp33HnVORX+GLj
0+jbeo2nRMCfA6/kp1pQuqPVeo+HHedPD10I/42vvewe+rOu5qyf0OM7sGwv
4nDANa0D7Go4K82ety6k9mqKPjnN8ZUPvtfp98QDfihu4/4Sz32N/RGC+uuw
pX4/F6wH5dk7U6Ar0npmS8qe9vdd1XFfwK6EudBTXbdmLth+U88Q6K1u5V4b
8XFKv7ET61jqtIDH8Ff5j7gKxNPw6YTDA6lxh9U6WHAD+5JGv8egvgcMHpLc
jeLkd+ULnajvY4fejUAcPnZxa4T9xle3r6uxj3lncGEZ7FhkMjgNdT3y86c4
1Id7ceduqNc5w/7pjL6e+3B2CvrWsMs2HeDXDTpZ07G/ODX66GDMozt3+Q34
tbnn1s7o5y2zj/5Ffh4412wi+tWyzi5p6P81Cz4VoJ+eKWjmBD8p6yxKhb2j
32z6iv2FeQvHB7jvYrrB+Mao12f9p8Cv+9Z8Ho36rJmsnoQ8zXthcgt5scr9
WDHWgZztu/8ZSdm53jtpAex8d+OeP/J80cZjUegTTZffqIb7Tgy6oQ//pfuH
GWOeayZJesgP9z5hm6G7ffNZlrhvQ0Z5DK6vD/M/hPgk5M+thnq0io/ugP7l
rRXaGfk3Y6FeBfSUpHruQDwe2s59Cbubl+zQQh0McgqrDn8m3lSbjfyKs++9
C/Xof+tpLvLV3KaRAT530S5oAP+7dnK4dpGaJ6jpayOsm9VnvuiCdXTaphWP
UQ9mGTajOlKfb4t80Qd9qWOd0+bIk3P6F+oibw947aiDOnF4n6iN/N3zYHRN
6M/qGvoA/kjr9yEA/aia8dNesC/JNmsY/D/0pfd25EXIJa3eiIu2o3UhdA06
+DYc/dG01P4h6sSnxqxG2A+vdCo4j/vn1+7XFPVwr8c3HegbkHfdDPk2/XtJ
DPz8vX77iVgHNzSf0gHXkfHWNqjf6BNnzsFeH/++cXj+SLrPFfSHfvUOXsQ+
bGmBui3GW7ok62MCdd0xss1TrPvVd2/XhL2O1acdx3hl7/ROwM4uvgFHsM/q
6TtvLta51bmremDdsM7u5o55MnXumSMuZ59ZBGBfFvVa/SG+P5+2Mh7r8pvY
fruxf/1Rf8GURGqch/cbpWD8HUoeZfCfzVXfJfDHquy6H6Kp8W5WP1yI+rXJ
jJuE/HTcmPAT6/ngRW3dtKjPsww3u2F9eD36YhLybNnYV5mYL3LEFmPE18RQ
bRj8Z3D3ZE30j5ARf6YhT+rN6tQJ8VB/bHME6+qLvm38oH+xT4c45N+98MMV
uG/tQgd7+CvCN+khdCb2NjuFvmIz2PAB6jNrr8aHptT8pguMVmD+n3nND2J/
0SllgAbGbbWiYRD0LJpi8rsr1gWVk+VYn64fKoxAfh9rOusNdKSpDD2CcW8W
bJyFcXb0/piEfWVauE9rxGHduFtB6B9BVz4Oh3888uoXog9VrNHsCl35bj0P
IX/1/i7eiThfLjjbuAv6uX27f+DXYFvdBMx7/qSDM+985Oo7Grw1ZNMS1K16
adE8+Mfsz/zXmKf5AutDyJ+SXfMXoZ+mNytSRb2vXlp8nrf+nJq0F3nQ2/7U
K9yXrGZfA7oKbY7+QJ1vL3Bbdov6fnVkg+MYd02F627US4t3eqaY99qrfAPY
+bl+Xy34b/OAI/Oxr6xWtFwDeXXWoXg15unhdWgS6sKw3gB/1F1yozYPYO+J
mHXm8O+Nt+Y7sf5nNxrggDy+XbZoGfIu0bWaOe4b+vZtf+wvUvbl9kYcRn5J
v4n+OlXjUxLyfaz3mOF4/mrnej/gp/ZvrreFLqP0xMvoH/01JyxBPT9avdgH
4+UOHhuDeCXfiamB+ba5Pg/FOebPuPAm8GPUltuOmG93y08ZOOeZlh5Iwbyr
1a8FIZ9mN1i0qxelLy42Pgvz1Le/2RTnj9Zd19ScR/W5ri1eKqE+5pUZDYTf
isYMeoY8mXptZjfk/YlENwOc874bda6Pft+rmfce+EurrlMx1oWiCZZx6B/z
GszWQz641Q8YjP5nWOcWb5+vrz/KDfM+Kds0F379dshtKPy4UetYPtbz3pHe
E5FvA0+mzwD1supmwJ/1vG/ZIL5Loua+xjg69SbbWlCfu273dcf8IaG1rqFf
LZwzzBk6rqwLnId1Qs3czAt1dVb1QzXoWeRT4yS+/x58aAH6eHel5a6Yp43h
vVHIu6/fPE5indMbN4d37tHtvH4j4mQ35aQ11vfNWvEayIvxTgWTEAeftvuf
I27VcmacQb5VbGixDv4P2rbhLer+ZPjBNfD74NGvuvHeFyj1a4pzf/c1rwZg
vtyweu+xDvXWLPFHfeycOHIddDc9V+cG+tOyjScG4lzv+U/6+W7UONt3qt/B
/uBg/VrHkf/D8lyiofOLz+XjeH6zZdRK1INWVsdGsGN4+ftbsHPPhbuTES/X
QykuiOcWl4jdWNf3BjqmoX+ZeHbjnauiI+ydcH7abNVwHerEYNZm4+GUnoze
a9uhfm7f8tHD8x9qNNfAfsW2oO03UHvNY1P4/1ZxYDXEsXbOW/ObFA3MDtTE
et9ZOT0Sfp+XtEQZdp1UUws9D/1LLRYgr4yeJpTBnkj/atdxjvow630TrIt/
rDpWh30fbt51wffTXF8GIF5F8/vej6CuF/bVSkd9JLVVWgg7fAdvDEf+7VNr
9An1enJpsBXitMspJRC6w0x7hmP/fWOPag7q/mvLOt+xD89LTn2twVtve51G
nuUVZZ2A3pv79drh3F/nWJ9GWOczjkcXIu+ml6h6ow5+vO44Cn5qNXHuVeyf
zr3NnwW7tqjU2ou6K9GddxB961gNjYkYb8iAU/NRl+EnjJahrwcmz1yO+c6O
tD2BOvmQOlAf64b6/p6882btthcscc7WL6+hgnEKdjTuhH4x9PDUQMzzLLRA
F/moP6tNCezs4ZOzDf5e3N/HEPuGn/Zn8xC/nUeMXqCfnHd4HQUu7PtaHc/d
fLjlI/wfuvicK/L10kEf3v6/1bybF6G/+aoJa+Dv2Rfs9WOo+8LyHX7Br71f
6m3C+5u0o84fsd6GfcozdkU9/voQzuszOjVykQcJP/3HIQ8Hd4uvj/1MtNKy
UXi+6YfkyehfMbkT2yFuI2v/iML+atryxZexThkuHrcL9hy5Y9wafti/L+Ut
731I2Y1X0LPjc3oRbz+/bVYe8iP877hM1MdXL4em0H//VdED+FPzYBcL1MU0
pe+myO9rQYfKsL90aBD+GPuP2lqpP9FPag/pdBv71fnVlk9EnVuMmbMb6+jB
z6uWo6+m7GsQD78bd/Nc3JK3bqx1Wkj1y+zZHSejX9o3+lSCOq3hHJuK+1q1
NGiO+Wp4+IVCzyW19WXoUxPqGaljn7TKq7wF6n7dSa0I1E27vDUnsQ93CGxd
hLxKn2NwAPl2euP6T9j/Lul81xX+blERsRL+apv34SCuXUyziuG34EUODphn
/5IjLZBXto+bqeP9iH1HtZPYX5cNW3wU+TPisVIT6LCb0c4NftWuOPEL/XjB
qZxxmL/7xWw3+L1ZyNRS9P9hO3JCEI+xsTsvwf+3dlpFQL/Tz8HLME6t659U
z1E6EuuUK2M+teqDojFfjkefdajPicZqphg388aslZinkcbVSbj2iozbhv1F
7Psy3n4g4eb2fE/Kn1mZ5c6I788aNWZjf+HZpXMX3G8U0fUo9l/HzCZYoW+9
uZGbh/tetPiRhHw30V9zBdd7/fUscL+S+Ql1vC+cu3BBMfap/QpzFmK9abHV
fA/yemOYaS2sK35r59xDPC2CojrArgeHD6+CP51NfO9gXRqWO6cd/Ko3bsYU
9A/NebE3sa+xyRh1BX24tntWBtbPhBOvnXHfErWkvuifbgERx9Hft35K649+
PMVx4Gj0qVLzih1Yr9fZTSnHeJt9lu2FX3K8eh9DPnfMLghDXYeOntgX68or
myVx6AdpnrGXkScPlLXOo9+61z1eDeNVGBzog33xnGvH2sNuy2kvj6DvXtk0
cCnqe3l2G3uM/21lTR3k5bnH5j/hxxVdgtVRp/VN89YgXlcNn7nCLw3Xvf4L
3c+HVL+AvHc7OD4KfUt7l3Ue4vRs5gwP9E3jl2OmY9x4+/preefQV0oxiMue
RXmN4c/sJw3b4f6mdY1vYd29tc9fC3U1/Fh6JPTPiX8xCPUxtYvSY+TRlX7f
VdA//zzUvon5O+/w1o2m7DD02crb358acVIT6+e3kuwdqIv6H/IaIT7uc29t
wrpw6o9/ON7XfZ8SrIP+um/bm8vIi3A/vytg6jK3Y/C3TaBNc/SfY9l3Z6B+
UhZ7esA+484eh3Becl/0pz7O2cuvlj2CfqO8+9roY21D7JVRl+21gxvg/hRd
te6wd94K0wKcA9qqBk5H/m1z6Z+Lvmt+q303+LeT4fhWvPPA1wtjoFPvvXYF
dG7bPD6gPc4NS3uqIy/XTFOpBz+0ybl+ntcnZuxSxrlt9B27NMTT9GJXTfj1
9uptG2FPbeO9z+CHFTd+GiNPlG+c4r2Pv/7HwAvv81pNSeiHfUScudtQ9Eer
8bMfIv6T6jqsR77uvXLvGPI1zypythFvn75vNuq84ehLkzHPkR3DHfHcEA3z
x/2o+3cZdP6GON/VdBiIeNpO8t8KfU/r3B+FutfNSR+EdarpyTXf0X809d5s
wjprMNdWG/E8sLbxJcQ9dG9MU/SvgKlOmsjnYq8Vl7Au5ORceQ9/f9jR1g55
e/+8Cq++GxSM4a0vm/vkTYLdATciMpF/BT/2tcH7K6X0MS/RH5+0/zQaupOD
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
RbbrRZBsx5ttKqr9dNUr158Xd18grg6m34PJWt9M5yNT/UdwXEnXZbr1cGU+
uinueifreYUpP4l6v8N0/Ui7XxC135dXXYlLRc/zqkrB38nY1iOuXqbnEVYH
fD9Jug9gSg+fwnSIG1dhz8v6fl9WyupfQfuFnfeYPn9LGj+unjPlle+S2i/r
e06685wfb7rG5co5nikdovaPbO0v5F2Hwubj9zFRepyfjPO8vi6T9TwRxqit
epfXj8jgrD5Cdsn1/CUkJFQckn7CLon/CQkJmaai9RlyDiIkVNz6JSQkJCQk
lIZkvSMkJCT8l4p2HlY0vXRTUe2v6uuupPZXdX8RMkOu5ZUoPcqe05quH5VE
u945VtkfYxpcTuHz7uwb7Xr9PJuS7VmabvFN+H+3GbZCKbRuo//730vxn6Nb
n+B8fJ1MzSMpRflJGAXtoMt/gnGRVg/dFDd/xdXRxcZlgfKhmxLrFfQP1/JJ
GLmqk6l8o6uuZH1eUIcwe8XVK23eippHmN10+1HaeaTVIYzi9hPBeZnKK3nn
q7jP8e+Tdf8gaB/d+xG684Mu8v0nbZ8TRUnrman5pKWsOoXlkaT+pis+dO9T
pL2f6fEkfV7UuiVqPGn18uMh+PyJZgNP/bNa+L9bLCyO0sZN3LqRdB/P9LrB
dl+VdJ0S19+C47K9P2baz/zx2bZTVN0J6mTqvQVT5Otnar2XlGzHm2mK8rOi
2k9XvXL9ecF9gbD3K+LqYPo9oqx9mul8ZGodERxX0nWZbj1cmY9uirveybq+
MOUnUe93mK4fafcLovb7dNcVP36S/k4iqIsr+wzC/6SouDG9TtFFefVTYXXA
95Ok+wCm9PApTIe4cRVWv7K+32d7XRC0X9h5j+nzt6Tx4+o5U175Lqn9sr7n
FJXnkuYxP96y1o/geLKOw1UdXD03y7sOhc3H72Nc7QuEhISEhISEhISEVZGr
1Gsc2foyn+zPCQkJCQkJCQkJCQkJCQkJCQkJCQkJCRWABaNWxzR/LPz/JyYt
X3mHBRu6XE3hkyn9dOtlW4es5JodTOsRN3/F1bEkOsRi6TnZ/zt/rsVB0XWK
S6bskXVcpv1MV94yrVvYeFzJQ6bWQ2HkWr6K+xz/Prr9JW//s0W28p0rdca0
TkXNI0ntlld/Zup5UeuWqPGk1cvPD0mfF5ZXbMeNLnJVl7Q6JT2HCt6nKP6Q
lYpiJ1P7jqpGRYk3U1R0+9k+jzL9vLj7Aq7Hke73U1yntOssV3RxlfJa77j2
PoKu8en2H1fziau6CP/fVLS4cUUv1/YBTO2LmHq/L6supudhe5/A1XOmvPwi
qf2y7neZynO266eykK0+y7U65JoeUYw83rvRDONCuemV93yKSuInQkJSX4SE
hISKStJnCQkJCQnZIFl/5EPi58pFEk9CQsLKTnH7nKj7SL/kJklcCMUh3XlC
8o6wMpDkMSHh/6VSckBWRvHllCftwo/dXSP+f+fDf45t/fKmpH4SxqrqP0LC
/0a66kpeOuSlV9J5uKKLrXgKzsuUDq7kK1Nk2r7K7j9hlLfdVdXP4jJNu6LL
vgfXiH8I/4Pi1o2k+3jSV/87FU03iaNi6RRGRddPyA2SPJKOTL8H43pcyPmU
kIvk5w9X80jUuY3UFSGdJL/X/CeF1QFbfpK2Lqt6XLliP+mrVYt0x5sr+cMV
HZWVwvZ9XOljkpL8vRpukviJkJDUFyEhIaGikvRZQkJCQkI2SNYf+ZD4uXKR
xJOQkLCyk/y9mspNEhdCcUj+Xg0hIcljQsVgPa3y6ctLLjGWl0yPz1USvxLS
QXHjTPKBHrLtR8H56dbDtn3yYlWxU5Ci7OaaX7imh+u6JCVddrDlD6bmZbrP
Sku1bf5HF/qeZ10HoXTkSh7RTbbqhSvrGdtxZXt+UXq4po8tSusHea3TTMWN
bbvpprzP3Vz1g6xUtLzgahz4ugTJti55UVJ7ZfWPvNc3tvtNVcunyk6u7JuF
zUtXPXNlfVG0+hFW//L2C919mvBfctUv8upL8rafq/6WlvJ676po5Pr+m6u6
FEWfrKzs9hESEhISEhISEhISEhISEhISEhISyptPHfb7euo+Je9dCQkJCQkJ
CQkJCQkJCQkJCQkJCQkJCQkJZeQq9RpHtr7MJL+7EBISEhISEhISEhISEhIS
EhISEhISEhISEhISEhISEhISEhISEhISEhISElZakr9XQ0hISEhISEhISEhI
WLlpnvh6UtTCFNrPfTvyMz6pZqam8Hl/xe7WzoMSUqaMGPjXflWi2PPxn6Nb
nzC9TM8jLiX1E5+CdsjLf+LqoZvi5q+848u1fFJ0neJSlD101ZWsz4urQ1q9
klLYPMLsptuP0s5Dt3/E7SeC8zKVV/LOV3Gf498n6/5B0D669yPyqh9JyXTf
lbSemZpPWsqqk6l9LdOU1G6640n3Ose0Hmnn4+eH4PPTtpl01/JNFzqesLyS
Nm7i1o2k+3im1w22+6qk65S4/hYcl+39MdN+5o/Ptp2i6k5Qp6L1d7brRZBs
x5ttKqr9dNVrZXle3HGYfg8ma32zdR6ge1xJ12W69XBlPropr/WOKT+Jer/D
dP3Q7T9J9++Skq33lITsUPB3Mrb1iKuX6XmE1QHfT5LuA5jSw6cwHeLGlav1
K6suQfuFnfeYPn9LGj+unjPllSeS2s+132PpXp+5co5nSwdb/YkrdcjvY1zR
Q0hISEhISEhISEhI/h0oQkJCQkJCQkJCQkJCQkJCQkJCQkJCQi7TMfT2M9s6
zP13NkyPz1USvxLSQXHjTPKBHrLtR8H56dbDtn3yYlWxU5Ci7OaaX7imh+u6
JCVddrDlD6bmZbrPElZNVtY8YqteuLKesR1XtucXpYdr+tiitH6Q1zrNVNzY
tptuyvvczVU/yEpFywuuxoGvS5Bs65IXJbVXVv/Ie31ju99UtXyq7OTKvlnY
vHTVM1fWF0WrH2H1L2+/0N2nCf8lV/0ir74kb/u56m9pKa/3ropGru+/uapL
UfTJSrbtU0oOyMoovpzypF34sbtrroitg/8cW7rZoqR+Esaq6j9Cwv9GuupK
XjrkpVfSebiii614Cs7LlA6u5CtTZNq+yu4/YZS33VXVz+IyTbuiy74H14h/
CP+D4taNpPt40lf/OxVNN4mjYukURkXXT8gNkjySjky/B+N6XMj5lJCL5OcP
V/NI1LmN1BUhnSS/1/wnhdUBW36Sti6rely5Yj/pq1WLdMebK/nDFR2VlcL2
feL2sVp5gYP9htPf7/q6llkHLb2Swif/8wOOBTFvPS8Inc8s+pLRoGMP/ud7
lbqGSl86nGcsf/jzCepkm6L8JG8KxkVcMu1XcfNX3vHlWj4puk5xKcoeaetK
Vj+J6oPS1hddFOYXYXbT3Z+knYduHeL2E8F52coruscV9zm6dAv6jan9CNfI
dN+VtJ6Zmk9aMqWT7T4ripLaTbefuLYfEKVHWr3C+szGmwdV1tpfZbyP8+8X
t24kPQcxvR6xfT6RdJ2S1N+SzsMUmfYzf3y27RRVd4I6FW2fwNfPlfWH7Xgz
TVF+VlT76apXtu2XdH7BeLKtX5Bsr4ds6RMcV97nR3HJtXyRlPJa79h6HyFr
frKVT3TXFb/PSfo7iaAuruwzCP+TouLGtj5xybZe/nlY2O+MTFFUXQrTIen5
ne76lXU8Wf0raL+w857gPHTHVdJ+zdVzprzyXVL7mfaXpHnM9X25tGTLLrb6
PtfqkGt6CAkJCQkJCQkJCasyV6nXOLL1ZSbZnxMSEhISEhISEhISEhISEhIS
EhISEhJykFz5d2MrG4lfCemgvP/d5apOtv3I9L97zbZ98mJVsVOQXP13tRVF
D9d1SUpF/feKmZ6X6T5LWDVZWfOIrXrhynrGdlzZnl+UHq7pY4vS+kFe6zRT
cWPbbrop73M3V/0gKxUtL7gaB74uQbKtS16U1F5Z/SPv9Y3tflPV8qmykyv7
ZmHz0lXPXFlfFK1+hNW/vP1Cd58m/Jdc9Yu8+pK87eeqv6WlvN67Khq5vv/m
qi5F0Scr+fapl6iH1fFm7t9VEjY+//O7Dvq//e6L//eLmNZLF+nWKegnacdX
FP8R/ktx40XiKh3pqiu6dAjOL3gtab8UpLj2STqPrLromkeYH+Wtiyl/iBpX
lN1c6xN057coijs+1/wkLaXdZwkbR9z76YojU3EQ1WeZ5jb7v3/Gb/nffzey
tW/F+wcLzih83lVVyppHTPUnuutfXn2b6fVMUdYDuvq4KErrD7b3W1yhtPtr
uvwnab3Ia166n2Oa8j53SzsOV+uAT67mhaj3krKOLywuwvZ94uoVJN36ZCVb
+wBZ7xf1PFv5KO19ko7DlT7Mzx+u9jVR9cuVuuLqeyBp+xfd/Zpu++X1noKp
celaVyTVL+s5lind0uoRl1xZT+RNUfGS936a6+8p2aKi9TNxSdd7MHm9jxGX
bP3uJSm5rk8Yhe37hK2jXPnv8CsbiV8J6SD5ezXyJdt+JH+vhh5WFTsFydX/
n5Ki6OG6LkmpqP//D6bnJf9/TUImWFnziPy9Gm7tC9km6Z//nWz//6fJ36uh
h2z//YjKQkXLC67Ggfy9GvL3aujUQdbvyk2u7JuFzUv+Xg27JH+vpnKTq34h
f69GMUj+Xs1/J9f331zVpSj6ZCXb9gWfDfNwmXOz0vqXqyR+JyQkJCRkgjsd
ewwNfHyPrC+EnCLJS0ImSPKKkJCQkJBQcUjegxESVl2SfTuhIpCsU4SEhISE
hNwjWZ8JCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJxWcNvZsf
ftlOSNkxOGSgdtut//Pf3fCvZSV/fK0uXrpb3rr/D/mfd9nz0uG79iShzwvq
oVufsPn4OmW1my5dgn4Sd3xBO+jSJW0cZPUrXbrE1SGtnYLPSWu3uPGiK65M
x4dr+UZXXcmqi6+DP7+w/iyqX4ryl7j2CZtHmN3i6hJ3PGnnEfSjvPJOUBfd
/hB3XGF2C667dPcD/n3FNZoV9mo9Ter+Jmgf3eu9uHGhe/0W139M7b8krWdZ
/SFt/gubV9Z+K5iXovqsrP1A2nHM6pyyUH3oInF8pL2f6fEkfV6Uf0WNJ61e
Yfv+VdoJ1/YEekicV9LGTdb1ne56FLZuSLsvkbb+6eoPgudQUboF7Wdrfyzu
eVlW8scXZaeofJCVoupOUCfT7wXoyldB/ZKuP3TVi6z9Slq76XpOUkq6rsj7
3C3tOOLWqygy9Txd76lEvQcU7OvS+puueArr0+Kej4T5Q5B066PbbknXZbrq
Q9T9bK9v0toneG6Rtu+Jax9T+x1R73dkzU9RuiV9TyHKn5Lu3yWdT9LfSQTX
dWHfM5XPovKXrnrmyr5D2vFE5RNTcRJW/9LOJ+36L+t7JcF+KOk+QFaKe34U
N+7Cnhe1/5HUr7Kel2T9PUtwfv55T1C34Dx0v6+UNH7irqfyJt35LsweSfNG
3HVH2jqR9j2YtPkv2CeZfh8jqV1056Gk52a66lJWXXRTVN3zv+dfe/0ZWqx8
7RJjf8eG6fG5SuJXQjoobpxJPtBDtv0oOD/deti2T16sKnYKUpTdXPML1/Rw
XZekpMsOtvzB1LxM91lpucchITB+znnWdRBKR67kEd1kq164sp6xHVe25xel
h2v62KK0fpDXOs1U3Ni2m27K+9zNVT/ISkXLC6bntZ4+wLn9jXSp/SFIpnRy
jZLaK6t/5L2+sd1vqlo+VXZyZd8sbF666pkr64ui1Y+w+pe3X+ju04T/kqt+
kVdfkrf9XPW3tJTXe1dFI9f331zVpSj6ZGVlt4+QkA6aNfN+pV6eJ3GdRB7v
3WiGcSGpL5pI/CkZpc1bQkJC9kj6HLdJV3zSH62qM/B5JomzAMm6RUhISEhI
SMgn2RcQEkpOcp6kl+TcRkhIyDbJfoiwKpCpPCf1Ix7J/vFfyrrvC/4ctGz3
uBTa/Ric6vx365XUFD4Pjy+s/cssIWVkRKeWUz0SxZ6P/xzd+oTpZXoecSmp
n/gUtENe/hNXD+3ji5m/8o4v1/JJ0XWKS1H20FVXsj4vrg5p9UpKYfMIs5tu
P0o7D93+EbefCM7LVF7JO1/Ffe5/1ncZ9w+C9tG9H5FX/UhKpvuupPXM1HzS
UuZ+y9C+lmlKajfd8aR7nWNaj9R97v/LD8HnZ468Oz1mqfD/f7mwvJI2buLW
jaT7eKbXDbb7qsTrlJj+FhyX7f0x037mj8+2naLqTlCnovV3tutFkGzHm20q
qv101WtleV7ccZh+DyZ0v82R91NM9Z//dX6TcF2mWw9X5qOb8lrvmPKTqPc7
suanyHMCzf6TdP8uKdl6T0nIDgV/J2Nbj7h6mZ5HWB3w/STpPoApPXwK0yFu
XLlav7LqErRf2HmP6fO3xOd/jp4z5ZUnktrPlf0un3Svz1w5x7Olg63+xJU6
/J91R4Qe5yfjPK+v4+5/jx21Ve/y+hEZnNVHyC65nr+EhISKQ9JP2CXxPyEh
IdNUtD5DzkGEhIpbv4SEhISEhNKQrHeEhISE/1LRzsOKppduKqr9VX3dldT+
qu4vQmbItbzimh5CQkJCQkJCQkLCqsxV6jWObH1J9ueEhISEhISEhISEhISE
hISEhISEhISEhISEhISEhISEhISE/3+S/66GkJCQkJCQkJCQkJCQkJCQkJCQ
kJCQkLusp1U+fXnJJcbe4zM9PldJ/EpIB8WNM8kHesi2HwXnp1sP2/bJi1XF
TkGKsptrfuGaHq7rkpR02cGWP5ial+k+Ky3VtvkfXeh7nnUdhNKRK3lEN9mq
F66sZ2zHle35Renhmj62KK0f5LVOMxU3tu2mm/I+d3PVD7JS0fKCq3Hg6xIk
27rkRUntldU/8l7f2O43VS2fKju5sm8WNi9d9cyV9UXR6kdY/cvbL3T3acJ/
yVW/yKsvydt+rvpbWsrrvauikev7b67qUhR9spJvn2Po7We2dVIYs5Pp8blK
4ldCOihunEk+0EO2/Sg4P9162LZPXqwqdgpSlN1c8wvX9HBdl6Skyw62/MHU
vEz3WcKqycqaR2zVC1fWM7bjyvb8ovRwTR9blNYP8lqnmYob23bTTXmfu7nq
B1mpaHnB1TjwdQmSbV3yoqT2yuofea9vbPebqpZPlZ1c2TcLm5eueubK+qJo
9SOs/uXtF7r7NOG/5Kpf5NWX5G0/V/0tLeX13lXRyPX9N1d1KYo+WSlo34U/
4UuHpJ/5X9eyUlw9op5nSp8ovbKOQ7cuScdnyn/SjiOv+Mn7Pqb8zrROeceH
a/lGV13RlR/CSJc+pp6nOz7SziPMb/LuJ/LKV0n9JqkuSe2XdXy6/Eh3POXV
35iyV9p6ktYfdNefrOMJyytJx6fbLrr7CFv1Iq+8kfV7SfNM0vmkzVem85Bp
v9Cdd5L6X1K/ifucpPczRXnNL6lf2Oo7XImLtHXGlH5p4ybr/NI+L6+4MZXP
8oob032Bqeel9aO017LGjel4yuoPrsRb3nUkqV5Zx5PWDqbjwVSeM10Pkupi
Or+lHZ9p3dKOKyyewp5nOp/pyl+m8pOpOHE9n8TNF7rtoMtv4ua5vPJbWvvE
1SfMHln9Kqt/ZM0TcfNPUrvpvk/c+eWVb2z3M0nnkdV/dOexsDyT9nm2406X
XfLqI3Tpk7ffReUnV6iUHJCVUXw55f+w9+bRVLZ93zgZIoqUIRlKhmiOEOkr
VKJQGYpIA5WhhGhOlIhQxswkQ5nn+dzjee6NZMhQhhAqIWRO/I5r/dbzx/us
917vM9z3dXXft78+q7X23udxfIfPsKu1P2xIS6q9R/kvn+8/3vdXn//Pxv9u
nf4W/rvWbxEX8f+Gf6+9+rPO8Wed97/7nN/lXH9VP//zc/9R5/hd5vUfhf/o
+/2r1+9v4Z9973/XOv9XkSoxt+V5I75Yn0X8P/C/ujf/XR+/yKv/d/xnO/di
H/+5zvm38J/9/Iv4e+DiHP3P8B/9Pdjv3pfFfLqIvyP+x/z8rnP0/8pti3u1
iH9PXPz7mv8T/9Ye/FV1+p/u5b97X3+X+y/y6r8X/r37/bvMz+9yjn9V/Fu+
73fhsUVcxEVcxEVcxEVcxEVcxH9HTAgtEj63rmnRjy/iIi7iIi7iIi7iIi7i
Ii7iIv6muJjbFnERF3ERF3ERF3ER/z3wv+v7fpffjf1Xw8W6LuLfA//s313+
d8e/uo7/6N+9/qvv92fhv8s9/zP+rr+r/c9ynt/9XP9d/Gf9veJ/9HP/0Ty7
iP+e+K86R3/VvvwuevZX9/Wvfv7/6zy/2/n+Kvyf1uHP0ul/VN/+6nv/vfHP
zt2/ax3+t/jPNhe/ax/+41z/Gf/qc/1Z+N+97/+2Pn+2vv3VfPPvNk//6vi7
+Oa/9dy/1z7/Lvryz7Y/f2v//+y6/L15ehH/f/xd6/Jn8dKfff/ftd7/U/yz
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

         "], CompressedData["
1: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
+KT82P+aiVVD4baa3SyY66U3xUuqE/8DruPG+g==
         "]}], "NeighborsNumber" -> 500, 
      "ClassPriors" -> {0.004405286343612335, 0.16123348017621147`, 
       0.6026431718061674, 0.23171806167400882`}, 
      "TrainingOutput" -> CompressedData["
1:eJztUEsKwjAUTCdv4dIreAu3Lt1WPEBLYxEhQiqIt/f9ol3pBZKmw+Qxb/Iy
u/HeXxBCWDYM/fA8lDK8Tls+nPNynXOajvmR5lT2Y8fFG4WAiEj88QL/pEyp
QeyYKCPdJv2CidQBoE+ftLCXU5OLCGajADesevUwMxDVijWaR51O2gWUCYWZ
ipD74E+C+K5mh11JagOvyomoviHCb4EO2LL5lc2/aFoyLZlVMm+oqhpS
       "], "DistributionSmoothing" -> 0.5, "Processor" -> 
      MachineLearning`MLProcessor[
       "FirstValues", <|"Info" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+JZM0HgpD0hOkWRO/KE07RRmk40Axh8wEkDAI1Pnak=

            "], "Type" -> "NumericalVector"|>, "Key" -> "(f1f5(f2f3f4f6))", 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
      "NearestNeighbors", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NeighborsNumber" -> <|"Value" -> 500, "Options" -> <||>|>, 
        "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
        "NearestMethod" -> <|"Value" -> "Scan", "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.185236`5.71927038773165, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.9828380217678336, 0.047071901674378074`], "Accuracy" -> 
         Around[0.6124079257652963, 0.04030806446907511], "EvaluationTime" -> 
         0.00002480224444518741, "TestSize" -> 283, "ModelMemory" -> 515624, 
         "ModelUtility" -> -0.6855273318437267, "TrainingSize" -> 1131, 
         "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 25503992, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.9828380217678336, 0.033284860877299136`]}, 
         "AccuracyHistory" -> {
           Around[0.6124079257652963, 0.02850210572258754]}, 
         "Configuration" -> {
          "NearestNeighbors", "NeighborsNumber" -> Automatic, 
           "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NearestNeighbors", 
           "Options" -> <|
            "NeighborsNumber" -> <|"Value" -> Automatic|>, 
             "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
             "NearestMethod" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.2248607206220448`, 0.11340969098126538`], "Accuracy" -> 
              Around[0.5586634981337953, 0.049448528868826495`], 
              "EvaluationTime" -> 5.01187233627272*^-6, "TestSize" -> 200, 
              "ModelMemory" -> 12392, "ModelUtility" -> -0.9143636541847866, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.003981071705534969, 
              "TrainingMemory" -> 68744, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2248607206220448`, 0.08019276154512359]}, 
              "AccuracyHistory" -> {
                Around[0.5586634981337953, 0.03496539008284597]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.1883368360674598`, 0.13403587930409122`], "Accuracy" -> 
              Around[0.5285422734707513, 0.07042839738432254], 
              "EvaluationTime" -> 7.943282347242813*^-6, "TestSize" -> 100, 
              "ModelMemory" -> 30608, "ModelUtility" -> -0.8880547529594012, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.001995262314968879, 
              "TrainingMemory" -> 155816, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1883368360674598`, 0.09477767917822452]}, 
              "AccuracyHistory" -> {
                Around[0.5285422734707513, 0.049800397378555364`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.0049375881232927`, 0.034553982918147465`], "Accuracy" -> 
              Around[0.5823460348877619, 0.03223248305676092], 
              "EvaluationTime" -> 6.85414307894889*^-6, "TestSize" -> 500, 
              "ModelMemory" -> 119888., "ModelUtility" -> -0.7049916830437476,
               "TrainingSize" -> 250, "TrainingTime" -> 0.005989009006596083, 
              "TrainingMemory" -> 1.42664*^6, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0277097480780593`, 0.040391756240363244`], 
                Around[0.9821654281685263, 0.0339489637532504]}, 
              "AccuracyHistory" -> {
                Around[0.5586634981337953, 0.03496539008284597], 
                Around[0.6060285716417285, 0.028018804642146074`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.9828380217678336, 0.047071901674378074`], "Accuracy" -> 
              Around[0.6124079257652963, 0.04030806446907511], 
              "EvaluationTime" -> 0.00002480224444518741, "TestSize" -> 283, 
              "ModelMemory" -> 515624, "ModelUtility" -> -0.6855273318437267, 
              "TrainingSize" -> 1131, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 25503992, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9828380217678336, 0.033284860877299136`]}, 
              "AccuracyHistory" -> {
                Around[0.6124079257652963, 0.02850210572258754]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00002480224444518741, "MeanCrossEntropy" -> 
             Around[0.9828380217678336, 0.047071901674378074`], "ModelMemory" -> 
             515624, "TrainingMemory" -> 25503992, "TrainingTime" -> 
             0.10328965914144424`|>, "Index" -> 1|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            4], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], <||>], "MaxTrainingSize" -> 1414, 
      "PreprocessorEvaluationTime" -> 2.09765625*^-6, "PreprocessorMemory" -> 
      162512, "InputDimension" -> 55, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.9603219837180875, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.879358312477307`16.341334883723906*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.0008263172731315541, 
          "ElapsedTimes" -> 0.006177, "ExperimentCounts" -> 1|>, <|
         "TrainingSizes" -> 50, "TimeBudgets" -> 0.00413158636565777, 
          "ElapsedTimes" -> 0.003853, "ExperimentCounts" -> 1|>, <|
         "TrainingSizes" -> 250, "TimeBudgets" -> 0.02065793182828884, 
          "ElapsedTimes" -> 0.028305, "ExperimentCounts" -> 2|>, <|
         "TrainingSizes" -> 1131, "TimeBudgets" -> 0.10328965914144424`, 
          "ElapsedTimes" -> 0.087129, "ExperimentCounts" -> 1|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"Materials"}, "ID" -> 
           2846111867015398573|>, 
         "f2" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {20.857}, "ID" -> 
           41728420326286313|>, 
         "f3" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {24.308}, "ID" -> 
           1436697572522429983|>, 
         "f4" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {227.299}, "ID" -> 
           536027689597629633|>, 
         "f5" -> <|
          "Type" -> "Text", "Weight" -> 1, "Values" -> {"Estimated data"}, 
           "ID" -> 5753609278033805624|>, 
         "f6" -> <|
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {106.653196777609}, "ID" -> 8080186329754682489|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 0.332372, 
      "MaxTrainingMemory" -> 26482504, "DataMemory" -> 1910920, 
      "FunctionMemory" -> 752616, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 12, 6, 23, 31, 52.609709`8.473640874568222}, 
        "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, "ProcessorType" -> 
      "ARM64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, 3.8788071767848167`*^9, 
   3.878811643047717*^9, 3.8791492159968452`*^9, {3.879325496945715*^9, 
   3.8793255053952217`*^9}, 3.879333028444346*^9, 3.879354712621949*^9},
 CellLabel->
  "Out[536]=",ExpressionUUID->"4df8f659-35a3-4b1e-949e-0eecf256a52c"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Data type"], 
                   TextCell["Data type"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{
                   InterpretationBox[
                    Cell["Mixed"], 
                    TextCell["Mixed"]], 
                   StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]},
                  "RowDefault"],
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Text\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]],
                Annotation[#, 
                 
                 Short[{"Nominal", "Numerical", "Numerical", "Numerical", 
                   "Text", "Numerical"}, 10], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classes"], 
                   TextCell["Classes"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 InterpretationBox[
                  Cell["B"], 
                  TextCell["B"]], 
                 InterpretationBox[
                  Cell["C"], 
                  TextCell["C"]], 
                 InterpretationBox[
                  Cell["D"], 
                  TextCell["D"]], 
                 InterpretationBox[
                  Cell["E"], 
                  TextCell["E"]]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"61.", "4."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    61.2407925765296354825`3., 4.0308064469075111091`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Method"], 
                   TextCell["Method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 
                 InterpretationBox[Cell[
                  "NearestNeighbors",ExpressionUUID->
                   "ce5b4dca-4732-4cc6-b10f-8337dfce3fe9"],
                  TextCell["NearestNeighbors"]],
                 StyleBox[
                  TagBox[
                   
                   GridBox[{{"\"NeighborsNumber\"", "500"}, {
                    "\"DistributionSmoothing\"", "0.5`"}, {
                    "\"NearestMethod\"", "\"Scan\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                  "Verdana", StripOnInput -> False]],
                Annotation[#, 
                 Style[
                  
                  Grid[{{"NeighborsNumber", 500}, {
                    "DistributionSmoothing", 0.5}, {"NearestMethod", "Scan"}},
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                   GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                 "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.99`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"30.6`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                   Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9828380217678336361`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0470719016743780735`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.8886942184190774752`3.", "\", \"", 
                   "1.0769818251165896861`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.8886942184190774752`3., 
                   ", ", 1.0769818251165896861`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Model memory"], 
                   TextCell["Model memory"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"755.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training examples used"], 
                   TextCell["Training examples used"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               TemplateBox[{
                "1414", "\"examples\"", "examples", "\"Examples\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training time"], 
                   TextCell["Training time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               TemplateBox[{
                "332.`", "\"ms\"", "milliseconds", "\"Milliseconds\""},
                "Quantity"]},
              {
               ItemBox[
                
                DynamicModuleBox[{
                 MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                 DynamicBox[ToBoxes[
                   Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.20282714008125308`}, {
                    3.912023005428146, 0.17255471279615583`}, {
                    5.521460917862246, 0.00492543821281116}, {
                    7.030857476116121, -0.017310951895985027`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.20282714008125308`}}, {{3.912023005428146, 
                    0.17255471279615583`}}, {{5.521460917862246, 
                    0.00492543821281116}}, {{
                    7.030857476116121, -0.017310951895985027`}}}]}}}, {{}, \
{}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.10566639554850378`}, {
                    2.302585092994046, 0.29137804263407596`}, {
                    2.302585092994046, 0.29137804263407596`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, 0.05287794708718864}, {
                    3.912023005428146, 0.2794276346526794}, {
                    3.912023005428146, 0.2794276346526794}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.521460917862246, -0.030063816378420354`}, {
                    5.521460917862246, 0.038731719616811836`}, {
                    5.521460917862246, 0.038731719616811836`}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{7.030857476116121, -0.06638970542270434}, {
                    7.030857476116121, 0.029471345448584138`}, {
                    7.030857476116121, 
                    0.029471345448584138`}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {
                    0.7586295071817292, -0.034538006883451024`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{0.7586295071817292, 
                    7.254177846456518}, {-0.034538006883451024`, 
                    0.20282714008125308`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.5586634981337953}, {
                    3.912023005428146, 0.5285422734707513}, {
                    5.521460917862246, 0.5823460348877619}, {
                    7.030857476116121, 0.6124079257652963}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.5586634981337953}}, {{3.912023005428146, 
                    0.5285422734707513}}, {{5.521460917862246, 
                    0.5823460348877619}}, {{7.030857476116121, 
                    0.6124079257652963}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {0.7586295071817292, 0.5037287089165815}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{0.7586295071817292, 7.254177846456518}, {
                    0.5037287089165815, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.20282714008125308`}, {
                    3.912023005428146, 0.17255471279615583`}, {
                    5.521460917862246, 0.00492543821281116}, {
                    7.030857476116121, -0.017310951895985027`}}]}, 
                    Column[{
                    Style["NearestNeighbors", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NeighborsNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}, {
                    "NearestMethod", Automatic}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.20282714008125308`}}, {{
                    3.912023005428146, 0.17255471279615583`}}, {{
                    5.521460917862246, 0.00492543821281116}}, {{
                    7.030857476116121, -0.017310951895985027`}}}]}, 
                    Column[{
                    Style["NearestNeighbors", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NeighborsNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}, {
                    "NearestMethod", Automatic}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {
                    0.7586295071817292, -0.034538006883451024`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    HoldForm["training examples used"], None}}, 
                    FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{0.7586295071817292, 
                    7.254177846456518}, {-0.034538006883451024`, 
                    0.20282714008125308`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, -1], 
                    Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = (1 + 
                    Mod[-1 + # + #2, 3]& )[
                    MachineLearning`file12Panel`PackagePrivate`pos$$, 
                    Plus[1]], Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                  ImageSizeCache->{330., {122., 127.}}],
                 DynamicModuleValues:>{}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> 
           ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  MachineLearning`MLInformationObject[
   ClassifierFunction[<|
    "ExampleNumber" -> 1414, "ClassNumber" -> 4, 
     "Input" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|
           "GICS Sector Name" -> <|"Type" -> "Nominal"|>, 
            "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
             "Type" -> "Numerical"|>, 
            "Carbon Disclosure" -> <|"Type" -> "Text"|>, 
            "Revenue (USD mn)" -> <|"Type" -> "Numerical"|>|>, 
          "Output" -> <|
           "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
            "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["FromDataset"], 
               MachineLearning`MLProcessor[
               "FromNamedFeatures", <|
                "FeatureNames" -> {
                  "GICS Sector Name", 
                   "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                   "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                   "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                   "Carbon Disclosure", "Revenue (USD mn)"}|>], 
               MachineLearning`MLProcessor[
               "Transpose", <|"FeatureNumber" -> 6|>], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {
                  "Nominal", "Numerical", "Numerical", "Numerical", "Text", 
                   "Numerical"}, 
                 "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          False, "Invertibility" -> "Perfect", "StructurePreserving" -> False,
           "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|
           "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
            "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Output" -> <|"(f1f5(f2f3f4f6))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+JZM0HgpD0hOkWRO/KE07RRmk40Axh8wEkDAI1Pnak=

               "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
            MachineLearning`MLProcessor[
            "SynthesizeMissingValues", <|
             "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Distribution" -> 
              LearnedDistribution[<|
                "ExampleNumber" -> 1414, "Preprocessor" -> 
                 MachineLearning`MLProcessor[
                  "ToMLDataset", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Text"|>, 
                    "f6" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                  "Processor" -> 
                 MachineLearning`MLProcessor[
                  "Sequence", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4209554619632865690|>], 
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 3407689957052572250|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 6386559724484824442|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>, <|"" -> 1|>}, 
                    "MissingCode" -> Indeterminate, "Version" -> {13.1, 0}, 
                    "ID" -> 6398143214224852052, 
                    "Output" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {195.3790406242356, 61.646977913209476`, 
                    190.01452218184144`, 2221.139431539642}, 
                    "StandardDeviation" -> {1024.181623136537, 
                    293.22971478478104`, 196.3462516724107, 
                    8256.563224223488}, 
                    "Output" -> <|
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 5272605604417048922|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {11, 1}|>|>, 
                    "Boundaries" -> {{-0.5, -0.40909090909090906`, \
-0.3181818181818182, -0.2272727272727273, -0.13636363636363635`, \
-0.04545454545454547, 0.045454545454545414`, 0.13636363636363635`, 
                    0.2272727272727273, 0.31818181818181823`, 
                    0.40909090909090906`, 0.5}, {-0.5, 0.5}}, 
                    "Version" -> {13.1, 0}, "ID" -> 6197818036640951475, 
                    "Output" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>, 
                    "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Spans" -> {
                    Span[1, 2], 
                    Span[3, 6]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Weight" -> {1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {13.1, 0}, "ID" -> 
                    8353511239162088478|>]}, "Invertibility" -> "Approximate",
                     "StructurePreserving" -> True, "Missing" -> "Allowed"|>],
                  "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                 Automatic, 
                 "Model" -> <|
                  "RotationMatrix" -> {{-0.016529304250428277`, \
-0.003977987447750752, -0.012477440984088895`, -0.04545168631433546, \
-0.040285349722368934`, 0.9979311128491188}, {
                    0.01596574457173288, -0.006708263073187452, \
-0.00040598392451674106`, -0.014556730175053777`, -0.9989129253090748, \
-0.04075535107125976}, {-0.6653732185251798, 0.1124523798151379, 
                    0.11146524296590558`, -0.7282974622862278, 
                    0.0009043213447041751, -0.042313479935505466`}, \
{-0.4525941812355412, 0.18835870882694628`, -0.811184280639024, 
                    
                    0.31857507990246814`, -0.012693627641696917`, \
-0.0028908558170766944`}, {-0.5865457203965476, -0.1266413177930213, 
                    0.5322936369719147, 
                    0.5964308669513955, -0.018364869771830078`, 
                    0.022858938234849496`}, {0.08872982681677569, 
                    0.9673554726846854, 0.21462337975498835`, 
                    0.10042505493141408`, -0.007130485725141593, 
                    0.012295392549469028`}}, 
                   "Precisions" -> {0.7412798880639702, 0.9964373275433729, 
                    1.0673796022522453`, 1.3993993968464005`, 
                    12.201704677895991`, 16.393220731846185`}, 
                   "NoisePrecision" -> None, "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, 
                    "Mean" -> {0.011739285984329209`, -0.006302120975041767, 
                    0.00004772992030729378, 0.00009223757588118813, 
                    0.00010485167865102885`, 0.00022815565912183614`}, 
                    "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4890335152835729504|>], 
                   "PostProcessor" -> 
                   MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6.|>,
                     "Key" -> "((f1f5)(f2f3f4f6))", "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                   "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                 "TrainingInformation" -> <|
                  "Configurations" -> 
                   Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, 
                    "Mean" -> {0.0117392859843292, -0.006302120975041762, 
                    0.0000477299203073033, 0.00009223757588118716, 
                    0.00010485167865105884`, 0.00022815565912184035`}, 
                    "StandardDeviation" -> {0.2507752898157967, 
                    0.287088148869262, 1.0003557397467897`, 1.000479951290525,
                     0.9999589168221408, 1.000059389178472}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 6, 
                    "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    2255176406760574746|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                   Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                 "NaiveImputer" -> 
                 MachineLearning`MLProcessor[
                  "ImputeMissing", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, 
                    "Mean" -> {0.0117392859843292, -0.006302120975041762, 
                    0.0000477299203073033, 0.00009223757588118716, 
                    0.00010485167865105884`, 0.00022815565912184035`}, 
                    "StandardDeviation" -> {0.2507752898157967, 
                    0.287088148869262, 1.0003557397467897`, 1.000479951290525,
                     0.9999589168221408, 1.000059389178472}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 6, 
                    "Output" -> <|
                    "((f1f5)(f2f3f4f6))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    2255176406760574746|>], "InputDimension" -> 0, 
                 "OutputDimension" -> 6, 
                 "Log" -> <|
                  "Example" -> 
                   MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"Materials"}, "ID" -> 6891347935690616595|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {20.857}, "ID" -> 7118546871732690271|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {24.308}, "ID" -> 1379309737266346865|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {227.299}, "ID" -> 837637490153197528|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 3439309116171360036|>, 
                    "f6" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {106.653196777609}, "ID" -> 
                    6782593871927012987|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                   "TrainingTime" -> 0.056363, "MaxTrainingMemory" -> 746208, 
                   "DataMemory" -> 281808, "FunctionMemory" -> 77680, 
                   "LanguageVersion" -> {13.1, 0}, "Date" -> 
                   DateObject[{
                    2022, 12, 6, 23, 31, 52.374964`8.471698712438371}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, 
                   "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                 "LogPDFDistribution" -> 
                 MachineLearning`TailedQuantileDistribution[<|
                   "Quantiles" -> {-6.55632279314249, -6.55632279314249, \
-6.315785215489547, -6.162522934782237, -6.1398787535563875`, \
-6.126269610777768, -5.9899705977166935`, -5.796356546713496, \
-5.78340630206846, -5.713199421330183, -5.524175855523637}, 
                    "LeftBoundary" -> -6.315785215489547, "LeftScale" -> 
                    0.12026878882647152`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                 Around[36.064732818660545`, 0.5889388483539343], 
                 "EntropySampleSize" -> 10|>], 
              "Output" -> <|
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Text", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
              "ID" -> 5495059474424677337|>], 
            MachineLearning`MLProcessor[
            "Threads", <|
             "Input" -> <|
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f2f3f4f6)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>,
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "(f2f3f4f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 1126745677642804853|>], 
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 6097991814255900671|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
              "Missing" -> "Allowed"|>], 
            MachineLearning`MLProcessor[
            "Standardize", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f2f3f4f6)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Mean" -> {195.3790406242356, 61.646977913209476`, 
               190.01452218184144`, 2221.139431539642}, 
              "StandardDeviation" -> {1024.181623136537, 293.22971478478104`, 
               196.3462516724107, 8256.563224223488}, 
              "Output" -> <|
               "(f2f3f4f6)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 5442548032159666094|>], 
            MachineLearning`MLProcessor[
            "ToLowerCase", <|
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 3704118531076445188, 
              "Output" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
            
            MachineLearning`MLProcessor[
            "RemoveDiacritics", <|
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 2201451281876833381, 
              "Output" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
            
            MachineLearning`MLProcessor[
            "Threads", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
                "f5" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "EmbedNominalVector", <|
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Index" -> {<|
                    "Communication Services" -> 1, "Consumer Discretionary" -> 
                    2, "Consumer Staples" -> 3, "Energy" -> 4, "Financials" -> 
                    5, "Health Care" -> 6, "Industrials" -> 7, 
                    "Information Technology" -> 8, "Materials" -> 9, 
                    "Real Estate" -> 10, "Utilities" -> 11|>}, 
                  "Output" -> <|
                   "f1" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>|>, 
                  "EmbeddingVectors" -> CompressedData["
1:eJxTTMoPSmVmYGBgBGIeIGZlwAAN+PgP1e7vB1IHGqqv2QPpBMkbO0D8BXF3
9oL4Dt+ZXoDoB/U1l8DiZ42ug9WbrZwLohWedD8C0Q4WlUdA6hquN9eA+A9u
OB0Am3d22Umw+k7x9yA+w0aV52DzziU8A8tf//4QbM7Bfw5g/T8FT4PF83/d
AdOfvpwB0Qesbj0GqWtInXUKbN7j/5dB4gsWqj8Eu/PQ31sg8YTKFcvA9vu9
fgzWfzT6Klj9bEWwuxN8ImaB7Vv++xBY/qTJebB7jEog9smI3wHrZ993FOze
3mdXwPYWaT4D6zeLOgzWr/J3N9hdV2RegfW/T98KVufQtwQcHquvXAOr282+
DSzuHHAUrF9X4wBYntUQ7K6EXU5NYHmPVRvB/kjMuQSiFX7UQsL1uhc4PBTW
HjsMtm+yw/P9ADP/nVs=
                   "], "Version" -> {13.1, 0}, "ID" -> 436404844719395216|>], 
                
                MachineLearning`MLProcessor[
                "Sequence", <|
                 "Input" -> <|"f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f5" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Processors" -> {
                    MachineLearning`MLProcessor[
                    "TextToNominalSequence", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f5" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {13.1, 0}, "ID" -> 1494710476529535751, 
                    "Output" -> <|
                    "f5" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", <|
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f5" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> CompressedData["
1:eJw1lMmNHEcQRedAC0Q6IAMkxL6YMIBONIEHAjzpQPkPvaqswmAajYjMH/GX
7D9//Pv9598fHx+/v/Dxz6/f/31+48tfq5ZqtlObuTmrehqzJq3SttarI5Hy
NFLTt0tbuZXm1U9DsyT6Oh6zpV51Gj2Z3ZKWmdPrE/o2bLyYrhLFIC6eRq6I
erdppU+N7ttILQ+p2hkZz/JnRjDV2Gbb1zk1740oUD1Xu3xYgiNPI9hDbYUJ
3su8B4pjFhrd9FO1rONtmCoE0tFJlqUe5l7SsqAoly41O59GhGtKO1vNpaE/
w50dZcRjmivcf9W1lGWlDll64NrbUOzxipnJQtF2Ow2tiUIjbOwtkX6Za0Yo
Cl4ULLBs4vPrEbG7+qKsY4bK9fkHdQsMgrlentTG2l2OuFYcWEhHl0H6Lida
uqn4XPrWnDIMERxWh7BY3uVNCc4anxNsGnKvogoymJIT49DIPfUsHMyC9Ehf
5r11tpaFSxb6mZC9u16tAU3gxbFUzO46iiBjJEFL499l7rrbdDjUSY1IrD/4
DlewBK3INT6Yn3p2BfpBE5CyIdpfbxFYBb/LEjhO9Jl7i1UZ/F3ZaEacujrJ
gVdu3d8evtDlbXQVA+qaEwcfy69HyFvbRSf8PXzJC2kj/OqM4HnYsbYu24bb
0QENI4yn3shLDjbQYnkmefQnYO5O2JEtROGcp95+PXmAXasKpc55fh4GBQrF
SObIu8/yeALjQQIxIDb/A7nYyuk=
                    "], "Values" -> None, "DefaultValue" -> -1, 
                    "HashFunction" -> 
                    Function[{
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file164SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {13.1, 0}|>], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJxTTMoPSmVkYGDQA+LbOV8TL6mwOBw7IXtlt7CwwxbBphMcRQwOqRteRSf4
sTmsOeD/Yv01AQeWGe1G7iyycPF1vPubIlI5HO5cfCdz9KCQQ5dapabS3f/2
MPWPGe/VOXn+s4fpg9ljs+zsl6UcgnD9MD7MXJh6dPqPVVvx3HMMcH7NVut+
3jSEO1gWxq+amceIIS9q164wfz0jnA/zJwMENEzYtWkV15Rl9l6+IXk/zNjg
7nmpqDPn/CEGDP+jhwPM3MteV9rLFp+zh7lnh0nPFrMpYnB5mD4AXlSO/w==

                    "], "Version" -> {13.1, 0}, "ID" -> 6967355064030955657, 
                    "Output" -> <|
                    "f5" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                  "Invertibility" -> "Impossible", "StructurePreserving" -> 
                  True, "Missing" -> "Forbidden"|>]}, "Invertibility" -> 
              "Impossible", "StructurePreserving" -> True, "Missing" -> 
              "Forbidden"|>], 
            MachineLearning`MLProcessor[
            "MergeVectors", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Weight" -> 1, "Type" -> "NumericalVector"|>, 
                "f5" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                "(f2f3f4f6)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Spans" -> {
                Span[1, 5], 
                Span[6, 51], 
                Span[52, 55]}, 
              "Wrappers" -> {Identity, SparseArray, Identity}, 
              "Output" -> <|
               "(f1f5(f2f3f4f6))" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+JZM0HgpD0hOkWRO/KE07RRmk40Axh8wEkDAI1Pnak=

                   "], "Type" -> "NumericalVector"|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 3066956983799749125|>]}, 
          "Invertibility" -> "Impossible", "StructurePreserving" -> True, 
          "Missing" -> "Imputed"|>]|>, 
     "Output" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "ToVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
            MachineLearning`MLProcessor[
            "IntegerEncodeNominalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Index" -> {<|"B" -> 1, "C" -> 2, "D" -> 3, "E" -> 4|>}, 
              "MissingCode" -> 0, "Version" -> {13.1, 0}, "ID" -> 
              3368851722935717418, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
            MachineLearning`MLProcessor[
            "FromVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|
                 "Type" -> "NominalVector", "Weight" -> 1, 
                  "SetSize" -> {4}|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
            MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>,
               "Key" -> "f1", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
       "Name" -> "class", 
       "Marginal" -> <|
        "B" -> 0.004231311706629055, "C" -> 0.1607898448519041, "D" -> 
         0.6036671368124118, "E" -> 0.231311706629055|>|>, "LabelSplitter" -> 
     MachineLearning`MLProcessor[
      "FeatureLabelSplit", <|
       "Processor" -> 
        MachineLearning`MLProcessor[
         "KeyIndexSplit", <|
          "Index" -> "Ratings", 
           "Order" -> {
            "GICS Sector Name", 
             "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
             "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
             "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
             "Carbon Disclosure", "Revenue (USD mn)", "Ratings"}|>], 
        "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
     "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
     "Prior" -> Automatic, "Utility" -> 
     SparseArray[
      Automatic, {4, 5}, 0., {
       1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
     "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
     Automatic, "BatchProcessing" -> Automatic, 
     "Model" -> <|
      "NeighborsFunction" -> 
       MachineLearning`PackageScope`NeighborsFunction[
        "BruteForce", {CompressedData["
1:eJwcWXc81l0Ul8zwIjKTEFFmUpHIKCGFzCJKIlskiozsRMluiMxEkUqEEGVL
kT1LCYWyCr33+/zxfO7n3t+5557zPfPeR+i0q6EtNRUV1W7yc6ShonJgKshQ
MktR3cRRPXzFt101rWDI6uPG75VP3RbpmCpqK9f1JWg4ke89J29v7yDrFY2a
7lUrPaqfz7rnqurXqh7+HGzMSOgYqFNmse/13AVDOjIfspFlDyT7KuUlgqTJ
aP+fcVk12ZdnccX8x++myhP7LXcHkPNqdSeX1xD6SJHPOyn8b06WHiR8tx7Q
t/8sNqg6+H5ADutlg3a2LoRPYnL95k4yr6uIeKRO5kf/BL1rJ/Pw7CWWdYTP
lXrRYPDdHKYSDHmofwUqqxF+6/Y+Z9Ek9DvevGeHPKsbhC7NEDkCz8Y/YCX7
Xia9KYBeLNZ9o3uCfVWP8xsK7CF0NC3/SiFfvld31QfCL+eFjQ/0jbi5OUOE
fN/WfV+fBnMB/S1eZP73x0Z2CzIWOYquw7qb0cdcnMucVZoOudnE8t1pyXqo
8PZ2XyLnntr9ry+TcbvayBHwT3RQVob83PUG6bDHh67H9Fjf9DJgF3Bovj7C
f4bwe/KOTkiL6LVxSNhxHZk/T0tdW0Pkj6WSbaEn/E2ChYtfk/lBnomXwGG+
t/bxwlVfVW1JE1VNsu+xrqnAd6I/i61UOMXeM1wl0PN5mDRdIDnX0Jpv7SHC
VyAxOO4qmevciNOuJfx0at6MapB1kS4tE/A55vVBZ5DY6YTBEUfwSRHrCDxA
1rMPXTsJfQd2SL9bJOf8V1f4CTh/lUnsg778F6tzsU/o/bo+jA9WVLmBa9/o
fUP41cMzHIlBhE6w8F8HcHjKc3IP9DKNG8kHHltnwwenCd+ghvXMc2RMDz7v
CPn7rpix2Ti1V2aEcjVQk3lHqZjCAOFvLeI/h3N5HNWTT5Pvpsb9a1usxyql
n3OwgM4g1eaZH/lu1FitDbtEiEvveEP0pd62qgb5pHee+gVcxiTfujcRHK1W
mp46Exw0Dtrrgl4w/2ke9C9bbNn1lHw3WMPwfS3h6+3RcB726rzTn11J/Eq1
XLwQdvkxc3IKuGptSpjE+c177xhCL6bHa0X/I/MlrhIfxMlZ9leN+wge0h35
YRrw41SvbIqdUpk3/yLfuzLOiEgQ/jLWt22BV4wxr9UCWfePEmXjIed5m5rr
II4L8l+Uwz+4aVP4Woh8UYklwpi/O5SWEk7mhZx2wv5kv113tjsVoU/9dlMN
8ii1rhljgN2cIn1gz6kddzM2kvNmouuF9pKxKrzmAtYtphTr4Yd8tGUl/8pr
K//J3zDEem6qQhfiQCLBqhf8uH8kfEO8RogqBOGcHbL8zNbEHnbJYptxvk1H
Uxb8n/q/mV3AU6v6xh74XY1Dvyjss21i11l9ck6Dm6rjIpE7L/VRlTiZcxTu
lbYkfOpudvQCV7HCR+IYXdUq5BoJDj+pujuQH4ZlnaQofrLQ1GlP9t0yPq5Y
QfhHf1yldST8LuetCd1LcDY8wfQO+ev3FeUPwN/73ITgZcJH3kZDboT4w8E3
RjPIZ5tSZNbAfnx3he4dJvQXNh+/CX8JuUNLAzrJ1+8fzhN7xD4a+AN7WfSz
TUGf2/5NC9GEfqezhwjsUHS74h6+c+X8OYS8d8SmeRVyXW/jvQx5GDoZa04T
+jmHTl3Y44fr7Ef4X3yIKD/ignUqWxH+wUQVdb+f7P+Uf19mlIyt+skZwHnP
4bAf8NM70jvngKPWqsEjzOMzPdxPEdzuq2kPwz7S4a358PN7h/aZwX/jxG+w
DxE+fGrWNsijr6mWM7F+IfE+NfTT53h/CXEbGZ7ACn+9x8E5Cf8eK1I4C3kW
trK1MyM/XmBvqSTrHhePRGqT9Zh3VO06RP6TJxWysW53I/EK+Lyzs/4F/+DU
mDuMc++bGe2GPnqj1MnAo1C93wzy3d/OxwP8C/W1SqFPfPm3YuSZbXk2FhS/
y5ouRRx4fEheD77f3/q2gm4k4H6UMDn30nXRFMj/M8xnHvgLDG9Jh/6iS0V/
A4kfZO0WS4IdkjxXckIJfQjV4kVjst45sYsXeXg7dUmvG1kXDjy3A3zpS0y+
QM9tcR1lxmQ9yWi8apjsd5J5PQc8NrhTL0Kv9SuP3iGv7k0vEVAj4+fUWhXQ
J1KbGiuTUTlb9UQdoV/PvCiCOnq+StQbeDdWu1wWI99Hnzezt5K8Jbr1oCzw
DRFe++kUkWtiU4QL9O6gC9iOkb575PYS0d+cSvQY8pjJ7scsm8l+3wKaMsj1
cO4NJb8G83/860rWObViWn8Tep5/Sd1Y95femWtJ1vW+T0Qhf3KFRd1hJnOH
wJFP/qi7YxsNQLfb9dB/+M5w7+B+zAuMqp6tJ9/vm2tvRTwfcTsQgvg5r+Db
Arn+SyvlAk7MjYVekoTuZd4aL9g56vqFIsgV25Pjj/h4UDQYCLsbvfKgBn5/
Ezk2sxB6fvFYB8SvmHPsHdS/m141irDHBOMQBS/tvyL5yHdybY/q1Ml3lZ9B
432Ipy+PvCFfCdXtLtBrPN4y40D4uWT++OtL8MuYlu9B3smeKwyB31j7xshi
rsbzrxl24+IyGca+L09ncxE3oYozxoj7eB46GejRuz2WE3XK07mF4meHq5cY
4KcxLR/+Q79x+2OYD/Ynbs81Ai4VJ//9ht4xHa6WkHfQpnOFj9AVBPi4IL43
bzjfDv/kN0xfa0XiU9JepA3+XkXn24nvKWy85chnrT/pZhFPElQlQ6BPklpU
hRy8yzIGwGlS42MS/Iff8OuF/wj/jeulnxki7+V1PYC9+SpfvIS8C/TT8bCL
bLk1LeS7cdTpBPq+cEOmSejPPWp+ZYLQK82WRKJudt08cAJ+tZe2IRj5R9vh
hxjwGl6kf4k6fyPpHKWveX7ui3k46lNM4GHkh77UqAY+kkdPHR7aGEDWVxZK
dtgR/MWPDDPBP1T1ZOfA77CTR9MhQtcomHQP+YGRs0yehazfTrSchF4/nhYa
Ao893U8fTxG+4fHUetjXNxjtBjs/WzrCzkb4P+DKbYVc83PnPsNfTNdxSULf
snFJd+CVzEeVDn33J3+vgbynZp5XbiH7GNdPUuphYcuT56CXLPgRAnz+W3Nn
EHWlOu93sSmhe3/3uS3idTB4gQv58aLSwWhVsi6ZURoM+xzbdtAdeTt22Cbt
JOpWnqCPN9HLXc5FFHEfGe37HXltktp5CfXuVeMQP3CdnoiNh7+Y04wVHUIe
DWmbAQ6ea28ycZN9090CJrDzqpV2LPZVr73IaEX4xht9YEE+Kw3ZFK5P5l4O
AeWQt9TdlglxuIlP8DG+OzNcfgp98uwMu4Gnua4wpe//ebqaP4zwf6dj4Ix6
5k81WiqPfBYwa/uM2ClVXokOOCuHSreivljSVZrBbhXl4fXoWyTUNjOyIV99
uWwJ/Lv5KpYgd9GSLkWfZ5fnimCPJ7ySG4Fv4ukQeYwK0Sd8kW/Ph/TaI/5n
u828bIn8bOrKMuDv0RdpDn1DPh1mQ5/+j1+KH35sof7vA74XdR2uBH/j5FBt
9Ndyzs05+5DvjkXSoL4lFIpegd6iusJ/sb9t9M4I+hKlOR5OxEewY2DzLPGj
BxzS08gXtSsvs4CH7PLmAvQXrlx8pYhD3ury/5CP8ksHeVXI+vbTepuv4j7x
+f59nL8/OkvTnMxTE481RxO87tZvdkaecfu2Px91eKZNWhZ5nCPDyB1xYjYu
dgf+whEs4oV9xms+TEP+Jl92NfhxerurIPzmWAZPhifw3LV9cj+xY5eP7x30
GXbf3jAGo98ZkOel9J/C9PWwX19gXh/uS9q9lszo83nlnpSjviV/6LcDjsIc
Wcmoi/Q0D9L3E7r9dQmOTGR8o5waCfu+/+nn7EPm8i1U/TbEDgbqvIzwo20f
crfBfuvtcg6hXxFYFD4OfeqYrhbAj6eWy5OAc9br1yuwYwdtTQX6+b823Za8
hC44R8QPeZE+ZlsG4vdI9QnK/ea7lHA7xj1TlrfhLwIm3vfgd8dbl9rOkVHQ
X0h4kpyn+ov5APafvmLSh7iS8h56jzqxyZ2nDfveq/AehfzmD3pWgPduBs4D
iN8d0wW00Leb3WUf5BNvDnoNPSRb7FmUiXzFg7+WKf2gcss63Gu0SzvWIM9x
5i44IU5ELn6vAG7PkwxrkQc9759vRF50r2V7DDu6zrVxoy40sTWM3yF4uXz7
NIm+38Y1oQjysp59brmdrOtG8rnUEr/YdsJjAvXKdYAjl4PQKb1MHEYcuF8T
TQeOMwIfa+HXgkq0bPC30sd5Lhh1mQ/KQF7++WaKfTZb0RxH/ci788UE+c2o
QPt3JjlnYHsBE/SVtbu0E33GWjVHd+QRDoE0WRnyfY5H4ukRMr6/xHEtknwf
0CuihzzuWXso93T694KGMehH5B98gX6ax8ci4gl9tdfvJejty3L7GfATHMqR
gX4mEqvjsIN/erkh8saDezdsYM9vuXpu+P6C8VcO8Gk0X8sDHI8miFyDfs/y
bCn3e8ONm6bNUG8u/ryDuNQMVd4G+SutlU1hjx7hEwfh3yHsLeHYV1i1uw35
uorfNQDxzHNEMwrn7Sr8fFCS4KvUxaeEPCR4qabKhPBlMT09AX7TbA9oULfN
EujMII/WxpItqB/J76z3YM6uGi6A86Uv6RuhDkizLrkjr+0JYPNDvlbzUk8B
zs7/OZUCr3+pAtXo7+9qO32A/h6ugmfQD30q7HmH7zfe+9YBL+tXAazQMzlW
sA73IwWu68eBk03oTBX0ahwXsodes5/LMqDH9ebNwRg7RONm8D3R3ZQKeZqm
nLcU98+9RefP4/sVZWMlxJm8nFY6+A9rDbjDLpxGx9IofTnNFU3kEbXInzch
57Y/2f3Ib3+nbtgg34W8WOuFerOxuUsX9A5RlRrw95K4MBrUW3rV66fQN9Zn
sQ/IoB9s3vRKh+h/ivnKNugnqmIdhroiIZ2XijwaX3iP6iKhu3rHsJLSV9it
dECvvYbH+GGnS8LbaYBT+zEJP+SbTDa/vYjX4aTpGMjxzfiTEOI+X2DmcRDR
k51upx70+jF0ig73sVzGMR3gUVodzAmczU+o+SAudt8wWwLdpSGv2/CvsxZU
zMiPGcrNC6jD/m5BmeibOC+sZCAOxMMdqJEXn4y+zoH961Uep8NPDYITfMG/
5Ny/P8h3oQYHFZAfO5p4JIGz9EuPJ8gfUvO186C7F/zqD/hYptRehZ4Tvbbi
OJ/ze9hunHPk3+m7wH974t0YyHff3MkT8STm26YAP9RluLsMu9Df0OIH/x+t
sl+Q/433NFHy2Q+rJz2Qmzb7wifoc2c8hh71/w3Hqauwj9CZR/PIFy+0kw7A
7ta0oRdFCG4CDzu+Qv7FLVoOFwj96SNlA3EkfhvSlt7Bn7XtWL9sx/uVx7wR
3kPGaveWwE83TVv2Q74KP6Fq6DdYt5EefG+dWZDD/Vrl6OZnkM/+l8tjnHvj
dq0E3g91dobbIV+e+3mjCf7jdXhvN/idY1D8DLw+6k58Qx0LXxNUqwX5HctY
y4k8X33kPeDX41pt+yHXyb/yD+GHef23T+M+t1xXtBd+pS4lVIf1n+xv/0K+
m89tKO9AumOXrIBPkKLdMvD1UL4mAT87JXekFvcQAcOdlvAr4+GxPNih9+ZA
PeT/zi13HP1flDP15YUgX9VLE8trRQl9+/U9dHjfcp7acg/9cbNrliH6dE89
bTrg+SzGi5I/UpPFToFP9LW2h5C/5LOUYhTRx6Oe5RrkOtIUoEipk32hVqhD
VWVGL7Au1M+ggPrx9N5SMOrXASebJcThbS3bv+hTngWUMuuRdc9DUU9xzysJ
2cMEfQT+u0ixx/ejDNmogxKqEQ/gDxv7RDbgnEPt9frA+eTEeC3kudo0qY64
0BZ/zQL/9JueXg9/tDrIPoH8xa9tehj+bjHm0Ae/8x+vf4J7BE1J1Gncy89s
5jVGXQnYpceEeiDxee4fxc8SZfYjb/lyyH5E3EzIzCjC3p+mpIvA51Jydgnu
Xf4qU8Kgc9vjsg722mqzjns3mWcU2NwOQRy7RbxHnKzbUpkPP35wToMD/cST
4KT1qAOBmfXjwHti0roEejubdDlLkfU7hzOOI842fiq+A38x9uZLRd/4g+GN
KfK338jpBNTR8vdfXlPeA97OsoPe1f+CEs6j15wZwb32fRH7EnCdpw49CPve
5mZjxnlm1uFLlPvYoRO/oM95EaarkOfV6+E7yNszIhlVBmR+WW/aEu8CO9c7
tkMOYa5Dd2zwLraSoAv8+3UCu+Bvenv+0uGdJ5kuthb27j/KGhSEOqqlFwq7
RdKGXsK9tyCdodUddr9qEMZP4rd4dW0vvjdcoae8J9fvCqDUh43Lr48jL/j+
ZzWP+HpxWPk+/P+bSmIN7EQnLdaNOKiO19+D0cak4hny6y6BnYyQ69Sb4fOY
L/nfuge/m/BT2gd/HLzfWQH/XHdStdyInGcZ/vcK3nE9XcXfod/0/Txlooh+
I1j0OfgGeQoYIi5dLXz5kO89I86GAL/wK8uhwG+rhcZm3It43rnFwb4z/Sfj
4G9ZWhLB8FO6vCwh6OPS67UP9o0/yu4NPxJaP+gNO6U8FDDmJDj9qBp/Eoa4
iqjcCvsGX5ujvJNHU839gzyzTPEm4C/idtuTop9cts4lst68rz4X8d+lOTKH
d5J9qdYvKe/elRKBoYTfwebuAUqfJVacjv7099fnr/kJPV2kiDbsGbqhwR9x
q+bkqAf9Pook7jhH9hX+MZFE/7WmPase8qYNSzQ6kHXu6HB/yF08ahSIulcV
2SMFnDjPjEVDX8cFFQbE4yZxoUX05YFDCzSI37aq3f6Qf/2eZ4fAL+Wezlqc
233UTIyd0D2X9ooBbjpyCdywu87RpW/gr8dwthz0fQGc62AHi1D3N8BF6w11
D/bvzOWPw/8OauUO5fDzTqPEc4jDwN0NlPf65q09vsDz1rHAKNiBi+1dD/JZ
ebLJHbwrRqYwZ2Pd51q6mhWZb6XzDN5Fxg8+J3jhl66ffphT3vM51d/D7mGt
36xhR5krm2Thz7Qj/xkhT1ZWa53Ae9eCf4cs7HMoKftFBJmLOH74gr5UerXz
IeIk8Qt/AeqLxuI3BfTJNFZClH5P4LLImWvoTz0yKX5C07eSBP3CRhVEKPnb
TqsD7/9d76224bvvQ5r16N/iLDOOIl9MDL/XQZ8ifGpUG/Vjz98DV5EfOBXn
YxDPy2fuqEHvqH/MGyjvbkezx6Gn/1VrEfSPD8wM7+xAvJtEyaDfcD7ieBd4
Zrnv8MY5KtsK/yLPPL0mLwd/cuCzb0dfGqS+Ux/3IsMBuwXYfdcdjQzYcW1/
6C/4xaGyP2xfCD+5K9nDkC+BYWA/3tVP2m4WgB1nT6tG494oru+iDzu8689h
xn7zcI0F1OuozIf3gF/hUvEP9GOVZ5so/tw2yzQBHMJ21PHoEhy7Qq5Lgd/6
Ilcp+EnvdDQt8hm3TfMDSp47XLEd9VjzwEIz7DDLeP8+/Jtee4AZ+t22HOc8
R/KRDPW5FtTRneJW2pD/4oW6vCi8a1kVzQJ/deveF/BP7TNTOvhecHEqEu9Z
jxPbb/0k30UUX8YzkrnKmYdVeEc0Umztg9x0bLVRyMcN+nRn0adN0wt44xwL
Gh1/yjtv6JYFxJXazj/RuDcJiuucRX78EaDBClz3Zrx3wDvER517gvjf5w9b
YtIZMoo/ZimBXIbMv4qhB6e68wvkR6nm7WyIn0oN9QXY2e47dRz4rM616uHc
Tcz3aFF3OfaeeotztbPMn8FPTsbK2eKdL7R0qAD7OXaHUfpMDl9bVbzP16cF
5iIed4c37EQ8rNnTHe9I6PO+jz8C3397Weuwr/rO04PIB3mX937Ae8JobN0Q
/Oqnfw4j6tDiw1pFBmI3qVUdSeD5bYy+EPZ3k9KLQF7rznBVQ9y++Gv+EnHQ
6JQocwV1x6DqCfx7U91zysjMuzUG8r02bX4B/Zgfub1D3LLPHngF//8z7NiB
ulEo5TeNfJdlFJcO/1OYrVsHPC93XC1F/eZujA2D3tvOFaa2EVyCkxl58T/W
Ha8peti17UCaLfxoxZnWGv8HrWXg7EEdGz0+wQ0/YOd8KzdF+qu9jAt0SsRu
mUsnr0Gvs8eqYzEuWs1KQV617gpf+N89x5hEvLekyHuaciHvTMp/Rb11KVSx
Ql36Ldc6TqnvCfmxx5FHpHh5sI87JNMEdA/81f2AL+e70L+wW1pNbyLoIuqe
qf0mcvCd2O0O+q0PDsmAriz6ZhLy7467KxmU+lr+aQ3y2rJDRzT8ZWdlVQn+
JzZglP+J+PrldDh2K+H3+lX5GPLAyO+l16jDXU06PLp4l5kaNUR+47s7OY97
lmSku8UG3KM/GEdR/n/xsy3VJfMr+acToYcKa/An/J+15tG5GsgxZKHBjfV/
OX8LKP1saqPuFYJb5ZB0EvzIzOzaWfRJJ24GfkBcb456qc5Bvl9Y2amA/0Nl
9MzOoV7qC796hO+ax5IpfYKXUIMu7Nzi+csK/p2dRxWLPuDbjiMryH9KiXGu
wbjf3WE4jHPvuNO+R14yPtvCh/gZLi0apPy/TP95hzehi2ZkrsH7RnkoQzLO
aQnKKIZ/aQt6qmBO/fDNVuRT9VHefPBbYze5Hv7vnZ47DfyNjxlkQZ9DrJ8t
Ma9fvcWDPHpNpPQc6AOoQyj7LlyJ191N9HF05r8Ie6hGfpaHHOsdaAThr3Jp
ZrV+qNu1K2V4DzQ4kt+Ces7jLCexhuyb4koVaSd23zF+X0mOfH803k5dRdZv
WWQnNRMceLknr+EczzkZS9Qrw0t790EeO5Yvm1Anx/T2y4FvMDtdDfJKDO2p
IthXJfmmJM6RVQhghVzW5U8awM925PcNFfQZnBdi4E9ZAd9/nSf0P7amGyCO
tntOxCDPPfKKvBRG7DZfvfARuG0akjFF3J0352yA/3GZ6dOijiqbZ9PBb6Qu
VxXjvZzJ6NrYONEnkS5FJojMzbTCErD/k3CTFPyRM7v/MPqdh2b8apT7yo20
b9BLXSdiEP9rjPwy2gC5JgcjTTHG5Vz9D/7wrDyjD/WBTcz8EcbOD2VM8IdW
2ulOyFPdwuIDu85zTlTiPEeXrj7U8y4+/+vIM8db8t8jH8VHbZSBf5853MsA
f6s8t88L/ZOyR3YN7H9X2y0JuIkeb7EHn0t3IpjgR89ic34Cl/PDxpdw3vci
J8o7VKjUXy/8jxXfTFsKOztVXdwNv8zJf9SI/xOqjuvvxPvZo/muCvhzmaT5
KPqNXStMU5BPoTHoK+rLKkv5BuAo38mfiLqir8VEi7mwR3kf6qU4u6MgcKo5
wXEqnPgHs/fFU8Bn3+8Xo/BTRonf9/E+2zuyQwh15clmqwHc14Lfvj4NPRdf
TJofhT2kTTUQv8VMpucf/62uNDWIE2nY8Ul1bHLPkT92z1Q7OD9JXBv7qCrh
6/chj3wfWtul+4+s3zNJOxKTk6W6KZy2Vlr8tarycyqBGEKnsKnxv0V8F166
EkXmN+t6JDLJPqXn+fxZZFy49UTMjuzjGl/doNwzqlo+8IeuiZwnUXjxLujl
OTTkfpL9my3KkyUJX8U/wnXBlzsrA9OL5b+Sde+lM0fSCJ8mTs5wKvtnqkYP
bkvcJ/NPWVFPv5HvuydeT0DeVr0doe8J35pin6EZsh7SwmcgS/jZOduKQ45U
0xIj6CP2ibEMcjALFu24QfZpvBhXsCHyvbCRye9Wf12p47pzKYfQ6ev5LkG/
wUJhHop+RyJlbmL+ZiNHKvnuc17TNILM+9t2TUI+p4S6ikdkfD5MbQK+Iw7Z
/qB7uaRbMUH228wGqmLd8qc9fzORc3loO3sbGT3HmOSg13e1ybWww5+pxyvA
p/75qvwY2be2JDp5kowvE6h+PQSe+SKx0Gu/4mwmcBb/Zp4USeQX78n5B/4T
owslJ8nc2TdO5jPZdzo092YP0WstP3PvNrLv61Tx371E/0/XqVm/kO/RHp6T
sMNikYsJ8Gsu02cE3/dptPcgX93e0g3WhJ+FQuh/6WT94Zv4WxKET0q70o8A
Yif1Q1Etg4RPSVR9mShZn+Z+sQF46b569FuJnOOeEr/1OuHPfWG9ZSPhZ8Iy
2HuV7OOcfCHuT8aj0heuAsfz7eHMcmT/Ard7Rwuhc4s669NKxtur0YHYf8Vh
bAk4HJe4wAy+7InnbBTJGCisn43vtAlNMvN+I6pDabefRJN56pIl1RXC3y/t
EyNw5ecvmVsg3we2cI52Lgyr8o9pLcK+xxPb5XFOwdi1L7BLOe+4YCLR93vM
8gPsn849pAx5IgvM5vsJjnRerX6wg7Wf3DL0efu2tQZ2Gvdaof1Evsc4lsxH
Qp/NjZT4kmLKqBwg621B4WoXCV+P1NYsnOMQ8fot9DYcGygDXg+fJQvCDvFu
1fvgn/1i8SzAo9tinzriYr+I0y34efR+R1F8H4hdVwN77I4x9wK/TTu2nIVd
wx/5u3wk53V496YCF59jU8XR5Fy6XMc9vWT9hL7yhmtkXnp3gyX8YvZD2wHY
eTE5dRvoywWesC0TedSN6E9Dnp9DjNrTZH7dq0MacXepjM+lgIwP3NZnwB4T
57YIIb4CxcK5gefFuGKmVbIuvO7sdujHQ3eQAfw4eDzC4Ocx+o0voUe5gdOt
RWIP58lKOeAfZ1FxAXiumhXqIO67ZR1E4cfLX9aPYv3N9FWpDHJO7/3Lr9qJ
3Jkc4iKIZ4b3RevAp2J/Vh7ixuyYHSfwmM//EjxI6B71+sjivF8JiSLwi5z5
NFbg9nNgfL0V4T8rrDD4gdBd2lTKu4PgXKIhFoe4dfg7mo446z6X6v6efG/Z
sinCj/jDP3a2C2fIvsGHg32wc7zf7TfAJeHnTs1A8t10qegb4mLln7cK7BFU
r00Lfz3abqYBv3JwH9iP80N8O057krmS/ZX8PbCbOtNoENm33Bev50jW77+J
od9OznfOuWr2gNBH2C4wQ/4zFleVgfeLo9t+Y84XlCoIOTVbBg/g/OHTWXw4
3+y/SBXkg6I1BrnA4529tzDGvJUqPuBtNe7H8Ifg9vVtI8sswdsnlfZVPVkX
oDrqDLsf1TNmhL7uewukEdc1HXlnwa9Y2JWSny81x6/BPNHkJy30bLp6/bw/
kfteq90O+C3tgDA18uXl8d0esKP4q5nnCmR9UELyGfKkdJhWz2my7uW3zQJ6
pDdzFiEO0tZM0EH+V1szMoCHVcWpZNQd6gdFU4hj00R7it16Xpzyhb0ZPiS5
4Xzj/nkd5LvIfcrrgHfLh9vT8Oeekoo06Ev9QmpDNjm3rHRjBPinlpnc9iN8
0s5+Tv5L9intnc3sInbuilL/hfxkxn+zG3F+rD+xA/4hdYp2FTjZf5a/CvvN
l/cOgK9C0LPvkH+dALUI8qbVFdY58G8R2MaRQPhbUe3hgl5B9u2z2HeuNbUW
9aL7xko+7PrfA0df2NP0Y0g38DsvUW8Gv+L56tsC+Q+0O96H30cpu+/uInlr
DZt5szjBkV6bjhl5pX3SSWCK8HeIOTn9m4w/5J0SoH/x3uCjwEnlaYMw/PkV
s9ZF5LMEXQlJ+AEt3dlSnBvzs/UV/O+N000G5H9O906pXLLewfBNHjh84+Op
yifz25JbDyOfVR3dfQx6Z35X1oWeRyXX+iM+Pc913IJd2yo3/US+tFBVS0O9
US/7exry2Uj71EOfoX6WU5AnXGe+D/vTkjy7YeeQzNKvccCr75U85hP099a7
kfmtCeVjkOfwe43r8MsbdAK1iAuFQaVw1Hmjnng68L3qYRKCOD913ip2J/le
l7PzCuJB97+8YsjXvtXm63dCz6B5cPYe4TeXnxeJPOlhRZsEPBSey7oAt4VO
SzHIr9KzX2SF0Lf0SsagP6FlyRLFetyGPc9xjk1z/V7IZU2/koj8uT94syVw
8e1onsG8w2zMG/kpxd7HB/Wf696pGPhrAodMOOIq2FapA35j3CCSA79x3BQu
i3ji6wg4BDsJXbmYjry2VbNPF/ngxIkzrqAvSagvAJ1F6k1rKaKnygidBexU
bpGyFufXVnCIIe688l/LQc4fAd+1IYfw5INJ+NGfN9/LUTe/qXXYQp+acA4x
4Kc3eLMBOFgqDRjCL58c985EP6gt66UMXMwTHrqhbm7coOENP+VYHNLCPtZr
Nzuxr8yBfwX5vutjvw342v8e+ws+QWUFG7H/GEPbeAfBu6b4uibyZUP098+o
l6vsuZzoLy/O34zD/kvX3ZKQ3xUc9j5F32HTu3U39I2yizwIfUL9v7VbkPXi
1a+D0GNL25UcfO+iP6WH/PA6zNwD/pU/vScYdk8XTm8CTnYmao34zpXWFom+
4xFdjSbkTM0LdwBur6b3KcCeH5qMxKHPLIPQLMbR91T2qGtDt/MHKXo6fw6E
Xt++/XqD+Ga833oXfi4zNKoOvWzmtnJDzrk9QdzA+7uKVRrs6yBmsAv687+9
ZQx7CPSsFAWT/QKv+0OQt4rZg7+fI/MpLb8R9LXc9xoTxAjf4d3OEcfJ+lzr
s8uIww094mchhx6TlekwoXMVqGhEHqh/uCsbffagUBEbcM3ZqzUH/Y7f0bCU
IXxOdBgth5Pv/524lwW8XI+1HQXeNr+7zOcJn+1hsXOo68/aV2kQ5wk80++Q
p9zPcOX0EX5M9BtOAocNm8Z/Iz47288rIq/ZXla7jvXM5wdi4J8nN7gZg0+F
9uXzqG+HTLVl4f8n/G/cQVysqL5vRp05897tEuSjFjx3Hfx+tdnw3yL03I3r
zRCXPvcaZkfIvtFjIqmg57KSHj5Lvrd+VhoAf095AUHw5T1hRYs+dq3ctAD8
/tGfN3qwY+I1Rkf0e6/p9J+Fkn0+Gt8zgM/XPV+jkEc63CK8gAPjlW9r0U/Z
jqVyIo4+nvz6GHniI+s/Z+hvZcvbhL5S9MTnm1fI/ssSCbWoI8wswY8hx5le
mSbYYfTtRh7cGzbERN9Bn5h9UCUYfnLygkcqcJ79G/Ac/H4+2e+B/F48HZoF
PwjKzHaF39B16+zCetDU2z7gMrGGRg78naNprKDPVTmPKtTVdtcDXMgf4zcv
JyKfJNtOm8B/Okpu3sL5M+oF98D3hsWRKsTHzeZ8A/Rjfx80fQWOLSoBa3CO
V/sOWvjl9rN6vagDuX3cNLBf7dapfOwv/CQuhP5wpWVkK+wWcd3JHfGkztGX
DbzsJTT3wR9d3Sdeor5fenbMBP4s3PZi8hQZ+WWTxBB38zeERKFH4b3fb+C3
f4zufnOGP++pfYR7Q9lUsgT6ZztFE3cnsr7HK7oE+o4/s6UDXseiRSRxXkql
Qzlw6aCOooPcyyz12Yhjt1eue13IvqwTAlSwZ9LWNxT7evl5n0M9k1/g9UKe
Umxsa0cfLFHXK4p4X8qz4UHfRP+krgz61itUPkW86Z195f2J5Dm+V5UHwIf2
Y5gzcN5a8N4Qecxv5FXYEpF3r4ELLc4rjLR4AL1+S2zQ6kR/3X6MCn2D96er
1Mg3GwoTHg+R9ZdZlSXwa8a+bCXgPCrZtAX9wItPmz0hz/kg0WX0Ixs1Y16i
r+blMJKF3yrNGHEAl17fwbvonz6V2dXCXrVmt97Dr3K7PwlBbtdfG8Rgr5e/
I/rCybqYUetb8N9f43ocdjA+PnAS/c1jU34X9DM5B6e2IM4N00wo9OIdRpn2
6Lejjp3FPmon82LIyc5uLor410+WDUC8CyYZN8EPJlp+agIXlvg8Ntgh0GIg
EXb5JmCdhXjUZd0VDr/580D/CezAMHpYHmN6tpYu7gPhm9UafpExeFLVg9JP
dWR1wi9d9u+PxZjeuv0i7PPXrMka/iFho9A6RMbWd9634ccN9+VunCDyUrXm
7/pB1i24o1eh19/BDazA5VV2mgv88/xp9QvgV1liRuEbMNB1HXhLPBT4gPgw
1aD/CT1i+n4+Q95O/xo/B7+b7X/3D/bP39eoCf+QaVujj/uBu1rqKvC68ULh
I/ySk673DvphE9opSj+0viFkE/bxiTeawE/sp/97CDwUkuouwA/f7pJjAT+m
r1xj6Ccf3X3yAfkj03dVE/ejaGltN+gj/0ldeAF9w5oQX+TXTVNVzHifOMgc
awL/MLEzOZ9C9NfUPLIRfDJZbncCb5qn9n7Qc+s7HUpdvsQ3IAk9A3hOUPqK
KaaP1ZhHuZ6/6kr23w5ZuQv+O8MCLkPuC2mXxeDXrJm7FmHP7mfxN9HXrXYb
dKDvoqK5sYzvoRVnTdCHRhVmtwC3/HKOP+irsq4OfgGesR8TQ2EvtpNrruEc
j5Nb1IBPuvmbM8iLx6l8TOBfenFOT1DnU9aJOqNuq5uV3sU9tSIitgR6tWmy
0CCvzbdZXkKd+q0S4w5/u370X7M36qWi0xf0l4V6BR3wy0+7li8jj3N8dN8P
fRiSnzgBj66ew59RB2uSuV9Bf4WBzUmwX8FmAyrg1lmbPAg7dHWWemF+1mxk
Ff7TOhGhcZ2c83Tn0k6cl2K7TplSlwp+NYPPrzrDFPRJz+J9B3E+x8zUfryP
rDYM9cFPeQRfn4H9l9eclgZOOTzJfyFPW56nAPLJ2oDfS3gXWPNCKg3ymt9/
uhxB5v1Z+ZXAeSFNdTfsZre99gnwWaJpXoG9gs2WVCBXa9dAOM45kNtrj/zS
XS4fDvxvuxRwok7RiOqtRX9w5Uy3OKV+rxlcAzwdKtX7l0hdC9dQLIX84S1Z
c5CPLjUscIFyj1B2Qf6yi2KwB91zdbpQyHf1rKMM+hSVVs5zyHN1X95sxb0k
d4fBMPj3a0TNwh583d9HAgmdy4/5Ypxn8PWJN/K63mPzjYhTjksnKX2S9h3+
I4gL17BbevAH4UVaW9znziQYueI7dYN/EOXecOdwDM53/3jcGvU5w0sjFOfZ
c57ZC3xvm2RGXiLnHfD7o4Z8kuk014Dz7f1mWoHPCNcXf/CzrjHNQr+x3blj
E+SITc+zhnxN2bHJwMvXYv417kNePbeOgW6ptOgU8kWo8w9PnKdacagEcpjV
PeZGvzHm9epWG+Hj/fEKpY/bS+on5X0zaf1LyM0UJnsRcSAQmMYHvXj8zFSQ
d3f+oVvAXNVWvgh9Cv9Oye2Qu2SwYm03wbNpKrcIfnEkPu076ndhai4D6H/l
tlT6Erl4BCs+Ir5T+plnkbf1MqNu47xjPS4BmHN6/rOCfz0sPxkCv4+dTfBG
/cge3jcEPJ6ZN+ffJHTyBnEv5dEfyu1+Q+lXua/uA05UvJNnQsj3m9eMusyQ
ZzzXeMHeyZf7jsPvRxg8+0DHc2NFDHFhvvjsHvLDxfKwPEr/dSJ5BjhFXj7K
gTgynFUPAs4/xAdoUcejOQUp7zEaJp3SkFNROEAY+xYLPrpAvrYIr+vAbeAn
zQjO1bh/9yrue/UxLzchLtx/NpbBPltqcqQofeTnwL3A3fHW3XOQj+Hm7wrE
s4zJW0rfcF1G/Rf6LI9Pzum4T9XNnUgEjuG9nBQ//8r48zP0ud/1J9CSfF/9
XfEL8fZAegvFP8VWvkli//f3X3Ih51uLmt2U+9jdizaoxwJeQ2LQl2mhfIZS
n+L3MQLPCDZWa/DZzNb7Fu9Id7a0LcOfNOv+XkDdqJEYtITfpeSJOCHv/ds0
WQ95fRsDf2K/xEVVRtyPzhe4ltxA3O1Z1cK9NObo1VCcv3TG6AzelarqDlGj
bkwEHt+B+noh+8gO1MEm3cx7wMuQdzEC8s1t3eIMfMacn9+GPxX2X9JFXVeK
V/6HvDwn5e+K+8x1pRhzvPMLJSROQb9x3uI18ENTt/Jz4HctPGUReLjqdXZD
3/OHvizivONhjvy4F33ieZkBuifzF9bALub5uQW4z2vs7HNA/N7ct4sao63R
j5+gey6z/hxw8brYM4a4PNxgvRV4rP3bQclvlhrW3XiHLH81sxX16D9tqSno
fySMZwz77RcuqMHPCn/vZkR8vaU/wLgV8k+fzoEedOaBZejPwhaDDC8jv1Zv
fgO/f+2z4Rv0kM/+sx98tNeutYcf3JYtHkM8yuxbloIc7nEe0vDvx4uzCdBT
WoxXGPes3SfzxmGvB4k629DffDz6ZgH14fwNP0X42YHtTpPo65RmlV0h95O5
sBHUrzZLGxXIP1nn1456wHYyMgt8V68VKSNOzCy8b6CeCIVycKEP5H7jQMnr
fwt4KX1EusseCm5SjVKvYJfV+1MMmJsyaX1Fv62wZPg5ieyLjfZlgd0X2Njl
UBd7uDfmgK/ll+gx+FUkawGlz03c590FO49+6F6CH+2KEB8Gnwm+mWqsq5tK
3MD5Ok22x5AHpaq/sSH/NPyJPYk6zXqZswb1vfFa0XnwE2/NovyPwkK3nh54
ltmy1WOuHfU9Cf5+M2W8Dri5f5qUw/3qZ2nNQdSv/pB2Lby3PNnXxAb83/3O
DcP8cvEpPUq/zbXXB/efT16S6vBf+1CfTegLeIs1BIBjb8zyFsSbqdUFKkoe
s1VmxvhlebQPeh+Jm/PCvING+yZwVPcXaT+P+wj9YSX0ZfrHpwohP92A+AT6
H1/G3Cuwl/sT2rvwX4mUK5tgpwM3/fURR5PcEw/Myfow/cIL4DNOa3wT/nS3
oCAZ7yQ/R2p3wC902qMuo99ll1w/hHep6qWebRQ5UsxYEefjmvxFsOOFIq0c
4KR0V8IGcfxs94ln6Ecklqt+oQ7H77jXA/5vNXdfR398ZGf6oQDIRWd7Gu+Y
3mOtXHhnkPgvxw913D5xjybOCV7rcALnbH4XwoG6VWTx9gT4PB69lgD57uY7
OKI+tBjJn4Z96zLTE3BfiL/hX4I6+tWwVxT37fTgA5R7y+XmfBHgzy3M1h1P
vgvmFIuj7j9eqGlHH7j2WKEz8voF55VL8PuZwsJkxOcWswkTxNGVqk3dkGfR
kCob5wWVKRx1IHwq/bhuQh6ndgkL2Ct8+O93xG3LgCkb3oWskp4y4b6p9Gk0
EX5wIWFoHO9k6t9ibDGezRTRQV8XcjZ3I/ie/6VRinuC0Jq7v4Aju0EYO+Tp
TmGLDCLr4bd0x3FvLdn4NwT3Put9luzIQ6foE0vhH6bDtuvg/xzp1Crw13al
Y0HIR33ethW4D0wpPmij/A/oNVuE9eInuvdgP7+PrBfwbl1quLsM/L7sMRf1
RR8c+lwL9X7XS4te+MHspzMpqANhF1OmcH8bzhQdhp/xBmmdQr372U33A3iK
mD7ygH8tiDVLIw5e5hxSRR0inVUj/N5B30QU+eSwlRMb6Io3b/oE/RKEj3lh
PvH1swriVfvzccq7XRRnhib2KU/vLoId8vceGIKfi4/utYNfnOP8tBP2ag4Z
oMO730TAv0bg/12nsQF2lUteW4j9Vjx7NkGOY5tYVrBv/2KdN+q2h7RwN+4r
iVZMBfgfxrt0mO0C9Hor9wb/V0pbvFmEXwZIz3mg/natvLeAXaLf0VpAHklq
8wDU/a6cm5T3yA5++nTo8f6zzgnKu8zpYm7Ku+5rD0XI+WyXizP6kHEJC0/g
IBr4aB3ygG3fOWfklfM0LYs4Z/h1jzLounX01UBn+m7dS9TTjy+D2RH3v1Ic
dJPJ9wbd7Fvwo5fpE+vxXnG7lWkt5T7kLTDjjn6992Ys+s44Xy5X1JeL96Sb
kD929TrLAccdOWVPIGfm1X0v4Xdp0z4XoMdahW/98JOzI395oefqaNUDSr2x
14yjvDuKN/sijkK2PzsDud/Qh1jg/7oBrYIIxFtf2vp3yNvCH8xrUH/CrPfO
ol/lYtBMhX04dotS7pOxK5nfwWeh0YdSl9dcfLYHffqvayWU/703lpZR3lPj
E999An52203LULe+Vmqbwz9KFZUGgMeLZfe7uGf8WjxDqV9qHGXbgAP9e79X
6HfVb116B310HdrrR8m8L/jCMt5/piOevMb/EaHTKq8Qz/YPWVdhr7kAsSjE
7z+2bnngskPrv8PIo/nLw9SwwxuhMhbITcdVyoB+aS6QLRN4c85obkD/89tc
9jpwfrvIlI881NCYxIZ4+xZj/B/+J2VKyapD/ltwiXLFu4tIxd9s6HfSKI4a
8+HOSiP4sx0DSzZwqp0+QHkX4JjWpId/cFunPEI8PsrXqaL4GY/yFOK15XXq
AYq9VHtYkCe7i1+Voz/O/VidDFwLK1npkA+ui/mnQ/7D1QxxqJ+G/me+wu5e
fw2VgHu8MlsY5PCptafUhYAEPXbUzbh5tn/A3XPKpxx57ZKymhP8gXp4H4WP
lLbgGPadWf3XjLh4avBGEN+lErOkUef9DLr/wA+jv8hYA9fid5PXcB53TvdZ
+LFXeZov7KFyW9EH9VpIPF0YOBQ0XZeFf5heaD4IexeX7ipAfT60uDsS8UF3
IP0/5CF3pVAz5LHhcDMW1I8enrsHcU7uCwsZyv/YNB//IA+ocOydxrmlxgZT
wD3PTtaDct/IlWBEvRp4I8oAudMWelihh/SdmDM4RySlTgV2kLc3KkcdKGaQ
o4O/b957axb6z156NgV/ZXG0d4E+e+9Ktd6j1CG3aOzL7zzvDzp/H2lKPekJ
mWBB/LcOCRfifIZHDpT/N782CDvBDzNa7+/CO8pMhwotcHfXe+yJd9us+gOJ
iK9MJQMb9LGbrR6dgv128f0egzwdz88Ko86MXZZygDzPtAIFoWeugEke/Eex
rn2mamdrpWPKeOdKzl1VCcVXHCeiM1Rzeb7MnpcYU30YZHujlXxfF2PGs4Os
855O3nJkYrTydkrsa2q5DtVYhkoWd0K3Ia/wgjj5PiSoaI15kWUMVRPZ16mw
8+pbMk4OKcjpkX1Vky+8zqU0qJ7T7b2qlntXteGqZ7cbod8v9HSdNNkfc2n+
HAPh28YnwcXdVaJK/fI67VGy3t/5xx9yPP4TzWtC5pnDwY/ryFxaan+GIZnf
7Szuhrxn2OXuKRG+x5YO6oKf08R0JB3htzrTldxM6AXm6OWqycj63+lHVkSO
bO4GT8gbqDDTqk/ku1xYf7E2q14165Bwbguhs9zXIw++idxlHFaE35ZDb+09
yby3bNiugXx/+GMdO74f/qL0HHpW9ivxQ87RAxslsd46M6MDPoo8d7K0yP7G
PdX2HmT95Z7G1+pEzoOlJ8O1MKoMHJbCd/fnl3TIPKdUYrM5GV+JZhxXIOvm
NVv2HiCj0jM+d9ir6N+DcFqi1z/OuBLIEcO9qAi7XDEKsoN8VFydlzHXHtVY
USf7Dp0XK3tL9Kp6tMhKQ/aNan0ztif6B5XrHRUi33f+PW6JfU1jscU7yLk8
srnV7wnfBg3ZrfPELxKk6MuAj9a+969qyfrWt+8fA9fEbD/RrcROgaU6AYcI
nwwnlQWsh0pGuOuSuZDGtuZT5Jywp8cp9tnk3tg2R/g9K6x7vIXsq/DKiYOd
9zLKi+L8aj+6TuwXPL5tSpfIIWfqM2RNxjiRN0awk2mH4jULwtdmRXca9ru1
QTDTgYwdDRfNsL/2dLdkj05j5UcrYxrQT/srLq4n/F+eG2o9TfhU5YjR9ZHv
BZmZG2Kp1CpvFivHYl+nY7aMD/lecrRUBriXMHiyHCX6Vh/ztd1E9mcOmrd7
kHV/0dD+9wTHLz0uGcBBYb2kpBtZ/2l1LsCAyOUWr/yrjXyvLucVgb58Y8Ir
iAOOILODWN/gbPEAfK2uS5w3JvsOj3I/AF1N1yYTHbJfoad9PfxDyLK6GHFy
V0pRGvEQZf+Ybi0ZTf4E6EHegP2zUtbk+7PEVQX4c1yPj+5hwi/ql+4DO7Je
vajt3U7OaxLL8wH/XY33ryD+bK3NxFrIeuSQTA/k4NP68KaBzFnrXjIYkv0F
gVNG4H8s7t6BU0Sec3ENnZBnG+vxz/vJvM37iTT8+xfrxxqMqzdW9uwh6+sC
NAPgl++W83mxf0CZ54gEWadNiZLCPN4jIgP40HZk3RMko6xxYwvkepbG59dF
7MFudmxIhJzfUbFt2zLxj+jQwM7DhO6AnG8z5K7Zv60IOK8kbVp+Q855q35x
tJXITRdxVBhy1HxY2AG7+18cKLpA6Fq943OWCJ/1FQafPhA6puRmynmTr1UP
Q56ih2NqbWRfR7z0GvD/5DYjBvvcf/Wlmp7gLCAkE4T8csh46iHmhhIrDe/I
9/bH7GEbiD+8yKBRB361y2kX4WeHksN86wl946UtW/B9UvCzCyMZtcr4apyI
PThHYr8hDm45Z0wdJvtijThGYDeX7HdKiKtDWxkfOpLvDAfyXiGeSq0+REGu
pOYwWsRrlcuZyRrkkdP9J6GH7b7rL5DP0jb+cYV9fsTNGSEf7D17LY2J7D/o
KuDORkZP3edLoFeiO+goS3D5yBeqpExGJ9tpsUNk7OFaHn5PcItwYv2nSfBW
vnEm/TfBzSDXhQn7FpTFLOH/V9xKzNYQ/iNlPvuhb/emYHdmss7qPHkf8+jN
eYeg34Sn9G7IPSzoGgDcqmi23wLeckVdrtDz6myFJdb1b/z6gbwl27e9CutR
fFvScN5MuJMZ8n3g8TUmYoR/8/HfUpvJOE+ffBv5TFHHd8dFIvflU1QxOMcs
Xvq6AJnLWr4wRh44aXb2BfIQxxvNu5ZkPuArKA58TN4Gd7ESOmtmjw/wF/mm
OR/gtCaGWgZ2FJPoX0S9OHOirRHxnbWHrYqPfFd1z7OFXY2Fvp1DXZD/PSCO
PM7Veb8K65IituOOhC/HAyoXnNOx2hGDOMjt4T35H9lvXT4sBv1iJOyoNci+
wXX1VdD7HD1/BPJHesXieeRZSS1zm3dkDB+b/wV5TjR4ygBXsZKLyaiPRi7O
H2H/WsW1yZq0apW5aieuA8drWw6uwG8bE0/KoT57atOYoo5sV2B5An8SZHP9
An/rNhvqhFw9MiW/OIlcprVvOUWJ3Nmx4ZzQ44exlsBpQh8ZtOWbIFnXPS91
B+tZQVt1ocfng0xXIffmh2qyqHP0WflMtISOd3z9MvJ3pOqgnyrmrIJZiCub
ZM6kE2Q+f38gDfn80cjbLn0i1y5PahPgdODCfivon/hf/DoOsj+nMXwn7Dyx
seQB7Hr/xcO14mSukRatALs7iYtQ4/zIubYNwOXbPflg+Pt63W+v4beWDk+f
ga9zaZUURrfGI4mIm+KwI4mQb7m7IfI8kSfZQ8fPiNBfHX1v1kj4XRHgpsT9
1JnBISryPTZ3NeAkweHRgeE9qDvGngqJmwl97Z+ym+ZkjF82DVog8dH+VmES
cuQbDrsBp2yFcH1FQs9ffjdzGxkv1YcbIA/NpkRFw27icXM/4TfqreVO+mS9
/1bCTejHW9udgPhIXV//APFcdOC5I/hujNaM4SffeVZ697WR+DxyPnoVOExt
uxoBes7DawShZyqLnB38wDIj6pwwoY8+6+6GONf43VENPv+GDz5BXO0pUsqH
3Vwt7Ixgn6v+z3/bED2tOmtyUe9pdg/rgi6XNdcSOIyuKzBF/tsiPlstTOS+
VPy+E/40kvz7Gcvf/ZWahRZylH4pUeMg5Nlp6cC6SHChs5AMB5/1Cn/FVsnc
IYB9haLX+AtNW7L/crblX/QhE46L94G/r8w3BsxNHrl/2UfO0Yw/0IH9HDu+
BiAOU4xz+aD3zxqlO1i/GKJbBL3Wrfb/gl9/EvvaeZbw/fjhSg7ipKTVsBN9
VRfvfjP4l8fG2nwaMn/9WbIYdXTY78Mf2GnGbNWGneB1vyBcEP3ifIm2NzUZ
9e3rDsOeFddDaiXIfMdrs/L9ZByJt7PE+VndLx6uIfPlbrdl4BmoqnQdOPy0
rFJFfvztFWOIeu8gyJ0K+7xNVX2LuD7Ov6YL9L13F0vriV7jYi7U6AuPV06F
Qb/DccPD8kT/CsfdZph7mL1dRB/+uOp5L/w4buoHC9bd6O0XUP9CDbgeShM5
KpWHKsUI3Wi5YA7qPb9T6EXI4z5ZXg9cOUWWPNH3MJ3yegI+XaM+ysgvB3OO
3QVeMydaaCFn+crj3wcJn8TQfx+QJ340b7sMHGRsjF0x/qZaw4z6tzLb7o19
RfpLlwRR376lfVIh+5q+KuUAn38PUxXBb9OTu+bAgS9RnhvypIlt4UVej5Ff
z89P5PG5p+LPTcZHRucYkD/fXed4hD6N/lWjP+gZPzPPQH6xyJ4AY8S3y+pB
eUKn7d3hD/mb9R8+h38KDT4P3U6+H1Zs+LWVjAHDtoOQY/CF8wzO9146mof6
xqKYMgz8uopOcmJsvKyZBz86+pBGH/LycGjxoZ8MXLEp4SVyCNOuWMMe3ccZ
e2Gn5EWJhFbC50795oPYb37V8ALyts7X7W9RT9x/6384Seg378oxgL2rg+rZ
gJdKdaEg5HghpjYPuW4XlIUj/vz5uCRw7sZ6973wC6o2xnroU2O1rhJyvQiY
YF6HfEJ1yAP5Y+6qQA76hbVm8i9gR+XYO0/WETl/qYeGShG65gi6Hm1yfmma
xjfYTzYohAv7Cta6uyOvl79LLDTD/eJZf4YXod8cRpWB89PuSxlA/p333frB
v4R/khJfPxp3Pod+VqVr9JuIHskehjrwo4sbIyydyTjNNDaM/pP52VYzxPdA
0Ykm4DIROO4E+9B8neOCHbO7HEvQt250ExkDDmbuszcMyP6TYlSryPN/znBw
4H6jmJuRhX6RLuuuCPgwX1hUhp9LLT7eDPkunaqyQH/xaMxGAPHnLvAnDbgt
OtXdEUF9mqvMxbnyBhLclPvnyXXqGLXCh7OZCb290CqlDziTtDgDuqNCk0Jr
yfrt6fyTwHPSRpkTelwy27ID+TS3rc0xaXF/ZflgswH43DyolY+8se0NGyfy
2ATbCB/y+bY3d6bAd8TYpG8n6mZhpgX6aU6Gb1/hNzwnVOv0yPr5mUFZ4Mi8
YXUj+lZLxe1U4Ms/c34z7P7+QPRW1F2j0dU1wI1dtnMBcaUZduQi5O1ruhsB
XPSs/GQYiXwfzB5lIb+5M0Q4Ih4rr71WoeSJVzY+Hwl/Rv5DPZDrtNu0K+gq
WbVfo14mGS3uQh/j/m5+Cvl125XCN4jvU6srzJT76uBFKpwfFFfTCv9xZHc/
hfUYKZl+1MkllgF53Be97u7ygx/xV6zTRp3sWI7/g/oTLJGrBhxfyk7R4P6Q
UR7bDr/h1bHMRv+1Rb3283oy+mlGByJuBRmCChTJaHfqtS32rXvz4BLO+/0k
qQRj5iW7GOhFrXXOSY/QjQXKiMFfvk+HntxF+KyPV+GCH13q2/1ciawzr3mU
CjlXr4ucgP6VF1nTUGearw74Y54kpE/RZ8guv+oU2a/FcnYU9V7JZjsN/OSD
2qYI4KkvdyMMcbS0onIGdgrh7f4Ff7N5Tf8U8szvaUwFH9mY9bGoPys+zad4
iP77WNLVcK+V2TwyhH0Oj5eO4r4azaHpjvjrd/9xDOvJ9ErM6GdudaTfwrtJ
zAvPG5ZkdD8uVGlKxtifpiq7yShfp5eP/exBrcY4b2fFuxrk+VMclofQ9xjz
sRnBL5Zo/wTJkbnUQuZl1IVEzYNx0PfIvlYR5NmCSluhM0TO+KqGKshZ/cH3
NfLCQKbZKeBn0HBMn1LHZcqzKO8ovrstsF+c0/kQ4tDA51UN7NNtd6ELda56
Y6IbvqvF3NNGfGecXO2CXrdrFEXgz8flqEMkka+3H+tH/rYx2zSGc27MPH2L
+5H8wsFGxEfVpzfB2Gd9hWcJfv799Lwu8gS30BVdxAkb/WlqZbKfweWhOuwo
rXFsC/LEg11J8lyEz1Z2hXjsE0yY4Eb+43ydcgH3AzXB4HTco96+mfgC/hVH
qSn3/ONrRsbRj74L66L0I6d8wtnwDqJD12yK/rD14sWDuJ+u8JhV4T1gcDmS
GvEx8lNpHnHxtXS0FCPryGAh3lWUrFpWgCvT8jULxEXZWflI9Bt+FSWiwEmA
5k+NA5lbWH9at5N8Zyt7UQB8x5oWDgI/g6H3VbinJNA9HgTfnS7cHpDzHdXT
ceilGK8VAH+Mzg84hny/7UToKOyw3jhPHnQvNyVnANddRZwb8E7jn8hui7oZ
G2h7kp6c+5jXthp53cPdnA5x/zBIshnnPlDf5gucHdeGf/tA6hq/sNYl5DMF
r8+zOE9OROg07HaPek6JC3FREN+K+pdt6GwN+ZNfSv2FfBNRKcng//Ek61mn
tWqV7yL7asFf51xFnCzZX8NpSLG72Qav06h7P0wc9ZHPaRm38SEf9jgLWUMP
pS9+hhjTt8dR+sf9u0N1EVe8Ia5jsN9Zyw++4NsiXzKLec1DmjzgmdLw/CHo
68S4KO8QTh7HRSFXydEREeQ97pyQJMz9tXadP0v0oPvwgHJ/+PQ8WEgAcfDN
xwj58qCoYSHwKNxcchj+Pn/12170A1sTQ4dxj5a0HMv0JvsPPAk7gv2SpybV
ca6T7sl+zPnsFRhQ78fuiA3BfxpZ9x/Ce8oBnklDfL9rp+cLfOvuzuY4E75z
Xy58BG6pPILPkX+ojmyy/kjwHdU8xYG42F8k7GTzb3+lcVb4L8S3TN+LA5Jk
v8uX07zw1/UaueUSRK4jBWISmtBrvWkv/Oeh7cM44Eint2cReosuKtahTjtx
i3GhbogbZtQgXl/6sfahD3up0rQV9tlW26aI/tgpKPkF7LNNqMcZ+lFvmL6I
71cq9O3B/87iy3eIhx1No6O4P4ysbqLErwh3wwrOk7r2azvqp7V/dQDy27b8
HyPgs1Qr0Aq+gccPRAHndHP1AdQDhS2zoviu+MXjJHDJ20irATqlF755ruT7
GLPfEu4fEXVfI7GuG3rSBXVAq493FefuijudiXu80DrGedy7+L7kaeP99KPk
xiy8uzwK7axB/ni+tT4T96Jyp6Ee2Lf/sdIN6KXLRHcJ96zxyo5PRngXyfnp
Ab7r11kU4PudLe6ysMfcrsPrIWdVkEQwRa+qHsq73tOtVDzwy/ncVVnYc/vQ
2gBKXf9ieRdy0PAkfAf99cu5U8At79h/z1F3v8b6y2wk398ahNxEvcilb1IF
Xcf2IkfExRGf44nIR7Z1njLQ27de0hT3TzeH/GLg/PbEsX2od4e1R90g1weP
fgbIG6h+JHYLWTe50sODe2vQo6EVxDO73yvKe859278mkE80ZzclviwaxmVx
r7OpyHXGe5t5Gr8/5V1JJ9Id7/vKzNt84C+zA0MTqIfb3Jbn1QjdpLVMLvhs
ul9zDfTLubTzeB/12b8pHecsvh2xgb/03DivgPmLPnd1vE/+LFuaxnrjwcIY
8MkeGUlE/at0prkMOX9Q/7puQui8gnns8G5X+b1nqBl5q3T9btwnZ9bRsRwh
9B+jEkWAtzS9hxbkGH9q+xkjw/O0ech5yb5XEn34BllHVfj9IVsWSt3ucr4l
BXwZ46PWUfrFMG1m1INS+euW6Hf1v0b+hhzKNFPpsKts0Vkm2K165JU48sQb
etM6xIn9h3M7KPk7juEl5OvMaTPDvdm/83IX6s+S48Yk+Kl00oZUxG/zTble
3FdfsvJdQx7sS2n6DL/TKM48hnilCVGl/M+wMEmrjfkv9oEU9F9dNH9YUD+q
2nhdYF/eLVb2uKeKPbJgxPnHsyJWKPf7mJZk3H+iC6e3Yf2JyehTnJOj/0iR
8n5q/I0d+CTtUCxC3jjTr8WP99E88eUQvDvv4TrAgHP30DzxB26rjxka0Y/s
i7AvRt/z7+djT9iZkfs3N/q9kux9yTgnzOt06V/C50Cqmjns2fdWoAfvhS33
dVXw/VfjCh/spDVCG0L532PDbQPgzMQRT/m/ZJQm6K4l4SfBzeSJ/Nd6/qYe
3qfD3ol93kX4nTaSHII9/X4cPIb3rfHz3JT37O/PE1jxXhTB63MYeTogW5ML
9zUFYZU9+K6x1X8r+Hdd/uyJc0sSZCj/LzBmnohGXhHufBqN9QUFSx1Kvxlz
uRD+sHIwyRtxHSA1uQXfn+/up8jPJ+hKj/fIskY3afjvizpvSeBJtU2LCnmG
uvuDD/bfe8DzA/ex7ed2RKP+SHaUG1D8fdsIM+5NfWp+Gbhndx9IGUIfROM3
FUq5X+RISCIv1U5d80KcC++PdMLc7fTOw+j/joVWeiuQ/S6lX1l6CU7VjX8k
4JcOTPUB8EfPCJsTsPNMlnYv6sz75DMp8FeHXfsV0Rf6r/nPDvoo9BpEwr5n
03wn4edxpy2E0FcFSuyuQD//k2fNbuTvO6dEKe9H55UfXkUfdkS7Nud/9t48
rqau//8n81ApQwplLIkSKYQGijJVRJF5CCFjZkJUZiVDkplKg0KJkhSZuwyV
oUSjWWQWvvt1rt/5fH/3+dzne6a9z96n1v3P87HP2Xut13tca+1z3UEeXzCa
V4z3pF/LXCagLz4Y1KcM69GOqHLee9zdL2pdQd4P3jZ+BL6Pi99rj/eyDzZO
WYE4tgpfmIW4aA+6vxj1uL72at7+/F523ePQt1D76nWMc15nTpAupWfO8s0f
cd6rad7ECvv6MyYqXbC/qb1x2WneviL31128pw35Ynkon/LL6MTgHtkUnziP
XYt172Ij1S283/dWNLPD/dYGjjewT3rW7EkU4rOv5J8k2DX8zOEAfB+v+S50
6y9q3fV6XQ/vxw99LNWArvrZ27VQjwd0l09sjnPayE+tkbeaFm1aon/oKc/w
Rh7VsbpphvOtf0aXx8ijU4leWrCnfHH2Hjf8rlb0xxzz7fZQXv6M0rl41abW
LSn9H+v27o91bKl6Rnv4+0TvtRdw3+Rajol4b5q73TAUcfvtUzsc68ark3Eb
MV/A5yVDeeuZnc5F3r5s6etn0NtOt9NsrIeq3ytqY5w/O1unz6auz9nV98Dv
vDVGa/DW968THtRCXZgtL+XV2VLNTrF1KR33bUeEQv+0p1155/acgSXjv/62
TKnXbf0j5NWGxgFJWP83/wiqwDjWvRzWQV96yy8z0SdWH8j82A79Pfn0Gax3
k1+3ngW7/G9VWwE//5m/yw26qj2z4NkxrvuQKzh/Hfa/sxTroPYR787Inwu1
HoTy3n90jlZC3lxv1LUh+taRbsWOOGcob1TVhD9smx3Q5/WJZwt4vxe99Zxc
B+OeXxP5FH1wYJ/VS5E3oc3nFeL3Avvg1J6Ii/5ijd/w11OzpLPws7OhwQM8
F/xwojf0JQ6+0oD3e7WWSiyuy9Mr9kBP9QuDPmCeWyfaHUF92gQ5luF83X32
iBDobLtH9T3qu923U7boH7buL9saYH+yZ1R76FG536kN3p/brZnsjftbJvhW
Rxxsk+JMkD97a6a1wO9tPmcivsJv1+5s1kF/iS40vIB62n86dzjW/6jtq7/d
or4/7/8qHu9HBmR2bYw6iRw+Pgi/N0S3s/yOfrDLqWcx7FoVfcYqnsrvF0/i
5sDu3P6bY8GtHZ1M4c9R4/em4v5+r4Y04f0umbHMEbrsb+/5xuuPETe0EedB
5s9qo36st0ztg995Dy/cWxf7uePeq05hPWmUe38vL38H9nY1wniTHr3WxHvY
lq3/zsA+rM+w1xiv9/Q9uTivbtDoZgw/r9CNT8b5bnXmlVTs225W330U+bOl
U+IM3F8QMWQrmB8XNhd+nFm0j5cv9q82qEJPaaely9C/2syc/gnr8ov57y2z
KBq/qTkO9sWe2pME//gMa2VeoWSVMm7rskK8Z937o68l73fXx7udhlF6/jZW
uoj3GRkD/Kegz667Uz0Y5x8ryzG7kWc2lqmxiLdx+2OzYGfNzPsDW/6xTPHt
VdoFfW1H64TvOMenT1sfhnxp2cGPt4/rsb4v7/xgZPC5CeooxGahJ34Pj18c
uge/g0xu7WoBv6vcvPlYlbp2X3fTEvvS6O0f52LdbBjweArsennGKRHX9cOP
O2PfpbSsly/yWatVL2vYf6bLSTv8HnNgz4zesMvQpGkt7PO0Ov2NxnulhDd2
z/C+csfIHRfe/bBMOVJ9UDnmvTjiWCk4Jmxsc/g1X7XNGN77gA/Le+C5X/sP
jcZ6P7bznfnIiwzr2NU45wxuadsO83xoGp6KONzpHvIZdpaaeTZF/ic0eNIe
58iRC9vXwn6s9jnzDnhPn15cpwH6S7WlCbx99Jl/nHn7mUlR3a1hT+O689fj
XDBIbWI7Xp1s+p6JdWtAZJ98rLvbP0w7gnzcesdlJz53qfZpEfx9v5byYlzX
CVi4EH1EP+37ULwHeRY06o4ZxbUaZ97h969+Tj29cI63G2fJq3sf/4YD8H5+
y8XrXVF/oQmXDVDnfQ9lv0D83APeFGLfnG2y+gveK18urZEBO/NveS2DvsyQ
dn5NqHH7jDR833VRbkpq2lCzws0FFqe/1ZoZ/jDb4nJU4sxuY9Is9ibrjTWm
vm/s6tUtkvr8TM06na+PzbIY6lfiEWO9zuJv+MFQQ+q++q2rvTtFfa9ee1v9
ntT1r9cVTw2p505rGGhjfMOj3RakU8/VObk0q+DvgxSn2IZdMd+VCKWeRtT9
F/psextGPX8i9X2/aGrcGz26rZ6Wm5yyKihxO+ad/PyOSw9qnB/ju2zAfSPH
u1/rTl0fSTxyOJq6XtZ6m1EfahyHVjNfY9yErhfmRVGfX8nesl6//zqLDrUL
rnSj7s8q/ZZqQjGg5M6REkpHu+cdA6G3lfsq8xuUvtq1jg/dpPEh5d7Iukcw
fva0+inm1PcHvu0Jw3iLur2ZgHli21kW4HurUPeS7tT1uG9nxhlR18G5akvx
+bYe7Yf3oz4fqjy0GPPej3k9IoJ6PuRdxWL4daz68K5FlM6GQYfqlVB8PmD4
ddh1bp/98GLqelgbv1cFFEfP8buNz+tlqW4FNZVul8GvrdwjylZTfhpgadMM
9qzJK/t5dSz2KYW88fcV9y2/Ql1vtN62+yT1XKpzx96wa+bqpcXalD96lj2y
QBy6zXIfjHg3GDNZtxf1XN2o77Ogyzo+vRv83aWl7x/oCH2+tzri51f8NBJ2
am619f9Kzb/13deAEVScita2f415Zvc4dSud+vx7n0UPcN1OZfUT+Pno5CJd
U2p8zX3LGsK+2/pXjd2o5x79zpntSNFi1/o1xtT3oc2zTtSm9FkFv9JCHP9J
OZCO+9V6ePXoS33vWbdWb/jh1eOJfQqpcTeVXh1YTLFOwqVTiEN6W5UZYdfS
UtwWbzDpTV1H7NzQYzI1/qyyGndh18AOScdOUt/H1464+FvtVspMtaijuO/w
n/VRmG9dhYE3qORkPR32zggMHOBCPf87opMzdHQYtdtlM+VH+1F7ZyCu1W27
PYV/jBatNkN+1LcPjfSlvq83o5trV2rc8GvzPODH6g/3X8FzKU6ud1Kpcftm
NemOeY5d7XinB3VfUH6xD+LQ8OxMTcRvttV0PcSnsa3d+jGUP8sC7hu/pVgU
tnE4xj106cQk2B2h2/Eh4p8yWfUg7BuTozfsBfV5tVN+i/yp+T56P+iEuNYr
jt+SQc0b7xGSDh1DvdzN0qhrO/d51rjucmnOOtix/0DHWSbU/QvsTg+HPV3K
ft1G/lv/HboS8bTpO+sQ5psa0XId8uD6EJXPyOsuyzPX4nPnEWd8oV/zaxMH
2NPr6sCNGK+HSk4gxmu8NSeGl88nh05APtSrUep1iorHmn0Fu+DfIr0mR2DH
ngy36ah7nSitpajLL76H1uH7sL9bkpH/7+ZdMYR9tvqZPB2tArqfiKPGSbzZ
NRn39fBalwd7esV5vUPeZ68urwc7xqx+ZYW67GK4fxr62pV9jy9eo8a3bj/x
IuKmbuRU/TXlZ63Mzb1Mqe/v+gWUN6fysWHvidsxX+HgnaoOVD7MPnyqB/pg
+ZKg8bC3os3nROhqlmw7bgz1fcbkjftGUry9vfoxxGmiRUga6mDC7xXNYY/L
1d3bkReD3usvRt222vP3HeJt0sVx1VTquZ82IU2ha96tve1OUnoynsSZQs/g
9YVPkS+l/aekYL7n6fPjUBfPeo9Z7UHd19b9iulo6vkXerX8JlF8EHl6qxns
ttczRJ8ZOWqZL/JucMH442DHSZpLoyi/jSq/3gBxDOsQmQ2/hTjtc0Jftk9o
92guNc6+2zqdnlHjL8jKWIP5c6zHlKMudC9pqsH+YP1nJs8p/U8OtBgK3bPX
qY3rQd1/2vJ9DOrLuEmvtvDXfPPjLo+oz+c/ii1E/QwpT+iKzx1frCrEuC2j
Bv9F3th2/LIQ/d/Oq06fWRRtc08exH3pr247QLd505WluG6h3/oI9KaqbW9V
Ss1f5Ns8EevQydkVn1AHJu8XNYH9rbw+eOA+3xFxv5Cnprs8PyNOh2b2Woq6
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
+/ussqVYF6ZoFHdBP/EJrxiCPLq+9Hc36H3dfutwXn8M6zAecVh3+esHjDfi
TsEU+CdUe2YBvjdrv20m/PBkinoDXBsG+jTEPurrzpPTMN6fvn2bIJ7NJynP
gl92Z3YfDL97nTVyTaB0P3S/1Af+ePZm53LkeenqOh2Qh1ZhySqoR50dWSXo
L93XjmkJnWtVnm9EXKY3aDkWdtyqfb8R/HHuydsVyAsz262DEH8z7zMrsd5P
fLzQBLpKvA5m4b6ehlnu8G9Un2cx8O/fsoa8c5zXpTmjwik913Zv0sf+WHuT
8ljUgWukR4fhlP3b++fMn0NR1bxmK9RxtWGtnkN30d7NbtBXNqFFIM5Dl1I6
3Ue9LzC/lgt7bD/YR6F/6GwcMgv+mLx5ZBE+Pxw8NB7XHhlJcVhno88W/0Lc
QiKbZsC/LmmBfrC/MMHrKu5r8dzxEfzcRX9UW+je1+fUVVxXL91UivX7m1N2
Ns4lK4xuz8B19pHVjRDv6IaHesPvpalHz6L+7wx62hzz+V0LmQmdExpcNYAf
HXI1zPZQ9s/Y26E56mxX095N+1LrSmSZVSP449DxF0vR7/RaORQhPyZ//NEV
cU4ec3My+rpXyYgC7PeCPFfnYry7g25EQ2f9e++Hwo6XM4qWoh7mTmiiBDtV
s69Fwi8PDzqPwf2mndN4flEPafcL+2urGcFPUS+qb4+roP8HuNaNw7xr38Tt
mUF9X7DyXRzivcvLwRn9XmVs9ELsm1/V3hWZT9n/zyS3J4h/tZzZeXiumn3v
2+hDuWYOBrz8Dh0RyuvnU1WPoi9tfDJnIuyY3WaZGvzdpqhoAs4Z39e+tMN1
4IoINeRl3fA/C9ZR8xi0KaqF67uaafb4XkVH9QLyYlvYtCmwe1afYWp4fuLQ
9B2oc58dPa7h8yeDkjdhvqPFmaOhe8rVQHPErXzp+X+Qh0OKFlxDXZ7yqZ8L
PfmeTk8Q5wEW+Rt47xl0+iVCv8VB60LoD+n1ygB1sb7H+EcYL2WHbwf4s4aB
7ZpIal1TKhnrCP9VDHsQjfg/WNzyHPRebZ3XF+M2CfqYdIy6z0vvbCG+P+sY
cxZ6/apPDkKfc/p96SP65cs4l7cYv8YR9xbw4/qLObz3HcEeCWsxX3TqHh/k
x1ev5QboU1otI9qg7yzQjTyL50a3TTmB+lhx60Qk8rNhF1172Glvb14AXrKe
bQj/RCXee408+GBXeA7r2DxX81rQ2/7VxLHok9uKSiNQv6alD7sgvzV0G7ry
9sWWKabI82mbjrWeTvnzH0P3ttDxd0nmNOhTmucyAvZMbrj0I9bNVw/75yDP
gua9PYp+sfxlRF3k+UrH747oT3dMa0Rj/tLYIzXh309FVieg6+iEobz3Vt9j
U6ZjvsxlS9tC39HWDVSRb/2sTtoijpafvh1BHobo2s7EPiX/fuw53vmpjv+y
j5Q/baufnAn/bUq0n4U6WNDPszV0hbnpXcX6P67vlu2Ij0bPVVGIx2Mjqy7w
48ymyQlYh5N9d5tg3QzytOqNvrV906Ki6RRVE/fzzn9vq2tfhb8m5tbzaUDV
8eCYV3Xhhx7PsqohT3elNm+EPJxZquSG+tz7t9F15JPZxWtusGPY2goz+KP9
hBkWuO+iR+dXnahxjObr8M6z9dZeVkP9XchfkAR7WzjNrg62n/MyE7rTCh2M
4b86nw+Ywq5rhTUc8f3d0sdvinnvJ44dgt2HHVJ4++dnsat80Ueb6o3SQx42
Thg8C/02oU+HRYjPlPT8Mxj32sC7q5A/Bg+1gnH/ueAtqhgvrmRJLexXSmZM
3ox9QLbO3Y043x7au2QgnreZrdIT8Rqb/t4L9uZG2fZEvjpNDSuDnad/t9wI
HScmx9zA5zbTbfWgP31QLxtcrx5VpgF7c6/W5Z0DTfQOL0Q+xSs/Gw1/fB0y
ZAzqs3bOn3fQ2aCj7hdXav4cl1of8Pz7hQP0kY+f++0xRXzy6pX9xuefW1/4
hX6/6kYTZ8TrqEbUXdRXpztHW/L0viobifjnBywux3rjkbWK977Z/5+DOujT
n0a9PId+rjNsy1bkrb7FEQfsY9LuZB6En/b8ci7Dc80P3rSDfWGji9+qUXHc
6vMoA/2yIixsJOyYMvzMZOT37kZf/bC+ej5ST8A+3z0y5zXs7RWfm4z1c2d7
22HIvwWTDtVDPu5r6Fsf9t51NeTt3zf3v/MecU2YOOg+xnM9b5/Bez9nammF
cbRCL4Wgnt7cCvu3rgbGz+K9r3J9ORj3W1uf74v6LlYtcISOsw9u9oedEfte
vsXn5gNqpyKPVg4+b9ef0v+guV9r5H/suSd2WFcy3/oPQ/zNjfzGDKc+P3pq
w334Oe3PvF0YT9tpI29dik/S4MV/746rWnhuRp1RJQeo+3d9XOKG+YIbekZC
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
M95WbyKl70jUuvawO2OU9wL4088sbyP6p2nM2kNY341+t5mGvnVaU0kD54zn
n35mwY9LdptnoD69pkb4wp6Fvo0L8Xn7X6ssoEclc6Y98nLi5ehy5PUQ5yft
YMdjN31e3/jmnbIbOrrrpyRhfu1NzzvCD430E1WQ743b1V6KfJsU0/0z8s9U
yzkMeXpsfP2tGEct2m4m9BStHHAI64zXRnsX2L3rknNj2HH/c91bGL80c1yz
Vhq5Fl9GJlX0Xpaekhr598fVOvEWjtPWz+v0+2LKMacstRbU95+6NZx8nfo8
R2Ppu+A2ORZtmnf2GxIRm9Lc9fQjE+q++EUq5snU99suJnsYU9fPXW6Nb049
l/F9XA9tiuVxzzUPUs/1nRVV/bDei5Rn5jdXmlLznfPOGdWcuv/R8h2LL1HP
v5victicGvfFuz5nviu9THk08WnqFepzm/faB3WocW68Ojo9g7ruoGGfD90u
s87YQO+6ge9rdaDGWdphW40+1LgNjHTu4rl1Y0I3YbyDq3v0bEndX+tD1kbo
mjv/4ZqjlI7yVx4W7ajn5mVrPd5P6Ru53HNvTPvSlJdjvg5sTd03/MmjFhj3
2dfQWrHUeGfsHL5oU9cGXhP7a1HfX3VVT9WhrvXz9R1x/2/rcbugs/XmGUdb
UZ+Xbp2bp0ldu26d0S+Set7OulNWM+rz+w6H93SFv4vWN+9HUa2k2qoL1PcH
p7/vZ05d39Vv0akvvr97fmYq9fkWq0sj4ykm108cAf1vHl8MHkTZVePw23j4
oU2zQaXQr2vaYLEuNf7snQ4pe6jrWgf8TRCXM+t0vsKu1+sKMm2o59J1dE4e
ouw3dnDXxvjRTdNOdKeem6pUyNN1d3uyF+JekNs7zYS6fpN2u/learwDquqT
Yd8i82/lPalxiotUR/6g4rRkd78pp6lx6r+7334A9blmjvGks9T1kHvTmh+h
5umSZ3fXiBp/ZdI+B9gVOOju16/Uc8OTV5Z8oTjxe87sttT3LU/c8O1PPT/p
sOMzY+q+Dt99aiIvOz+/MViD+t729YQ+8GPDXYmq0G9lGjQK45eX3UyE3R/U
1wcEWpZaaNer1gHXD3emaGAeO+NDwzHOwF8rXYOo7xe2c5k792duyo2vE/rr
U/fVqnYkAHHwtEp+iXmd3e7FwJ8f1UN08XyDe0+Se+H5f5SDYyk/dtr8Ngxx
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
z1E6EuuUK2M+teqDojFfjkefdajPicZqphg388aslZinkcbVSbj2iozbhv1F
7Psy3n4g4eb2fE/Kn1mZ5c6I788aNWZjf+HZpXMX3G8U0fUo9l/HzCZYoW+9
uZGbh/tetPiRhHw30V9zBdd7/fUscL+S+Ql1vC+cu3BBMfap/QpzFmK9abHV
fA/yemOYaS2sK35r59xDPC2CojrArgeHD6+CP51NfO9gXRqWO6cd/Ko3bsYU
9A/NebE3sa+xyRh1BX24tntWBtbPhBOvnXHfErWkvuifbgERx9Hft35K649+
PMVx4Gj0qVLzih1Yr9fZTSnHeJt9lu2FX3K8eh9DPnfMLghDXYeOntgX68or
myVx6AdpnrGXkScPlLXOo9+61z1eDeNVGBzog33xnGvH2sNuy2kvj6DvXtk0
cCnqe3l2G3uM/21lTR3k5bnH5j/hxxVdgtVRp/VN89YgXlcNn7nCLw3Xvf4L
3c+HVL+AvHc7OD4KfUt7l3Ue4vRs5gwP9E3jl2OmY9x4+/preefQV0oxiMue
RXmN4c/sJw3b4f6mdY1vYd29tc9fC3U1/Fh6JPTPiX8xCPUxtYvSY+TRlX7f
VdA//zzUvon5O+/w1o2m7DD02crb358acVIT6+e3kuwdqIv6H/IaIT7uc29t
wrpw6o9/ON7XfZ8SrIP+um/bm8vIi3A/vytg6jK3Y/C3TaBNc/SfY9l3Z6B+
UhZ7esA+484eh3Becl/0pz7O2cuvlj2CfqO8+9roY21D7JVRl+21gxvg/hRd
te6wd94K0wKcA9qqBk5H/m1z6Z+Lvmt+q303+LeT4fhWvPPA1wtjoFPvvXYF
dG7bPD6gPc4NS3uqIy/XTFOpBz+0ybl+ntcnZuxSxrlt9B27NMTT9GJXTfj1
9uptG2FPbeO9z+CHFTd+GiNPlG+c4r2Pv/7HwAvv81pNSeiHfUScudtQ9Eer
8bMfIv6T6jqsR77uvXLvGPI1zypythFvn75vNuq84ehLkzHPkR3DHfHcEA3z
x/2o+3cZdP6GON/VdBiIeNpO8t8KfU/r3B+FutfNSR+EdarpyTXf0X809d5s
wjprMNdWG/E8sLbxJcQ9dG9MU/SvgKlOmsjnYq8Vl7Au5ORceQ9/f9jR1g55
e/+8Cq++GxSM4a0vm/vkTYLdATciMpF/BT/2tcH7K6X0MS/RH5+0/zQaupOD
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
RbbrRZBsx5ttKqr9dNUr158Xd18grg6m34PJWt9M5yNT/UdwXEnXZbr1cGU+
uinueifreYUpP4l6v8N0/Ui7XxC135dXXYlLRc/zqkrB38nY1iOuXqbnEVYH
fD9Jug9gSg+fwnSIG1dhz8v6fl9WyupfQfuFnfeYPn9LGj+unjPlle+S2i/r
e06685wfb7rG5co5nikdovaPbO0v5F2Hwubj9zFRepyfjPO8vi6T9TwRxqit
epfXj8jgrD5Cdsn1/CUkJFQckn7CLon/CQkJmaai9RlyDiIkVNz6JSQkJCQk
lIZkvSMkJCT8l4p2HlY0vXRTUe2v6uuupPZXdX8RMkOu5ZUoPcqe05quH5VE
u945VtkfYxpcTuHz7uwb7Xr9PJuS7VmabvFN+H+3GbZCKbRuo//730vxn6Nb
n+B8fJ1MzSMpRflJGAXtoMt/gnGRVg/dFDd/xdXRxcZlgfKhmxLrFfQP1/JJ
GLmqk6l8o6uuZH1eUIcwe8XVK23eippHmN10+1HaeaTVIYzi9hPBeZnKK3nn
q7jP8e+Tdf8gaB/d+xG684Mu8v0nbZ8TRUnrman5pKWsOoXlkaT+pis+dO9T
pL2f6fEkfV7UuiVqPGn18uMh+PyJZgNP/bNa+L9bLCyO0sZN3LqRdB/P9LrB
dl+VdJ0S19+C47K9P2baz/zx2bZTVN0J6mTqvQVT5Otnar2XlGzHm2mK8rOi
2k9XvXL9ecF9gbD3K+LqYPo9oqx9mul8ZGodERxX0nWZbj1cmY9uirveybq+
MOUnUe93mK4fafcLovb7dNcVP36S/k4iqIsr+wzC/6SouDG9TtFFefVTYXXA
95Ok+wCm9PApTIe4cRVWv7K+32d7XRC0X9h5j+nzt6Tx4+o5U175Lqn9sr7n
FJXnkuYxP96y1o/geLKOw1UdXD03y7sOhc3H72Nc7QuEhISEhISEhISEVZGr
1Gsc2foyn+zPCQkJCQkJCQkJCQkJCQkJCQkJCQkJCRWABaNWxzR/LPz/JyYt
X3mHBRu6XE3hkyn9dOtlW4es5JodTOsRN3/F1bEkOsRi6TnZ/zt/rsVB0XWK
S6bskXVcpv1MV94yrVvYeFzJQ6bWQ2HkWr6K+xz/Prr9JW//s0W28p0rdca0
TkXNI0ntlld/Zup5UeuWqPGk1cvPD0mfF5ZXbMeNLnJVl7Q6JT2HCt6nKP6Q
lYpiJ1P7jqpGRYk3U1R0+9k+jzL9vLj7Aq7Hke73U1yntOssV3RxlfJa77j2
PoKu8en2H1fziau6CP/fVLS4cUUv1/YBTO2LmHq/L6supudhe5/A1XOmvPwi
qf2y7neZynO266eykK0+y7U65JoeUYw83rvRDONCuemV93yKSuInQkJSX4SE
hISKStJnCQkJCQnZIFl/5EPi58pFEk9CQsLKTnH7nKj7SL/kJklcCMUh3XlC
8o6wMpDkMSHh/6VSckBWRvHllCftwo/dXSP+f+fDf45t/fKmpH4SxqrqP0LC
/0a66kpeOuSlV9J5uKKLrXgKzsuUDq7kK1Nk2r7K7j9hlLfdVdXP4jJNu6LL
vgfXiH8I/4Pi1o2k+3jSV/87FU03iaNi6RRGRddPyA2SPJKOTL8H43pcyPmU
kIvk5w9X80jUuY3UFSGdJL/X/CeF1QFbfpK2Lqt6XLliP+mrVYt0x5sr+cMV
HZWVwvZ9XOljkpL8vRpukviJkJDUFyEhIaGikvRZQkJCQkI2SNYf+ZD4uXKR
xJOQkLCyk/y9mspNEhdCcUj+Xg0hIcljQsVgPa3y6ctLLjGWl0yPz1USvxLS
QXHjTPKBHrLtR8H56dbDtn3yYlWxU5Ci7OaaX7imh+u6JCVddrDlD6bmZbrP
Sku1bf5HF/qeZ10HoXTkSh7RTbbqhSvrGdtxZXt+UXq4po8tSusHea3TTMWN
bbvpprzP3Vz1g6xUtLzgahz4ugTJti55UVJ7ZfWPvNc3tvtNVcunyk6u7JuF
zUtXPXNlfVG0+hFW//L2C919mvBfctUv8upL8rafq/6WlvJ676po5Pr+m6u6
FEWfrKzs9hESEhISEhISEhISEhISEhISEhISyptPHfb7euo+Je9dCQkJCQkJ
CQkJCQkJCQkJCQkJCQkJCQkJZeQq9RpHtr7MJL+7EBISEhISEhISEhISEhIS
EhISEhISEhISEhISEhISEhISEhISEhISEhISElZakr9XQ0hISEhISEhISEhI
WLlpnvh6UtTCFNrPfTvyMz6pZqam8Hl/xe7WzoMSUqaMGPjXflWi2PPxn6Nb
nzC9TM8jLiX1E5+CdsjLf+LqoZvi5q+848u1fFJ0neJSlD101ZWsz4urQ1q9
klLYPMLsptuP0s5Dt3/E7SeC8zKVV/LOV3Gf498n6/5B0D669yPyqh9JyXTf
lbSemZpPWsqqk6l9LdOU1G6640n3Ose0Hmnn4+eH4PPTtpl01/JNFzqesLyS
Nm7i1o2k+3im1w22+6qk65S4/hYcl+39MdN+5o/Ptp2i6k5Qp6L1d7brRZBs
x5ttKqr9dNVrZXle3HGYfg8ma32zdR6ge1xJ12W69XBlPropr/WOKT+Jer/D
dP3Q7T9J9++Skq33lITsUPB3Mrb1iKuX6XmE1QHfT5LuA5jSw6cwHeLGlav1
K6suQfuFnfeYPn9LGj+unjPllSeS2s+132PpXp+5co5nSwdb/YkrdcjvY1zR
Q0hISEhISEhISEhI/h0oQkJCQkJCQkJCQkJCQkJCQkJCQkJCQi7TMfT2M9s6
zP13NkyPz1USvxLSQXHjTPKBHrLtR8H56dbDtn3yYlWxU5Ci7OaaX7imh+u6
JCVddrDlD6bmZbrPElZNVtY8YqteuLKesR1XtucXpYdr+tiitH6Q1zrNVNzY
tptuyvvczVU/yEpFywuuxoGvS5Bs65IXJbVXVv/Ie31ju99UtXyq7OTKvlnY
vHTVM1fWF0WrH2H1L2+/0N2nCf8lV/0ir74kb/u56m9pKa/3ropGru+/uapL
UfTJSrbtU0oOyMoovpzypF34sbtrroitg/8cW7rZoqR+Esaq6j9Cwv9GuupK
XjrkpVfSebiii614Cs7LlA6u5CtTZNq+yu4/YZS33VXVz+IyTbuiy74H14h/
CP+D4taNpPt40lf/OxVNN4mjYukURkXXT8gNkjySjky/B+N6XMj5lJCL5OcP
V/NI1LmN1BUhnSS/1/wnhdUBW36Sti6rely5Yj/pq1WLdMebK/nDFR2VlcL2
feL2sVp5gYP9htPf7/q6llkHLb2Swif/8wOOBTFvPS8Inc8s+pLRoGMP/ud7
lbqGSl86nGcsf/jzCepkm6L8JG8KxkVcMu1XcfNX3vHlWj4puk5xKcoeaetK
Vj+J6oPS1hddFOYXYXbT3Z+knYduHeL2E8F52coruscV9zm6dAv6jan9CNfI
dN+VtJ6Zmk9aMqWT7T4ripLaTbefuLYfEKVHWr3C+szGmwdV1tpfZbyP8+8X
t24kPQcxvR6xfT6RdJ2S1N+SzsMUmfYzf3y27RRVd4I6FW2fwNfPlfWH7Xgz
TVF+VlT76apXtu2XdH7BeLKtX5Bsr4ds6RMcV97nR3HJtXyRlPJa79h6HyFr
frKVT3TXFb/PSfo7iaAuruwzCP+TouLGtj5xybZe/nlY2O+MTFFUXQrTIen5
ne76lXU8Wf0raL+w857gPHTHVdJ+zdVzprzyXVL7mfaXpHnM9X25tGTLLrb6
PtfqkGt6CAkJCQkJCQkJCasyV6nXOLL1ZSbZnxMSEhISEhISEhISEhISEhIS
EhISEhJykFz5d2MrG4lfCemgvP/d5apOtv3I9L97zbZ98mJVsVOQXP13tRVF
D9d1SUpF/feKmZ6X6T5LWDVZWfOIrXrhynrGdlzZnl+UHq7pY4vS+kFe6zRT
cWPbbrop73M3V/0gKxUtL7gaB74uQbKtS16U1F5Z/SPv9Y3tflPV8qmykyv7
ZmHz0lXPXFlfFK1+hNW/vP1Cd58m/Jdc9Yu8+pK87eeqv6WlvN67Khq5vv/m
qi5F0Scr+fapl6iH1fFm7t9VEjY+//O7Dvq//e6L//eLmNZLF+nWKegnacdX
FP8R/ktx40XiKh3pqiu6dAjOL3gtab8UpLj2STqPrLromkeYH+Wtiyl/iBpX
lN1c6xN057coijs+1/wkLaXdZwkbR9z76YojU3EQ1WeZ5jb7v3/Gb/nffzey
tW/F+wcLzih83lVVyppHTPUnuutfXn2b6fVMUdYDuvq4KErrD7b3W1yhtPtr
uvwnab3Ia166n2Oa8j53SzsOV+uAT67mhaj3krKOLywuwvZ94uoVJN36ZCVb
+wBZ7xf1PFv5KO19ko7DlT7Mzx+u9jVR9cuVuuLqeyBp+xfd/Zpu++X1noKp
celaVyTVL+s5lind0uoRl1xZT+RNUfGS936a6+8p2aKi9TNxSdd7MHm9jxGX
bP3uJSm5rk8Yhe37hK2jXPnv8CsbiV8J6SD5ezXyJdt+JH+vhh5WFTsFydX/
n5Ki6OG6LkmpqP//D6bnJf9/TUImWFnziPy9Gm7tC9km6Z//nWz//6fJ36uh
h2z//YjKQkXLC67Ggfy9GvL3aujUQdbvyk2u7JuFzUv+Xg27JH+vpnKTq34h
f69GMUj+Xs1/J9f331zVpSj6ZCXb9gWfDfNwmXOz0vqXqyR+JyQkJCRkgjsd
ewwNfHyPrC+EnCLJS0ImSPKKkJCQkJBQcUjegxESVl2SfTuhIpCsU4SEhISE
hNwjWZ8JCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJxWcNvZsf
ftlOSNkxOGSgdtut//Pf3fCvZSV/fK0uXrpb3rr/D/mfd9nz0uG79iShzwvq
oVufsPn4OmW1my5dgn4Sd3xBO+jSJW0cZPUrXbrE1SGtnYLPSWu3uPGiK65M
x4dr+UZXXcmqi6+DP7+w/iyqX4ryl7j2CZtHmN3i6hJ3PGnnEfSjvPJOUBfd
/hB3XGF2C667dPcD/n3FNZoV9mo9Ter+Jmgf3eu9uHGhe/0W139M7b8krWdZ
/SFt/gubV9Z+K5iXovqsrP1A2nHM6pyyUH3oInF8pL2f6fEkfV6Uf0WNJ61e
Yfv+VdoJ1/YEekicV9LGTdb1ne56FLZuSLsvkbb+6eoPgudQUboF7Wdrfyzu
eVlW8scXZaeofJCVoupOUCfT7wXoyldB/ZKuP3TVi6z9Slq76XpOUkq6rsj7
3C3tOOLWqygy9Txd76lEvQcU7OvS+puueArr0+Kej4T5Q5B066PbbknXZbrq
Q9T9bK9v0toneG6Rtu+Jax9T+x1R73dkzU9RuiV9TyHKn5Lu3yWdT9LfSQTX
dWHfM5XPovKXrnrmyr5D2vFE5RNTcRJW/9LOJ+36L+t7JcF+KOk+QFaKe34U
N+7Cnhe1/5HUr7Kel2T9PUtwfv55T1C34Dx0v6+UNH7irqfyJt35LsweSfNG
3HVH2jqR9j2YtPkv2CeZfh8jqV1056Gk52a66lJWXXRTVN3zv+dfe/0ZWqx8
7RJjf8eG6fG5SuJXQjoobpxJPtBDtv0oOD/deti2T16sKnYKUpTdXPML1/Rw
XZekpMsOtvzB1LxM91lpucchITB+znnWdRBKR67kEd1kq164sp6xHVe25xel
h2v62KK0fpDXOs1U3Ni2m27K+9zNVT/ISkXLC6bntZ4+wLn9jXSp/SFIpnRy
jZLaK6t/5L2+sd1vqlo+VXZyZd8sbF666pkr64ui1Y+w+pe3X+ju04T/kqt+
kVdfkrf9XPW3tJTXe1dFI9f331zVpSj6ZGVlt4+QkA6aNfN+pV6eJ3GdRB7v
3WiGcSGpL5pI/CkZpc1bQkJC9kj6HLdJV3zSH62qM/B5JomzAMm6RUhISEhI
SMgn2RcQEkpOcp6kl+TcRkhIyDbJfoiwKpCpPCf1Ix7J/vFfyrrvC/4ctGz3
uBTa/Ric6vx365XUFD4Pjy+s/cssIWVkRKeWUz0SxZ6P/xzd+oTpZXoecSmp
n/gUtENe/hNXD+3ji5m/8o4v1/JJ0XWKS1H20FVXsj4vrg5p9UpKYfMIs5tu
P0o7D93+EbefCM7LVF7JO1/Ffe5/1ncZ9w+C9tG9H5FX/UhKpvuupPXM1HzS
UuZ+y9C+lmlKajfd8aR7nWNaj9R97v/LD8HnZ468Oz1mqfD/f7mwvJI2buLW
jaT7eKbXDbb7qsTrlJj+FhyX7f0x037mj8+2naLqTlCnovV3tutFkGzHm20q
qv101WtleV7ccZh+DyZ0v82R91NM9Z//dX6TcF2mWw9X5qOb8lrvmPKTqPc7
suanyHMCzf6TdP8uKdl6T0nIDgV/J2Nbj7h6mZ5HWB3w/STpPoApPXwK0yFu
XLlav7LqErRf2HmP6fO3xOd/jp4z5ZUnktrPlf0un3Svz1w5x7Olg63+xJU6
/J91R4Qe5yfjPK+v4+5/jx21Ve/y+hEZnNVHyC65nr+EhISKQ9JP2CXxPyEh
IdNUtD5DzkGEhIpbv4SEhISEhNKQrHeEhISE/1LRzsOKppduKqr9VX3dldT+
qu4vQmbItbzimh5CQkJCQkJCQkLCqsxV6jWObH1J9ueEhISEhISEhISEhISE
hISEhISEhISEhISEhISEhISEhISE/3+S/66GkJCQkJCQkJCQkJCQkJCQkJCQ
kJCQkLusp1U+fXnJJcbe4zM9PldJ/EpIB8WNM8kHesi2HwXnp1sP2/bJi1XF
TkGKsptrfuGaHq7rkpR02cGWP5ial+k+Ky3VtvkfXeh7nnUdhNKRK3lEN9mq
F66sZ2zHle35Renhmj62KK0f5LVOMxU3tu2mm/I+d3PVD7JS0fKCq3Hg6xIk
27rkRUntldU/8l7f2O43VS2fKju5sm8WNi9d9cyV9UXR6kdY/cvbL3T3acJ/
yVW/yKsvydt+rvpbWsrrvauikev7b67qUhR9spJvn2Po7We2dVIYs5Pp8blK
4ldCOihunEk+0EO2/Sg4P9162LZPXqwqdgpSlN1c8wvX9HBdl6Skyw62/MHU
vEz3WcKqycqaR2zVC1fWM7bjyvb8ovRwTR9blNYP8lqnmYob23bTTXmfu7nq
B1mpaHnB1TjwdQmSbV3yoqT2yuofea9vbPebqpZPlZ1c2TcLm5eueubK+qJo
9SOs/uXtF7r7NOG/5Kpf5NWX5G0/V/0tLeX13lXRyPX9N1d1KYo+WSlo34U/
4UuHpJ/5X9eyUlw9op5nSp8ovbKOQ7cuScdnyn/SjiOv+Mn7Pqb8zrROeceH
a/lGV13RlR/CSJc+pp6nOz7SziPMb/LuJ/LKV0n9JqkuSe2XdXy6/Eh3POXV
35iyV9p6ktYfdNefrOMJyytJx6fbLrr7CFv1Iq+8kfV7SfNM0vmkzVem85Bp
v9Cdd5L6X1K/ifucpPczRXnNL6lf2Oo7XImLtHXGlH5p4ybr/NI+L6+4MZXP
8oob032Bqeel9aO017LGjel4yuoPrsRb3nUkqV5Zx5PWDqbjwVSeM10Pkupi
Or+lHZ9p3dKOKyyewp5nOp/pyl+m8pOpOHE9n8TNF7rtoMtv4ua5vPJbWvvE
1SfMHln9Kqt/ZM0TcfNPUrvpvk/c+eWVb2z3M0nnkdV/dOexsDyT9nm2406X
XfLqI3Tpk7ffReUnV6iUHJCVUXw55f+w9+bRVLZ93zgZIoqUIRlKhmiOEOkr
VKJQGYpIA5WhhGhOlIhQxswkQ5nn+dzjee6NZMhQhhAqIWRO/I5r/dbzx/us
917vM9z3dXXft78+q7X23udxfIfPsKu1P2xIS6q9R/kvn+8/3vdXn//Pxv9u
nf4W/rvWbxEX8f+Gf6+9+rPO8Wed97/7nN/lXH9VP//zc/9R5/hd5vUfhf/o
+/2r1+9v4Z9973/XOv9XkSoxt+V5I75Yn0X8P/C/ujf/XR+/yKv/d/xnO/di
H/+5zvm38J/9/Iv4e+DiHP3P8B/9Pdjv3pfFfLqIvyP+x/z8rnP0/8pti3u1
iH9PXPz7mv8T/9Ye/FV1+p/u5b97X3+X+y/y6r8X/r37/bvMz+9yjn9V/Fu+
73fhsUVcxEVcxEVcxEVcxEVcxH9HTAgtEj63rmnRjy/iIi7iIi7iIi7iIi7i
Ii7iIv6muJjbFnERF3ERF3ERF3ER/z3wv+v7fpffjf1Xw8W6LuLfA//s313+
d8e/uo7/6N+9/qvv92fhv8s9/zP+rr+r/c9ynt/9XP9d/Gf9veJ/9HP/0Ty7
iP+e+K86R3/VvvwuevZX9/Wvfv7/6zy/2/n+Kvyf1uHP0ul/VN/+6nv/vfHP
zt2/ax3+t/jPNhe/ax/+41z/Gf/qc/1Z+N+97/+2Pn+2vv3VfPPvNk//6vi7
+Oa/9dy/1z7/Lvryz7Y/f2v//+y6/L15ehH/f/xd6/Jn8dKfff/ftd7/U/yz
vnf9Z8Pf3X//ruf6Zznf/xb/1e+3iIu4iIu4iIu4iIu4iIu4iIu4iIu4iIu4
iIu4iIv4Z2ObUdSjK7Jti9+7LuIiLuIiLuIiLuIiLuIiLuIi/ovgcJQwjWpM
BS2nhINlLAx4wONk0j5Khc40yzsahVSg3rxp/SGYBjFPP7wO/JiBDX+/oxO8
FIek46m9+00Z8D1mO4fReRoYhOT5LHcjgLrVZhIbJUMhZ9eYbyYOVVXlB3ef
LsXS2njW5pnQIVoqSs2ZnQnQ+ys6x7oBm3Fb9eblCwJE5NODUiR7sAv6LwdY
lxAwp/ygoSOIAKVXz4Z1DBigYvSdb3YFHRJmCdymdhSrp39cp/KEDjHB1wux
8DJQlbdeY/+KgFaJ/ZKhNwn4uKFPP5ZOAYUZg0H37QSI6dYeXKfGAIqX8fSV
FDqs83tWaZJEgK2dj4LVJwLsZEUU9vTRYVWuarV9zAJWom7I2VPPgEdHPRTf
m9Lh4XOp1KgJGkzV23YcbcPh1eO8JFuPIphL4JmXl8Xhsi5XAl5BQKynX2Os
Cg7cXBzjl7koYFd+3CKMRod9/rNXZo0LQNP2rZ7ITSrs3cLGFcCJQ/zg8Ilf
O+kg5iU9U6pfAIbs3+FxDwNz+iqLHRCgwqeAZ2uaovIgVCCI85hhPsTH9llq
ReOw5MroxzYzHFIlffn0klOx9rSqE8ZROCiQrZTifWmQWLHim8RqAlp2nibv
v0HDFG6WC9qTKdBdPerBupIJNIWImftPGDCo5vN+Jrwakxtsb41SJmDev9lr
NzcDVi5n4TvSQAetyK7OO/oENN3ZabtuKwEkysP6FSQcrNPXpTirMsGm2dr7
aw0O5GTbBU9HKhS7B5mMt+OQ22iZz/WSBj7uqZuOKjHhWp3RUd8QGohv/6Cj
vZYJqgxHpow8AYHRjebP8hjw+Z5eT9YPGgj2HJ+wBxzWO8t8WqNFwHH+8oih
MBzOsuyYPjdGh2CnnGCB5jKQPOUrsqDHBLsz7GuXb2OAZY6Pvc0EDi0VJyVJ
Oaok8ea46F51EtiqtFfvmiDgwVDeFkoRHRQsoVLPtwR+aqgIuR2kQ//mu/Oy
nnTwqHp29HQ4BdatlLOuDMSBOga7HBJwMCpgSOf8YsD7k3ecnuEErAlbSFn2
bRY7ceB17a5oKni9zo1pP4sDHf/UV6nUg+U3Lp3HeQkw9Eoer3dgQORh6zOH
0Z/PJ33Oj++ig21+DOf1eDp4n/sg6niRBhZeWZcP6TNg20mOTlOjHuyZ/dMz
xcN02PWuL2TLXSa8vv5N4/sCHfTKcrpbNhKwz+YkbwUfDhejMjvV96H3ZeqK
nRCnQ8M4T/AmQQY85juOK2QxYObl3UcVgXSI38v51oFMg5TRKId2aRyuSq79
obafAsqnbuTWXcKhIfPx/Rt7aLDMY+q6tSYBh0hGY+nPe7HUZZ/jE4eLgbN4
RYKHBgHXO2VC8mOqsIZduccsomngcHtLkeITZ2CbaBGMqsCh/e7Lvu3fcdCy
LDv0fTUDrksUFlrdXkK673Y+2iuCDKf2aW06dmsJiftefUtkaSG4Oy89ZDlF
gotX2HiGdHB44vjuIIckAURah73IA1S/LwJi1QXPsfHihaC9Zwh4KuKUIGVI
B93RuMxlKWQ4xqBrJpvQoNFw35yLNR1u3CnYXD6M+ixfo06+Todph/EjLmwE
dL69onWbmwT4XbBW16NAzRvH/VfQ87jmBsduizNgV9mNatc5AiRqrdm12HIw
ve3bn5PS0HPklamj3VTIKZjh39OPg+uwkGw7Lw6+QV68d9IZ4HLB+QTXq0qw
vdx5Kn6IBl9dLscEchBQQzdve3GRAREbAmqesjFgrYr05OMRxGfJN4VUXjBg
TXbN0vR3NPhyxPnpM30mXFBxabJE53VLvSGtdZiAn8Vb0wPQfkpxsd0vUcfB
OFgh9fNSAvT8DZtC9AjQ1dPMfdVCBWXFURujNQRI33pw3Os+DvanLS0f7sOh
l/PjbuYYA+rIuXsunWRA1MN0g5PBDOBk2nQ5XCWAPW7pj8DXBKx4pz5SKESH
jcJbVOfGQrHZrolM/GMRpDVtcG/pwOGu8g1lXX4adEQVbmcTQs8/olHwfhqH
wiXjwW/CES9okgXP1BCwki9msDSUAgeeeNxhvGYAXhWwY2QcnaN0leOOHDps
uMQzxEC87JH7pWzdMA4VFWUqoR9xKHPy22r6vAubuJrTsuRYCIh19DRIyzDg
y9bzH5f5Z2Ln91gek0c8W6mpu3qqjQGvxsbth1EdOAenTk3wMIDfYftwTRUN
pre+8z1bQoOZN+tVlicxINianyNnySds7690n4NIjworWV57iKK5qg5h1TfH
4f2CiasHup82156VgztwCHPN2ap1A4dTXw98zasuBY0tdkHfHhNwbFdWvzaa
u8P3bpWmheVCvVcjh0F0EyZ1cteZ41UJWLM2f5HGexxCyW57zjZTgF9a2oiH
jwmZ0Vh7yKYmrPJVLe0A4ks93oaadKSXHs/n3h+op8ICQyTh0y4Ccqe+X1wj
S4WYnKtSemM4CP8YeaLylA78d3aH+sgi3XOKejBoRoIuVY+nCUJU8Ode23J0
hA5e9N6q+rsEGIh97+MuwqHO6M27JZ04dPV+u2ZrjXTH4Q2djyUbtJXfOiml
EqAQf0igwx7xjVOWVthRAmY6HLfRQhlw9KHXhZ5l6fAYWMtpiCfKV51Z1j/K
ALHIFyzMKzToyp1ePqOJw5xtnwF5HxOo3P23G9BeK75OrbwqXgSWGkb9Omg+
s4CFP9GZCeekOjsTj9OAS9yKrjKHzqUMDm070T4+MjCK7EHzoBdqc0ekBnt4
IWWVO5oTA/qG6tpwHHgc+Sm736P+bLALCUZ7E5tq0TGgTQCLll7Re3SvqHzu
q7OI54aWqiUnnMGhMcHV/9p2KhxzENurrofum/FLO0yOCrJNImbpUlSQthGb
+5ZGhUJD1hNL1uBg+Pq4uKAgmnsxrv36B3BgXn446ibDS/ry/LBajSoN9PZj
Jy7bUCGZubN+cx4OAS/XnnZH86a0v2JIAvH1leFCzlIeCqZH7h+y35wN0iEa
XnZI3/fcmFnX4U+DKNOs0hUPB7ExU4Mw0VEczH+Mq02i/a7xPWgSuYsGVm2n
cwbRvpiQRgpcsmowh0fxH5YgHxI8/l5BMIKA1TtmpK5EIl35FZ1rWcaAtkaJ
aYYvqpfTqpt1S5kgHeMZeH+yEjvYLqh25hLa9zajp9hpGtD848iu7wi4oWV0
QA/ts9aBu7mr0Fxs4xo68TmEDpkWV+snTjHAeZv/MwFPElSdZTG7PhEFG90r
X9FX4CDla7hGFc3DdkNlkmQUE05ZX4zdkUIB703PYkut0OfwB6TVHKUDyUJA
UIZtJ8wM8rtd82TCTIWwjsfmfkwu9LOvsB0d0h2LD1x3IkC9L2hjKgcDvKOd
miy1GcBRVKQemsqAy6/y1psHMWCHavvRWwZMmN381pA7kIUkq7aXd99j5Kum
zK5n3aDAziVrheJuo9fJvXSqjUD9XvlGJc6MClc+TYzrhRLAZnrVc6s7Ewza
n0gEfCeAMXR71FUO6R7ZkuexE5qnVaL5Aykk2MkuCXEWOHzElL1bc+nQtcGD
P9YiCZQVuh6d2ESAW4n78Co0F3fVAn/hu9G5naa2PUb8Lffym2MW6qeEcuJb
wQQ6vH/UdrKeSgOPJ0u6/qhveMcewa1rmPDmsHJ0i3kwrPIidB7dZUCf6crc
GPR5kioRASe46SD6KnK/wD0SmIgEv1FDc3vpRm6bXTYOBU8FtcxX0aGW71Rh
MeKvJ+MsHspRiGdYpS7x3qED2+T0aj/Ex4c3Rbuk1NPBPVM/9uBrHGJ9RiJc
UR05vXOCRBGf8s8EsF3yogBJ4aPLU1k6UDMvHi2rJYOjLFswl/AsFs+Fy5RM
IZ8jsU+Qo5gMO/cbfqtg0ECWMpCjzIID2/SS+xYRdLiwXLqE5RoBnn5b88bu
4tC5b5R16U4qrFxapuHgiPwjVrpzCOnWlNeTxNjzTIhIZH+2Ael+Beugsfgg
DqtvjZIuKDJg8/zLz3AVgw9fP/HeOIR8obBH5Vk0P51LdxyKsWeA2XSoPs8Q
8hkHNO5pGk5jqxVXKyfVkcFMh3ePnxsdMq6cvqwthUOGzlPGftRngW67Civk
I3b5zlcwQnqx5I09256YzWOYTws/rxgBVQ5VQTe6CAhLUOF6/Bjx+aADh6DA
a2xOUSw0IvkM9s1pf17qki8Y32vBp+Go7pqd6Sc/DTLgzliSzRQ7HS7559qd
Q/weEOfFzBIggZbwCxvZGhpkPB1Q9/AiYOdTjQmaKw4vpHfJHlMowszpg8Yb
kc5O/EoUt8//gVXNDx3KRjrkUP+sgd+NBrFy6+d+nOzFeEk+540Hi+HnrdJz
y4VwsBx/tO064v2sigQnLxLig4vKThdyKqFw4PxDFeTXXulH8c7qU2GTtOpB
2ZfF0BkZ5v8wKBRuGokZ7F9JwIatI1Vcs3Qw6qqdHo+jwAjN8cJdsSTIG4nk
Wr2egK2dQke7pnCYn8hTinpPg18CnHUptcVYXvkPr0+raTAip5I0spEO54t5
lM/yMOGt74Q77UITxre7YzUHygnbUxR21r5hgH/TkLvYURocPrfZ0Qr5qZwD
cx1R2aj/4y/NB17goNvyQbyk4AMW/Dn61AdPAvxqV80O2hHwXmVgw5lYAqRW
G3utOcaAg7FyL1124TCedU9B7i0daNMThjSUbxSeR8pUYjg0BdLIhqhvzFXi
JFF5GlwpWPbeCNW9W/Gi9nufNCw8o4/tOLUUM+m+e0KVTIeFV/7aaQo0CLY/
6PGyj4D6Du1t13WYIBKs+zZoRwx8PHqEbhlLg6ImoeeZSJ90Y+XDg6gZ2OqM
DJoJOlfZu1zP9rN0+IUfFmntp0Og4PH3Jc4EmOwZmygVYYBv75qg16eZsOzV
nsw4I5QXZcxT3lLo8KBDT+894oVb6YVWWzbUYL+S5YNO1fKRDHOPlQqbE3Bx
SY5isSjSqdM5O+uaiuHLBl71hyiHQd8m0ppCOkjIpt2w/UqGm9uD5SVjaFDV
VpZShPbL52GoWVdYP7ZC7Mp4EA8N5h8YlanoMmHPhVWnNigi/R/b8p0zHwdZ
nhuRP9G+HNtcJyF+rx1TPmxaNiGCw0/Jel7VchrsCdJxH2XFYXdd/bIZbRym
X9gwI96QQFXms6H1fQL8W7/JW+mng6YwvbhxKRW+3tjjd3o7DsVKh8cljxdB
mw83p0kHFQxkjG9fX0GFZadrwy+9ywWDDyKzBgME7D3vbLxuL/LJ97psx+h0
sAq/qCRbicPSb6qfZY8hv+2eUqUvmoFxuC3cu1uPcujz9SwxVSjXBG5wi7dl
QPbgHXXOMDpcc9vjSQtKwDjDq+59E2NARZXF/SOtBPDdkbljfhQH7AXf3J2S
XmxXM3u7iA4dRtpHaGxI32LfXMlpzaXC6KTv1mc+DAh0wVwJ5Nf3KJ5eHfW6
ChsTs9VRE84H2U7B+GJ1AixNYr8aZRMgKy+/RFUmGyK/aavKIN9VrSqd3d+A
Q+uwhEYRmiN192O74hB/BwwJZbP4kWHQxaHoNNpPilGVwkp2BkzRNvXZ6uJQ
zZqrJWRHgeVa+3e7UAhIMChqMEf6udQh3LRxhg4+tQ8alwXTgXVbyciSRwzw
C9tvOXKcCdpGtTY3q3H46t7cs1aQCb2NhptXJiH+9GR+P+HyHjNhRjtvZLZg
ZziG79HESBD0Xoq8O54AC3dFh+Ln37F6PlO/pIEqjM/UxvcS8vf+lV9TP9Fp
wF9nsK5JnYFVC3n5/wqjwNvX8/dPM5Gv6tsmHNkXDlm7bannn6G6bWsQ2viR
BueP3v8egPQl0EC+9Kcw2iOOF9LsiPeqvBaqJJFO27YeENnPyoCenWYKgkcY
YML33Ou5DQ5x+wTSfCQIwENi61yCcejWXWaTgqF9TRH+0Ybmbd3LYaXjtci/
n1PV+ixOgOKjq2b9Z0mQ4ipXevwWDrcp9cduNBMgeiR6c+FGBvjE79Yt2ZUP
kYecDKpyPmOmeYHqnb04rFjSFWlzgYDbDFaROZdBTC2y0nH7MA3eHN+Qg5/D
gX9Kk68+hQ5nti5ftX83DXx7lDcXJomQpmtXc1ejOdFJbQzD2YrgYnNRrN1e
BrzbeSjJOicXG/524D4rKRuORUtKDegQEHgdW8L9BfmPyx9VL+UQsKu7Ipja
8RZ75b9mxZ5kAr7p1f0cOcoEccmA9N0oV+lfFr/8CeX8SZE18hTOROwXzZjB
X410tEjCMpBGg/c7pPVEEd/69Ak83H6NAS+1k7X8yeWQzkW2eYf8R/iS4CXf
VrViQ5XJtgeEEI/SOyRTWVA9xKNeVFvSwbPnmbax3Ci2RDqpqi4Jh+Gj07qC
aF5WX3lkf2oXeu6bUswA+fCQaJKQQQEZrnydmBXro4Gy0mPv115IZxwzw96h
/vAqhluHbWFAvotic7IIFfFYU5tAINKDE2rMTMRvJyzs7BT39WG3A+MOxk3S
IP9L44KpERWWVnqyWD0YwHQT12//FU0Fa7tfnR/Q5weE+HaTFfhJWEC+qBiq
5/ia8wOCaJ5SS0QMbIJLsarqD4H3b+Lw7on9Izs0VwO3HQPx41SYEBP29LxE
h732y4eaCuhw68eBDF9hPlKzU3pYxDECkqxsWg+j/P/OcCQ7upkGw9swrlYn
OiRKOYqxoDw5Pnd2HdsrKqTrH97wdBP6/Gaqrzzqu9s3jVGb78gfnVny1keD
CeQEqTPkNORvDdNWb5ZlQqTu5TyTO1SI8tgmpz6xivTp+i2ZxjV0KM3zPhYb
ygQZvRKZ2x8Qv0lX1V7fisOY6vzHczE4TCYODu3upQPl3LVkZfNyOL/vxYDi
CQLsh60cBMymMLMcdymLVhz6ykKOuBForv28R5mnCPAuHyQwTeRjlnHyXMuk
wziYC/dr0eGA+6XSpxxMYPQflBxHr1ta5zXac7IVOzjH57Z0WRm2MVhZTqSG
AV5p68Y1H1LgSIXry7PbBzCj8ozr1w8wYcnNGe+NhpGQI7UxeyiDgLaK+I50
RxxTvJKqFIxyinHyTEJbOAmWF4+tS9YioIK90d/z7GNwq7o18VEY1cf6kdza
dpSj8SmfC9o0MM1u2BuRiOqn0femoQrp9DoWWqQ+AYkXFe8KrWDAEWu5kk41
HOoXqlKrYwi4uiXffhPiAb/PmkcN63CwJc89lEO5fKdW94WP3RTI3tipdHAb
Ax5EHVbl2EQHZeHMuaMopyp0hVbe0sehMHj9TDcLyic52ic7HRigY5V77Raa
z2NxzG/f1iE9Ft9KOYr65pkeZCaYQEBMH3uFCMrfx47Tl29UpYO+/gojLnsc
glY+OdToRgXdKFFcXpmAvj33N5Y002HfschnP5C/HE/jU5VgCQS+inM9amjO
k3IFlS7eG8W21qTePfWJAh/Fpbb/vIP20rTLMdsdzdfsCywe+ZSJb/67PT2Q
77k+eIEF1Yc2emvsUhMNYlwPdtPjEJ8pTEfwhVNAobPV5+BKGpTa9IYoCeBw
/eY1jpnnVND86bXvSjrSaXm1t+tuUSBgqd2A8zXk49J6vn90p4J3WivH29Ah
LFbhTfg3lANoOm61tLs/sHYBA1aOp1S4ZbhD4/VnKsytCyXx3KOA3l6uLesK
qTBgaxVxvLQSzknrY+eYVDh+VKQ8A+n4hCcXnxzixWKBDftYhcnwnrk6PLWA
Apoq53W/rcShf/Thx8ztaVgYvunB88PIN99/VnZ7Gw6l1lTiSxMVdMSCA3hO
ZcN0eEOXEfIp2pk+6w1X46DP9XWJIe0bxrEz6z2GctEMRVHRbIAGtRJPuncp
MiGX/Oj9z+0EdCtUZOx9EQQ8Al+pv8KoIHAtpietjQBxHtubz77gEHkz0X8Q
7e2Mbh533YYBLPKhRXtyKA77aY4lXyZoMFjjuo3xlA7NL6+t1hzEAGZ1tBIm
6bDDTD+44gQNjDp6qIEFNPj65NfnwVkcVPNb9N5YJsHnbpfwT+mjmI7guQst
ayngZ45P7mqkQ9g2zoj7welAUjeUE+0cwI44unq2ohx2x0dAaSSDDtvvnEgw
CGQAQ3zKUm4K+ePdj7YXofkWNVMYrz5FgRvOw4MN0zQobpTG7xchXqwpUm3g
RrnkV/+BS6JspB2flJoyhBiQeJzSsvImAb/aWTm/HaSDb4q7/EP0fivWbydv
oz2c59x6/juaY9PsimbWUho0KznPtJsRYOXv/m7TbgbUV49hbikNWKlJtZj5
Jzporz79+pIaFWrO8da0KFZhduGv9k9dQbmvyc86VIOAVtoh2WBXAoyPDsnN
5xLwuc6S7bQcCew4jDeeYdLBXKAgLq6bABb5kbuhF5C/EzcVqkqjwdzw7aZA
NwJGb7DdY7+IdMIyWbHMkIC6hVIOLzEc6qrjjlyqq8bOuOdn/0C+84w/W/5G
9kKkqx1VGziQf36Q7ie6mgGlerKXNRAvDXyKUEi5Q4PwwfgXLsfLQehw8AL7
DRrct38kfMKRCqV0m3w++RbM9NAJu/3vyHB4cMQ8YMcHTGkE54k5zgDnwXk5
L+Szrx3U8sjRJYBwjmR/tRN93vYN+bPLGfDM7+I2NpwAHn+FlikeOpCkE/3n
6qhY5vCYFncSHaT1a2Ud4umQnmXWZzBNBeZ678GA+Ezojdx8+vJBCvg2Fm7O
RHoR2mGsMVNHgvoDS9c8+NqKWdyZTYvsYQBHXG5c9XMaJCnJKCp5MOBV6o5+
P5T3g1Unt6h8Rv3kl3/aEYLDULbPp4VVBEj2lXzxeYFe9/Mq572XdFgZMnF7
1B35KWZnamcWATJyvfFWyLd+L+sdWF9WAep9fQofKwhgX13cQxXkJbF+KL09
aIv0eMWec+k5yGcFVw0mRSJeVvnm6Yr0buRzkywrBenMWM3LRj0c3hqPBm1D
fOr2w1k2A/njJNeiSfZoOsx5T+5ud1tCsj/zJYk7lAEuirJDVrVU+JRa6vtj
B9png3j72R+V2OkDH87z5TCAMPs6vqDITVqxJGqnD5oHz1OvMSMZLpJeq8hI
nHw6bL06u5/8ANXX3Hj0GI4Dq43roccXSuDu7sLV4v4UWCG2YNccJUJyGuJw
ELmDcvcRBeUaoT4swiP3Rh3Sv+Vzyuv71SmwecEogoz8yq5Bp13lz+ko5/38
sHaGCqxh3IoXdtKBPcLQs8sFh6ratl+e5q0YRf2qkpcEGV6GXplIriNg+ExG
8aEFOmzmjOR7rpeO2WR9jC2TxaF2zGybG/I3ggapt16gHOhUM7q7bCsVBvPV
E86m4eAhYW8shnQFZ5NVIm1CvnG+bGTpKA4ZWbVcNSg3vzk3ZODwHQe1m7R6
xd1U2KmT37GBlwxT+V/eOjkg3WKT6V2H9Dm98PGtaP6dpLmE0p8k1P8LyZfd
3ZYzYbcP+X26DQWc7bCOb3/wfqd8tuYl5FfXHhtqtySA8rSlcQviUfWBylNJ
ZnR4S/3lNKnNxKYXFtZIlRLwfFNcy9owHAaT4ozO6E5jkY2F1us5SSB57r74
BqQXDRf7XZ1UmFDFZr2P9yAJkoMOqBehnKBXMEzlK0e+fXXClnE2BpBNPZy2
1aZh99jl583QXGqvPyz20oeFFO+U4lGO8vl5duPEpJNM4BrqX/Y+EPVjOvQH
H5qvl2b+Gzy1OEiZeblWgrGjmOMF7+Wao3QoGMlirEU6G/zMxm4Jmrefdyb6
1gQR0Hwo+91NlA8yaeul2fYSEH1Tlj0T6a/5J+aJtEYcpKSnstpRPq/larHs
z6cC5bBJR1AdHWQ4rK52RtHhcJfY+5IDaK8TBMp/Ib2IDhFWPtqEntfjctB0
rAr7AIrXL0lRIC/zubycJMoZG8paYpRokJ4zfUxMkAa6MyvSTxiXwwXGQXc2
GtrbK9LOWC3K00X71EdjKTC8q/TK66t0aBfpj5f5SoDgSdV1f9SXnWXLyVR7
b2zS7aJrJ6q7jHeztVwuDtvHnox9RvNY3HE3j+RCgUO5muTTiM9CnB4v28lJ
AW5NqeKXKQS0ixuSDqMcszP2pkuwN+LZhIwzTRVNmGdJ7v5tRhS4njP5sKuW
AjfVPukd6yYB3DnAN2CKgzXXreK0ZwzgLuc5pEI8wBLtLTxlQglY69T0Rus0
4lefhiz1LgZ8bFP65rOfgHW1H5xUt3dhnGuirxScoMMrG36lwa3R8CRAPrzF
GPnJQ8a73XbiYL7VfsFHm4BLTM2BU6NINyf2TMiLIj8zL83x0xPVkz056wjy
KbzHybr37uIgHuSfXvyCAnsDHMh8J3Cg3bR6NavPSlrh7alzZj0Vol1WfZGi
4jB6Uql/gcmAskqu0xePYNjVU0cPxrFSoEF9jv7dlAFL9U6+JERHsSq8KuLr
mXuYDIvFW8mT7zDeHRtMrhhTIC3t7Mqvdk+xOzuettWbkUFIuJDnCl8OVL2s
XL7AQ4XIWoefxj5lkPyuQWBLKgV2k8Q+ApUKT7s03DzGcaD/Ggg8+4mATVaC
ayV8aSDCs2HLpGMhjCqt4MGRDslplplwB+cD/33xA7rL6bBr/x2f2LUNmGjx
I90lETj0UM9k2WjSgXM6PHPyLh0sgu/HDXwjgPvh6p0u0kzIXEsbrkj4gT3e
/D1S2SABE+0NIjeHUKHfX8v0j+8t44wbAiyyUN/S9goRelSw6xALDEO+MPrr
RgORBjpUiuqf+l5EB4fno1dYv1HAOKXw0iuPEWz4l+4di3pW0oN9L+KbU6lQ
LCoi/JlnDOOa9Fl5SpiGXTetruBwQp/n+GzDbUMaJvFlIDfmGAPYZiw2bltF
BVDdQn/mWw6zJQ75g4+okDvl2HvyKQ7L381sVOci4OaV4cdM42ls4aHpfnkD
Ai4Wm1QX6FIx5cZeDUB1N/G5lO7rQYURWgfDaRMZ2NfuTtRuJeDA7Rt6nc5I
VyTPzGug/HX6q7jZ6BUGnDX6bBqAeEzFgaXmw3sqZPo9uXDsAA1uuax/5V/f
ih3S3BhIW4+DSqY+K9cf+SqEMUMqY4Cj2OpbnF/okLwmbyDlBQ7bLLhjqSgv
kZ/MV0qeRfyqufMXdzcV4uWXur5waMKSSa+TRa0I4ArQDnsU9Aqcl54WShSn
w85OF4PHSQVQclrLSGMtAcLP1E5Io3xjFXT6kM4NBpwRv9vf7kCA786bzd32
yA+5msps9SeDw7ZKBY8EGhTIl2jHPSJgQPuylNZINrbByT6sGelzS8XFlc/Q
/Ffumw+Z1E4C669hc04zOCgKrvbYsJEGotsl6rZUkeFa1BlNt1o63Nt3Pmlf
NAPc5XSrhh4iPZXeFfq6GentJt6ug24MeHtKRUH4JQ2yrRXfn7nKAI1iz3PJ
S0kgxrKxS26SBArE7NNy9Lp6q8f9nxxGMMn4ZSPSSDcCo368DEO5wfl2r+S1
J09hTW/x7kZ07sKsGrtDf/DFc43n5d/j4cmd7A2XhAlYU/Bl3HQLAYo7d97l
c2RA8GmTKjn5PGAX2y6fi85z9hFPabdrEZy8Lnn+Dz3vGy4Mv7DyITbnPrrb
rhkDy7ePDL5HJEJIXNrbo0uqwNZwZdPmT2RIXhnDOOAehz2yPWFp30sBd8JF
al60BJSMHS6NrSmBSJ4X3YZrcXhRzk5P8CyCB72tr88h/3TyZs7JuuXh8DJ8
YaWKyAjWoCH1fNdKJujNunVnCbCTkl8GVn58FAJ7ZRN9Pw6RMC21ZP1DDVFw
sz+B3ew4Dmvth2576XsBjeO0ejWqX73S0sN3vi4lPd3pn1fUSIVfPS4ykl1k
0EuTpMw64aDbeVhjCPmTTr3bXdk7k8EqrnJA4sJTyE9sq5vcjubltGDAu08k
uHnx1PcjKE/wbkrZIYX8Kr1bIWoE+ZPJmIXwuS+B2Jf4XXdDhUkQZpqQGi6K
w6Xoms9fW8lY74JTzFwCEwJ8PVTnHenALfwhtA3pl1Isr8RtrixI9zYsOba7
EDYkz6m9Gy8A/3uBK3NQnlvJJ0dcfo3B2dHRTjfOYuBK+34laUcpjFYZLBzj
9sQcUrc8e1MRg8186O6t9krBFGOa0z5XkYDFuvylyKVsTD/+zpS+xiwWrR0X
0fiEDjlbTieG1YeA2uSqZd4X6zGn1ZdR6qPDoX3uFbRLJfCAxeCm+TEatLZt
Hze6h/KOr5zw57VlYPwjy0FgjAoJQrz5ZrLVsDxe7dYt3h7ssX9VqBa6l8/t
AEHnF/mwmjm1L5aagOnMZ0TckaCBjVuEnmIHmt/kS67L32XDCDVg+NvuKkgg
F7CbPES8eG/NWJAhCYLHF9xIm3Lh6MTsuoxr5aCexLImvJ0Bd+1kxywaS8DN
WeA+bSIKO9i6JmkHQYGOy4fZ5TYQ0JOk/HNWsRQeBZvsUnwZDZQk0RxVnAYC
zkRrphUNVqQoZy6n4dDizxdogXSkd9+pyKlSBliOxoiLRDFgoulntLodDU6L
Pdfc4lEFdStTeftGcoA6kKrYj/xUUkV3TBDS8y/HRnSlcwrA7XTuD5PNybCP
ELodbkADxW2Dge9dqSAq83Fzz/Ec4FHBzBppNHj1zenXsbkqCGsZOvyCyIcs
p/XXl3JHYYcVk7sFdCshs57bV7UeA2t1l095D8axz/UbjYWW5oKYOA3E+nNB
KfEzRXprHrRzHv1Sx0XCIitFn0yuosFV0bWzZ76XQKIwi28XOwN6+uIvcXqm
YvPmXCnrhqgQeGLLQrx7NdxOPL1tD5p7hc5lxyWUo0BVxEjbr5wCkkY/Bxqm
CdCX8e449bESjgfjCz7m2cC+xfN88Pcq4HzCn9CgQIHkwJhPukZUiKNl3J94
SAN28fQVrc/L4Y6U2PfoCzRY6F2rrKdKAo0TsRGm7wk4vevn/Vcf2En2viPH
diyEY8etj6vu0sXBv4tvydacbkxV4pqkTBA6X8K3S7x3XgDbmpCMK+vpMJS7
fkmGJdKHNPclS5CP2F7AnFMLq8VWXF5lomyTA+YN8wuMM2+xQ9T903km7ZhJ
n0B9sXYe3JuvvP/2Jg685DXbNyNfUJ0ybbz0Ix3uynqVbt2XAil29ys4V+DQ
PVex0mJzCzbiUkBzQb6QMMsTNl1WCp3L0rSCPpKhrKFUK1AR+dfvJnsmr2dC
YUR41ORELiSo3H/80PIDViCg233HHoeHd9t9rtcx4FffU4kmGQIGnyvAzoJh
zI6wL47nyQPnFXpaiZE0OFU4F6dtVgGt2lYdYineoM4xqBn2GQdOkt+diSoG
vLY4rD19yAUO9blsFWgpBuv7LseljlZC4bfEJflo3uJaVx2ey0d+VmmuO76w
CgqGZXcbI943spr7wjSrhMExkYmc80zYJMXH0FRB9XNImD4UgPzi1UPMAnYC
2OqkZY0+UUAtcqhk++1n8FxiCy3Tjgm47ZJwfFcF6PK+XvcT5bt6xc99V1fR
oWRghbjxnVCYuv2aNIH0erLtqcn+YyRYafl43I5MgMfW0JnooFT4fET1g9mW
AmicjbyrP0WC9yH80RoyVfCBuXGmduQ5FHVNrH5plgcnhC94G0fkYSeC7tVe
U2OAdPcmUWFyFLwUzlhpGt6ACbE6ZP14RQepD2r9IvdwKDr3sb4ppQraFB60
9MrXY6cyT/yUPxwEGR8KFTxRvS70T9FkD+KQTS0k370VA3i2x0eS6QPQxI5I
+y1UY6VXND2fViM/4mYmF3HmI6aq3F8erzSIaeY0zaXaM4Cx2T/tSykJ+N0V
rZI0SWChezBsLWK8A3xa9bceYCBX6FF35hEDBmT34l8nWjAu/4O0gxdpYDcW
tG78jzxmtO8k83YiOFy9s1VwigIyJpxll/ZRoKn3sM+7zTg8monlGtWmgGjS
9TW1MzlwKnPiVOs0Dok2Ft7iBQwoPq3BMh5RCbmBayWa7tRjHtbrp9btYUAB
q9+7xLJKOLA/p6DXkg5a9x5wdW+rhJP7Z/z39TLgcXz7VNxmOiiLfAuQbi0G
tacC7HYhBDiQsi5apJdBXfPnGIF45L+zSroV2ejQsK+udv2SQkwve6n0mbfZ
EHq2j5VDpwQ8Air0p1EOvagJdpQ8JvR3CH7Y5JQNHyfgyHmdHMjJX7t+7BIZ
+INvtSbeM8dutuEZSU9QjpSIkDK1Q7pw/RXvL6FCeFjlHbnlAOJ5sQt3HrsG
YhPNRSdjH9FhoKYkeDnKEx5DrO7rwmgwVjouxPq8DBZ8JFL6mUzYrnbn7uEh
DJ59uffDPosGpdfEXcsWsqHv1oBI4lcGLLPzrXLlpwPzusfPb9wfsIcqa5or
1uaCms+FDJs94XA7dbKmgr0H4zzWfS10LRNcvKN0Vl6jQNmpULoT8qcLsTev
30b7IrZ5V2aZAw2enZsuqIohQLbhuvf2W3T4qq0f0zdHg7MC0jV8RAlsLqK0
3k14Co32KYGFOVQ4+CZlVtuQDvZ+Lv7PN5XBFqe8yndNSC8stYIPSDCg0rI0
P2I9ASm8y0PpdqykzTxT5WeqqMD5aOfbmE35sMNynq8G5ZyQueyJ+UECPG8n
eMzxVGFKw+TjlqFtmO+7b4ZCKl2YqOd6Ki0Dh5PPR3I3vaKBlnsCTScD+UDh
fnrFLA6i3uNl94orwBwzdGxpCMTSl5+SeuVCh+Cc+ykbkc7Ob+JwMDVigsK1
5hNvVtLRPuP2QVFMuHaq9FlAGAV8RLWYpbwBUGDzhCt7DxnU6qXv16WTYHr7
ySBh5DfS685dzKqlAdvItXUnUQ5pPnK5uCIiFQ7abrt1qI0A6ULReRHpEpDt
Oc1/qJ8J3zb2psi0NWBn7dVccZcuzKLpgm7ZJjqcCtI9ZttYBffjWyzKNEvB
zZMidUGtHArTrSeOJSK9oPjzPWGjQU99UDF/Rx6sdGq798qACV0aAg0Uzghw
LemIkTpbAc4sSifXjGJwaFvb8I+HZLBzupoSa0iApFv5p9BNTIjUubXdEuVR
5pUW0Tyk07Ef1agDmrmwlbni0uQoCW588n3XwF8Ej68IrVMlCDDQEhx950zA
ydIHj2Y48oHdaaK+ORUHzPfnip9vGZC0jW9iGZ0JhRxHrm0zoIMsZHrs/MGA
trMyX3hscqGuRm1sUp8CfBo5agnrSVCrVhH5cZCGSd4LVFQgMSBLpOrXsy00
0PBTJq/RR77azixQYgUddM7vKGqXJ4OprpNzgSAVNu2+p3XQjAbS7w3UV3BR
IDSq/+1uBSbw7C/l8T//HlP4eb6c8pkBwvt3LLfhpMNYShBFWYsKb/ppBle/
UkDeltuYW4gBehmvGYOpGDwiDvd4G1cC/We+fTvSR5XqA3dJTbVYuPyB9Zao
r/Cl0vczlQ4eI3cb9zymQbJ+pLPLNzK88DMd5h9mguODiMDNZSQolU0an+Ur
hc/ycdxKfgRkUeuPPDcPheJfXzs6eb2w8Y2+qezNMxjp5647cqdR/rgRUW28
jQx1k1Zf23u84SXz9BzspMOnjQcMV5QQcMjXNLfpCwk2DLoWjeeUwgpy/fQ+
dG+WbDGmhSrK0QH6epH3qLDX7Pz1uydokL/khpHwAzK0y2nKzZwkoPxUSHxd
YwV2Hjdtu3GPArpHf3j90GZA7duPG/pWE5BI2c2VwsaAQwHi3FFsjVhy27va
d4h3b9hq1XzkN8HKBXdFz/ysgMfFZg5tt3C4an3pyVJKCSabKLYs6XwBcGeQ
XT4oFGIWhrJLktJKYH3mjvTL+0owEYHUl/osubDqBbH3UX0oxmKdHUveUrN3
Heep9z+ipUhbaz3i8lCe3GBz8kHca+TfN509s/kpylnPd+UXixLQvinlQsuN
fKhsvH194nYJvLh/y81eHgfBGnWpaYeHmFBD3/YI53dYkxCpkbDCgVn2FJ/b
QAIltSyORyjXKAjve5xrXQquVRCsVkiD4wb3eOdaKLAi+euKJFSv5NfmR07u
C4Q9knkrO0g0aP/lXZphmgc6amsdNUYpUKUaHGzkVAiBzWuyby1F936ll/6m
lIE5qXHta7ZiQrje3gNNcWRYya8SpH4+H8J2H+WxjizGVLNqA+JvBUL0VfOl
coNdmMKGoaDkTZXwRnudx7EJEnYqR+OZSUgOOFsTDpoyBVDlFy/stZQJ7/jX
9RTwdGO/Vtt4C+4g4CXjGMsI8nUBbHf5feoLQHx74/5ppIuakvd3ZDhXQqLr
ZKORJMpFe6Oqxl/3Y8/uOwl4axKw9f7nT99N0FwPNTuFzjCgXTHqrB8HAUF+
W39p6lCwAyGPT5Xp0YGDU6PT7Gg51Gym3o6r9ACSrG7QlmIMQsW+lQghb7yR
k2VK6SAJvlwr7xSvyAWdtQ/KV9ErIVjLrv6sMuKnU8ZJsmQMGFMjOjL3n8KH
e82WJ7+ieYr7RmAdVOwC27YOD/5KmAuX0A2qxeHCSX0yipdQYv7x7tQkHbKd
u3+1rKcBcup7jjynwcF5NdfRBSqoJ1xmWRgsgBPOgbFd2dVwN6ItJe0eAY6K
aoEuR6mQVak02op80J6f9MNC4q/huMTqgmU3N5Pm2GVfzUnS4Tj/rStKDlUw
5uotsPxLHGaavMb1uT0VXvO5DOSbkGFV4CcTiS2JIDqUtIZmUQLnvnoqN/hS
4ZU0WeWRaRmm6iXvWdBZAQfcbXT9KX/8u7YuF78GDIzBLejVDioEdPGrl3tX
gu/Ya/OVF9OxbST9KnFjOuQLfag5IkSDnWktWQoq81hv+mGfDB0aXPyRvv41
TwGkK7Ia0A9GAtdxwtNlrBquSb60sKE9hbDIDM/1TRUQga8yefCCDCd57Ja9
iCRDUmnpOJt2CJrjpGGdu8XgsPGa/dVLDHB+7F7OG9iMNc/tnnasfw7eVCe3
gqdUmJXiNprPLgFPg8Yf/bu+YPMkBYnSvhLYyYyYqmXmg2/QeNUY4pPZurBh
5Y2hWMB7d78ag2ossHdyIkI8D07rynbntudC1JpPG1V8SJDGbrDDqGUIqws8
whvZQIVasb6VCacYYD1909aKDwczlRW3JOnj2KmKIlYn5CvYZ2JMHToyMcb+
qyoU6XaM3pf7Y7QI6YWo8bMVpjPY3mI/FTcLElhn5n+xl8iBUAPmhBhBhqk1
Ap4GaN64zu1SyUWv99R7bvmdKweMJJ3NHxQyIH/d5mUpCVWwbuqG68ZYHOy2
PPbejPJG2Y6frOMEBjpO7qbXtVyxb85sWiKvKeDBNXrfwf4Z8HW84hJNY8Dh
Ml/xHn4CUn+V1+8bpENG8Q1GkgsD3jGlEv/w6xmuvPsaY6lY5WdlFRujYgg5
c+Zmz2wesNzV9DvLMolxRZi4XJmaw+ID+IVTQrqxMXqP7mO0B6bToqxnBrIg
xlLY/1IvHWvYqCG7uZmAQvnk9pqIfBiI3XbrVXY2BNzrWzEphYO399JitjzE
o+P7nEP8SdDwXfB7hCkJ9HUubHrYSYHJnp/vILMKopVTsm/b0kFV7e0FQ6RD
97ZeH6Ga4EBcNNjwDumymIPjDmogqpPyhIME6stF1sIq1880WOd/SyMumgTe
vGyuq7aHwJENkp740Vwwtu7smjr6FF6vi4xu62GA6usC77EYOswq9ewp07KF
uMy8/T0B3zG8Oq6b7wcOZ0mfs5a3o/4yz9UIeFfB3i/vMw0hHyqehm++g3yJ
03uvd32TZaCRe+CtbyQJdN6l3Dh+thebm7ANkbhLgycFjsfCbZ5j83q21Os1
iH8arW2XLG3ARvKfnbleiWPkJmGazjgOy3Smwl5fxuGZs7mf3RUqSHsOPmpK
/4oZ6ske2ZURDT6xaoefHq0CEfZl0LiDAeoCcERR4y326sEOqS/VP7DioeVW
X5d9wNy89gxWZiP/+WuzenwuDQTJig+8VQiY6i2NieiiYhEG+SzbUb9FjM0H
Aj6XwrT1xI1ukwpweZX943t4IgztIM8/U0Z6OKE3gX99CqyFFwpmZQlwJiu0
te1FuvRg8Msjviq4UP1LbLV8JTgMDry2J+VBn13PvE1LJWgZh2EfdpZBUoWN
rjPKg/PbdOIHhnDY/lPtqf6JF2Cw6pxUcQ4VC5sp98qlMSAkSWvcqzgaIrhL
xB92k2CHkAz1pzkVOlkWFKaCX8B4C4so/WIybEstPl8diMEwNqB75B0NDH42
PfTrw7EjHlOHWWQYcO7VjuD7q95jhauWR3gg3ZN5RlVZg8SOedbX4kh6Emyz
Dturo0uD22YLoU90qaBi+5LOMaFOshx7ydNNZwC3xfmuBOwt1pvk+2tO8yZU
tm9WcEZ7KPxG0Jb4QgU/CeGHX96QIOLo22B+NzqEGBxq6uCfwFSd6u4rHsZB
+fMgqX8PAefkCxVTr1JgnZKP8G3jKsiNHVzFgfZozr2YmWXFTlpx+bE88yPi
JUF/GesXOLgk+tTyexWAi0Rw0IAmDry30tTHtpDAXziPPtJDQKfwRlfJqEK4
I7bllFw3DYZMf+28KhcKSZUNlGXPMHAubi0rmWnCQrZMjV0bYYC55Mmoay8o
YMG3siza/TUYHeUwTz1BBeUMQ59cJwbMXxdN9Ooi4Lz2VubQ6hwIWG8k3WCT
gMlaJV3ikGOC65I95nWfi4AkI9Jl9ygU03o3Z8p5lwG6pR7+Qy9oYHpGq/94
EAF3D600mmigQxL38asFs+UwcWz39kKxLGjKPrvpyzABm850xDGXtWIXR6wj
LOcYsKlus/OHETLMt7iUsYXngNWR7eUdh0jQFZIcMtdHg+auPL/0VhzSInl2
dJQzYM3UphtKnqFQOXJz5otjAujwuf78dLoYqrK23JXahfpYGNUoEx0Dxv5b
+xZi0iEzr8X7YyYDZjz2ZzuZo/xKaWkmr8ShV/rCvgPr6NAelUdm5a2GlBNs
eUw5Ah4sJ9SPddGgpE9/v2p/DMaiEqpUpVIJmHByiqpPO8b/nJ3VVrgS9Fvl
WA674NB+5f1HjxkMlo3IYpLdZLi5j2myDlC/Ir4/teWig0vug3tFP2nQYr9/
x8DWT5ifigrvnjU4xBnr3BwOeIM94/Hj8AtJhtVjgTeWddJhmpnAamVEg0/v
iOWJeQRMisWLWLkyQKg3OmX37XRMRnbGNCKgBJy3TT7VOof8/mHlw42H6zAF
2+P7xGvI4Krs/Pjh8kJ47PVrZTIPHXJi5euSA6nAMzBm1jicB3yZtKka5MtP
iOsVr2eSYaTB+ma3ChXYFVcJaO1nwtGsPWVJT2awc9tgihP57qKFJ3aHxWgg
4UfO3f01G0SXtJjyHCmDSAPb5fkYCdwEZCscA2kQm90hqYRyTHqKwNsto3TY
y95ZSkqrBBuhJ2HDLs/gocHhkpLjOCh8elHmZvcQEz/tteKxUCK2adTZKqi6
Clv9ciuhU43DnhORDxoGCsEsSCFxgx0B8/OD351P4MDJciZc3AYHnW23r67f
T4Yop8kPsmNl0Pumfdb/A9I/PxWB7FkGpIqYx7N0vYQnkUZ1u/nQni5/5UJ5
FQrS3Pn3jxUmY1EW12/HotxENS/kZr+JY+/bfC8lvqEivvYQWvWpAuVR3fMB
HKUQ8HB+3iU1Hy6Kuu33/k4D+T6VH+PqFLhUscWDD/H7ApdG8EQADdb2ca9u
y5/B9r91dOXdUINlrfgU0X8jHaQ5ursiTegQL87zYYanGs6S/Zb2EAlAXu67
l/KkGI4aXvKr3EOBH8NFeeoHGXCftbEjTjUfFNcce6whTYH8F++K+GQKwcOi
4etwNAkjhziuZHwJApKFRvqNaX/o23LW9Tx6zu3jOqrGnz9jAUeH+YwDSLDq
0LawTRU0oNlLJsuM34JBXkf+t6YE2CrKD9+wIkGW0OyvTORT50XEY8WymND9
gHWWR4wJTwILOu6uzoZG+dbTWopUiJKId399pQ6rTPq4myKaiC1cVhpr+kGG
6+bkZfdiigCX8x7ZGEAFARD44dXJAI35GpGNl/PBSOSlPtmDAqceGrcEiWdD
zEW5h6mlDFAKhJavt2sx7Z1Ko8fNcShWm+OunaDB5lMvBezHSkDhwYPLLb10
aNYNld6R+R3bG8O51MAJ6d4Ryy0FyAdHP29wukO5C8afVp3YHUKHdXJLq4I3
Ib/yRXSoY28xZKzlzms1fQUml/vIFzOpcKP/PmdAIh18xE8/PsbtBsk7Qrt9
tcvhyXTNCnOTNCieXTt51JEERMlcTCGVAbeUq75iGhQIT9Zf38VRgJ2trNRw
VEf7sKpsT1MxE4J+MNvM8SrYZbV+RdKrdqxU5JKHsBsGIx88+Gt2k+DXo3qr
nlAqjN0zld98jwydmeoUM+lYmB8596SGsxw+OhtXvrZ4iz18xisUUUPFbIWD
hAYsmZD3euUj0Q9F0Py4cGj/CyZ8WWB4XJ+shPHIx7+uRSMfecubK3aEAK3P
VNqjazg8F99kdsGZAYLcjfk1IWQQs3iQtPAex4wtc4Q90wnwZzxf1mlCgV+B
Tj8uyabC413hZC5UV4XpVT8M4xux9Mzx0YIv5dBTlN5/sxv5m+GP92eRHzi4
/buSG/Ihm1OS7V3T82F+dMWn+EYSUGh7vwuJE7AzbFjxvhMZXra84Jh4hwP/
+KuQqmVvMaO9K9UXPGmw7EGGo+RcHvCbh9srqiL/NMDLBhm9mJ+33z7yDBOU
bQ/EmZ8qgiKz910/rEpBcW2jmPYrKvjSPBUkXEkwZ/c0clQB+TnTq09oEShX
VZftiadYwresNRZmx0qAg+K795B3L9bVZOs0LZ4DeyodW7ocKmDt+VlT59Zy
kFMvrsmuKYKqg+tGXVjJ0JD8ZLJ8GR1S9S4d0LXBQPPzS5eIpTR42t4zHetK
h29to25BkSWQu1d3juJZhHzhkjfFSCdw45pd1d0fMVv11mtrv/dibQyv61oX
qfCuBeNv3cKER5fv5eM7cXBkZMp8a6PAt9Stt0qjaKBzoa9a9RAVttfcMPOl
4CD6rMTkAqqrIvdSnFU2Hmt6UShfLZkPIQEnQjQaUG7RpM0zOrPhU1+p+69S
EpyoJZZzNzKh63rBk819OFQkqUqVRhNw4sjDzQ8HSeDbq5B35Y//n/pybtxK
AOXs8miLKJSrJSLi6Bpob8+96a4/p0SHRwtigU2NqD8SlRYqJ1+Az64noWqx
OVC0Xn9tDPIBQk6y1btR/5yDIjOIhDjoxibuH/QPw/ITVcPBggHTgpN3O38W
gNDy7AJ3DgaEyT/ag/GSMPcaER2/Sn/sqidj1+SWOiz+yPcb69zpcFkx8TPN
ugryOQbN0isIuFy37eU9dSoMjCiJvV5JAdG8itMGbDhcFg16e23lO+xEdesZ
58Iq8PsuyNXclgMrWL6nJMzSoPV6/UF3/1KocLxQYiDChJQLy8bjNclQxrpH
/iDPY3iTKU07r4aD/VuezdFJ+fDAS6+2aYgKDYZ1Vhm/SJDMGV8VuJsBrW1S
j6b2VILVVvEVP63oyPcIHSrsoAAWzDb9xYMM+yj7E+ylU+FNbXqJ2cYS0N87
4ypgg/J4+/sWm93lkJEdccNXlw4zD4pPLthVgWto0GDuGeRbh/jHda/lggR+
9lDJyiTYeeyCdh7iv+DI85LX+KlYQ4Mdox/lqK41N7+92TyC1bF5FjM7qJDU
jHnZ2zLArqzTl6M8AqzMHXbPbicB6UW/De1hPExIUAW31eZDuJhCVfm2YqhT
88HGeRkQn3cg3EEXhx9pOup9cw2YoOOHeKvQUkj+cvs6EZsFe5gey3L0aKDd
VoS/f0SAk7zyVReUR16XD4TE7urHZN+GPOdFPEFvdg19kkmDBwfI17U/V/1/
FJx5OJRvG4ZFVBSiUJaQEBVJEeVOIktCKiqlbJUUqWQp2RKKhIiKLFlC1uw8
Yzdmxox9Z2wzY+yy+9H3fn87jtdxPPd9X+d5+QOsaC8l38PuLOSqqw7ntTJ4
3mUVX4DdpUPVrUqHzzVo8kTZDZH698B9Lun638A6uLtZny+/Dw9HqKN/Z4Vq
ofuWUVnY5T9g9Wjos9pPzPMd1+bZSdmw9G+OE7EjIL2KOpH6oAS6J132pOyu
B83uwK2C0s3ISHLhmHdnOTi1nNRqvV8LZUIRRV7YPbY9SWcU7R9ARwrPXDSR
KoHfnoLROEE83Cl+/S5YMgXOyBlxPzRoQF2yn065HvkDBQ5d8o+wPXhmdop6
STALtJat8p7Z50KHZHG3wX4EybJDc3UdRcBdEUMf/JkMxs0Pzp64kwn83zak
deSLYSibWJAiWAsllwKTWGUbwUZ2ZEhJrQB2sHHaNbBXQamTZXASay3sa3cs
Fd+VhOx74mnGQjVwQ1Jo9k71EFL6LXq7iTSKDoRxjoZk1MBWMxMdCssf8AzP
rxVVx/xrGXnlD+Mh4detkaD0VXTForYk2oqCipT+6p56X4KWz0vvcNlXC3zd
NiNs7bUwWMB/9euXZJDc/ey18c4quMqhEC6sUAUfCp/hFWqrwAgUQxyLyqBP
j7uMafETvLMVrxs/IyE5dx8DZ+Vc+HM78cEPkUYoH7hm8uVxBtx00I+zyy2B
oSHe2MWyVPBQSruxFeNv6Lz0roHhP+CvsmvaglEDY3UHNtKx/FL6U2b24+4n
EE7IIVRa/Yb51st7LM2iAWdaOu8hlwz83e3FGktxqOLYh/hPsTXwgC/xaaNn
NebpAS9D9fOA+fOuQ8CWCthoS3921zgcKXCWXfN40gC/0t0COFXxQPLXfV4x
XwPprbtmLrUUQ5n0jv0/+YrBv6UJJ/c4Bby+nCj1+IjtkUvojOwLbL/U9WtM
2ztQGsGS99PhX1CwaOcc/Q/z11xNixKvWlCSbee2QJVgvSfejncwETlp3I9x
FPVCv1FH1CxLPhyLzd797yLWB+5ajPtrp4FVhOHAJ8Ma+O7cc6XgQjO6+5Jw
1lOsCkk+NQxihjaAxR1+45DcBthZ2D5y7lEXmr6keHkF67V2H/E9Fwcq4YX/
TYEG80ponPteWy8TiTJCT5yLk2wAU4fZCEmOavBeSxSIzMfepUzwhE01DuxU
MyN7hLA7rLQSiP//30ljltL1t9SAv9yNl0uPG0Ay5cDE3bJqKLzC5HqFcahK
JNlK9ko9CJZdlpnAfNXJlvDrmzvG8SNV9/Jzv6FjV+WErHvyIKLi0X0zn0qw
KA6W7LpRjwrO0hOfGOaBHI0csWBRDT18VhINZongFz7iW1dcDJ3hb86bs5UD
18WmbRLvAxGjTWFLoHMtVP43HK/JkQxtmSZNMYX1MBNZk384vB4ybQZ2/15L
Rp/c1VYeFNVCUXmVYcNsDbA80VELjmhHjTPsA//9mkA/bjVKiObSUdLNmlE3
2y641CvyO0GkDeoVW3QX7iyhVY41c+3KMeC12ZIveZYOuwiZyhvfaoAhJHs3
TSMZkS7EFDXltEDRvmfNY3dIyDHJ7PQFRMW8ST1M5CMV8DxB+8lt4/Be2WfG
LIoXd0ht2TbrHwU25dj33P7Rjt5lX1vgVGTCtzO3yyPnaGCROD9NkOlDZkri
fA+kipCV69Jd08lp9EnopnrZ5hCcFM0z8tUnoSENp3nrETrobBi/0XlBhxv1
CtNxFFac1Hn7xCPCTOhfnzR6wT+E5BSYSqd5+5CUloT38gsmRIZ+1qorpUGO
hvYzXXcq9MmPZ3ppLyEO3lQdF4sBtHSL5/JkLwKm9h5xzjuVKDfjQuEakwlh
hT1L/43SgE6T/K9lkgZ1GWzrJM0WZDXGtJH5UgxOIodORyg2g7qgelHlxSF0
Uar3rdPXVvQ0cyWC3FQFrRtdcsWsHShWxc6tITERtitmclA/VUCQSSW3diET
UT/G1r+vHAUBkoU8u+UCit+xkl8SSUEmHzsv0ZQrQD7vZVfksXH4jT9zff75
D6AbbCW+M6bBZ80zg3an66EkQFIvVWwAkq8rvmxVH0ReGznK117w4XpxjUKC
PeNgtlPtE5f0BNyfPNLz51sHUvn1w+WcwzhM2EjwsowNw4HNk7n8PX2IL8jz
gSBLN3prncG9h9oDKd03f3efHkVHaOW2OtPfEc8+ZS6TADooX+O+GVNHRUKs
IklMjVG4XlrkJMtKRWeO3fPbZc2EI3NvM/SDqsFoIuI/jeI22F0psDYyzQAf
+ruBBDc6mHi4fyza0gwmXVP2c0eZwCjTc/J/jkfXXnQPtzp1IzmPHw6aT2mw
Sxs/LHCRhK5tfMqf4WUC98WLBPFtTFhSFy28uNQI5CLPkfnIXTj9Ersriy2N
cBmvJL59kQ7iGkFv4kIm0SA6EPdfFBExX29hvRyRCE9mn11ST8mHm4a7c+6O
NCDxgDm2mXM4GDEQFVs0osKX8Ly4/zTHIf/tb5dLUyNw8FaFM7q+jhTcl4Wv
3t5AXHKxwUnaUyhgxcmkymgQvdk/8JV7pR9SDY1PXfaOgzSxgqcPyCMg+aQ8
3Ep8HVlUm03uzKCBO8ursaM9fbAjn8b4TqKBE/+nhcp+JrKVGphgk2uG+tf4
7R7hE8AST74giXkl7WSf507GOHQiV5/G+gFoZpyKO/WJCSz/vP6anm0G0W0H
fpkHjIDajRrWKacJ8PnP0/K4xSjE5nes5/cPQ7Ova1/51R7wcpts2qE1gx5c
u7hVpIIKF6SJIv4F64iNB7cv52072LPwhw2V56KHzwflktkWES2xU4v/HB18
83a9bJnpQBLTvlExlFZwaaad4vhERwVmu+cePB1Gyzf4hU0zqEjh+/aibAsm
OGxd9Sg+wIILs3xxar8c5o/fXla+P8iCu7qI2ziW/AuUvYTz9+c2wudD4iGt
62Og/nWgMji9C+0ULxdlt81Gmr9EXF7zbiDdK6Kjx65ToYbt/tYz76YQ23KQ
rnvQGDC8duu1cUrgzH87aixdT4TdxxqNv8oywNHLP/W4JQ287hgXpu0aBS4b
TfFz0VtxdY7kzvYTLaCf0ETenksFSqHds8w0GuArDh7tyqFCyvOhq+wse3Ck
V0s748SSIDVoZWykj4msLEX7tGSYcIKeLH3FrRQux9cPrawy4Dqvl1l6IhXS
Xxw646dRBTtSm/zW9IdQs8rE1JYgOnBox5WlLDEgvyh79j+7Cfh2V9ktN4oJ
s1vttnGsDYJiG2euk1g9AtGr2+OPUkGrQuSu7AcmJEMu3teQDnooe6CnlArS
7Z96Vk8yAaeakksiMyAxg+2e8PFG2G1FosAQFd0ys/5qbYiDmrbei5KaWJ69
fbUpUDMAhqycLuN643DY/8+Y+xk6OFTWZS7XjkJ492R38MQI6Bw0iqd5R0AT
KTypmWUMHRC1y7/7YAC6ukZ3lL0ZAasOkxNqS/3wxPg56YEDHdJS11trCAwY
bXBXPoTd9fnOzo30i+PAblv1h3KhFfZajSi5yDGh17hFnAN7zw1xzee1ruPQ
465y/CaeAXg3xXTxZCpwHbQ7cPgcE5om0pMoqutI3j0n0O88FWy9JaU6uRhw
espgbGO2Cvmb1zfgU2iwJ+wu92H7cUDvW8JzsT2WTVcc6sLyKPtbd9WJnTRQ
/3bD8cLsCLyg0zxb52mg/HT3A5oEA8Ve5L/kaEYH3t+j4/PGRdAaSztjwKTD
yKHFYU4cDjT+vRiyWOkE77RgWw1vKjiZL/RkjJLQPT1LObtLA+DpkPDiQ+oQ
XEjX+hip2gM+b8WzBWX+oqm5VPqBvCG0+3WLllwUA0JSHCLDO+tQS9eKivIJ
KppfH62vrJ9G7DMJKkKCoxCDDwy+3jIMjbP4sA/6NHT7hKXdf0M0GHm0R8Jb
pQ8FVYemUp7RgFQp9pPnLh27Vw6Xd1FUeFr/rkcpHw8f7DVUDh2KAtcbmj/Z
7ahIUlLR6Tp/Darymzs8l4Vx2ERifUNpAHRtz4ya2jYgv9n1prXCZiTKmjmg
4cyE7yK9jpXHqQABWZ0lH4ZB+6O68Pj7cSBr9xesc82gKLaA54SzKUDxvMd2
/wgTvgi9UvyHH0Kf0bda1qARECZm7xKvpMFS0GqL1fkpRC13dTjI0wdCttNs
h6NHgGFl7XTbehDYJrMSCvLHYOJZCsfWw1RUEp9yaFYfB7cfpTR/OcGE0M+1
coeKO1BFSbnblBQDBr9kBe+V6ACGDVuC7ttxCOHxfxPZNABfSuraP5ZS4NHL
84lV7AyMawYZEX5U2LpNLk0nsBV8lqce7yVVw8u1lxYe5Rj/+KKyYs+1o8AQ
r67t5i0gb/VZZlC8BvrInKd+D/9Cyf/CcqOlx6HmYyOHkkM3WvoaqG8h9A+V
sRQtO95qR4t1nu+8/v//qZLl+c+e6kZfDNeVvAOYcF7ww22KTDuU336m9luY
jFRyFh5FqZaDFE/w5uaBYah4+5J5dB8DvKZp0bJJbcjG4si/xtg2JLZZ9kxU
sh/8vK4ZTfj3I7eqL+/MI0gIfTquMZ/dgVqCz/re1GdA7e0whhHPOGTVvWvD
BWE+ZPZZxR43AEl/buSEEFpAryoqs4/cDqv/TCKa9uLQnR0vBfk9qaB+LJ7v
l0MbXJ7rKZ12H4egJJNGTjwdSKt9pS4C49AyNzc68bsDka+Ne7WmMkDo5WJa
giUeePxulLoZDEOb/P2avcnDoGhMvXLMdQJy6+9+2vKdit7YeEg6P68BvPc3
lkcSH0Eyzuak3b1hePuvTsqMWQWXdNoMJ0qYsJHDc2f18i+wqo5w09YcgmDc
ca+Xj/qBL/THj323plCoxOeMEcYYzMZZp6YrYzlxf2WrSiENdAzjhyz2MUH8
+q0kWswyCm6+sF7VOoNufb91eoNNAJci49z77fI4yM5eSPH9jwFmurqiXpM8
uI36yBQDXyrY/SQ8fbV3HMbuR2n8FmZA0Jisn+SFMeBq5GQe1J4A5+Orwy9f
NMK6a0umTfAU4h9h092V1IO0Lk6GNDVsx/lEtysfXckHzvLRUZ/lIaQWLK+w
Z50GocO1UUGmVYj39x2D3Wa2oCLYXX0G++6Tz1ODNtwNiJddSNT92BSSiwmL
FDk/DlPzhypOJQ6hrB+JPDWiTNCjzLzduZMEb+auKsCZaqQDMW5hQa1o/aXA
j55WBvTlHdyX874L8XEeX3gq2oZWvrB+HUytRwNSM7UHzEfAteH45nF1KijQ
vkaT6D/heY9OQ4I9FQ4bXmhudx8GaZuyh6/LxqHikGaOvz8VondC/CE2bhzb
c++1qh00EHy+nXEogRf3pbv98PayDYS+HFzU+0yFsXMjvekFzZA/MXfHg5KC
hC4X3BseHof9YRIpUUQqeEeFnlGJZELEMWNmk2c/zMT98X6RPoJGWxRXSgmd
ELRqoHG8mQ4nTXS/KSmUwM1i88td9FZ0J/3r3eVT/aAUNv7rZCMdrJoPxHtm
9oP8lEP9A2Yb0Er6rfOOjsMJl1A2jT80eFIYn6VnNQCr94xqPUYW0ZN3EqPE
IjxyP2UxzqofC71+dcnTRX0g8mL/s1diY+DLtSyps3cIfE6Pjb3JYSLTHotG
yqEY9D17m6CLczF8LB2+Yl1FhVj3HmUboVEIlVRc2cB6ifaRvDBB1QlUviBV
J1+Ph8t/PpZnxnTBOau+kWlrOkTsHIzBk4fhy3+tjeP6mM+NET9keeBB/q7Y
luNOVRDsHtRbpssEFQH5YpOgAXAw/TWl9KoXZe1bDvL9VAPPHVQeP/4aBzZ7
6OwbtlQwOoFv+36qHvm12hX1hPeA6OT522wGTcjwMP1HypZhpHnebYTbaQfu
HvtI2qLYMJAVxNgjhhvBrWPOXMajFXRPmr2z9ETwdbSvyzQmE74YF7ErapVA
KsdgQ4fMAPhZHeBPtaCiD8tXTmnIT6Iw+y+vcrgpYJItM7uzZRws4mjK8V40
EPUVqh35ngJnDqwci56aR80hu51MDZhIsrdFxUagGJjBFt9HZpkwHOpiUnVw
CDVQ83dTd4yCVYshbcsSDQISKLsYA43wLrEwL9SxFVROZJrFe7UgifepjsNZ
CFrN5NaWgYzI38u/xv6gQYK0YdrwdRrYf3/2b+gtExZuXUt/gvUgUVNBI6I1
FVyuTajq42jQ75fmG9RHhdkFa065XgZUnnF3OOI/hGaCemkh0UPIN7tG+Mjy
MLAJLj9fYPyHGqyD8soe0dG1u6vbnPSpwEFoZXkQtozqxEvqdyyOw5PLHPxa
wITbq8ORb7q24643Fm25tNmOtnwYiqnkGATV5vP0Ii0q7Frb8S3LgoQK3+y+
+diFATX3zQ8cN0lBkWKlfmkjRXC9Vmo+I5oK3BX4/gqjMRAjCMh4iDGhkV1g
WqVrAkkFav8c2MmEoaZ7K6nVfdB7vreC93A1qJY7KFqqM4BBIgQTa5nA909c
4I7UIqJ2HVA0+1METyvubytWnkLJbEku3ytZceorHi1qKX0wuXH/cNdMMnDt
AAmeb+PotaiTX9SpWSTep7Tr4fg4hN2bYjl3vB9m70VLTrdT0SHDQNqBbipk
1C3+zMmaQVMHDhbJK1GBP+c6uykrHSKHOfWqeVIhd/7c6a9dNDjG57nvEAUP
+OODW5hRWM8RDppZuUrBOGClOn6zBPYy5g/1vB5COzPeJP2IIaPQkZtj5cPr
yNdo41CZAhvO+lRcaJ78ChLYMOboXKGB7KerMYKyVLC3EHau4hlHRzbyqtSf
l0L9rao8Bz4BnLGNd9Wb0mzk0zDk7iU0BskO7aaBt8ZgeveYscLGMJj8+Td4
y64XPRH8WtyxNxgaqHu+j2SPQMbWrBNv9o5CJ3fIlscVU2jzT2OU/Plp5Kt3
wump9CjicN5M/ls+AY/PT3BufdUCS9V3Y3yay6Bm6LTlw8PpKObEQU67o22o
Jjki1VbsJwwud77w0sLyImOz+dOBcSBEHK5ZJ9PRqJ7hrI5fP0Rq10g8LiqH
oLc/KlxyWuFa3F9lb2UsR+fcCK4nCaBd23TlQFg32tKRKpF4dgL8vYhueP4U
VMQfo6zX1gKzPkr0Tct+aA3OElPTHkGBJQW309lH0V3Px1yGe5ig4LFys+Xh
OFyv58CjgHG420XmYnEbg+sbfHHMETo0ZZY80j1PB1kr3yBKWhdSN4qSXB+i
o22lOw+c9G8E9WraMVWzVmCV0s72pnYg2TxykqlmB3oV9SRRLjEXls6U68sV
bMGVLKSdfcX9AxWFRk9PyrZBh1bV19f0AWjr/XblljAdCU1kNoo/wPZ+087f
dXYQWRwYwrO6TyFGFQ/r044GEEree/eDbSoy+aliG10yDlxiHpVfe+kQwDIV
/MKDCR9eSV8W+sKAiNALn0qaxiEqZVBWF+stLbvne2/31sCciZeSCIMGSSNm
rh19vfBDW8bilTgTMoMsxXgWGyFy19v6I0PjgA+w3GP4bhw2kuNUhZ8woaLO
Ore8aALReEoNFHmW0LNMe08c5nF7Lm28eOtKB2gh31IZawEtdhpDWmASKXDd
aL95fwh0OZ9qDg+1AoEovPUl1ktjZfdrPRyeR6FHE1VjzShob9isTJniIrr0
YEyEeGIcdtt7O/sK1yHZR8kC8cJD6NV/5h2x3jQ4QsD7/aLS4fN5LfmmFySw
uPIpL0m9FiQDuYrtpZlgS7k+qR47ARI5+NM1gXQYPXvkR8/FZHCT2P13uYyE
ykqsE7xutcNnlE/nLeuFopmC5W3pVIi0uvPtnRIdztbWz7gEUBDvdvFvXZoT
YLmifozlEANVmoQaR4fRUZy3ylhuCwNa8Ybo6MIY7LylGB91nB2XGrlF4Gsb
DVi1/b+rSpLQyfBx98VprA8pMMYKq8cgO3c3rnGhEabP3ulO6aFCTrzlzEh2
FXSw5eq3s4wD5W1Z+MC5YcCRCCk85g1o6LRcztfYEdgYLdblOzcK1453FoUS
+HHPLWCLW+oAlJSdcJQTTQAGM1B1WJwf92VJ981/2xuQVfttBX3ZZbQS3NKb
N0EFH7bNO+N6c4j9m4VT65UhmH5o9Mk5exgtKFXJTZ+cQs9o+vZ29XRYz95r
k5GHR2ezDRqoAVTQdVf+cF5kBMLs/+Qb2k6ha4aOX2OxnBZ8aLi1RYAFd/K8
GlI60wuW4dR7T7xKUdQ32b1jyT+gIeys8/3YdaT65XT080dFIPNL+yWD1ghM
vV05JsF0+JV+iGfsOBNY7Uqu34F+uEK+dD3+aAtsPfKqm/NLFfTX+dgLHdlA
LnijUAHJKmiM+dUhutiLDgUfLiwLokLuGM+w9Z14NHbsyVnj38OgdIwyeKJ9
DDjFnpUoZ8WhoJtsztpTdOj+gU8TesGGM+eNCI6aaUM7Nxd6xRU7kIRNJi7v
NbbH3feOnw4aA3/um9VcZ8dgXNDCtiaBAeqiGn46vHQI+uq2g0agw3/mwgUX
nPlxDxN0kMpFGnJc/a5wlTYK+6QVzLdEYrm7w8xxeXMGeX26cbv7zQTcIc6+
tX1OBWXVBxf75TGebG90yF4dhTN5LVAhNYDqbg88iD9VgZSeXtNCwUzYUiNx
T2yShpDvuJG4DxOmWK9K9Q7SYeOQAuXeoSEUkLEPN8YYBveyrb+Ox9IgT1x5
QCOQCs0+9bayCkx4mveC++1HzOf+c49R2RgH4fCcHZFjY+Aob8o8RKXBCWqz
uJIeEzj+Je+2UaFB+YmXdrPO41Cer7X4eWgYtrY/MMx1HoLYebsbCV9IsJW3
tWvy0AT4CbmOcF+gw1fCMq+MABVigmfiNxbGYTp8/yKnYAPsli++rP6mDIR4
FDml9w8h9UVPE/kfLSAecgF9WhlC6BSjuCm4CwSjpF4/wt7lunrIPff7wwj3
yXCrrvQI1D1TuJi43gnB+Te7mp7QwdezccLE5h/SOPjrddl2PCI1m4tt/T0G
f5UsLfbuSgGRGE05hxQaVBSoNZljd1VSH4rP7GXF/Wox/vznbSeqYRNeM8al
wNoroTiPLVQIXs1cHXqeDWs3PApN749CbpXR7nSOFvjyQP6C/d5GkHkbXv2l
phZWuEZ3Hr+JcWHm1p0BzzV0xZDtV91YN3zdVrkYd4YB1/PHy8da19HEZqDu
T8UW0GiJ3f/lOB4d27V3DvdhDJ1Qlvx8pbQauOIuEFfq2xFnq+rjAJdMeHPr
46Xn0jQQS4pT0eKYhBTlxS8pjGmkd8yq93YML05Ev/g/6p52YPHzvs6VsIhM
KvfGheT0QI7v7aMaO8aQIifna93QPtj3+LLl5Kd08KUXxS7a/QQpMv2eoH8s
zJueeRFt3wJ/xr8dSMhlwNQng08P31eB0V++DR5/Jjg1FBBMtzPBg/uqB/0h
HUWNauK+7GhHefP1o9FnmOBoGMvy5SUOgk5qH3gZMYcMtaOm5wZ70OJNYfGo
o/3w/kqZhFpuO5LuZCnO5R0Bmx3BfyK0yVA9fp0vD+urkr7ClzsrKNBuW/S3
uT4XaS1cdarB+o3x6Rt/L4wy0L7QB6E/7v5Dy153ZEoVKyGukOVVAm0MbOV1
s80+bMWlzuhPy4fy4WYCdQ7W36oBn65HJsVOdOTg9KPPIoYGFy/OPFy/O4Em
xCkSepEREGBZWs3xF8H0sQMHnJdHEFM/4aXSnXEolZmf39zNhOvBmgZ1fJvo
SY+k2fZ7VLjwVHfYMqUL+ib+RLAmDoOuQLep1EgJpDn0Cv6bbQWWLaGbK2+o
aGwDmiir+3DlzQl7SkrH4YueP8+kwjho6pTcGxnnwj1Hv/1mmtrg7q4lPDs/
HRWdynMIUJ5BY4wKa+sKKliPbqstyMV4s16khGTHQDEjpmZnKB1kfn53PbeF
ALeSHsl/K+gAB7KdBGm5Ge0yD8sUePcD7pzuMFfYlgJd2TIN8cljUDy5f8cH
gzR4wbhaUOHUAJwxLkM4LH/SMvdn3XBpR3rbgpSaHxPgwmZypmgPdteHhSTe
TXTAX1erfg9bjP/4E7lxDDrcV9LbsbSnEf0sv37HzGcM9Z2JLrttz8CSFsbc
goehSIv7UrlaJ+JrPuluGToK9yv3OTg/oyNevvV8t5d0WJK6fv1oHh0eTO36
tqY3hT64nOWO29+MDp2KD9PFuBxrIqO+x2IcqLdnyLsLO+GO7Lfu7JQG1CbC
z8N9LRctgVOOZMMI4CO9Ay9cKEOhBmtJ7W87YeRBUa3vx2bUy9gy0Ns+gN73
mzl+HW1EH7PTd6aTu9DX8OuBwnrj4OS3r54oxUQeLJ8lFKaYcLXve/EvcSLa
mpsmeUNtHF5yhcpKLk/AbEa3udelcig/5+HYy0KHLTp7H25/NoUU2E5GVXe2
QNfuzRuWOVh+t1WHG4wNg0yrBHNrTzu88r7idVmMiDIzJIsUNQfRwScOn+5I
taOp4mGFQDIFdLerRYlE0EHfJDBtkGsCArVph1HpGAi3mKVGqc+iYYnj2wSq
C0F2/PZ0aQYVEjsZfUNDXeiwwWPVv3wsuFWCkKg5JwMacBZH7bdNItMimZGJ
BQYosma9qjQhIan9jjxRWM8SuPc7iWWDHbe0v9S71rAU0swzxX9wdaHZmV/O
uxx64UIQlR7kWwf1Jw9yfsPyPsnGhJ6Necjxl1n8aptcON0IY5cmi2V0N9Kb
m/YXD1uU3XWF3xFR/PufDoZEEoTPO6epv2pE7OjUV7FtVehgjTr5dl4l+Ln/
Pdtt2AN5ecZZETQaJJ4ZMTYNpoJN78GPz0h0RM3SJAe+ZqLiEvYrKVJMeHsg
GNf8eRhKW68OcAoXId1XavMfa/Ogl2bHocxggvXcqbbNL9g73zaIrA+jgPaD
HDuuwRQwmElJ4RvpgScWBbW6xT1A7C74uFeRCskih1TDZfvR7uMNAmWpVIiK
MXRW5f8PxS3vmra2/Yuubo9tb34+DG687938RMbB7Ej47Kd/W3Bstq5O7c4t
yGe4NPVzMRP27LTo9NZtgaetLWJMDSrwdOcKc2tPodO7tI4HCI8iS8cIDrar
VMhyl9C2E6XCYfsIh/iz/XB65v3phsZ+qKm3FM56RIcPxY/yQyKHYI2ljXBJ
eRaRxxJ1lA8Pw8UzXNKzQkxgkmXveg8SQUsEPxy7NAa4lvLr7yorIOV2SJBL
FhVG7ngdTXZtQZw9vm94P1GhdKvkZKnlEhp+NqxcqTUI2Z1GryXHGJDzLKSO
hWUdWQ1uC7S/QAWiq5UnGwsLTu21VlEM5gbf+95CkA8N9A7cSrqpkQ65tdSC
rYtx8PfK5iu5LDoUhL0TufKxHyaijii9+W8EQrXlePTFqVCXtjGm5jgCEnov
z0yLDSGWK/3SmZQ/8OS4ciJXEQ3eq4q93GLGRA5jL9Sgkg5PFZaaun61gdjA
XlFpv34U7eZ5iwPrs4vRc3Xzq9txQ6KXy0QjJ+BQwCWxpTtEeLWeXFfyKAH0
XriqviL0QJTYudnDci0o8p6U6PHMfrhk1N3V9h8Lbk2HgzKcUYWm2B/ujhVu
BmO2MAmvfzR4tW3H3MR1Mnp5JSDsU+Msuilk6vd4ggbPQ15Pa32ohtKkGrZB
7n4Q0bb6Lhc5Cg73f36QUqmHydeznLsmC4CroxnvIkiHqdqB/1Z9qXAxy+Ww
9UQo2DlvE2fbQ0WlvME/HpjvwV352yO41N6CXAxNTaWXhkFcg3rJ/ck4bDnC
yvculASBiQ+OR+8eB/RHqLTKsRWM+VncEmOYkGfbty+miAqO7jbJw38qIWWi
fOePS1QYtzDfElixHac+rC7yu2ocghe/aluZp8Bk2DLhgAwDdHPlWDRfDKMr
9gJdQgkjUH+YduTe0SFk4pFtkq42CslsHx341Pqhb4pvZHx/DZy+EXvKQ44G
Gk2Reh8EN5Ga+7u5dx3T6MO+za3f/9DBwlboiIw1EzSZdf1P+DvRRmhID6GY
HdfvOeC4mc+E0/Ufqnbc2YnToSiT3qlmoqhXdq+uddPR8W0Enw62VpglzAn6
3Z5E46eKde4H4OG4Rd0OwfIB+HOp3/+/Y1RUtVxC64/rRcUgYL7jAwUa3nbO
iyTXgLk+WcIXy5cXUTVOyv+GQbXj0J3O+Ek0cddILCefglS23noymDWEHnhE
+eipLaKj8mXyJIlmmHvB5mrp0IGsnG18Tt3tgO2y+4jXVIbRseHlMsYCFY5r
jz3+lj+FZAj8yn8OMGFb09J/asR1dC7RlDl0Mg9FVjBDC8x24+ii13JjIkeA
86BkkHouFTjY3J53tNSjx5zMS/mECWRhtUwuTl1GYsyz0uJdc2ivpHTBaock
rrp4e2Sq+g7ch7cOH3VGN5H96bYgMhsr7hZrrfx2hx5gfP79VXx5GCnEiP0k
h1dDWfzH5i/X6ChtvZ/GXzAMlSLZLtl0Z5Sayb0eqECDzA8c/JQwEjy0Vd3L
VzMOlhoHrrpJDgH7wcowObG/KNqQ/eo713HQOFK3qSewjKhPg+IEpZshRJ7H
YnZuCPaNsoXK6xPgd5DigPL0AOi0OnW3+A6gX1cFnf5MM8D5rdxhNswHr/6L
vILH7kKMihcR4GKg1RmFzisvqCgizvtSd9gO3Hk5Lvo1/SH0ePaV/cWrmXAk
+GbJcFoPnA/Jxl/Vf4KkQg23XMZykR5ZK/tLtAWOnlCwy5fEeoSpcrvLz050
7BeX/SzJBbb8aeYw4qdC0BmNj7fasuDU9hs513//QRUSbAuGl/swSjs1mrGV
A4890V24rAvhOR069xqMA7HwW+j/OWt6Ybnbnr8enX5b0XxIuxXsyf4hn17M
oqst3j9vqjTCf//en+k9uIQ+3Lj5aPPvGAS8vMYpalEONay2PeW2FPCope0a
/48I9aYZG8FTLdD9vOrqoyY8hAihW1wFY3C+2WJOANuLHa7XE7PW+1HGUFaZ
xCwRfSkdvS4TwIS+s08GTY8NA8Hjb3Ou3Tj8MUCngm9MoCdLsx2hDY1QOKxu
5CLSDyvnzlSMhW4i7jfvVMv6RyC3jHXldWQ3MsB9aXshRUcW3X/+KT6qhs6P
LpaKPrMoIL2tO1N8HuW3jl4w/UaFqWXWyYofy6jNWz1+/jITCpyP8OR6JqMQ
vugPw7p4mFUvJF0+OQwnj22/+qR9HF08Fj1A2klBCqYb77T+VcOdJ49j8kjV
oKAponKHxEQm8wIXn93Aw51Xk7m8YnioWRldqynbjvt5UCGmaYAIL+dfLOlh
PLkt5EEZ4sWDj43Lq8OSRNhf+J/w2HITbO5/+a20phE0Ltf9M/iXD+oORC+z
rQT0yZnFYLtkJTj/hrY2UzKoTCX8oMWUI8nhP441JZXQd/JOidZAHVzLiuFf
i6PA02eq+zYKicBafojEzyiGv8Uxlyd/DCOf0AGNm3oUYB2wN7jBnQNyHe7f
t7k2Q2977M2n95ohSwn3RJGzGXa2jlYYG2DfP7XicnZfDXhzSd8mtZPg2ehy
ilxJExgdaS81l0mEs1fjJ2S2/0ALp73tWMbTkXC/xodJjyaQIoWnNKTWwO6A
92cbflAg4ifdLdOuCUTyTtG/yVGAJWCXX88GBTxL562/OGA//2JhTc0YRd5J
yuVjbjgUq/F1SCKaAqTeh9N3EyjQOiB3dnt3I+A9Wu9ohpDBl89l5u1EExRV
n5YnThIh7GFuN7UnAeV7Bl0uVigA6XZSl+vpeqAov02Ni29DJ+vus++0OYBT
2JOaXTJQAGT9yInDg2uo7uFSkX5DFTxr9H2tqNoIX6RMWTo9F5DPK2dy+Y5K
cPqppr9dgxv3csKk8dwjGirb3KtdGNMI5qL2wjtcmsAqrMztiAoRrM1k948X
4GFUuGaIcKoJ7j0/YSIUXw1tFx/tJ3VVwkF7XZmwMhp6vq8Cim0JEJ3+trCh
IxDeW1sbddSR4dHztPzrDrXQr//rLKWIBCqHBtI7MknQqlXaGMRKAW7LhWbz
ETI8KYrA7xAkg/EXc6azFwmGiwf+yn8vBM9DcrL9ts0g1siTO3w8Ay7jWs6o
qRNAPyBZ5UVBI+y/l+6klpsDZj2i2cU1pbAor8cqcBQPGmmGzB0VeehzvIXG
wWxsLoW6qvWnSbAn54QrhUqC5Ukhdp6CStj6rcUkQY8APhPdKsciyHCCeTiB
4VIJOSohJGd/CvyRJueKWVDgVFZQ2OvLAeCqKrCduMJA7cLftjz9RQaRtAMe
B19TYH8A+O/Sp0DH2sxA2dMKMMk6363GUgkXvvLOu0YvopCbzyptPjDQE1ke
YdJnCjA6fI5rt1aiBhs4OziCwLY9Eh+3m4D1pxNSI4okKAlPTP5oToSL54Rj
2ewbUC6IGesI/oGtx2yGxhTTEdsTL0GZ1SZ4nrCXIkiqBf9HtLOqvBSQTlgI
G2wvARtvM00b2wwoXzMZevH3I0hOfjyvFJWAntZq72AfJoHrhW/WbB+aYFZa
SM8Rmy/vKm+/7wQRLITL8xaDKKBswNsUEloLZq+HDgbrdiCNaPC3b6yDbdpX
FEWDiLCQi/JT0vOR6vbFBAGfX4AnPqw8wVEH4J12zFS+EiTD+Y7KtxDh8b39
3ztLBlBBwp4b9tVEMNg7kltZlY+uOlGmot+SoIp7wP4kXxPc3UxoFBJrhn9+
cCbVsxUV/HmtK1fbCJY8VWc3W+pAL3yH37JwIzxs8XFgEUoB6cTMuadfyiC3
0VxrR3A10k0i/UzFev3m5tnam98JsL3lM4fizmY4JvCLcpVBgHeXjXRdArE5
d3PlW9qTQPX5CL/QQjWUN9d0r2JzZP1nlXqquRmE3Nj3Ub1SEdfZ6oL5vySI
0f/vKzg1QcqTj2tbBRphSaHM8hU7dg8NAq/5S+sgyaSL6fC2CSY4hnZyMkhA
e5Ex308kgkJgK/H2j2aoJ49pCbn8AQOpE8qzyS2II7rwZcAHArSfFDeOca4E
6dp6TaWoOrR2pL7ubx0FVgImL+3F/FF/ICzkttssUuqVHszkJgCH4cITqa9E
oI3MiEoWFQNR0nHbV8xXfj1yz+5LIMGS+QmX3hQiJBF0vGtlcZAioCRCT66H
cX+1ngHsu8cGsz/itpAhuWtAne8NCYL6V3f/VKdAxlRc+Jh4LjCP3PRSbWiA
fspLH83oanDekIsO6WyCqteGBlVazeB2ZPbKK79SMDGnRy0IY7n1Vl0w8DIO
XqnieNNNKPDz90fWpN5quFqlQJ5WbIJrPPFLP883Q2dkwL9zX/HQYzg0fCOm
AY5bu3KthhMhr29VZn5XNbDIPmmRkqZAyU6+lFcna1ExkjE26K+F7jBHn5sj
WF5Qt0akqOzBSbx5yXF6kwKm25UM3lgRQWbvsbSgHA5cwnPChUeHKUBVeZnd
nUkBB1v76I82BGgtZXIVruWiBoVaZeN/P0F92wHBfkQBHXLIlOLWCvBXqm7X
5MeDMif3vEYWBZY+sl9i3iDDQatylzm1RmC+PXjt2FAsXB27OhwdYQWbhP0u
oymB6NrovczkVAqEcSfVvvOhQFTgLEPKAQ/kkLruBLVakBzKOM32lwhCr6eM
jP0RNLwIp1lg/Fm2OGT8EZt7r+Hmv64oIlThcONvMT5e9lUj1Y/Wg8D4DqeH
z2rA+b4TsVm7Eohbz3VWMZqgp3+JNiLVBFkXBHwuEAhwv1Z08kt3A6j7U9mI
2Hyi15WbS29jHlhV7vhFoAHOnK3avauHDOvvAvw0OinwbY6heyQXDy6cnC8L
zMhwhO3i2rAGAcpqtGLtz2Dc5vz5njWfCO9c/UXD9pIg+k1FOR7L5RQSr/h1
mQp4zH7+vfkNAvw08zsDZvMoZlPbVGagAQaI0e0HJtrRO5tfjJnttbCBWOVV
71HA8NGjs/lAgVG2dR0lDzK0PC22N4nHgezcPeqXiyXw4OwZlmz1ZJQagr//
T5QCr1wLpTTESfBBZCnlqA4Fdo5MV/BFk8Cc03oEvJphxtpG77kRHgLefSrc
ydGG3m2y+/15ir3nr9Fjb2SbQCM6ymqCmwL9oRvMhBNkcJjkPOnzmAzbpsdU
2nYRQFd5nSVN6i9K8DNpadrVDI6u1V0fqunI74fM7tfY/lv9V62o/64UooNZ
6j7yNcCezwkP3R7Ug2dd4xGrfz+gOOVKY5VGM6xy3h2fKyRAED9xVn4wBFgZ
Jx4V1o2gh0YWijw9fyDg5r6DblgfkRCdy3Gr+IR0TChfBVXIMPrVjfEWR0Ao
80jwGYz3NqTO3S/5SZAVwe2zcZUMwpOrA3uLKeA0qdOqwNsIUJaos1OjDr4R
5zpUDpJgYGFrSnAwHqast9mLUokgqZnLsMM8Jziys5qcVQsmShecXygQYdln
NGPFbQEx2b5291SRwJP1fMHYGBmeR0zyG2H3JSeOyjcknZBymo6nX1wNXFFa
y7fPaYJFUhxNyrMJYkdPdfRbDSMHHq6da45VUFb0dFpSfwn5rQglz76nQHor
/9WznfWgeD7/vQnRHcRmxMxCKnwhivveh6BJCtz8WTjdzNYE4iKalKxKIlxg
PcEhmYF5303ZCkKlCzRr6uN/Yjx7Rvxol+xKgcuVPwoijImQGuU2BCINkPR+
xrPPgwDPL8wnn6eTQLDu2oIn5pMFvO8bJGYJIPNLhnrJmAJv94iFJFaRQc8+
xXorVyO48r3KK9SthOST19X/CvQjvfDfEw8xf9pjduRSEokAnHWGGgMNBIib
cfMEuc+g7wfPXGdn0BGLf0UCMzWw9/EZz30GFNhyeuGbRH8jyIZPz+RdI0Ai
ZUDCX4gEzVq+K4R5EjBuTLUOITL454Zd6uNphtyPaTMr3pVoOvQ1q82rJmjE
D8jh4qvgnoXh8qFjObB/u4d45ZQ3nHp6K07GkAg+kWLSVpi/PonLt3B9mw1r
v8bkdmNe1t/gOFOcRga237NmhNNNwHGsucSjjABXLwR9oYUT4EOGqmryCwpQ
BKJmRYLq4dTb68U/dlGgovTdAc2HJLBLOi2t/5UMOgPcTq5y9ZDaa7cv+hkJ
pHJeRnKvxcKUCkvHrZ4INKRiIKwNpdDyJ/2YSiUe9nuxHQqvwcNftrR5Czci
vMm1vBiK8esyqT8iLaARRNiHlWxaCbB12f2of0UTXCidmLY/Skc6NRR/iTIc
nD+9GSe7QYZLrblfI7CcWgmWlzPuroS5w2cVHbB7Kf85c0VQkQw7qy/mf1DM
gFjpDjFXjmIUSDn4hg/LMaKppW/OXjLIUqiTd4Tx8FPiV4H6BAl4nhg3FGF7
LsNRl+k3VgsGNzve+jYTIfzfYYn9EuWwP/+/m4WODdBw80GS48dYJA8Hv/uc
xvxMoW7qjzsBioIt9QPKyfDK6W7rWBUePMrn2Y58/T/nCuNWb1SDbGvUtjlS
E9yyYonWutIEa/3J4KlPhBBTEovybgo8M7kQMtWQD6s/1N4TXRlIQ4LDatfB
RuhxmxACdgLMSkggYW2Mk7tuSG9YEmGXTNVuvm9kiL3qe+XlEjsuWktgfUSi
HgiKf0ce60wip1qqcithFmUvru13Ol0Foyb+C3ZEAniaZFfzJ5FgTqrtisUV
Iiw+1GYYHaoHiQ8v1sNmiOgvK/NsWD0Fej+KiJL/1ICjQtPnAxgHmFyLncYH
SPD7i4ildgEB3uz4q57xpAm8HZXlqfrvoeO7P9tjXBXkTU3+91SICFJPCd82
DhChUUoA8il/4LtCO5V6kwL5G+UUnVKMXxo31F94Y/e7feG816lqWIrezjD8
jwJCOcUK+kaNgBO9dEegqg7ODFIv5YeVo+3OYWY/W2ph6bfvXK0HCb6O1xcc
5ahE0uqPNL4+IgMnORco30hAScoO+NTUBIpsG/Ux+0igJz2Cmz5OgDnLz0fL
3xJAO6X+vVBPFZzzdW03zKHAPX7lKzwn2HCHP0XfvidIAotH6WtBp3BwK8Tp
8B2LHDAX2fJTXgTz0+ciFaFZWE//IxojkUMCjVDCsAcfBWrWUx9kbmsGP8tz
k7nBJOAPzGb/8Q+bS9dR6qEQAVxYRt3nU5MpiO9r1dPTCy8Bf2YmPc4tB2xj
r9WLS0wjU8vP/1mK14H8ne+S+72r4HBv0mqfBMahoSVz46QG2GgLv8ydFoM2
5df0KIEUiG8e3Lb66SSu9514Fa2ACNmxO41P+VFgT+7arp9rg+jG9Hvxn19r
oUWvVWhDogY+Hzz0QZUduzNV/eDks0Rws8/XDfRtgPyDBwJWlerg0xO9nXvp
BGDpMnxJ3I6HZr7nzFfDFBBLVIrvf10LYVJnv7NZNsHrc7ezGOJEGPda/SkS
1QS6RDXt7DnMR84TXmzF/MYngf9+k/sMWjHyaMrDOCH+xkqceRUPuTSByPX8
JjhutEPOAPPVnjOvNizySaDoOJblylMDofzidtfwJeAXkqxjMEmG2d3yJE2M
50Uam9u4tZcQeYyTwfMQ43ph+orZIh544i/wCmqRwbDV+ZZ54TqaUMef9FRr
RGnPleECtgcbJ+zNk9sIUHKTMaLzKhsCms9JL3hWwELVY/EbmKdp0I0PH8f4
+/yTeGyBRBW07uMyXdakwLkjrbfqPfCQ8VwFp65BAoOxw3a+KzVwOCmQVE8a
QZydnQs/dKvgW+KmUTSThBztYhL6Ke9g8KRRvg72Xvqj7x88flaKnovWne9Y
LYNV0qMLH25gXmh9XSR5Dg9sKvxP8h+Swby1vVoZ82DedOeB7kUy/EqNvK2n
7gvinH1JnaWjiHS4O7JguhY2Mym61Boy1PqUHjqfiAPPgjvPlIhFYOxJfXZD
gADmHPwv3COa4NiqG+XqAA64fa74yPoXwr+regf1ghsgsD/BPNK0CZQlSzmO
7gkGmZJPxJldWYAnxLHtn6VAIv9F9ebYZnij4mz4784s8vy6uutKozcalLfs
x5lj/XjFX2+rbx7EZv22zHtOAbdQCwgm5kOT9aCt+FgKFMRxRfLcSAKV8+TR
x1hvNsnw4TpdT4JU31+LviMVkCCh4t3rWQXz3t81taKeIstxjcdXMA6/Yik9
PqnQDBe4nbZ7cBBhpshmVJa3AoTXtSwT7OrASfMG5RrmD1ehXZoemY1kGesJ
kgMMFPD217ejYWSQUTqom5dSBym5bPc52upge+9+vQ+OZJBWP7Cfy7QWHpf6
jJan1UJcgEXiFNZPhkhCJ/PnaqFyhNN75hoZ8D+WjLjXKbA+u1vjXmM9WGe7
pWUnF8ODbfttsLHCYDv3tltGSWiSVME9e5sMn21dmw4za+D+2Usjmn/rIfH2
lxP2z5sh3Wqxd88ZrM+dWrFU/UuA1PiY4IBIEiDy6qizDOaJRhxrx5aq4ObC
Qd9PnDVQ8sWHoNbLgvNVdDxcqD6ImvEFhE79OpCVUfO4HE8GnzMWfvlFNbDT
gM3kpjwFzL9nlV9TwPZ11F2U3QbjykGfsaP6eCjRCbnMXML6Wp+aS1BRFTxu
nyk5wlYDv06OWs2NE2Dl8RrNqJEIvE/NNutPV4LZubQC2ycEOBfLl0D4SYRH
M8K67M6NQM831KsKboTFyO1HZPkp6NrJi3+Np/CwuF3RokwCD5qp2SMni0nw
ROWb3aYWHhL38MULXSBAf40v16U9DWCimemhMoiHIbwMTeBDHXS13zAUjTuM
i9GN2ozRaYLwibu6z0Oxuczc2hF7owHyTjg1ZVo1gYRPd/eVyQbwwR+YjUpC
gCPgt4XpYXu60HaO1x3z8sAa14w7BDiTJV/9VxtBLJu12fOMSgh4z1HJ/gO7
a/WB+x/JjcDY9q0xqQDL64OEZIF/TfCl/dZeWhsRgLc5nsiL7W/HUR3bkggU
qZp+uIS3GRIuDLy+lEmCVS/jfW3nCDBIVWVhJ5Cga0XtCau9FpItenr0mFEN
tB+OUfSsaQKpWj4d5c9NyEq4mrd0eyNYfnIs3mBphiptj3dWQgS4d8ipneRQ
AO91JHuC95XCw3v+XgdP1YO+rZ5DfA2Wk67xJ7Zq1MNq5c5x0V1PQNN6/lHa
B4xv919/EvtXAzVOX22RrTgu5b8evIYKHYlsHGTpVKEAD8du0/CZJvi9a+AQ
I7sW8sqf7Y2iUOCKfljQjnIimK+fNTf6VwDpwRG9997XgAXtHfIKw/qWuI/T
g59rKKZrV7bqQyzXm1UzYjJYcZqPTI1yaGS4HvLM1qQkEKkJzw9GlW/DZbln
jkRbE+AvPrzPdZgALgac+w1j62B/lMeorRQFaPZxn5cxf9QQ9FzXVWqGKapW
xmkxHMJF6N9v12xGjZtVQvRQCujtWEotVSfAELlhguZMhHtvTn55+YMCt1BR
32HMFzf4HP/e5aDAQrQB+vy9AWweaS2IVmJe5AhH3lHJMJL+fcsL7T7UmsDF
en0tEnaK9gUfzWwGyUsd+QUL2F6UpT/UHfyMVtT+sgun9CKJVJ39B+cboSp5
kmNlqQb28frM/d6gwP7g3Ot0chNAnZyudBTWP5wlpVcL8CBe/Uih3qQZdX67
ckUO3wg1dmWt0j0N8Pdf6Vwadg8Zp2U3k47WgpjDa9meMziQGH1sci+wGoUs
597ccokM1RZBL9vmm6Bkvtdl/f5nUFRMazBlxfinFaybfL8JqLo7TUI0SdCw
vzXMT7YXTZq9XX27JQ9WvNf/ukQSkKuhsJrAVazn9/xuvQIkwF0W5xFH8Wj5
EE+QpxIFGeHfhcrkEuCdiMvVDcwDFL8zM2+8bAaOwMPiOvKNsP/7aIvEYj3c
yOBUM5HlxWXXucjnyhDgEWt/eCLWf9vtL3y6jTVfewXFfbvOEVHtM2Mxv6la
MN3YdHZ2qwbl/C1m630k0O51bzjkgPk+lZ02rkuBupWI3vN8jbBGu26+IEcB
A1U2cd/PRLi0RzbmbnUT8BXwh/kbEoCa71dFcyDBrE5PzVOPKuhIezh8AOt1
p9dwuJ2KBMiMbuU9j81bY4GnkiuPBGvTkc+sDzdDtCc/I+4k5gf2yG/DiAyF
GX32Py0pEDFmt+eMDYKY0X2XOtwa4dgFfX7rExT4JTxLd5wNR9tYJU9wH8R4
7Lcpp2pHAS+B8hc/VTvRFiLt49nHFMjKvyly0PojzGb8bncYr4IKO4m7xXlk
MNgZaXPsURG6fznXMh77vRUXr/RljuYBuhb+8IEp5puOdowBbiLYPAsQvLGK
B+2MB1JBODx448XUUg4Ug00vV5P8iVpQ/F3z+4hfE1wSJZ6ewzyj5vFM5inz
cuDeRtagYXlLRNU7dpysgUMD30KQdzP8IL2Z0/b4CYfXwo1SOrBeP8MjE/4d
62sy73pT72P5f4ebI71+HnHn3GPWjJTDlrs2reJYrr4/dj1y5ynszhI9RGOO
EMHsaNKGQaggjvzx0OXbMyS45PIv0Se9CeTR5iZHYhXEjfPu4MRyGBeQs1F4
ZxKR7a7uvMRHBI7zx3VII7lQbJhy18Ef896QQcmj35tBbW3A6V+qPyiVJ5t1
7quFsfk9gWa2zYC7ZaRAlyCCn8aJU/dtME9Lmu4+wFsAGUlRhVqMRlA8ly9v
FY29/+DzfCk1zJsinnDy7iKjDm7u/dbaNVAZzmpZEUmAgtUqO0dEgDBdhaCU
hUYY5yeVetLJcNddWsGJjwC8Xxv6Le5i3zcZ2DEglwPuYcm3E7nq4ZIO+6Tp
yTrAh2kJ/K/iMvGHenvjONeQIcnlNkkSabsqJcmSnlJptLioUFrklxq7bG1C
lkpZwpSaslymwehGQmWZMwwzxpiZ72jDxEVuxCRSl0q55/cHnNd5neec8/m8
39kuEnCdZcW5JMJcG8V1yukcwrw3WfLwaQNcozAUH0Li0ehayT6tXwik1CY3
/JfLgUSy/oihJQHvt/Odb5hx4V4JbSxF2ADiOVGFyqkC2ML8zbl2kQh2BRxS
GUyoRc42qJFtSIBH0FK/BAUf/BfFpeg5lsNjiCsQOBlyafyPP97OYN8p0C8e
PsyF8Z7fqvOwv2k/jF9Pxhwq97xon457Z3N87dkbHmJIqRubUaSJISLWbQl1
NebSBW+X5+Q2g47X6rGSza0QT9oeMm0lBaWQkhWjrkLgaFk4bKNij+3ypPld
I+AFvdT4dk0j1G+xzXbVxv/woGrUzCUxfHTNnr+mqBV4/1gK5v0hBi1l1+j1
Ni3woUZnc9kp7ONv/Saf1xOgln2v/fnuVpi8aRGwwVcMvTz98J3/C4ZbEzYe
+zqlsMlAUlVYIgHvUk+uk1MDOBp88uyOlkGdgtUVwBMBK/5C3bZdzeATsWKD
3QkZnJ3lO+QQ1QZ3J6qOr3lOgONfTyNn72mDYfOpp/6UMfTVfb8c2DeQLzW0
M+s8ztedVhrzzgmAw862GFsmhVtXAhd2zhECmfLW836TCN6pveaOjeLzTu89
zl8agTTT+/Y8fdcA6bKcv6pJuKcOnihHp8+Bupl6hKV9P5qzkdJkweLAYNhG
k45AAu5rZGu3qBHI7Nhush6FAKq5lcbYOT6QFwUQz7g4J/b+Xq+F/ZKxccTe
7n4SNJ2p/5hejDnEnOV1+Bb26c9feslaVfAgc9PS9UoEOAxkLFM5zoE73lo6
gSFy9I2dNz6+RwxqIcwbO2l8iBI8+j18MAU5bK4oZms2goOpJqmkWArVi2w2
xgmEqDYqNf6yaQXEX6xjjt8UgstoiMqD4A/oTJyKL2VeC9CmZMwTqRJ47ci9
q97/EC6yK41p7h/R+3DF9RXa9fBDLhPOrcGeLa47T+4tBVge7/+eJIMTn3xl
Mcld6OuCAIfarVKwm7hP8+A0g7e39R2PDgnoudHUBmIaoDwzvYXxpA44N1Z9
27aag6pCpjL+5tXAPLeURuVMGcw9dZ42IOdC4lDw4I6XUuhqUF6Zk81F6f9+
50wpC8A31Pm4E/7PqXv8GSfrCHjV6rNtM70N1nTbMxP9G6CuNO/PJyGYO4gT
mnZUHnjHN4ZGT/NhcnLgYMdqHjB8d91l+E6jvBsBLLbXECIH/MYyS20DS3JR
ZciREWS44uiLrCIxXO7xMHpjQ0BdYnnSzTYx2Lm9eNOJz+ndrbq+NEsCJ/dt
2plWLILEwN76l8Gq3MLv076Jzs/Qt7CyNfa0/9+zhtw5oQ38BflJXbHNwH3S
GLGVTED3TZ8ehX8rXGa90qFoS2CaKldqkIiBuuhMh+6xL0g4t2xWO+Zt2rwF
avkFBFgZujgznFzRLJOgpOOkJig2zOnWeLMLMkVGnp+8xPCdsSvI9IwUtEey
+4bwvkGMkSdmyrjv2Nrh4z+q0UrDLYIluY3owvz64b7pZmi8MirNm8MDwi56
nF1GQN+Zlm2t5sZc21hnc8pQC0SGv7x9kY6gRu2z+BdmIQpNGp5F/yyCX28d
YAVW8sHdh74y14MHk7Q1acPyJmip2vGtmo25JrSLbrCtHpRG2Cx6OB0GpIbq
T9oIWM4NW1ptJAbFAuPGBGMJVOTwD43z89CXw/0ZqXp4LpRyYwO2EDL0pzLn
PuCBgpS053l7B1qgpTdD8upCfuZ6ybNftEB1Tf+mrCge6Csi9h6LaoC0AVJu
iTXO2VPJJfuFBEyuWrLkBOY2909eQ524/3O7vidzyppg8Z1BQRfm8R17+wwP
efChQPNp3PgozsHZuiRT/G7IMjtGJEMG7Cz5YS3se6Y6W2OvY46aTPq1M+rA
Qm6iapDV6T+qgO7iXfZQtQquSsv6t/6UgkI9gNYzj4DpdX0HmKmF4OVsbWXU
L4bIUIrj4LGF3L4R6v4/i14ijREo073vDVctA5flzzSDX2xKWuy5ZmDbd+jP
IQsgbs/7pzy/CVRw/atbwA8J6Or8iNuK82vhDmFmmVMhOHx2MeYbE7BsWeC3
OCYX3kjG7Soik+FNvaMFYYtAT//kmOlZEShFc22pL6TQTT0/dr6KCY9cnp2O
7BUAu3BInju7BLzrVXQuWrbA0eBrfeti2uBwke/UxWEEe9E1JV9OK2T1/iSr
eLSB3DZM8SiLzFWFo7csh4TQ8+h+jK9IAn/cKbbIy25EPlass2Pl/Si0NtTE
u10CEs/Rf2rDytH22HN5cToZiNFetumljRBem+hMRNSIAD66fw0vEkDtT59j
mrfYsKHW/3WUQgqxKHimcqUY0g3a3136XIGqTV5P+TSxQH3ut4O0HgLyLWZi
XqVIIUOc3F2tQ0DYJ3qBbKAA2Y92PmbtlkBPKbXmkr4A3kwM5sa6SIFsnnPQ
qksE91beWxW9RQx1EqN9dZgLr+6vnq+LOasiJffm6XwpyGu31F9IFYGTQ/Pp
9EO9yCyISnaiPgKKHmlx/gUJ5HpwyY/XYh6+0JugoSoDY73HAnH7BGqh5zE9
tzfAFVu3s+4LZRAWaS/4jvmIObMYbcCeuYU1n+d9vQ1o1rl2JLEA0k2eUeQy
EcR3jYqpUyIId8zQDep9jvzv+hw4dqQBvNJ5pmteS0Hq4amcMngJCYMkqYFv
+XBn2LBpmqvCJSmxpy4pxDDnw7DPcuydkT5meg4UEZhlMNZ77MXvjrkj9PRA
IwQb9cQ6V5WiF4wuzwi2CNbSvMzO/eRDIH2pxTo8R5619QrHTwTMHHWvvGxT
CRxXxRktnZfopIMybel0Nbi0uvz99W0rHC2JrbJd1oCsbx5ZwsBzLb/t41d4
vAnSNickGKxsgdFT3iYk7OnM6A63R7iPw5Ig28FAAOrU5MMPxiQQ2KRIe2Xf
BruLPsboLsH9QJ/ObHTH65tL7lmEVcD5Q07/bvCSoNtjxcLix0KwVA/s0VmF
863WRBodJYZE1d9/zddrgsrV+TGwDvu3zfOc6zIBupuhkU5YaXL/A/Q+0E4=

          "], CompressedData["
1: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
+KT82P+aiVVD4baa3SyY66U3xUuqE/8DruPG+g==
          "]}], "NeighborsNumber" -> 500, 
       "ClassPriors" -> {0.004405286343612335, 0.16123348017621147`, 
        0.6026431718061674, 0.23171806167400882`}, 
       "TrainingOutput" -> CompressedData["
1:eJztUEsKwjAUTCdv4dIreAu3Lt1WPEBLYxEhQiqIt/f9ol3pBZKmw+Qxb/Iy
u/HeXxBCWDYM/fA8lDK8Tls+nPNynXOajvmR5lT2Y8fFG4WAiEj88QL/pEyp
QeyYKCPdJv2CidQBoE+ftLCXU5OLCGajADesevUwMxDVijWaR51O2gWUCYWZ
ipD74E+C+K5mh11JagOvyomoviHCb4EO2LL5lc2/aFoyLZlVMm+oqhpS
        "], "DistributionSmoothing" -> 0.5, "Processor" -> 
       MachineLearning`MLProcessor[
        "FirstValues", <|"Info" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+JZM0HgpD0hOkWRO/KE07RRmk40Axh8wEkDAI1Pnak=

             "], "Type" -> "NumericalVector"|>, "Key" -> "(f1f5(f2f3f4f6))", 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
       "NearestNeighbors", "PostProcessor" -> 
       MachineLearning`MLProcessor["Identity"], 
       "Options" -> <|
        "NeighborsNumber" -> <|"Value" -> 500, "Options" -> <||>|>, 
         "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
         "NearestMethod" -> <|"Value" -> "Scan", "Options" -> <||>|>|>|>, 
     "TrainingInformation" -> <|
      "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
       Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
       "PreprocessingTime" -> 0.185236`5.71927038773165, "LossName" -> 
       "MeanCrossEntropy", "BestModelInformation" -> 
       Dataset[<|
         "MeanCrossEntropy" -> 
          Around[0.9828380217678336, 0.047071901674378074`], "Accuracy" -> 
          Around[0.6124079257652963, 0.04030806446907511], "EvaluationTime" -> 
          0.00002480224444518741, "TestSize" -> 283, "ModelMemory" -> 515624, 
          "ModelUtility" -> -0.6855273318437267, "TrainingSize" -> 1131, 
          "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 25503992,
           "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
            Around[0.9828380217678336, 0.033284860877299136`]}, 
          "AccuracyHistory" -> {
            Around[0.6124079257652963, 0.02850210572258754]}, 
          "Configuration" -> {
           "NearestNeighbors", "NeighborsNumber" -> Automatic, 
            "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}|>, 
         TypeSystem`Struct[{
          "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
           "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
           "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
           "AccuracyHistory", "Configuration"}, {
          TypeSystem`AnyType, TypeSystem`AnyType, 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Tuple[{
             TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType}]}], <||>], "Configurations" -> 
       Dataset[<|<|
           "Value" -> "NearestNeighbors", 
            "Options" -> <|
             "NeighborsNumber" -> <|"Value" -> Automatic|>, 
              "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
              "NearestMethod" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.2248607206220448`, 0.11340969098126538`], "Accuracy" -> 
               Around[0.5586634981337953, 0.049448528868826495`], 
               "EvaluationTime" -> 5.01187233627272*^-6, "TestSize" -> 200, 
               "ModelMemory" -> 12392, "ModelUtility" -> -0.9143636541847866, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.003981071705534969, 
               "TrainingMemory" -> 68744, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.2248607206220448`, 0.08019276154512359]}, 
               "AccuracyHistory" -> {
                 Around[0.5586634981337953, 0.03496539008284597]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.1883368360674598`, 0.13403587930409122`], "Accuracy" -> 
               Around[0.5285422734707513, 0.07042839738432254], 
               "EvaluationTime" -> 7.943282347242813*^-6, "TestSize" -> 100, 
               "ModelMemory" -> 30608, "ModelUtility" -> -0.8880547529594012, 
               "TrainingSize" -> 50, "TrainingTime" -> 0.001995262314968879, 
               "TrainingMemory" -> 155816, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.1883368360674598`, 0.09477767917822452]}, 
               "AccuracyHistory" -> {
                 Around[0.5285422734707513, 0.049800397378555364`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.0049375881232927`, 0.034553982918147465`], "Accuracy" -> 
               Around[0.5823460348877619, 0.03223248305676092], 
               "EvaluationTime" -> 6.85414307894889*^-6, "TestSize" -> 500, 
               "ModelMemory" -> 119888., 
               "ModelUtility" -> -0.7049916830437476, "TrainingSize" -> 250, 
               "TrainingTime" -> 0.005989009006596083, "TrainingMemory" -> 
               1.42664*^6, "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                 Around[1.0277097480780593`, 0.040391756240363244`], 
                 Around[0.9821654281685263, 0.0339489637532504]}, 
               "AccuracyHistory" -> {
                 Around[0.5586634981337953, 0.03496539008284597], 
                 Around[0.6060285716417285, 0.028018804642146074`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.9828380217678336, 0.047071901674378074`], "Accuracy" -> 
               Around[0.6124079257652963, 0.04030806446907511], 
               "EvaluationTime" -> 0.00002480224444518741, "TestSize" -> 283, 
               "ModelMemory" -> 515624, "ModelUtility" -> -0.6855273318437267,
                "TrainingSize" -> 1131, "TrainingTime" -> 0.07943282347242814,
                "TrainingMemory" -> 25503992, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.9828380217678336, 0.033284860877299136`]}, 
               "AccuracyHistory" -> {
                 Around[0.6124079257652963, 0.02850210572258754]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00002480224444518741, "MeanCrossEntropy" -> 
              Around[0.9828380217678336, 0.047071901674378074`], 
              "ModelMemory" -> 515624, "TrainingMemory" -> 25503992, 
              "TrainingTime" -> 0.10328965914144424`|>, "Index" -> 1|>|>, 
         TypeSystem`Assoc[
          TypeSystem`Struct[{"Value", "Options"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3]}], 
          
          TypeSystem`Struct[{
           "Experiments", "PredictedPerformances", "Index"}, {
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
               "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory",
                "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
             4], 
            
            TypeSystem`Struct[{
             "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
              "TrainingMemory", "TrainingTime"}, {
              TypeSystem`Atom[Real], TypeSystem`AnyType, 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real]}], 
            TypeSystem`Atom[Integer]}], 1], <||>], "MaxTrainingSize" -> 1414, 
       "PreprocessorEvaluationTime" -> 2.09765625*^-6, "PreprocessorMemory" -> 
       162512, "InputDimension" -> 55, "OutputDimension" -> 1, 
       "BaselineLogProbability" -> -0.9603219837180875, "VariableBudget" -> 
       True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
       False, "NaturalStop" -> True, "AbortStop" -> False, 
       "LastReportingTime" -> 3.879358312477307`16.341334883723906*^9, 
       "RoundPartitioning" -> 
       Dataset[{<|
          "TrainingSizes" -> 10, "TimeBudgets" -> 0.0008263172731315541, 
           "ElapsedTimes" -> 0.006177, "ExperimentCounts" -> 1|>, <|
          "TrainingSizes" -> 50, "TimeBudgets" -> 0.00413158636565777, 
           "ElapsedTimes" -> 0.003853, "ExperimentCounts" -> 1|>, <|
          "TrainingSizes" -> 250, "TimeBudgets" -> 0.02065793182828884, 
           "ElapsedTimes" -> 0.028305, "ExperimentCounts" -> 2|>, <|
          "TrainingSizes" -> 1131, "TimeBudgets" -> 0.10328965914144424`, 
           "ElapsedTimes" -> 0.087129, "ExperimentCounts" -> 1|>}, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
            "ExperimentCounts"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
     None, "Log" -> <|
      "Example" -> 
       MachineLearning`MLDataset[<|
         "f1" -> <|
           "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"Materials"}, 
            "ID" -> 2846111867015398573|>, 
          "f2" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {20.857}, "ID" -> 
            41728420326286313|>, 
          "f3" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {24.308}, "ID" -> 
            1436697572522429983|>, 
          "f4" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {227.299}, "ID" -> 
            536027689597629633|>, 
          "f5" -> <|
           "Type" -> "Text", "Weight" -> 1, "Values" -> {"Estimated data"}, 
            "ID" -> 5753609278033805624|>, 
          "f6" -> <|
           "Type" -> "Numerical", "Weight" -> 1, 
            "Values" -> {106.653196777609}, "ID" -> 8080186329754682489|>|>, <|
         "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0,
           "RawExample" -> False|>], "TrainingTime" -> 0.332372, 
       "MaxTrainingMemory" -> 26482504, "DataMemory" -> 1910920, 
       "FunctionMemory" -> 752616, "LanguageVersion" -> {13.1, 0}, "Date" -> 
       DateObject[{2022, 12, 6, 23, 31, 52.609709`8.473640874568222}, 
         "Instant", "Gregorian", 1.], "ProcessorCount" -> 8, "ProcessorType" -> 
       "ARM64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
       "Evaluations" -> {}|>|>]]]], "Output",
 CellChangeTimes->{
  3.878619160734618*^9, 3.8786192245310097`*^9, {3.878715800641226*^9, 
   3.87871584525163*^9}, 3.878715887355948*^9, 3.8788055501495533`*^9, 
   3.87880572388905*^9, 3.878806815602689*^9, 3.8788071767848167`*^9, 
   3.878811643047717*^9, 3.8791492159968452`*^9, {3.879325496945715*^9, 
   3.8793255053952217`*^9}, 3.879333028444346*^9, 3.879354713083804*^9},
 CellLabel->
  "Out[537]=",ExpressionUUID->"3916a230-90c3-4375-8869-6209a12a7f3e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"cm", " ", "=", 
    RowBox[{"ClassifierMeasurements", "[", 
     RowBox[{"cRisk", ",", "testset"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Test", " ", "our", " ", "classifier", " ", "on", " ", "the", " ", "test", 
    " ", "set"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<The accuracy is: \>\"", ",", 
    RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}], " ", "]"}], 
  RowBox[{"(*", 
   RowBox[{
   "Plot", " ", "the", " ", "accuracy", " ", "of", " ", "our", " ", "model"}],
    "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"AccuracyAss", " ", "=", " ", 
   RowBox[{"Append", "[", 
    RowBox[{"AccuracyAss", ",", " ", 
     RowBox[{"\"\<NearestNeighbors\>\"", "->", 
      RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Plot", " ", "the", " ", "Confusion", " ", "Matrix"}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.878619179671941*^9, 3.8786191833045883`*^9}, {
   3.8786192222213593`*^9, 3.878619249704307*^9}, {3.878619342065884*^9, 
   3.878619346687873*^9}, {3.878619378625424*^9, 3.8786193862338676`*^9}, 
   3.878805729554159*^9, 3.878805819596631*^9, {3.878806143346759*^9, 
   3.878806195391272*^9}, {3.878806763106118*^9, 3.878806811062291*^9}, {
   3.878806841172628*^9, 3.878806863962813*^9}},
 CellLabel->
  "In[538]:=",ExpressionUUID->"5e92e43d-3a8d-417e-8227-9da67103f984"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"The accuracy is: \"\>", "\[InvisibleSpace]", 
   "0.6129943502824858`"}],
  SequenceForm["The accuracy is: ", 0.6129943502824858],
  Editable->False]], "Print",
 CellChangeTimes->{3.878806864557898*^9, 3.8788071796386433`*^9, 
  3.878811645673299*^9, 3.879149220880064*^9, 3.879161030587552*^9, 
  3.8793330325042353`*^9, 3.879354715679596*^9},
 CellLabel->
  "During evaluation of \
In[538]:=",ExpressionUUID->"049ea804-e64c-4588-925f-1d7bd5c1ef04"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBghWIQGwI+2BNLe9dc7Fwq8c7eI3vm3G0z3thvaLwfb5L0
nGj95NLdzNPdP4q+sZ+vHbFqQtATewOr5X75okdobi+Mflglss794S17BhRA
O/ta+Dcsv/z3jX1yx+qj8z1e2EtPe3NDef5NmvuTWvELAID8f2w=
   "], {{0, 0}, {5, 5}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"B\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "B"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"C\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "C"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.002824858757062147`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "B", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.002824858757062147}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["56", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "56", "\" examples of \"", "\"C\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.15819209039548024`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{56, " examples of ", "C", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.15819209039548024`}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["217", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "217", "\" examples of \"", "\"D\"", "\" correctly classified\""},
             "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.6129943502824858`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7600700525394046`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{217, " examples of ", "D", " correctly classified"}], 
         Row[{"Precision = ", 0.6129943502824858}], 
         Row[{"Recall = ", 1.}], 
         Row[{"FScore = ", 0.7600700525394046}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["79", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "79", "\" examples of \"", "\"E\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.2231638418079096`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{79, " examples of ", "E", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.2231638418079096}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"D\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.002824858757062147`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "A", " misclassified as ", "D"}], 
         Row[{"Column fraction = ", 0.002824858757062147}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" misclassified as \"", 
             "\"E\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " misclassified as ", "E"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 4.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"B\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "B", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"C\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "C", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"D\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "D", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"E\"", "\" misclassified as \"", 
             "\"A\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "E", " misclassified as ", "A"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"A\"", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "A", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 4.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" of class \"", "\"B\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " of class ", "B"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 3.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "56", "\" example\"", "\"s\"", "\" of class \"", "\"C\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{56, " example", "s", " of class ", "C"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "217", "\" example\"", "\"s\"", "\" of class \"", "\"D\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{217, " example", "s", " of class ", "D"}], 
        Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "79", "\" example\"", "\"s\"", "\" of class \"", "\"E\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{79, " example", "s", " of class ", "E"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {5.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" of class \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " of class ", "A"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"B\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "B"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"C\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "C"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "354", "\" example\"", "\"s\"", "\" classified as \"", "\"D\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.6129943502824858`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{354, " example", "s", " classified as ", "D"}], 
        Row[{"Precision = ", 0.6129943502824858}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"E\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "E"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "\"A\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", "A"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{4.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 0.], TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 0.], TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 0.], TraditionalForm]}}, {{4.5, 
       FormBox["1", TraditionalForm]}, {3.5, 
       FormBox["56", TraditionalForm]}, {2.5, 
       FormBox["217", TraditionalForm]}, {1.5, 
       FormBox["79", TraditionalForm]}, {0.5, 
       FormBox["1", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["354", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"B\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"C\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"D\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"E\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {4.5, 
       FormBox[
        RotationBox["\"A\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->13,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->228.,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{
  3.878619184460875*^9, 3.878619347255011*^9, 3.878619387156837*^9, 
   3.878715848704851*^9, {3.878715890521706*^9, 3.8787158953838463`*^9}, {
   3.878805538696899*^9, 3.878805553604134*^9}, 3.878806818221781*^9, 
   3.878806864604879*^9, 3.878807179681567*^9, 3.878811645716255*^9, 
   3.87914922092896*^9, 3.879161030778561*^9, 3.879333032551672*^9, 
   3.879354715717955*^9},
 CellLabel->
  "Out[541]=",ExpressionUUID->"cf499141-a7d5-4311-bef2-56a15f2523ce"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Neural Network", "Subsection",
 CellChangeTimes->{{3.878618143305781*^9, 3.878618144962409*^9}, {
  3.8786189939708767`*^9, 3.8786190030333223`*^9}, {3.87871708806336*^9, 
  3.8787170907151747`*^9}},ExpressionUUID->"167a82f5-aa47-4220-90ca-\
39153e030b4f"],

Cell[CellGroupData[{

Cell["Encoding Data", "Subsubsection",
 CellChangeTimes->{{3.87871957306065*^9, 
  3.878719585487999*^9}},ExpressionUUID->"af6df2e6-1db6-4012-946a-\
f093b8cea41f"],

Cell["\<\
Categorical variables cannot be used directly in neural networks and must be \
encoded as arrays.
Therefore, we create \[OpenCurlyDoubleQuote]Class\[CloseCurlyDoubleQuote] \
encoders that encode the categorical variables as one-hot encoded vectors\
\>", "Text",
 CellChangeTimes->{
  3.878719595602223*^9, {3.87871982798316*^9, 
   3.878719847961817*^9}},ExpressionUUID->"231b4959-cb15-4d63-a49e-\
e3c934e96ca1"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"sectorEncoder", "=", 
  RowBox[{"NetEncoder", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Class\>\"", ",", 
     RowBox[{"DeleteDuplicates", "[", 
      RowBox[{"Normal", "[", 
       RowBox[{"datasetML", "[", 
        RowBox[{"All", ",", "\"\<GICS Sector Name\>\""}], "]"}], "]"}], "]"}],
      ",", "\"\<UnitVector\>\""}], "}"}], "]"}]}], "\n", 
 RowBox[{"disclosureEncoder", "=", 
  RowBox[{"NetEncoder", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Class\>\"", ",", 
     RowBox[{"DeleteDuplicates", "[", 
      RowBox[{"Normal", "[", 
       RowBox[{"datasetML", "[", 
        RowBox[{"All", ",", " ", "\"\<Carbon Disclosure\>\""}], "]"}], "]"}], 
      "]"}], ",", "\"\<UnitVector\>\""}], "}"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"countryEncoder", "=", 
  RowBox[{"NetEncoder", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Class\>\"", ",", 
     RowBox[{"DeleteDuplicates", "[", 
      RowBox[{"Normal", "[", 
       RowBox[{"datasetML", "[", 
        RowBox[{"All", ",", " ", "\"\<Country\>\""}], "]"}], "]"}], "]"}], 
     ",", "\"\<UnitVector\>\""}], "}"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.878719510991486*^9, 3.878719557128503*^9}, {
   3.878719695460547*^9, 3.878719697302268*^9}, {3.878719754708007*^9, 
   3.8787198129482393`*^9}, {3.878720175522973*^9, 3.878720185570636*^9}, {
   3.878722587877328*^9, 3.878722599416089*^9}, {3.878722879307081*^9, 
   3.878722879706128*^9}, {3.878724455305957*^9, 3.8787244800862913`*^9}, 
   3.878725378813992*^9, {3.87872541427944*^9, 3.878725477918508*^9}, {
   3.878810332977583*^9, 3.8788103344915447`*^9}, {3.8788119060859737`*^9, 
   3.878811919123225*^9}, {3.879149272745099*^9, 3.879149273071574*^9}, {
   3.8794177179495697`*^9, 3.879417728487172*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"2e8dbd1c-5f09-4c5e-9338-71b2c43249c3"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Class\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 11\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"], "SummaryItem"]}}, 
               BaselinePosition -> Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Class\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Labels\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TooltipBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"\\\"Financials\\\"\"", ",", "\"\\\"Materials\\\"\"", 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "8", "\[RightSkeleton]"}], ",",
                     "\"\\\"Real Estate\\\"\""}], "}"}], 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Financials\"", ",", "\"Materials\"", ",", 
                    "\"Consumer Discretionary\"", ",", "\"Health Care\"", ",",
                     "\"Information Technology\"", ",", "\"Industrials\"", 
                    ",", "\"Consumer Staples\"", ",", "\"Utilities\"", ",", 
                    "\"Communication Services\"", ",", "\"Energy\"", ",", 
                    "\"Real Estate\""}], "}"}]], 
                    Annotation[#, {
                    "Financials", "Materials", "Consumer Discretionary", 
                    "Health Care", "Information Technology", "Industrials", 
                    "Consumer Staples", "Utilities", "Communication Services",
                     "Energy", "Real Estate"}, "Tooltip"]& ], Short], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output Form\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"IndicatorVector\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Dimensions\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"{}\"", 
                    StyleBox["\"  (scalar)\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Multilabel\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["False", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 11\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"], "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8787195131639967`*^9, 3.878719538579525*^9}, 
   3.878719814955491*^9, 3.878719849094001*^9, 3.8787201868911448`*^9, {
   3.878722600153029*^9, 3.878722604373269*^9}, 3.8787226527964697`*^9, 
   3.878722881383275*^9, {3.878724466417713*^9, 3.878724480665699*^9}, {
   3.878724540332926*^9, 3.87872455913796*^9}, 3.878725321422592*^9, {
   3.878725379399231*^9, 3.8787254915835037`*^9}, 3.878725527069076*^9, 
   3.878726811463031*^9, 3.878807199244649*^9, 3.878810335757403*^9, {
   3.8788116503302193`*^9, 3.878811687851829*^9}, 3.8788118448568277`*^9, {
   3.87881191558842*^9, 3.8788119196165657`*^9}, 3.8791492737449017`*^9, 
   3.879161034434084*^9, 3.879325510256119*^9, 3.8793269442246923`*^9, 
   3.879333038844298*^9, 3.87935471801714*^9, 3.879417732230578*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"2896e71e-09c7-49af-8aaf-3ceab15d791b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Class\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 24\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"], "SummaryItem"]}}, 
               BaselinePosition -> Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Class\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Labels\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TooltipBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"\\\"Value derived from data provided in Annual \
Report/Financial Accounts Disclosure\\\"\"", ",", 
                    RowBox[{"\"\\\"\"", "\[Ellipsis]", "\"P\\\"\""}], ",", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], ",",
                     "\"\\\"Value derived from data provided in personal \
communication\\\"\""}], "}"}], 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Value derived from data provided in Annual \
Report/Financial Accounts Disclosure\"", ",", "\"Exact Value from CDP\"", ",",
                     "\"Value derived from data provided in CDP\"", ",", 
                    "\"Value summed up from data provided in Annual \
Report/Financial Accounts Disclosure\"", ",", 
                    "\"Exact Value from Annual Report/10K/Financial Accounts \
Disclosure\"", ",", 
                    "\"Estimate used instead of disclosure - data does not \
cover global operations\"", ",", 
                    "\"Value derived from data provided in \
Environmental/CSR\"", ",", "\"Exact Value from Environmental/CSR\"", ",", 
                    "\"Value derived from fuel use provided in CDP\"", ",", 
                    "\"Value derived from fuel use provided in Annual \
Report/Financial Accounts Disclosure\"", ",", 
                    "\"Derived from previous year\"", ",", 
                    "\"Value summed up from data provided in \
Environmental/CSR\"", ",", 
                    "\"Value split from data provided in Annual \
Report/Financial Accounts Disclosure\"", ",", "\"Estimated data\"", ",", 
                    "\"Value summed up from data provided in CDP\"", ",", 
                    "\"Value split from data provided in Environmental/CSR\"",
                     ",", "\"Exact Value from personal communication\"", ",", 
                    "\"Data approximated from chart/graph in Annual \
Report/10-K/Financial Accounts\"", ",", 
                    "\"Estimate based on partial data disclosure in Annual \
Report/10-K/Financial Accounts\"", ",", 
                    "\"Estimate based on partial data disclosure in \
Environmental/CSR\"", ",", 
                    "\"Data approximated from chart/graph in Environmental \
Report/CSR Report/Website\"", ",", 
                    "\"Estimate used instead of disclosure - data is \
normalised and no aggregating factor is available\"", ",", 
                    "\"Value derived from fuel use provided in \
Environmental/CSR\"", ",", 
                    "\"Value derived from data provided in personal \
communication\""}], "}"}]], 
                    Annotation[#, {
                    "Value derived from data provided in Annual \
Report/Financial Accounts Disclosure", "Exact Value from CDP", 
                    "Value derived from data provided in CDP", 
                    "Value summed up from data provided in Annual \
Report/Financial Accounts Disclosure", 
                    "Exact Value from Annual Report/10K/Financial Accounts \
Disclosure", 
                    "Estimate used instead of disclosure - data does not \
cover global operations", 
                    "Value derived from data provided in Environmental/CSR", 
                    "Exact Value from Environmental/CSR", 
                    "Value derived from fuel use provided in CDP", 
                    "Value derived from fuel use provided in Annual \
Report/Financial Accounts Disclosure", "Derived from previous year", 
                    "Value summed up from data provided in Environmental/CSR",
                     "Value split from data provided in Annual \
Report/Financial Accounts Disclosure", "Estimated data", 
                    "Value summed up from data provided in CDP", 
                    "Value split from data provided in Environmental/CSR", 
                    "Exact Value from personal communication", 
                    "Data approximated from chart/graph in Annual \
Report/10-K/Financial Accounts", 
                    "Estimate based on partial data disclosure in Annual \
Report/10-K/Financial Accounts", 
                    "Estimate based on partial data disclosure in \
Environmental/CSR", 
                    "Data approximated from chart/graph in Environmental \
Report/CSR Report/Website", 
                    "Estimate used instead of disclosure - data is normalised \
and no aggregating factor is available", 
                    "Value derived from fuel use provided in \
Environmental/CSR", 
                    "Value derived from data provided in personal \
communication"}, "Tooltip"]& ], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output Form\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"IndicatorVector\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Dimensions\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"{}\"", 
                    StyleBox["\"  (scalar)\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Multilabel\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["False", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 24\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"], "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8787195131639967`*^9, 3.878719538579525*^9}, 
   3.878719814955491*^9, 3.878719849094001*^9, 3.8787201868911448`*^9, {
   3.878722600153029*^9, 3.878722604373269*^9}, 3.8787226527964697`*^9, 
   3.878722881383275*^9, {3.878724466417713*^9, 3.878724480665699*^9}, {
   3.878724540332926*^9, 3.87872455913796*^9}, 3.878725321422592*^9, {
   3.878725379399231*^9, 3.8787254915835037`*^9}, 3.878725527069076*^9, 
   3.878726811463031*^9, 3.878807199244649*^9, 3.878810335757403*^9, {
   3.8788116503302193`*^9, 3.878811687851829*^9}, 3.8788118448568277`*^9, {
   3.87881191558842*^9, 3.8788119196165657`*^9}, 3.8791492737449017`*^9, 
   3.879161034434084*^9, 3.879325510256119*^9, 3.8793269442246923`*^9, 
   3.879333038844298*^9, 3.87935471801714*^9, 3.8794177322386847`*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"08d75599-3e39-4c32-a54d-9a0e35eeb4e0"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Class\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 29\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"], "SummaryItem"]}}, 
               BaselinePosition -> Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Class\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Labels\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TooltipBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"\\\"AUSTRIA\\\"\"", ",", "\"\\\"BELGIUM\\\"\"", ",", 
                    RowBox[{"\[LeftSkeleton]", "26", "\[RightSkeleton]"}], 
                    ",", "\"\\\"ICELAND\\\"\""}], "}"}], 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"AUSTRIA\"", ",", "\"BELGIUM\"", ",", "\"IRELAND\"", 
                    ",", "\"SWITZERLAND\"", ",", "\"GERMANY\"", ",", 
                    "\"DENMARK\"", ",", "\"SPAIN\"", ",", "\"FINLAND\"", ",", 
                    "\"FRANCE\"", ",", "\"NETHERLANDS\"", ",", 
                    "\"UNITED KINGDOM\"", ",", "\"GREECE\"", ",", "\"ITALY\"",
                     ",", "\"NORWAY\"", ",", "\"PORTUGAL\"", ",", 
                    "\"SWEDEN\"", ",", "\"LUXEMBOURG\"", ",", "\"HUNGARY\"", 
                    ",", "\"MALTA\"", ",", "\"POLAND\"", ",", "\"SLOVENIA\"", 
                    ",", "\"ESTONIA\"", ",", "\"CROATIA\"", ",", 
                    "\"ROMANIA\"", ",", "\"BULGARIA\"", ",", "\"UKRAINE\"", 
                    ",", "\"CYPRUS\"", ",", "\"CZECH REPUBLIC\"", ",", 
                    "\"ICELAND\""}], "}"}]], 
                    Annotation[#, {
                    "AUSTRIA", "BELGIUM", "IRELAND", "SWITZERLAND", "GERMANY",
                     "DENMARK", "SPAIN", "FINLAND", "FRANCE", "NETHERLANDS", 
                    "UNITED KINGDOM", "GREECE", "ITALY", "NORWAY", "PORTUGAL",
                     "SWEDEN", "LUXEMBOURG", "HUNGARY", "MALTA", "POLAND", 
                    "SLOVENIA", "ESTONIA", "CROATIA", "ROMANIA", "BULGARIA", 
                    "UKRAINE", "CYPRUS", "CZECH REPUBLIC", "ICELAND"}, 
                    "Tooltip"]& ], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output Form\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"IndicatorVector\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Dimensions\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"{}\"", 
                    StyleBox["\"  (scalar)\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Multilabel\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["False", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 29\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"], "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8787195131639967`*^9, 3.878719538579525*^9}, 
   3.878719814955491*^9, 3.878719849094001*^9, 3.8787201868911448`*^9, {
   3.878722600153029*^9, 3.878722604373269*^9}, 3.8787226527964697`*^9, 
   3.878722881383275*^9, {3.878724466417713*^9, 3.878724480665699*^9}, {
   3.878724540332926*^9, 3.87872455913796*^9}, 3.878725321422592*^9, {
   3.878725379399231*^9, 3.8787254915835037`*^9}, 3.878725527069076*^9, 
   3.878726811463031*^9, 3.878807199244649*^9, 3.878810335757403*^9, {
   3.8788116503302193`*^9, 3.878811687851829*^9}, 3.8788118448568277`*^9, {
   3.87881191558842*^9, 3.8788119196165657`*^9}, 3.8791492737449017`*^9, 
   3.879161034434084*^9, 3.879325510256119*^9, 3.8793269442246923`*^9, 
   3.879333038844298*^9, 3.87935471801714*^9, 3.87941773224608*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"5efe9ce6-1dbf-494c-a16f-7797257eb97e"]
}, Open  ]],

Cell["Applying the encoders to class labels produces unit vectors", "Text",
 CellChangeTimes->{
  3.878719892174232*^9},ExpressionUUID->"4d8415d2-03cc-48ed-aee2-\
c53a40dd79be"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"sectorEncoder", "/@", 
   RowBox[{"DeleteDuplicates", "[", 
    RowBox[{"Normal", "[", 
     RowBox[{"trainingset", "[", 
      RowBox[{"All", ",", "\"\<GICS Sector Name\>\""}], "]"}], "]"}], "]"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"disclosureEncoder", "/@", 
   RowBox[{"DeleteDuplicates", "[", 
    RowBox[{"Normal", "[", 
     RowBox[{"trainingset", "[", 
      RowBox[{"All", ",", "\"\<Carbon Disclosure\>\""}], "]"}], "]"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"countryEncoder", "/@", 
   RowBox[{"DeleteDuplicates", "[", 
    RowBox[{"Normal", "[", 
     RowBox[{"trainingset", "[", 
      RowBox[{"All", ",", "\"\<Country\>\""}], "]"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.878719903392746*^9, 3.878719957267705*^9}, {
  3.8787201932620077`*^9, 3.878720203671546*^9}, {3.878722873636928*^9, 
  3.878722874481845*^9}, {3.878724509008936*^9, 3.8787245215822353`*^9}, {
  3.8787246795733337`*^9, 3.878724683635604*^9}, {3.87872529713558*^9, 
  3.878725307439637*^9}, {3.878725411938355*^9, 3.878725443890374*^9}, {
  3.8787255199919357`*^9, 3.878725524438147*^9}, {3.8787259904186707`*^9, 
  3.8787260709203444`*^9}, {3.878726753600051*^9, 3.8787267771256866`*^9}, {
  3.878726808576733*^9, 3.878726816110383*^9}, {3.878810325968855*^9, 
  3.878810327249482*^9}, {3.8794177441694613`*^9, 3.8794177533148603`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"0b8e8eb7-f51e-4c87-bb31-bd641db423ae"],

Cell["Applying the Decoder to class labels that we want to predict", "Text",
 CellChangeTimes->{{3.8787267717815857`*^9, 3.8787267979689217`*^9}, 
   3.878807200429632*^9},ExpressionUUID->"a21c5f12-ea36-4f7b-9a81-\
5804c3f222f8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ratingsDecoder", " ", "=", " ", 
   RowBox[{"NetDecoder", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Class\>\"", ",", 
      RowBox[{"DeleteDuplicates", "[", 
       RowBox[{"Normal", "[", 
        RowBox[{"datasetML", "[", 
         RowBox[{"All", ",", " ", "\"\<Ratings\>\""}], "]"}], "]"}], "]"}]}], 
     " ", "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.878726818243514*^9, 3.8788103282336187`*^9, 
  3.878811943039888*^9},
 CellLabel->"In[57]:=",ExpressionUUID->"c367e224-5d5f-4cad-8e0d-a2c397b5c8a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create a Network", "Subsubsection",
 CellChangeTimes->{{3.87871957306065*^9, 3.878719585487999*^9}, {
  3.8787200083687477`*^9, 
  3.878720013962109*^9}},ExpressionUUID->"988cb0f7-88bc-42af-8fce-\
d6f30b501fca"],

Cell["\<\
Create a network with an input corresponding to each feature and using a \
\[OpenCurlyDoubleQuote]Categorize\[CloseCurlyDoubleQuote] decoder to \
interpret the output of the net
The input features are first concatenated together before being further \
processed.\
\>", "Text",
 CellChangeTimes->{{3.8787200350499887`*^9, 3.8787200467022676`*^9}, {
  3.878810420414648*^9, 
  3.878810456142879*^9}},ExpressionUUID->"8cb8e66e-cdad-4527-820a-\
8cedc6abee3d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"CatenateLayer", "[", "]"}], ",", 
      RowBox[{"LinearLayer", "[", "]"}], ",", "LogisticSigmoid"}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NetPort", "[", "\"\<GICS Sector Name\>\"", "]"}], ",", 
         RowBox[{"NetPort", "[", "\"\<Country\>\"", "]"}], ",", 
         RowBox[{
         "NetPort", "[", 
          "\"\<Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\>\"", "]"}], ",", 
         RowBox[{
         "NetPort", "[", 
          "\"\<Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\>\"", "]"}], ",", 
         RowBox[{
         "NetPort", "[", 
          "\"\<Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\>\"", "]"}], ",", 
         RowBox[{"NetPort", "[", "\"\<Carbon Disclosure\>\"", "]"}], ",", 
         RowBox[{"NetPort", "[", "\"\<Revenue (USD mn)\>\"", "]"}]}], "}"}], "->",
        "1"}], ",", 
      RowBox[{"1", "->", 
       RowBox[{"2", "->", 
        RowBox[{"3", "->", 
         RowBox[{"NetPort", "[", "\"\<Ratings\>\"", "]"}]}]}]}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{"\"\<GICS Sector Name\>\"", "->", "sectorEncoder"}], ",", 
    RowBox[{
    "\"\<Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\>\"", "->", 
     "\"\<Scalar\>\""}], ",", 
    RowBox[{
    "\"\<Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\>\"", "->", 
     "\"\<Scalar\>\""}], ",", 
    RowBox[{
    "\"\<Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\>\"", "->", 
     "\"\<Scalar\>\""}], ",", 
    RowBox[{"\"\<Carbon Disclosure\>\"", "->", "disclosureEncoder"}], ",", 
    RowBox[{"\"\<Country\>\"", "->", "countryEncoder"}], ",", 
    RowBox[{"\"\<Revenue (USD mn)\>\"", "->", "\"\<Scalar\>\""}], ",", 
    RowBox[{"\"\<Ratings\>\"", "->", "ratingsDecoder"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.878720051420597*^9, 3.878720051425008*^9}, {
   3.878720083151984*^9, 3.878720136502512*^9}, {3.878720349837907*^9, 
   3.8787205487838097`*^9}, {3.8787208848753977`*^9, 3.878720891481406*^9}, 
   3.878723218987296*^9, 3.878724657828973*^9, 3.878724701983767*^9, 
   3.878725446922914*^9, 3.8787260823840933`*^9, {3.8791610732655783`*^9, 
   3.879161084518241*^9}, {3.879329477939612*^9, 3.879329479181963*^9}, {
   3.879330492144099*^9, 3.879330523371623*^9}, {3.879330604349607*^9, 
   3.879330607979247*^9}, {3.879417773881233*^9, 3.8794177795225573`*^9}, {
   3.879417812135602*^9, 3.879417821788159*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"14ea714b-552d-4cab-b1a4-42b227f9b31a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["7", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Ratings\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Carbon Di..\"", "\"Carbon Disclosure\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Carbon Disclosure", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999919615308, 
                    3.00000008038469}], 
                    
                    Offset[{0, -13.5}, {-2.999999919615308, 
                    3.00000008038469}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Carbon In..\"", 
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                    "Tooltip"]& ], TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Carbon In..\"", 
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                    "Tooltip"]& ], TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999464102047`, 
                    2.0000001071795874`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Carbon In..\"", 
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                    "Tooltip"]& ], TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999196153078`, 
                    3.0000001071795874`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Country\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999998928204104`, 
                    4.000000107179587}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"GICS Sect..\"", "\"GICS Sector Name\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "GICS Sector Name", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999998660255134`, 
                    5.000000107179586}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Revenue (..\"", "\"Revenue (USD mn)\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Revenue (USD mn)", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999998392306164`, 
                    6.000000107179586}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999196153082`, 
                    3.000000053589793}], 
                    
                    Offset[{0, -13.5}, {-1.9999999196153082`, 
                    3.000000053589793}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999196153085, 
                    3.000000026794896}], 
                    
                    Offset[{0, -13.5}, {-0.9999999196153085, 
                    3.000000026794896}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Ratings\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {8.038469108735353*^-8, 
                    2.999999999999999}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"24\"", TraditionalForm], 
                    
                    Offset[{-5.217758092674727, 
                    1.7392528529019}, {-3.4790568996283615`, 
                    1.5628292687083438`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.3162277914367091,
                     0.9486832895772231}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{-4.919349484592804, 
                    2.459674907063232}, {-3.4559016434844807`, 
                    2.08819669372554}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.4472136194660422,
                     0.8944271790168734}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-3.4499999316730117`, 
                    2.550000092442394}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{1.4737193576586097`*^-7, 
                    5.499999999999999}, {-3.4499999196153084`, 
                    3.0000000924423937`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897411974723`*^-8}], 
                    InsetBox[
                    FormBox["\"29\"", TraditionalForm], 
                    
                    Offset[{3.889087400733705, 
                    3.889087192318315}, {-3.449999907557604, 
                    3.4500000924423935`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067622396936, -0.7071068001334009}], 
                    InsetBox[
                    FormBox["\"11\"", TraditionalForm], 
                    
                    Offset[{4.919349616406269, 
                    2.459674643436303}, {-3.4559015946211247`, 
                    3.911803491475518}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.44721357153387326`, -0.894427202982958}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{5.217758185880922, 
                    1.7392525732833155`}, {-3.479056822610673, 
                    4.437170917733599}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.31622774059696646`, -0.948683306523804}], 
                    InsetBox[
                    FormBox["\"68\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999999}, {-2.4499999196153084`, 
                    3.0000000656474968`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"5\"", TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-1.4499999196153084`, 
                    3.0000000388525994`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999999, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox["\"5\"", TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-0.44999991961530866`, 
                    3.000000012057703}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999999, -2.6794896967885513`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 24\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Carbon Disclosure\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input6\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 24\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Carbon Disclosure", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input6"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999464102047`, 
                    2.0000001071795874`}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input4\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input4"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999196153078`, 
                    3.0000001071795874`}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input5\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input5"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999998928204104`, 
                    4.000000107179587}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 29\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Country\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 29\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Country", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999998660255134`, 
                    5.000000107179586}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 11\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"GICS Sector Name\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 11\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"GICS Sector Name", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999998392306164`, 
                    6.000000107179586}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Revenue (USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input7\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Revenue (USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input7"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999919615308, 
                    3.00000008038469}, {-1.9999999196153082`, 
                    3.000000053589793}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 68\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 68\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999196153082`, 
                    3.000000053589793}, {-0.9999999196153085, 
                    3.000000026794896}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999196153085, 3.000000026794896}, {
                    8.038469108735353*^-8, 2.999999999999999}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Ratings\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Ratings"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4790568996283615`, 
                    1.5628292687083438`}, {-0.25, 0}, 
                    Offset[8], {1.0000000803846905`, 2.9999999732051017`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 24\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Carbon Disclosure\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input6\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 24\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Carbon Disclosure", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input6"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4559016434844807`, 
                    2.08819669372554}, {-0.25, 0}, 
                    Offset[8], {1.0000000535897935`, 1.9999999732051021`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4499999316730117`, 
                    2.550000092442394}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948965`, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input4\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input4"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4499999196153084`, 
                    3.0000000924423937`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794897411974716`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input5\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input5"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999907557604, 
                    3.4500000924423935`}, {-0.25, 0}, 
                    Offset[8], {0.9999999732051021, -1.000000026794897}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 29\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Country\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 29\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Country", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4559015946211247`, 
                    3.911803491475518}, {-0.25, 0}, 
                    Offset[8], {0.9999999464102052, -2.000000026794896}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 11\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"GICS Sector Name\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 11\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"GICS Sector Name", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.479056822610673, 
                    4.437170917733599}, {-0.25, 0}, 
                    Offset[8], {0.9999999196153082, -3.000000026794896}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Revenue (USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input7\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Revenue (USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input7"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999196153084`, 
                    3.0000000656474968`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 68\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 68\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999196153084`, 
                    3.0000000388525994`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999991961530866`, 
                    3.000000012057703}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Ratings\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Ratings"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999999999987`, 1.0717958811647137`*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Carbon Disclosure\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Carbon Disclosure", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999919615308, 3.00000008038469}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.3], 
                    
                    LineBox[{{-0.2, 0.2}, {-0.1, 0.2}, {0., 
                    0.}, {-0.1, -0.2}, {-0.2, -0.2}}], 
                    LineBox[{{0., 0.}, {0.2, 0.}}], 
                    LineBox[{{0.125, 0.075}, {0.2, 0.}, {0.125, -0.075}}]}, 
                    ImageSize -> 16], {-2.999999919615308, 
                    3.00000008038469}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CatenateLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["1", Bold], 
                    Style[
                    CatenateLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", Bold,
                     StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style[
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", Bold]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999464102047`, 2.0000001071795874`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", Bold,
                     StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style[
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", Bold]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999196153078`, 3.0000001071795874`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", Bold,
                     StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style[
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", Bold]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999998928204104`, 4.000000107179587}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Country\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Country", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999998660255134`, 5.000000107179586}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"GICS Sector Name\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["GICS Sector Name", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999998392306164`, 6.000000107179586}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Revenue (USD mn)\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Revenue (USD mn)", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-1.9999999196153082`, 
                    3.000000053589793}], 
                    
                    Offset[{-10.5, -10.5}, {-1.9999999196153082`, 
                    3.000000053589793}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-1.9999999196153082`, 
                    3.000000053589793}], 
                    
                    Offset[{10.5, 10.5}, {-1.9999999196153082`, 
                    3.000000053589793}]]], 
                    InsetBox[
                    GraphicsBox[
                    
                    GraphicsComplexBox[{{0.1, 0}, {-0.3, 1}, {0.5, 1}, {
                    1.3, 1}, {0.9, 0}}, {{
                    Opacity[0.2], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[3.5], 
                    GrayLevel[0.33], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 
                    18], {-1.9999999196153082`, 3.000000053589793}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "LinearLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["2", Bold], 
                    Style[
                    LinearLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-0.9999999196153085, 3.000000026794896}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm2toFFcUx7faRtNnrMVa+ggtCCr6RUkb/ZI0FF9UaFPGap479965oYjR
rkZtPzRSELFgIbSljZVWXWcmqFA/hFIfoEFUJLH91Ar2Qy2ljYigqTGEvvR/
NpuwOzub3e0+5q47f7i7O7szy5nfnnPPfZx9kW2sl1MCgcDm6Xio17e9Ggrp
771VgQOtffM7be2GWNm+xWgzQtVsKt5chPYG2oMB5bXaawOKXD6/7OTzy04F
5ce59bQQ4WrO7bcNbr0rhL3bEPZXeH0Mr88Y3P4Bxz+jDRbSriyUN37BoDmH
c1MHk8/B4zzakDR67qbb8mVXjpUzfpqmTRXCXA4/+gLMfsuEVSnzQzw+h/jb
STGXLbNS4iebD7xgGPZeKey/0mUCxn9SH4drvhHC+gS++j6eDfSH9Wi1Mhhe
RHEvG8PP5PIm86iM+bW2fj0dDHaAxUgKVsNSWMdx7geGbq9sadn/bD5uwGNl
xA/54GX4zuWk3IR9C7G8j/pBTessy5fRCiltfjTegE/9ncTXriAWpXy9++F8
GqugUvJbsaJrGuLQTMLtmsEsRrm3EMYqqEn5Sa37CTDqc2WH3NHYGH68UIYq
qqT8OP/ySbAbcPG5m+gH/XnfmFw5IMdWRMYZifnhsq6bLxXaSIWVwK+p6eAj
NN9yYXe2ocGc4YWRCiuOH+UBcOpNjFnrVAnm1nQUx4/m+i79XZ+m7Sn3ykDF
NcEP86gNLuwGGNv3mJcGKq4IP0M3XwOrfxzsriKPzPbaQMW1mrFDlWB1w8Fu
SNfD8702TnWVlZXXI19ccrD7F+O7VV7bVgxaupSdTBincHu713YVgyQ3xfJl
HXHshLCPem1XMYjWKRGno3H8MLfwc21qjc1rrV+I2Tg/sLzt54t01DkFY+Tv
xn1ugh8z13ptWTGI9nli+7sIP2F3eW1XMQjzizXOXFtbs/5Hubj7Ia9tU11C
mIsT9nuE/UdFxfMtXtumuqLzi0HHGHmUMXNJwK9/mVTNzQdmItf+5IxbjPOC
0VN8fklEexPws34XdrtjTvP5uSi6/n7BZR20Bx8/EHOqz88hWnOC333vspZ3
gvYiHaf7/GIkg4cW0rpdYsxa52hfw+USn19UBrObMSa5477+/umjSS4reX7w
q1lS9BxOUo/Sm2Lfp2T5UR0UcmmIanbc2OGzz9Koqyg5fpH1E25tRVz+nqQm
ZSRmfJdKJcEvUofCzLW0vklzh0lq7vo5t+dl8NX3HT+qm2Ps4ALJ7Qbw+hhM
Ljr3xtzq7pBjN9XUdGb6lx3l+VH/TnNQ8gsjGK7CfdahvUl1X+DTgVj8CHzC
GNuepnXNlKzi/W2YrpfrzKf+p3nK80uXRSYtWq/YkYN6lKLgR+uU2ba62var
r1Q1HamsrAoFxu47F+3DHH5XPlrG/gff+g/92a+I8W+lsHZRrFMfkJtfM0HK
+x94XCcetL9F+THSz3HrGI7343kP7bfS/3Qks5fJVnMujesKaJ7y/BSXzy87
+fzuc90D7bU4NA==
                    "], {{0, 25.}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.}, 
                    PlotRange -> {{0, 40.}, {0, 25.}}, ImageSize -> 20], 
                    TraditionalForm]], {-0.9999999196153085, 
                    3.000000026794896}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["3", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{8.038469108735353*^-8, 2.999999999999999}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Ratings\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Ratings", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999919615308, 
                    3.00000008038469}, {-3.9999999732051017`, 
                    1.0000001071795879`}, {-3.9999999464102047`, 
                    2.0000001071795874`}, {-3.9999999196153078`, 
                    3.0000001071795874`}, {-3.9999998928204104`, 
                    4.000000107179587}, {-3.9999998660255134`, 
                    5.000000107179586}, {-3.9999998392306164`, 
                    6.000000107179586}, {-1.9999999196153082`, 
                    3.000000053589793}, {-0.9999999196153085, 
                    3.000000026794896}, {8.038469108735353*^-8, 
                    2.999999999999999}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 8, 8, 8, 8, 8, 8, 21, 21, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {278.9999985262806, 369.9999999999999}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29.499994105122653`, 29.5}, {25., 15.}},
                     ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"GICS Sector Name\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"GICS Sector Name\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"GICS Sector Name"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"GICS Sector Name\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"GICS Sector Name"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Country\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Country\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Country"}, InputForm]], Method -> "Preemptive",
                     PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Country\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Country"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    FrameStyle -> GrayLevel[0, 0], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    
                    ToString[{
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                    InputForm]], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    
                    RowBox[{"{", 
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    "}"}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"scalar\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    FrameStyle -> GrayLevel[0, 0], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    
                    ToString[{
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"}, 
                    InputForm]], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    
                    RowBox[{"{", 
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    "}"}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"scalar\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    FrameStyle -> GrayLevel[0, 0], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    
                    ToString[{
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"}, 
                    InputForm]], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    
                    RowBox[{"{", 
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    "}"}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"scalar\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Carbon Disclosure\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Carbon Disclosure\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Carbon Disclosure"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Carbon Disclosure\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Carbon Disclosure"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Revenue (USD mn)\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Revenue (USD mn)\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Revenue (USD mn)"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Revenue (USD mn)\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Revenue (USD mn)"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"scalar\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Ratings\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Ratings\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Ratings"}, InputForm]], Method -> "Preemptive",
                     PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Ratings\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Ratings"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "1" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{29}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input4" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input5" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input6" -> NeuralNetworks`TensorT[{24}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input7" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{68}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{5, 68}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {5}, "$OutputSize" -> 5, 
                    "$InputSize" -> 68, "$InputDimensions" -> {68}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{68}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "GICS Sector Name" -> <|
                    "Form" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> Tooltip[{"\"Financials\"", "\"Materials\"", 
                    Skeleton[8], "\"Real Estate\""}, {
                    "Financials", "Materials", "Consumer Discretionary", 
                    "Health Care", "Information Technology", "Industrials", 
                    "Consumer Staples", "Utilities", "Communication Services",
                     "Energy", "Real Estate"}], "OutputForm" -> 
                    "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                    False, "$Count" -> 11, "$Version" -> "13.1.4"|>, 
                    "Country" -> <|"Form" -> NeuralNetworks`TensorT[{29}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> Tooltip[{"\"AUSTRIA\"", "\"BELGIUM\"", 
                    Skeleton[26], "\"ICELAND\""}, {
                    "AUSTRIA", "BELGIUM", "IRELAND", "SWITZERLAND", "GERMANY",
                     "DENMARK", "SPAIN", "FINLAND", "FRANCE", "NETHERLANDS", 
                    "UNITED KINGDOM", "GREECE", "ITALY", "NORWAY", "PORTUGAL",
                     "SWEDEN", "LUXEMBOURG", "HUNGARY", "MALTA", "POLAND", 
                    "SLOVENIA", "ESTONIA", "CROATIA", "ROMANIA", "BULGARIA", 
                    "UKRAINE", "CYPRUS", "CZECH REPUBLIC", "ICELAND"}], 
                    "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 29, "$Version" -> 
                    "13.1.4"|>, 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.1.4"|>, 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.1.4"|>, 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.1.4"|>, 
                    "Carbon Disclosure" -> <|
                    "Form" -> NeuralNetworks`TensorT[{24}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> Tooltip[{
                    "\"Value derived from data provided in Annual \
Report/Financial Accounts Disclosure\"", "\"Exact Value from CDP\"", 
                    Skeleton[21], 
                    "\"Value derived from data provided in personal \
communication\""}, {
                    "Value derived from data provided in Annual \
Report/Financial Accounts Disclosure", "Exact Value from CDP", 
                    "Value derived from data provided in CDP", 
                    "Value summed up from data provided in Annual \
Report/Financial Accounts Disclosure", 
                    
                    "Exact Value from Annual Report/10K/Financial Accounts \
Disclosure", 
                    "Estimate used instead of disclosure - data does not \
cover global operations", 
                    "Value derived from data provided in Environmental/CSR", 
                    "Exact Value from Environmental/CSR", 
                    "Value derived from fuel use provided in CDP", 
                    "Value derived from fuel use provided in Annual \
Report/Financial Accounts Disclosure", "Derived from previous year", 
                    "Value summed up from data provided in Environmental/CSR",
                     "Value split from data provided in Annual \
Report/Financial Accounts Disclosure", "Estimated data", 
                    "Value summed up from data provided in CDP", 
                    "Value split from data provided in Environmental/CSR", 
                    "Exact Value from personal communication", 
                    "Data approximated from chart/graph in Annual \
Report/10-K/Financial Accounts", 
                    "Estimate based on partial data disclosure in Annual \
Report/10-K/Financial Accounts", 
                    "Estimate based on partial data disclosure in \
Environmental/CSR", 
                    "Data approximated from chart/graph in Environmental \
Report/CSR Report/Website", 
                    "Estimate used instead of disclosure - data is normalised \
and no aggregating factor is available", 
                    "Value derived from fuel use provided in \
Environmental/CSR", 
                    "Value derived from data provided in personal \
communication"}], "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 24, "$Version" -> 
                    "13.1.4"|>, 
                    "Revenue (USD mn)" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.1.4"|>|>, 
                    "Outputs" -> <|
                    "Ratings" -> <|
                    "Form" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT], "Type" -> "Class", "Labels" -> 
                    Tooltip[{"\"D\"", "\"E\"", 
                    Skeleton[2], "\"B\""}, {"D", "E", "C", "A", "B"}], 
                    "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                    5, "$Rank" -> 0, "$Version" -> "13.1.4"|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "GICS Sector Name"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Country"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Carbon Disclosure"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input7"] -> 
                    NeuralNetworks`NetPath["Inputs", "Revenue (USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Ratings"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Carbon Disclosure"], 
                    NeuralNetworks`NetPath["Nodes", "1"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Inputs", "Country"], 
                    NeuralNetworks`NetPath["Inputs", "GICS Sector Name"], 
                    NeuralNetworks`NetPath["Inputs", "Revenue (USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "2"], 
                    NeuralNetworks`NetPath["Nodes", "3"], 
                    NeuralNetworks`NetPath["Outputs", "Ratings"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Carbon Disclosure"], 
                    NeuralNetworks`NetPath["Nodes", "1"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Inputs", "Country"], 
                    NeuralNetworks`NetPath["Inputs", "GICS Sector Name"], 
                    NeuralNetworks`NetPath["Inputs", "Revenue (USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "2"], 
                    NeuralNetworks`NetPath["Nodes", "3"], 
                    NeuralNetworks`NetPath["Outputs", "Ratings"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.8787205504770603`*^9, {3.878720886103607*^9, 3.8787208935777817`*^9}, 
   3.878722665121871*^9, {3.878723217105832*^9, 3.87872322051511*^9}, {
   3.878724686696789*^9, 3.8787247023725758`*^9}, 3.8787253265518827`*^9, 
   3.8787253897763*^9, {3.878725424468122*^9, 3.87872548506365*^9}, 
   3.878725530059272*^9, 3.8787261003232718`*^9, 3.878726821386449*^9, 
   3.878807209605792*^9, 3.8788103408935747`*^9, {3.878811665104473*^9, 
   3.878811695031193*^9}, 3.8788118518267317`*^9, 3.878811949922965*^9, 
   3.879149316995925*^9, 3.8791610455150433`*^9, 3.87916108597993*^9, 
   3.87932554330888*^9, 3.879327152266754*^9, 3.879330493930929*^9, 
   3.8793305239563293`*^9, 3.879330608876268*^9, 3.879333046453142*^9, 
   3.879354723612504*^9, 3.8794178248276243`*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"ca991200-de02-49a3-96cd-5fc0e714fae6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Training the Net", "Subsubsection",
 CellChangeTimes->{{3.878723326833516*^9, 
  3.878723337087538*^9}},ExpressionUUID->"99246540-7d26-482a-814f-\
c78318188484"],

Cell[TextData[{
 "Train the net on the training data. NetTrain will automatically attach a \
Cross Entropy Loss layer to the output of the net\nWe set up two parameters:\n\
- \[OpenCurlyDoubleQuote]",
 StyleBox["Max",
  FontWeight->"Bold"],
 " ",
 StyleBox["Training",
  FontWeight->"Bold"],
 " ",
 StyleBox["Rounds",
  FontWeight->"Bold"],
 "\[CloseCurlyDoubleQuote]: is an option that specifies how many times to \
traverse the training data\n- \[OpenCurlyDoubleQuote]",
 StyleBox["Learning",
  FontWeight->"Bold"],
 " ",
 StyleBox["Rate",
  FontWeight->"Bold"],
 "\[CloseCurlyDoubleQuote]: is an option that specifies the rate at which to \
adjust neural net weights in order to minimize the training loss."
}], "Text",
 CellChangeTimes->{{3.8787264716665154`*^9, 3.878726490862109*^9}, {
  3.878810714496086*^9, 3.87881076971*^9}, {3.878810871069847*^9, 
  3.878810881237308*^9}},ExpressionUUID->"7be345d5-6033-4892-8119-\
db0692a1b24f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"results", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net", ",", "trainingset", ",", "All", ",", 
     RowBox[{"MaxTrainingRounds", "->", "1000"}], ",", " ", 
     RowBox[{"LearningRate", "->", "0.01"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"netTrained", "=", 
  RowBox[{"results", "[", "\"\<TrainedNet\>\"", "]"}]}]}], "Input",
 CellChangeTimes->{{3.87872334170339*^9, 3.8787233675617456`*^9}, {
   3.8787240381723833`*^9, 3.8787240409329233`*^9}, 3.878724080194976*^9, {
   3.8787241385126467`*^9, 3.87872414244069*^9}, {3.878726154132513*^9, 
   3.878726162524501*^9}, {3.87872620718442*^9, 3.8787262230165863`*^9}, {
   3.878726501400774*^9, 3.878726517612896*^9}, {3.878810514967195*^9, 
   3.878810608388391*^9}, {3.87881067318223*^9, 3.878810710209969*^9}, {
   3.878810787168318*^9, 3.8788108059277887`*^9}, {3.878810924092107*^9, 
   3.878810949323271*^9}, {3.8791616822350883`*^9, 3.879161685742979*^9}, {
   3.879161802578738*^9, 3.879161805138054*^9}, {3.879162086212549*^9, 
   3.8791620862730007`*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"1f19a39f-3020-4330-b84d-cdd628f2f64c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["7", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Ratings\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Carbon Di..\"", "\"Carbon Disclosure\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Carbon Disclosure", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999919615308, 
                    3.00000008038469}], 
                    
                    Offset[{0, -13.5}, {-2.999999919615308, 
                    3.00000008038469}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Carbon In..\"", 
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                    "Tooltip"]& ], TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Carbon In..\"", 
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                    "Tooltip"]& ], TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999464102047`, 
                    2.0000001071795874`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Carbon In..\"", 
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                    "Tooltip"]& ], TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999196153078`, 
                    3.0000001071795874`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Country\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999998928204104`, 
                    4.000000107179587}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"GICS Sect..\"", "\"GICS Sector Name\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "GICS Sector Name", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999998660255134`, 
                    5.000000107179586}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Revenue (..\"", "\"Revenue (USD mn)\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Revenue (USD mn)", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999998392306164`, 
                    6.000000107179586}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999196153082`, 
                    3.000000053589793}], 
                    
                    Offset[{0, -13.5}, {-1.9999999196153082`, 
                    3.000000053589793}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999196153085, 
                    3.000000026794896}], 
                    
                    Offset[{0, -13.5}, {-0.9999999196153085, 
                    3.000000026794896}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Ratings\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {8.038469108735353*^-8, 
                    2.999999999999999}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"24\"", TraditionalForm], 
                    
                    Offset[{-5.217758092674727, 
                    1.7392528529019}, {-3.4790568996283615`, 
                    1.5628292687083438`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.3162277914367091,
                     0.9486832895772231}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{-4.919349484592804, 
                    2.459674907063232}, {-3.4559016434844807`, 
                    2.08819669372554}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.4472136194660422,
                     0.8944271790168734}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-3.4499999316730117`, 
                    2.550000092442394}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{1.4737193576586097`*^-7, 
                    5.499999999999999}, {-3.4499999196153084`, 
                    3.0000000924423937`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897411974723`*^-8}], 
                    InsetBox[
                    FormBox["\"29\"", TraditionalForm], 
                    
                    Offset[{3.889087400733705, 
                    3.889087192318315}, {-3.449999907557604, 
                    3.4500000924423935`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067622396936, -0.7071068001334009}], 
                    InsetBox[
                    FormBox["\"11\"", TraditionalForm], 
                    
                    Offset[{4.919349616406269, 
                    2.459674643436303}, {-3.4559015946211247`, 
                    3.911803491475518}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.44721357153387326`, -0.894427202982958}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{5.217758185880922, 
                    1.7392525732833155`}, {-3.479056822610673, 
                    4.437170917733599}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.31622774059696646`, -0.948683306523804}], 
                    InsetBox[
                    FormBox["\"68\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999999}, {-2.4499999196153084`, 
                    3.0000000656474968`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"5\"", TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-1.4499999196153084`, 
                    3.0000000388525994`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999999, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox["\"5\"", TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-0.44999991961530866`, 
                    3.000000012057703}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999999, -2.6794896967885513`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 24\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Carbon Disclosure\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input6\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 24\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Carbon Disclosure", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input6"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999464102047`, 
                    2.0000001071795874`}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input4\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input4"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999196153078`, 
                    3.0000001071795874`}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input5\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input5"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999998928204104`, 
                    4.000000107179587}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 29\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Country\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 29\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Country", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999998660255134`, 
                    5.000000107179586}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 11\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"GICS Sector Name\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 11\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"GICS Sector Name", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999998392306164`, 
                    6.000000107179586}, {-2.999999919615308, 
                    3.00000008038469}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Revenue (USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input7\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Revenue (USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input7"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999919615308, 
                    3.00000008038469}, {-1.9999999196153082`, 
                    3.000000053589793}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 68\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 68\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999196153082`, 
                    3.000000053589793}, {-0.9999999196153085, 
                    3.000000026794896}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999196153085, 3.000000026794896}, {
                    8.038469108735353*^-8, 2.999999999999999}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Ratings\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Ratings"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4790568996283615`, 
                    1.5628292687083438`}, {-0.25, 0}, 
                    Offset[8], {1.0000000803846905`, 2.9999999732051017`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 24\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Carbon Disclosure\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input6\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 24\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Carbon Disclosure", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input6"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4559016434844807`, 
                    2.08819669372554}, {-0.25, 0}, 
                    Offset[8], {1.0000000535897935`, 1.9999999732051021`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4499999316730117`, 
                    2.550000092442394}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948965`, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input4\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input4"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4499999196153084`, 
                    3.0000000924423937`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794897411974716`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input5\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input5"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999907557604, 
                    3.4500000924423935`}, {-0.25, 0}, 
                    Offset[8], {0.9999999732051021, -1.000000026794897}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 29\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Country\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 29\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Country", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4559015946211247`, 
                    3.911803491475518}, {-0.25, 0}, 
                    Offset[8], {0.9999999464102052, -2.000000026794896}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 11\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"GICS Sector Name\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 11\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"GICS Sector Name", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.479056822610673, 
                    4.437170917733599}, {-0.25, 0}, 
                    Offset[8], {0.9999999196153082, -3.000000026794896}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Revenue (USD mn)\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input7\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Revenue (USD mn)", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input7"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999196153084`, 
                    3.0000000656474968`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 68\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 68\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999196153084`, 
                    3.0000000388525994`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999991961530866`, 
                    3.000000012057703}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Ratings\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Ratings"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999999999987`, 1.0717958811647137`*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Carbon Disclosure\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Carbon Disclosure", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999919615308, 3.00000008038469}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.3], 
                    
                    LineBox[{{-0.2, 0.2}, {-0.1, 0.2}, {0., 
                    0.}, {-0.1, -0.2}, {-0.2, -0.2}}], 
                    LineBox[{{0., 0.}, {0.2, 0.}}], 
                    LineBox[{{0.125, 0.075}, {0.2, 0.}, {0.125, -0.075}}]}, 
                    ImageSize -> 16], {-2.999999919615308, 
                    3.00000008038469}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CatenateLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["1", Bold], 
                    Style[
                    CatenateLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", Bold,
                     StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style[
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)", Bold]}], 
                    "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999464102047`, 2.0000001071795874`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", Bold,
                     StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style[
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)", Bold]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999196153078`, 3.0000001071795874`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", Bold,
                     StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style[
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)", Bold]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999998928204104`, 4.000000107179587}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Country\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Country", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999998660255134`, 5.000000107179586}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"GICS Sector Name\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["GICS Sector Name", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999998392306164`, 6.000000107179586}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Revenue (USD mn)\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Revenue (USD mn)", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-1.9999999196153082`, 
                    3.000000053589793}], 
                    
                    Offset[{-10.5, -10.5}, {-1.9999999196153082`, 
                    3.000000053589793}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-1.9999999196153082`, 
                    3.000000053589793}], 
                    
                    Offset[{10.5, 10.5}, {-1.9999999196153082`, 
                    3.000000053589793}]]], 
                    InsetBox[
                    GraphicsBox[
                    
                    GraphicsComplexBox[{{0.1, 0}, {-0.3, 1}, {0.5, 1}, {
                    1.3, 1}, {0.9, 0}}, {{
                    Opacity[0.2], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[3.5], 
                    RGBColor[0.33, 0.33, 0.33], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 
                    18], {-1.9999999196153082`, 3.000000053589793}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "LinearLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["2", Bold], 
                    Style[
                    LinearLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-0.9999999196153085, 3.000000026794896}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm2toFFcUx7faRtNnrMVa+ggtCCr6RUkb/ZI0FF9UaFPGap479965oYjR
rkZtPzRSELFgIbSljZVWXWcmqFA/hFIfoEFUJLH91Ar2Qy2ljYigqTGEvvR/
NpuwOzub3e0+5q47f7i7O7szy5nfnnPPfZx9kW2sl1MCgcDm6Xio17e9Ggrp
771VgQOtffM7be2GWNm+xWgzQtVsKt5chPYG2oMB5bXaawOKXD6/7OTzy04F
5ce59bQQ4WrO7bcNbr0rhL3bEPZXeH0Mr88Y3P4Bxz+jDRbSriyUN37BoDmH
c1MHk8/B4zzakDR67qbb8mVXjpUzfpqmTRXCXA4/+gLMfsuEVSnzQzw+h/jb
STGXLbNS4iebD7xgGPZeKey/0mUCxn9SH4drvhHC+gS++j6eDfSH9Wi1Mhhe
RHEvG8PP5PIm86iM+bW2fj0dDHaAxUgKVsNSWMdx7geGbq9sadn/bD5uwGNl
xA/54GX4zuWk3IR9C7G8j/pBTessy5fRCiltfjTegE/9ncTXriAWpXy9++F8
GqugUvJbsaJrGuLQTMLtmsEsRrm3EMYqqEn5Sa37CTDqc2WH3NHYGH68UIYq
qqT8OP/ySbAbcPG5m+gH/XnfmFw5IMdWRMYZifnhsq6bLxXaSIWVwK+p6eAj
NN9yYXe2ocGc4YWRCiuOH+UBcOpNjFnrVAnm1nQUx4/m+i79XZ+m7Sn3ykDF
NcEP86gNLuwGGNv3mJcGKq4IP0M3XwOrfxzsriKPzPbaQMW1mrFDlWB1w8Fu
SNfD8702TnWVlZXXI19ccrD7F+O7VV7bVgxaupSdTBincHu713YVgyQ3xfJl
HXHshLCPem1XMYjWKRGno3H8MLfwc21qjc1rrV+I2Tg/sLzt54t01DkFY+Tv
xn1ugh8z13ptWTGI9nli+7sIP2F3eW1XMQjzizXOXFtbs/5Hubj7Ia9tU11C
mIsT9nuE/UdFxfMtXtumuqLzi0HHGHmUMXNJwK9/mVTNzQdmItf+5IxbjPOC
0VN8fklEexPws34XdrtjTvP5uSi6/n7BZR20Bx8/EHOqz88hWnOC333vspZ3
gvYiHaf7/GIkg4cW0rpdYsxa52hfw+USn19UBrObMSa5477+/umjSS4reX7w
q1lS9BxOUo/Sm2Lfp2T5UR0UcmmIanbc2OGzz9Koqyg5fpH1E25tRVz+nqQm
ZSRmfJdKJcEvUofCzLW0vklzh0lq7vo5t+dl8NX3HT+qm2Ps4ALJ7Qbw+hhM
Ljr3xtzq7pBjN9XUdGb6lx3l+VH/TnNQ8gsjGK7CfdahvUl1X+DTgVj8CHzC
GNuepnXNlKzi/W2YrpfrzKf+p3nK80uXRSYtWq/YkYN6lKLgR+uU2ba62var
r1Q1HamsrAoFxu47F+3DHH5XPlrG/gff+g/92a+I8W+lsHZRrFMfkJtfM0HK
+x94XCcetL9F+THSz3HrGI7343kP7bfS/3Qks5fJVnMujesKaJ7y/BSXzy87
+fzuc90D7bU4NA==
                    "], {{0, 25.}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.}, 
                    PlotRange -> {{0, 40.}, {0, 25.}}, ImageSize -> 20], 
                    TraditionalForm]], {-0.9999999196153085, 
                    3.000000026794896}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["3", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{8.038469108735353*^-8, 2.999999999999999}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Ratings\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Ratings", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999919615308, 
                    3.00000008038469}, {-3.9999999732051017`, 
                    1.0000001071795879`}, {-3.9999999464102047`, 
                    2.0000001071795874`}, {-3.9999999196153078`, 
                    3.0000001071795874`}, {-3.9999998928204104`, 
                    4.000000107179587}, {-3.9999998660255134`, 
                    5.000000107179586}, {-3.9999998392306164`, 
                    6.000000107179586}, {-1.9999999196153082`, 
                    3.000000053589793}, {-0.9999999196153085, 
                    3.000000026794896}, {8.038469108735353*^-8, 
                    2.999999999999999}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 8, 8, 8, 8, 8, 8, 21, 21, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {278.9999985262806, 369.9999999999999}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29.499994105122653`, 29.5}, {25., 15.}},
                     ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"GICS Sector Name\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"GICS Sector Name\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"GICS Sector Name"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"GICS Sector Name\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"GICS Sector Name"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Country\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Country\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Country"}, InputForm]], Method -> "Preemptive",
                     PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Country\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Country"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    FrameStyle -> GrayLevel[0, 0], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    
                    ToString[{
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}, 
                    InputForm]], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    
                    RowBox[{"{", 
                    "\"Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)\"", 
                    "}"}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"scalar\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    FrameStyle -> GrayLevel[0, 0], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    
                    ToString[{
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"}, 
                    InputForm]], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    
                    RowBox[{"{", 
                    "\"Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)\"", 
                    "}"}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"scalar\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    FrameStyle -> GrayLevel[0, 0], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    
                    ToString[{
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"}, 
                    InputForm]], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    
                    RowBox[{"{", 
                    "\"Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)\"", 
                    "}"}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"scalar\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Carbon Disclosure\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Carbon Disclosure\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Carbon Disclosure"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Carbon Disclosure\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Carbon Disclosure"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Revenue (USD mn)\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Revenue (USD mn)\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Revenue (USD mn)"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Revenue (USD mn)\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Revenue (USD mn)"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"scalar\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Ratings\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Ratings\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Ratings"}, InputForm]], Method -> "Preemptive",
                     PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Ratings\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Ratings"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "1" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{29}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input4" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input5" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input6" -> NeuralNetworks`TensorT[{24}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input7" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{68}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5, 68}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{5}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {5}, "$OutputSize" -> 5, 
                    "$InputSize" -> 68, "$InputDimensions" -> {68}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{68}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "GICS Sector Name" -> <|
                    "Form" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> Tooltip[{"\"Financials\"", "\"Materials\"", 
                    Skeleton[8], "\"Real Estate\""}, {
                    "Financials", "Materials", "Consumer Discretionary", 
                    "Health Care", "Information Technology", "Industrials", 
                    "Consumer Staples", "Utilities", "Communication Services",
                     "Energy", "Real Estate"}], "OutputForm" -> 
                    "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                    False, "$Count" -> 11, "$Version" -> "13.1.4"|>, 
                    "Country" -> <|"Form" -> NeuralNetworks`TensorT[{29}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> Tooltip[{"\"AUSTRIA\"", "\"BELGIUM\"", 
                    Skeleton[26], "\"ICELAND\""}, {
                    "AUSTRIA", "BELGIUM", "IRELAND", "SWITZERLAND", "GERMANY",
                     "DENMARK", "SPAIN", "FINLAND", "FRANCE", "NETHERLANDS", 
                    "UNITED KINGDOM", "GREECE", "ITALY", "NORWAY", "PORTUGAL",
                     "SWEDEN", "LUXEMBOURG", "HUNGARY", "MALTA", "POLAND", 
                    "SLOVENIA", "ESTONIA", "CROATIA", "ROMANIA", "BULGARIA", 
                    "UKRAINE", "CYPRUS", "CZECH REPUBLIC", "ICELAND"}], 
                    "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 29, "$Version" -> 
                    "13.1.4"|>, 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.1.4"|>, 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.1.4"|>, 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.1.4"|>, 
                    "Carbon Disclosure" -> <|
                    "Form" -> NeuralNetworks`TensorT[{24}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> Tooltip[{
                    "\"Value derived from data provided in Annual \
Report/Financial Accounts Disclosure\"", "\"Exact Value from CDP\"", 
                    Skeleton[21], 
                    "\"Value derived from data provided in personal \
communication\""}, {
                    "Value derived from data provided in Annual \
Report/Financial Accounts Disclosure", "Exact Value from CDP", 
                    "Value derived from data provided in CDP", 
                    "Value summed up from data provided in Annual \
Report/Financial Accounts Disclosure", 
                    "Exact Value from Annual Report/10K/Financial Accounts \
Disclosure", 
                    "Estimate used instead of disclosure - data does not \
cover global operations", 
                    "Value derived from data provided in Environmental/CSR", 
                    "Exact Value from Environmental/CSR", 
                    "Value derived from fuel use provided in CDP", 
                    "Value derived from fuel use provided in Annual \
Report/Financial Accounts Disclosure", "Derived from previous year", 
                    "Value summed up from data provided in Environmental/CSR",
                     "Value split from data provided in Annual \
Report/Financial Accounts Disclosure", "Estimated data", 
                    "Value summed up from data provided in CDP", 
                    "Value split from data provided in Environmental/CSR", 
                    "Exact Value from personal communication", 
                    "Data approximated from chart/graph in Annual \
Report/10-K/Financial Accounts", 
                    "Estimate based on partial data disclosure in Annual \
Report/10-K/Financial Accounts", 
                    "Estimate based on partial data disclosure in \
Environmental/CSR", 
                    "Data approximated from chart/graph in Environmental \
Report/CSR Report/Website", 
                    "Estimate used instead of disclosure - data is normalised \
and no aggregating factor is available", 
                    "Value derived from fuel use provided in \
Environmental/CSR", 
                    "Value derived from data provided in personal \
communication"}], "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 24, "$Version" -> 
                    "13.1.4"|>, 
                    "Revenue (USD mn)" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.1.4"|>|>, 
                    "Outputs" -> <|
                    "Ratings" -> <|
                    "Form" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT], "Type" -> "Class", "Labels" -> 
                    Tooltip[{"\"D\"", "\"E\"", 
                    Skeleton[2], "\"B\""}, {"D", "E", "C", "A", "B"}], 
                    "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                    5, "$Rank" -> 0, "$Version" -> "13.1.4"|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "GICS Sector Name"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Country"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Carbon Disclosure"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input7"] -> 
                    NeuralNetworks`NetPath["Inputs", "Revenue (USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Ratings"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Carbon Disclosure"], 
                    NeuralNetworks`NetPath["Nodes", "1"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Inputs", "Country"], 
                    NeuralNetworks`NetPath["Inputs", "GICS Sector Name"], 
                    NeuralNetworks`NetPath["Inputs", "Revenue (USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "2"], 
                    NeuralNetworks`NetPath["Nodes", "3"], 
                    NeuralNetworks`NetPath["Outputs", "Ratings"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Carbon Disclosure"], 
                    NeuralNetworks`NetPath["Nodes", "1"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 1 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 2 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath[
                    "Inputs", 
                    "Carbon Intensity-Scope 3 (tonnes CO2e/USD mn)"], 
                    NeuralNetworks`NetPath["Inputs", "Country"], 
                    NeuralNetworks`NetPath["Inputs", "GICS Sector Name"], 
                    NeuralNetworks`NetPath["Inputs", "Revenue (USD mn)"], 
                    NeuralNetworks`NetPath["Nodes", "2"], 
                    NeuralNetworks`NetPath["Nodes", "3"], 
                    NeuralNetworks`NetPath["Outputs", "Ratings"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.878726129928315*^9, 3.878726168428197*^9}, {
   3.8787262156484528`*^9, 3.87872622961639*^9}, {3.878726512796131*^9, 
   3.878726522953801*^9}, 3.8788072152668047`*^9, 3.878810347274686*^9, {
   3.87881054488463*^9, 3.878810614535725*^9}, {3.878810679069372*^9, 
   3.878810716436698*^9}, {3.87881079352073*^9, 3.878810811943788*^9}, 
   3.878810893326872*^9, {3.878810929803438*^9, 3.8788109548774137`*^9}, {
   3.878811673755396*^9, 3.878811702022273*^9}, 3.8788118587791557`*^9, 
   3.8788119571211853`*^9, 3.87914947438482*^9, 3.879161051423369*^9, 
   3.8791610966238823`*^9, 3.879161813483426*^9, 3.8791620972581587`*^9, 
   3.879325551253036*^9, 3.879327159161799*^9, 3.8793305040313253`*^9, 
   3.879330615587932*^9, 3.879333052316928*^9, 3.879354787980659*^9, 
   3.879417899585849*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"45048ab9-1c04-447f-bd87-fadd6566df03"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing the Trained Neural Network", "Subsubsection",
 CellChangeTimes->{{3.878726643694363*^9, 
  3.8787266533838167`*^9}},ExpressionUUID->"d901b0fe-9ce0-49d2-8e3b-\
639446d55d30"],

Cell["Plot the accuracy of the Neural Network on the Test Set", "Text",
 CellChangeTimes->{{3.878726714067416*^9, 3.878726732353978*^9}, {
  3.8787275933293257`*^9, 
  3.878727603654995*^9}},ExpressionUUID->"0f267815-5b34-49df-b044-\
4d26ff756c83"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Print", "[", 
  RowBox[{"\"\<The accuracy is: \>\"", ",", 
   RowBox[{"NetMeasurements", "[", 
    RowBox[{"netTrained", ",", "testset", ",", "\"\<Accuracy\>\""}], "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AccuracyAss", " ", "=", " ", 
   RowBox[{"Append", "[", 
    RowBox[{"AccuracyAss", ",", " ", 
     RowBox[{"\"\<NeuralNetwork\>\"", "->", 
      RowBox[{"NetMeasurements", "[", 
       RowBox[{"netTrained", ",", "testset", ",", "\"\<Accuracy\>\""}], 
       "]"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.878726605514142*^9, 3.878726617155772*^9}, 
   3.8787275887903347`*^9, {3.8788072618505507`*^9, 3.8788072659244833`*^9}, {
   3.878808579828779*^9, 3.8788085937210493`*^9}, {3.878808694140306*^9, 
   3.8788087103939*^9}, {3.878809380337645*^9, 3.8788093840805483`*^9}, {
   3.8788095453820143`*^9, 3.8788095671976147`*^9}, {3.879162093711692*^9, 
   3.879162102949932*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"deb6a3ce-1b71-4899-8dd5-f97cc198ad11"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"The accuracy is: \"\>", "\[InvisibleSpace]", 
   "0.8600349019023137`"}],
  SequenceForm["The accuracy is: ", 0.8600349019023137],
  Editable->False]], "Print",
 CellChangeTimes->{{3.878811676406455*^9, 3.87881170464396*^9}, 
   3.8788118611968727`*^9, 3.878811959898769*^9, {3.8791494767883453`*^9, 
   3.879149479841407*^9}, 3.879161787171857*^9, 3.879161832965918*^9, 
   3.8791621042697678`*^9, 3.879325553839388*^9, 3.87932716134907*^9, 
   3.879330505917506*^9, 3.879330617631846*^9, 3.879333055380248*^9, 
   3.8793547909013653`*^9, 3.8794179036585083`*^9},
 CellLabel->
  "During evaluation of \
In[61]:=",ExpressionUUID->"82e86356-99db-4d03-ba28-b552e359cb0f"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Comparing Accuracies", "Subsection",
 CellChangeTimes->{{3.878810999599156*^9, 
  3.87881101388165*^9}},ExpressionUUID->"f64bedb0-e15f-4b5c-a1ee-\
62184bc03531"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Sort", "[", "AccuracyAss", "]"}], ",", " ", 
   RowBox[{"ChartLabels", "->", 
    RowBox[{"Keys", "[", "AccuracyAss", "]"}]}], ",", " ", 
   RowBox[{"BarOrigin", "->", "Left"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.878811025981831*^9, 3.878811028862319*^9}, {
   3.878811082183075*^9, 3.878811133392282*^9}, {3.878811171674322*^9, 
   3.878811252198371*^9}, 3.878811291695615*^9, {3.878811486032049*^9, 
   3.878811491626598*^9}, {3.879332964647192*^9, 3.879332973313635*^9}, {
   3.8793332278274717`*^9, 3.879333229014473*^9}},
 CellLabel->
  "In[552]:=",ExpressionUUID->"b63792d8-88da-43de-b740-10156776cce8"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{0., 0.43075018208302984`}, {0., 6.451201747997087}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
     0.6579999999999999], Thickness[Small]}], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6579999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 0.5487982520029133}, {0.6129943502824858, 
             1.4512017479970867`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{103.75000000000001`, 294.2782485875706}, {
            42.727787280021126`, 65.07823106318051}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.6129943502824858]& ,
         TagBoxNote->"0.6129943502824858"],
        StyleBox["0.6129943502824858`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.6129943502824858, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6579999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 1.5487982520029133`}, {0.6129943502824858, 
             2.4512017479970867`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{103.75000000000001`, 294.2782485875706}, {
            18.514180085285183`, 40.86462386844456}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.6129943502824858]& ,
         TagBoxNote->"0.6129943502824858"],
        StyleBox["0.6129943502824858`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.6129943502824858, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6579999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 2.5487982520029133`}, {0.6129943502824858, 
             3.4512017479970867`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{103.75000000000001`, 
            294.2782485875706}, {-5.699427109450767, 16.651016673708618`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.6129943502824858]& ,
         TagBoxNote->"0.6129943502824858"],
        StyleBox["0.6129943502824858`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.6129943502824858, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6579999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 3.5487982520029133`}, {0.6129943502824858, 
             4.451201747997087}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{103.75000000000001`, 
            294.2782485875706}, {-29.91303430418671, -7.562590521027317}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.6129943502824858]& ,
         TagBoxNote->"0.6129943502824858"],
        StyleBox["0.6129943502824858`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.6129943502824858, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6579999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 4.548798252002913}, {0.615819209039548, 
             5.451201747997087}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{103.75000000000001`, 
            295.1539548022599}, {-54.12664149892265, -31.77619771576326}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.615819209039548]& ,
         TagBoxNote->"0.615819209039548"],
        StyleBox["0.615819209039548`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.615819209039548, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6579999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 5.548798252002913}, {0.8011299395291819, 
             6.451201747997087}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{103.75000000000001`, 
            352.6002812540464}, {-78.3402486936586, -55.9898049104992}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.8011299395291819]& ,
         TagBoxNote->"0.8011299395291819"],
        StyleBox["0.8011299395291819`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.8011299395291819, {}], 
        "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
   StyleBox[{
     {Thickness[Tiny], 
      LineBox[{{0., 0.43075018208302984`}, {0., 6.5716107793153675`}}], 
      StyleBox[{}, "GraphicsLabel",
       StripOnInput->False]}, 
     StyleBox[{
       {Thickness[Tiny], 
        LineBox[{{0., 0.5487982520029133}, 
          Offset[{-6., 0.}, {0., 0.5487982520029133}]}], 
        LineBox[{{0., 6.451201747997087}, 
          Offset[{-6., 0.}, {0., 
           6.451201747997087}]}], {{}, {}, {}, {}, {}, {}, {
          LineBox[{{0., 1.4512017479970867`}, 
            Offset[{-4., 0.}, {0., 1.4512017479970867`}]}], 
          LineBox[{{0., 1.5487982520029133`}, 
            Offset[{-4., 0.}, {0., 1.5487982520029133`}]}], 
          LineBox[{{0., 2.4512017479970867`}, 
            Offset[{-4., 0.}, {0., 2.4512017479970867`}]}], 
          LineBox[{{0., 2.5487982520029133`}, 
            Offset[{-4., 0.}, {0., 2.5487982520029133`}]}], 
          LineBox[{{0., 3.4512017479970867`}, 
            Offset[{-4., 0.}, {0., 3.4512017479970867`}]}], 
          LineBox[{{0., 3.5487982520029133`}, 
            Offset[{-4., 0.}, {0., 3.5487982520029133`}]}], 
          LineBox[{{0., 4.451201747997087}, 
            Offset[{-4., 0.}, {0., 4.451201747997087}]}], 
          LineBox[{{0., 4.548798252002913}, 
            Offset[{-4., 0.}, {0., 4.548798252002913}]}], 
          LineBox[{{0., 5.451201747997087}, 
            Offset[{-4., 0.}, {0., 5.451201747997087}]}], 
          LineBox[{{0., 5.548798252002913}, 
            Offset[{-4., 0.}, {0., 5.548798252002913}]}]}, {}}}, 
       StyleBox[
        {Thickness[Tiny], 
         InsetBox["\<\"LogisticRegression\"\>", Offset[{-2, 0}, {0., 1.}], 
          NCache[ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]], 
          Automatic, {1, 0}], 
         InsetBox["\<\"GradientBoostedTrees\"\>", Offset[{-2, 0}, {0., 2.}], 
          NCache[ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]], 
          Automatic, {1, 0}], 
         InsetBox["\<\"RandomForest\"\>", Offset[{-2, 0}, {0., 3.}], NCache[
          ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]], 
          Automatic, {1, 0}], 
         InsetBox["\<\"SupportVectorMachine\"\>", Offset[{-2, 0}, {0., 4.}], 
          NCache[ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]], 
          Automatic, {1, 0}], 
         InsetBox["\<\"NearestNeighbors\"\>", Offset[{-2, 0}, {0., 5.}], 
          NCache[ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]], 
          Automatic, {1, 0}], 
         InsetBox["\<\"NeuralNetwork\"\>", Offset[{-2, 0}, {0., 6.}], NCache[
          ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]], 
          Automatic, {1, 0}]}, "GraphicsLabel",
        StripOnInput->False]}, "GraphicsTicks",
      StripOnInput->False]}, "GraphicsAxes",
    StripOnInput->False,
    Antialiasing->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, False},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0.43075018208302984`},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, None}]], "Output",
 CellChangeTimes->{
  3.878811133888937*^9, 3.878811175820257*^9, {3.878811210339319*^9, 
   3.8788112458324823`*^9}, 3.878811292309379*^9, 3.878811493093472*^9, 
   3.878811970869577*^9, 3.87914948452833*^9, 3.879332973829427*^9, 
   3.879333056912201*^9, 3.879333230530974*^9, 3.879354792678876*^9},
 CellLabel->
  "Out[552]=",ExpressionUUID->"fbdaba6c-7343-443c-97aa-8261c122d24d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["nobs"], "Input",
 CellChangeTimes->{{3.879417974281196*^9, 3.8794179786998663`*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"ca04980b-a877-486f-9fa9-c771ae2f2fd9"],

Cell[BoxData["2865"], "Output",
 CellChangeTimes->{3.879417979205873*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"4efc0329-4d99-46e4-ab29-b564de6d974d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Experiment", "Subsection",
 CellChangeTimes->{{3.879334226156754*^9, 
  3.879334228076641*^9}},ExpressionUUID->"e6bab7d5-c5c1-47ab-b369-\
a2847676231e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"probaTestRes", " ", "=", " ", 
   RowBox[{"Mean", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"probaTest", "[", 
          RowBox[{"[", "5", "]"}], "]"}], "-", 
         RowBox[{"probaTest", "[", 
          RowBox[{"[", "#", "]"}], "]"}]}], ")"}], "^", "2"}], "&"}], " ", "/@", 
     RowBox[{"Range", "[", "4", "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.879328884646504*^9},ExpressionUUID->"8d14ef17-2a6b-4f14-a7c4-\
a8eba0470d45"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"probaTestset", " ", "=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"netTrained", "[", 
     RowBox[{
      RowBox[{"Normal", "@", 
       RowBox[{"testset", "[", 
        RowBox[{"[", 
         RowBox[{"#", ",", " ", 
          RowBox[{"1", ";;", "6"}]}], "]"}], "]"}]}], ",", " ", 
      "\"\<Probabilities\>\""}], "]"}], "&"}], "/@", 
   RowBox[{"Range", "[", 
    RowBox[{"Length", "[", "testset", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8791619429818*^9, 3.879161954609281*^9}, {
  3.879162042321109*^9, 3.879162050076744*^9}, {3.879162118284605*^9, 
  3.879162141907312*^9}, {3.879162176882243*^9, 3.879162244974175*^9}, {
  3.879162329584804*^9, 3.879162406840211*^9}, {3.8791624473658123`*^9, 
  3.879162464993911*^9}, {3.8791625157925673`*^9, 3.8791625211288643`*^9}, {
  3.8793264765619383`*^9, 3.8793264810870943`*^9}},
 CellLabel->
  "In[257]:=",ExpressionUUID->"647f2859-772b-46af-8879-4af283343275"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "0.09074581414461136`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.04478267580270767`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}], ",", 
   
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "0.003265876555815339`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.9999276399612427`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}], ",", 
   
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "2.4035836077018757`*^-7"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "1.1714661536896026`*^-16"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.9570074677467346`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "6.928027573849249`*^-8"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "6.462579968427459`*^-21"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "1.`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "7.082799963478499`*^-28"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}], ",", 
   
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "0.904574990272522`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "6.364949967974098`*^-6"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}], ",", 
   
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "0.9999985694885254`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "1.352378278807187`*^-11"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}], ",", 
   
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "1.`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "1.6913730338738284`*^-20"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}], ",", 
   
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "0.15117231011390686`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}], ",", 
   
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}], ",", 
   
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "0.9989238381385803`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "1.6076025133315852`*^-7"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}], ",", 
   
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "0.5578960180282593`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.00009703246178105474`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}], ",", 
   
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "0.6933250427246094`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "2.4995029595473736`*^-15"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.8244775533676147`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "6.373289396233162`*^-11"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "1.3142901046234983`*^-22"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "0.0021528934594243765`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "4.5962972938982475`*^-27"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.00004750672815134749`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "1.2683048662892879`*^-17"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}], ",", 
   
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "0.00003123212809441611`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "2.2474617184254582`*^-18"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "5.241511517189199`*^-35"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "2.1537858885596667`*^-30"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}], ",", 
   
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}], ",", 
   
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "1.2584087016875856`*^-7"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "1.9731990293005847`*^-13"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.9135748744010925`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.00011041463585570455`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "6.607169423275973`*^-33"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "3.4966524570113887`*^-19"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}], ",", 
   
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "0.000599023827817291`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "2.1935633753855655`*^-7"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.614212691783905`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.0011588974157348275`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "4.192461834933472`*^-16"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "0.9857790470123291`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.00002862624933186453`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "4.2878421392976794`*^-38"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.879162195111423*^9, 3.8791622459498043`*^9}, {
   3.879162337482966*^9, 3.879162407738915*^9}, 3.8791624658924713`*^9, 
   3.879162521843843*^9, 3.8793256218336687`*^9, 3.879328323340159*^9},
 CellLabel->
  "Out[257]=",ExpressionUUID->"1bcd810c-d545-4daf-a3d6-d3e4f67ca5df"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"probaTestset", " ", "=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"Sort", "[", 
     RowBox[{"probaTestset", "[", 
      RowBox[{"[", "#", "]"}], "]"}], "]"}], "&"}], "/@", 
   RowBox[{"Range", "[", 
    RowBox[{"Length", "[", "probaTestset", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.879162712743273*^9, 3.879162714630197*^9}, 
   3.8791628025349092`*^9, {3.8791635647690077`*^9, 3.879163568725194*^9}, {
   3.8791635992611017`*^9, 3.8791636932031507`*^9}},
 CellLabel->
  "In[182]:=",ExpressionUUID->"653e8d7a-0d01-435a-b126-1275645f83b9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "1.4174311120718126`*^-23"}], ",", 
     RowBox[{"\<\"C\"\>", "\[Rule]", "1.2991310249788057`*^-8"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "8.604396362077438`*^-11"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.00006368425238179043`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.00027190460241399705`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.29853391647338867`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.9695113897323608`"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"C\"\>", "\[Rule]", "1.`"}]}], "\[RightAssociation]"}], ",", 
   
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"D\"\>", "\[Rule]", "1.391833097986419`*^-19"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "9.708011698965272`*^-18"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "7.741028412895645`*^-13"}], ",", 
     RowBox[{"\<\"C\"\>", "\[Rule]", "5.389659563093119`*^-8"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.00502255093306303`"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "5.4166418574026436`*^-30"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "2.32077249004602`*^-22"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.000581845932174474`"}], ",", 
     RowBox[{"\<\"C\"\>", "\[Rule]", "1.`"}]}], "\[RightAssociation]"}], ",", 
   
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"B\"\>", "\[Rule]", "1.03112275120186`*^-13"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "5.421673526795345`*^-12"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "5.464879104799536`*^-10"}], ",", 
     RowBox[{"\<\"C\"\>", "\[Rule]", "9.106048310059123`*^-6"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.0012527997605502605`"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"C\"\>", "\[Rule]", "1.0155347049400909`*^-11"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "6.581280587170113`*^-8"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "1.5990977801898926`*^-13"}], ",", 
     RowBox[{"\<\"C\"\>", "\[Rule]", "7.577601324193495`*^-10"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"D\"\>", "\[Rule]", "9.560972404150091`*^-17"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "9.289184810015705`*^-16"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "1.7298543153465573`*^-10"}], ",", 
     RowBox[{"\<\"C\"\>", "\[Rule]", "2.4010445187627738`*^-8"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.008085167035460472`"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"E\"\>", "\[Rule]", "1.699688827183632`*^-11"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "1.3040377111472878`*^-10"}], ",", 
     RowBox[{"\<\"C\"\>", "\[Rule]", "1.4363990552546113`*^-10"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "3.1703254421699967`*^-7"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.10168071836233139`"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"C\"\>", "\[Rule]", "1.`"}]}], "\[RightAssociation]"}], ",", 
   
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"C\"\>", "\[Rule]", "1.0487903719387623`*^-16"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"B\"\>", "\[Rule]", "1.723865494795973`*^-11"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "5.416270904001763`*^-11"}], ",", 
     RowBox[{"\<\"C\"\>", "\[Rule]", "5.610546471856992`*^-10"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "3.1798882105249504`*^-7"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.11350728571414948`"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"E\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "1.0116469345094874`*^-26"}], ",", 
     RowBox[{"\<\"C\"\>", "\[Rule]", "7.724712118876639`*^-14"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "1.3858258305214079`*^-33"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "3.799773263891796`*^-31"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.026753360405564308`"}], ",", 
     RowBox[{"\<\"C\"\>", "\[Rule]", "0.9938878417015076`"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"E\"\>", "\[Rule]", "4.622004760870324`*^-26"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "5.14481198433212`*^-23"}], ",", 
     RowBox[{"\<\"C\"\>", "\[Rule]", "2.3106309176938993`*^-15"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.0002671336696948856`"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.5635074973106384`"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"C\"\>", "\[Rule]", "2.2473537342523518`*^-30"}], ",", 
     RowBox[{"\<\"D\"\>", "\[Rule]", "2.799025247585912`*^-28"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "2.7204816211810306`*^-22"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "3.3394305098966015`*^-9"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "0.7957841157913208`"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"D\"\>", "\[Rule]", "4.700201540745751`*^-19"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "3.088096175487477`*^-17"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "1.4303856493355638`*^-12"}], ",", 
     RowBox[{"\<\"C\"\>", "\[Rule]", "6.243189432098006`*^-8"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "0.005633242428302765`"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"D\"\>", "\[Rule]", "0.`"}], ",", 
     RowBox[{"\<\"E\"\>", "\[Rule]", "6.929456086973362`*^-34"}], ",", 
     RowBox[{"\<\"B\"\>", "\[Rule]", "2.6336362396696115`*^-21"}], ",", 
     RowBox[{"\<\"A\"\>", "\[Rule]", "2.3709915240033297`*^-6"}], ",", 
     RowBox[{"\<\"C\"\>", "\[Rule]", "0.00001765969136613421`"}]}], 
    "\[RightAssociation]"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8791635691851788`*^9, {3.879163601176399*^9, 3.879163693460307*^9}, 
   3.879325624090193*^9},
 CellLabel->
  "Out[182]=",ExpressionUUID->"a53b0030-4151-49c3-89f2-a5fea5287272"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", " ", "=", " ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\"\<E\>\"", "\[Rule]", "0.2"}], ",", 
    RowBox[{"\"\<B\>\"", "\[Rule]", "0.2"}], ",", 
    RowBox[{"\"\<D\>\"", "\[Rule]", "0.2"}], ",", 
    RowBox[{"\"\<A\>\"", "\[Rule]", "0.2"}], ",", 
    RowBox[{"\"\<C\>\"", "\[Rule]", "0.2"}]}], 
   "\[RightAssociation]"}]}]], "Input",
 CellChangeTimes->{{3.87916386300893*^9, 3.879163880670096*^9}},
 CellLabel->
  "In[260]:=",ExpressionUUID->"0e3dbb85-ad49-4db0-917a-547f268aee60"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"E\"\>", "\[Rule]", "0.2`"}], ",", 
   RowBox[{"\<\"B\"\>", "\[Rule]", "0.2`"}], ",", 
   RowBox[{"\<\"D\"\>", "\[Rule]", "0.2`"}], ",", 
   RowBox[{"\<\"A\"\>", "\[Rule]", "0.2`"}], ",", 
   RowBox[{"\<\"C\"\>", "\[Rule]", "0.2`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.879163881258347*^9},
 CellLabel->
  "Out[260]=",ExpressionUUID->"7a653be9-9c82-4aea-8615-a33c6bb4a487"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mean", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"test", "[", 
        RowBox[{"[", "5", "]"}], "]"}], "-", 
       RowBox[{"test", "[", 
        RowBox[{"[", "#", "]"}], "]"}]}], ")"}], "^", "2"}], "&"}], " ", "/@", 
   RowBox[{"Range", "[", "4", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.879163895512356*^9, 3.8791639196542673`*^9}},
 CellLabel->
  "In[261]:=",ExpressionUUID->"4188413d-fba7-460c-b099-891645e54c40"],

Cell[BoxData["0.`"], "Output",
 CellChangeTimes->{3.8791639211489553`*^9},
 CellLabel->
  "Out[261]=",ExpressionUUID->"4ecb7532-e850-4ad6-8f8f-713a08389583"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Mean", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"probaTestset", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", "5"}], "]"}], "]"}], "-", 
        RowBox[{"probaTestset", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", "#"}], "]"}], "]"}]}], ")"}], "^", "2"}], "&"}], 
    " ", "/@", 
    RowBox[{"Range", "[", "4", "]"}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.879162554661834*^9, 3.8791626930674143`*^9}, {
  3.879162827355801*^9, 3.8791628774267387`*^9}, {3.87916292534603*^9, 
  3.879163006093318*^9}, {3.87916310217419*^9, 3.879163104335397*^9}, {
  3.879163408574731*^9, 3.879163426089576*^9}, {3.879163458761359*^9, 
  3.8791634791855783`*^9}, {3.879163516682467*^9, 3.879163544886017*^9}, {
  3.879163704125595*^9, 3.879163746848413*^9}, {3.879163786933915*^9, 
  3.879163793354096*^9}, {3.8791638255360613`*^9, 3.87916384092603*^9}},
 CellLabel->
  "In[259]:=",ExpressionUUID->"acaa06dc-acf2-4b81-97b1-ce82054a0354"],

Cell[BoxData["0.9999999999988427`"], "Output",
 CellChangeTimes->{
  3.87916300638414*^9, 3.879163104965707*^9, 3.879163426595355*^9, {
   3.879163462550201*^9, 3.879163479496263*^9}, {3.879163518227528*^9, 
   3.8791635458610287`*^9}, 3.879163795976687*^9, 3.879163841618247*^9},
 CellLabel->
  "Out[259]=",ExpressionUUID->"d314cb50-54a2-407a-a579-c5e22de84bed"]
}, Open  ]],

Cell[BoxData[""], "Input",ExpressionUUID->"70747b3a-b508-40a2-9640-a8b321172c60"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Creating the API", "Section",
 CellChangeTimes->{{3.879334286047063*^9, 
  3.879334292242495*^9}},ExpressionUUID->"7fc40886-317c-46bc-9e91-\
a387e2e5c08e"],

Cell[CellGroupData[{

Cell["Defining the API", "Subsection",
 CellChangeTimes->{{3.879334543572297*^9, 3.879334545582472*^9}, {
  3.8793548084846*^9, 
  3.879354810906066*^9}},ExpressionUUID->"9706ea5c-35ac-4662-8099-\
7c9b71df6b15"],

Cell[BoxData[
 RowBox[{
  RowBox[{"apiFunc", " ", "=", " ", 
   RowBox[{"APIFunction", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<Sector\>\"", " ", "\[Rule]", " ", 
        RowBox[{
        "\"\<String\>\"", " ", "\[Rule]", " ", "\"\<Financials\>\""}]}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"\"\<CarbInt1\>\"", " ", "\[Rule]", " ", 
        RowBox[{"\"\<Number\>\"", " ", "\[Rule]", " ", "10000"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<CarbInt2\>\"", " ", "\[Rule]", " ", 
        RowBox[{"\"\<Number\>\"", " ", "\[Rule]", " ", "10000"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<CarbInt3\>\"", " ", "\[Rule]", " ", 
        RowBox[{"\"\<Number\>\"", " ", "\[Rule]", " ", "10000"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<CarbDisc\>\"", " ", "\[Rule]", " ", 
        RowBox[{
        "\"\<String\>\"", " ", "\[Rule]", " ", 
         "\"\<Value derived from data provided in Environmental/CSR\>\""}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Revenues\>\"", " ", "\[Rule]", " ", 
        RowBox[{"\"\<Number\>\"", " ", "\[Rule]", " ", "10000"}]}]}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"netTrained", "[", 
       RowBox[{"{", 
        RowBox[{
        "#Sector", ",", " ", "#CarbInt1", ",", " ", "#CarbInt2", ",", "  ", 
         "#CarbInt3", ",", " ", "#CarbDisc", ",", "  ", "#Revenues"}], "}"}], 
       "]"}], "&"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.879334547395049*^9, 3.879334547404652*^9}, {
   3.879335137738255*^9, 3.879335138624044*^9}, {3.8793353912902803`*^9, 
   3.879335392879437*^9}, {3.87933565638511*^9, 3.879335749518166*^9}, {
   3.879335873701726*^9, 3.879335897977887*^9}, 3.8793359965417128`*^9, {
   3.879336075223774*^9, 3.87933607568193*^9}, 3.879336168228867*^9, {
   3.879336271198415*^9, 3.879336282855215*^9}, {3.879336312857336*^9, 
   3.8793363363849373`*^9}, {3.87935481662586*^9, 
   3.879354817914371*^9}},ExpressionUUID->"1875fc8d-1248-4c0b-b673-\
529c5bb9919c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Deploying the API", "Subsection",
 CellChangeTimes->{{3.879354834022154*^9, 
  3.879354841426221*^9}},ExpressionUUID->"74b8c785-fe21-4065-aa77-\
8bc63de254c9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"apiFuncDeployed", " ", "=", " ", 
  RowBox[{"CloudDeploy", "[", "\[IndentingNewLine]", 
   RowBox[{
   "apiFunc", ",", "\[IndentingNewLine]", "\"\<WebServices/APIRiskRating\>\"",
     ",", "\[IndentingNewLine]", 
    RowBox[{"Permissions", " ", "\[Rule]", " ", "\"\<Public\>\""}]}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[553]:=",ExpressionUUID->"012a5e82-0346-4d83-9f8e-0ec67cca3446"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"CloudObject", "[", 
   TemplateBox[{
    "\"https://www.wolframcloud.com/obj/dario.scalabrin/WebServices/\
APIRiskRating\"", 
     "https://www.wolframcloud.com/obj/dario.scalabrin/WebServices/\
APIRiskRating"},
    "HyperlinkURL"], "]"}],
  CloudObject[
  "https://www.wolframcloud.com/obj/dario.scalabrin/WebServices/\
APIRiskRating"],
  SelectWithContents->True]], "Output",
 CellChangeTimes->{
  3.879336172056601*^9, {3.879336325462165*^9, 3.879336364295141*^9}, 
   3.879354848053746*^9},
 CellLabel->
  "Out[553]=",ExpressionUUID->"87d08bfe-d680-4ccd-93fe-bff4c7265d14"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{316, Automatic}, {Automatic, 50}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Mac OS X ARM (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"2d1442fc-8e41-45cf-86ce-0b9d40cf737d"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 143, 3, 98, "Title",ExpressionUUID->"3d5c901c-528e-40ea-bfb5-6cae8602de3b"],
Cell[726, 27, 166, 3, 53, "Subtitle",ExpressionUUID->"e7479a40-b674-4689-a1e6-7937b2c177d6"],
Cell[895, 32, 159, 3, 31, "Subsubtitle",ExpressionUUID->"439ae915-0578-422b-b930-d6d3dc9f7065"],
Cell[CellGroupData[{
Cell[1079, 39, 219, 4, 67, "Section",ExpressionUUID->"7dace181-d0f9-4283-b4a9-94e43c143822"],
Cell[CellGroupData[{
Cell[1323, 47, 160, 3, 54, "Subsection",ExpressionUUID->"94903ccb-4645-43a4-b5e5-28857714dfcf"],
Cell[1486, 52, 1482, 33, 94, "Input",ExpressionUUID->"fc7511cd-d7b9-430d-bc85-259db4bc506b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3005, 90, 236, 4, 54, "Subsection",ExpressionUUID->"35896a36-bc89-45d7-aa4c-67e8432be11c"],
Cell[CellGroupData[{
Cell[3266, 98, 3553, 82, 241, "Input",ExpressionUUID->"64e06684-09ba-41b9-8f8e-61ae4922557f"],
Cell[6822, 182, 82923, 1579, 241, "Output",ExpressionUUID->"6c1bf2d0-3b83-4766-8cb3-b432e1fb1961"],
Cell[89748, 1763, 87987, 1647, 241, "Output",ExpressionUUID->"ee9b18ee-9898-4963-8ed6-69783a6b2297"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[177796, 3417, 263, 4, 67, "Section",ExpressionUUID->"09b8ec3b-6ad4-4052-b6db-39219809bea4"],
Cell[CellGroupData[{
Cell[178084, 3425, 139, 3, 54, "Subsection",ExpressionUUID->"718b3489-2255-4bf6-9e53-6fbf72095c28"],
Cell[178226, 3430, 780, 14, 104, "Text",ExpressionUUID->"709f453a-bbea-4521-b17e-2c6be2d07fba"],
Cell[CellGroupData[{
Cell[179031, 3448, 4298, 111, 262, "Input",ExpressionUUID->"2de772f5-4145-4495-9373-d8e224bc076d"],
Cell[183332, 3561, 1215, 20, 34, "Output",ExpressionUUID->"640ecbe7-a4e3-420a-b284-4b076116ecec"],
Cell[184550, 3583, 19490, 381, 241, "Output",ExpressionUUID->"2f102a83-0c0d-404e-a8d8-c75bf4108241"],
Cell[204043, 3966, 9913, 271, 238, "Output",ExpressionUUID->"110fb143-ad43-4452-ab06-5b20a512a04b"],
Cell[CellGroupData[{
Cell[213981, 4241, 1209, 20, 24, "Print",ExpressionUUID->"df0ea3dd-2f3e-40c0-9aef-fcfb27224d22"],
Cell[215193, 4263, 1223, 20, 24, "Print",ExpressionUUID->"ad181318-7b76-4b11-a2e4-893aecfd621b"],
Cell[216419, 4285, 1236, 21, 24, "Print",ExpressionUUID->"d86d3d00-845d-4c2e-9b3e-dec235ce90a8"],
Cell[217658, 4308, 1194, 20, 24, "Print",ExpressionUUID->"4e9e6352-5099-401f-a797-ebf79bd266a8"]
}, Open  ]]
}, Open  ]],
Cell[218879, 4332, 512, 9, 35, "Text",ExpressionUUID->"1a6fc14d-0418-469d-b9d5-9f5a2764ee89"],
Cell[CellGroupData[{
Cell[219416, 4345, 1697, 40, 115, "Input",ExpressionUUID->"2e930372-2ce5-4b8c-89e1-74e90910d3f2"],
Cell[221116, 4387, 83534, 1588, 241, "Output",ExpressionUUID->"18d9c474-8324-4183-af81-7cc5516441d8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[304699, 5981, 307, 5, 54, "Subsection",ExpressionUUID->"056fde69-d6a3-4d9e-a2ac-b269c1f5fc2c"],
Cell[CellGroupData[{
Cell[305031, 5990, 1639, 36, 73, "Input",ExpressionUUID->"750190a8-3600-4615-bbeb-0c8e1dcd2654"],
Cell[306673, 6028, 34188, 624, 201, "Output",ExpressionUUID->"057ac5cc-02a0-452f-a8d0-f3991a034d6f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[340910, 6658, 296, 5, 54, "Subsection",ExpressionUUID->"c2596125-a273-4404-a475-df67a84893ae"],
Cell[CellGroupData[{
Cell[341231, 6667, 787, 17, 52, "Input",ExpressionUUID->"71b43137-8fd0-4fca-a3e2-e31cd7015633"],
Cell[342021, 6686, 88052, 1650, 241, "Output",ExpressionUUID->"0e9ec8cc-4a49-4a94-b76f-166aa8abf20f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[430122, 8342, 338, 6, 54, "Subsection",ExpressionUUID->"13e1a9e6-dd50-4c06-9ec7-817728819780"],
Cell[CellGroupData[{
Cell[430485, 8352, 5121, 131, 325, "Input",ExpressionUUID->"aca8cf41-acc7-4aa4-b9d0-698571a4bee2"],
Cell[435609, 8485, 89342, 1675, 241, "Output",ExpressionUUID->"3f3115e9-9451-4527-89a2-cd0af1610749"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[525000, 10166, 370, 6, 54, "Subsection",ExpressionUUID->"2841fd97-a03b-47f0-825e-747d3de9d265"],
Cell[CellGroupData[{
Cell[525395, 10176, 2157, 61, 136, "Input",ExpressionUUID->"89c65a73-b4ee-4482-9bc9-332b9a5ea9b8"],
Cell[527555, 10239, 90317, 1691, 241, "Output",ExpressionUUID->"f708e769-6646-41aa-a906-63c71df0f7a7"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[617933, 11937, 172, 3, 67, "Section",ExpressionUUID->"c4ba50b6-f780-49eb-946b-2f462f16f559"],
Cell[CellGroupData[{
Cell[618130, 11944, 213, 4, 30, "Input",ExpressionUUID->"21eccc16-790e-4e60-a70d-b036ebf73aad"],
Cell[618346, 11950, 273, 6, 34, "Output",ExpressionUUID->"43ad3a8c-4b41-4d7d-b170-f9d779e24f46"]
}, Open  ]],
Cell[CellGroupData[{
Cell[618656, 11961, 995, 26, 52, "Input",ExpressionUUID->"5756d48e-5a10-4881-afc8-5ab15276c347"],
Cell[619654, 11989, 13534, 368, 360, "Output",ExpressionUUID->"b534697b-d39c-4fed-9c9f-c71865026db1"]
}, Open  ]],
Cell[633203, 12360, 128, 3, 30, "Input",ExpressionUUID->"e1529622-9291-44a8-be5c-b09e04bfff93"],
Cell[CellGroupData[{
Cell[633356, 12367, 517, 13, 30, "Input",ExpressionUUID->"b48cf2f3-be79-417e-9329-af8519c3734c"],
Cell[633876, 12382, 12465, 367, 256, "Output",ExpressionUUID->"49138c77-69fc-459f-986a-320bb1012b28"]
}, Open  ]],
Cell[CellGroupData[{
Cell[646378, 12754, 1354, 37, 73, "Input",ExpressionUUID->"adaaf859-359c-4c64-922f-f922f86c28aa"],
Cell[647735, 12793, 7273, 198, 258, "Output",ExpressionUUID->"dae7ee08-3fae-445d-96f2-c2329a20f431"]
}, Open  ]],
Cell[655023, 12994, 153, 3, 30, "Input",ExpressionUUID->"61586cba-14da-4c50-98ff-8bab0c59ecc3"],
Cell[CellGroupData[{
Cell[655201, 13001, 1550, 38, 73, "Input",ExpressionUUID->"9864a534-e22e-4b02-8543-31db9531ec9f"],
Cell[656754, 13041, 14643, 375, 357, "Output",ExpressionUUID->"6aad2172-2fe1-4da5-ae0a-2ce5aade8f3b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[671434, 13421, 1747, 50, 94, "Input",ExpressionUUID->"883ef2e7-3172-40b9-8c55-4ffc16691005"],
Cell[673184, 13473, 226273, 6265, 142, "Output",ExpressionUUID->"caff3f7d-4478-451a-8b4e-36f72823b55c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[899494, 19743, 1771, 57, 94, "Input",ExpressionUUID->"f630a3a6-8885-4262-9891-ecf78bdcd971"],
Cell[901268, 19802, 166830, 4625, 144, "Output",ExpressionUUID->"465c6d42-5dd1-4d1d-ab29-dfc81ae84333"]
}, Open  ]],
Cell[1068113, 24430, 237, 5, 30, "Input",ExpressionUUID->"5901ca7d-0a0a-47e0-9d28-98cbe6ae5bce"],
Cell[CellGroupData[{
Cell[1068375, 24439, 852, 16, 73, "Input",ExpressionUUID->"ac81ec20-61b3-42ff-9d30-8d8c49991057"],
Cell[1069230, 24457, 855, 17, 77, "Output",ExpressionUUID->"2916c6af-5be9-47c2-91ae-9a2fc48358eb"]
}, Open  ]],
Cell[1070100, 24477, 81, 0, 30, "Input",ExpressionUUID->"6fe5b5e1-9fef-45da-9020-be49d30f6e34"],
Cell[1070184, 24479, 1761, 43, 115, "Input",ExpressionUUID->"f3c47b9b-a284-4e6d-8579-72e54a1fcde3"],
Cell[1071948, 24524, 2790, 71, 241, "Input",ExpressionUUID->"9547b407-c261-4cd3-9c61-3a2a8845f68e"],
Cell[CellGroupData[{
Cell[1074763, 24599, 664, 17, 30, "Input",ExpressionUUID->"4097cc73-a6ff-48d9-8186-ee3b23ad5f46"],
Cell[1075430, 24618, 47949, 897, 406, "Output",ExpressionUUID->"a5c376e7-2ee8-49a5-805e-f6e6701af04a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1123416, 25520, 939, 23, 73, "Input",ExpressionUUID->"ab8da2c3-9be2-40c2-9160-36c02e5f30bd"],
Cell[1124358, 25545, 53057, 980, 455, "Output",ExpressionUUID->"1efbee8c-7372-4642-950b-e9b42a1a08fc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1177452, 26530, 815, 22, 73, "Input",ExpressionUUID->"29d3a312-4370-4946-bf15-97af67597887"],
Cell[1178270, 26554, 52893, 976, 455, "Output",ExpressionUUID->"d0aa6e40-ba1d-45bf-814b-53c1ea41dd9c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1231200, 27535, 741, 20, 52, "Input",ExpressionUUID->"cf066b86-a878-4df9-906c-01dfabdcbea6"],
Cell[1231944, 27557, 49785, 926, 427, "Output",ExpressionUUID->"736fac9c-1b6e-459a-994a-3105c10f3039"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1281766, 28488, 726, 19, 30, "Input",ExpressionUUID->"1d49fc1e-14cb-400d-a30b-da2a8c02da52"],
Cell[1282495, 28509, 39237, 753, 503, "Output",ExpressionUUID->"00d8679d-91bc-44b9-b7db-31fa858ed7d4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1321769, 29267, 158, 3, 54, "Subsection",ExpressionUUID->"073a44ab-4398-4bdf-8e51-2576503cd162"],
Cell[CellGroupData[{
Cell[1321952, 29274, 486, 12, 30, "Input",ExpressionUUID->"92c7b856-4e8f-4ef4-8e4b-91b35e430943"],
Cell[1322441, 29288, 1248, 37, 253, "Output",ExpressionUUID->"ead02403-354b-488c-be4f-56ae4cb83a68"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1323726, 29330, 791, 20, 30, "Input",ExpressionUUID->"409e672c-d644-4b81-b7c9-9919b8ed86e0"],
Cell[1324520, 29352, 1401, 24, 46, "Message",ExpressionUUID->"9f22c6ac-c3a6-4c6b-b820-c3c60e13d93f"],
Cell[1325924, 29378, 421, 10, 28, "Message",ExpressionUUID->"92781513-7e97-44c7-b834-a91c1486b462"],
Cell[1326348, 29390, 1401, 24, 46, "Message",ExpressionUUID->"3784c041-bcb9-491b-ae2b-1c35bbbd0f50"],
Cell[1327752, 29416, 422, 10, 28, "Message",ExpressionUUID->"269a9ce8-ce05-4064-80b2-29c14f271c9c"],
Cell[1328177, 29428, 1402, 24, 46, "Message",ExpressionUUID->"0507a85b-4d29-4dcd-a854-409b42b24e47"],
Cell[1329582, 29454, 455, 10, 28, "Message",ExpressionUUID->"bee4aeba-b8da-48c1-8b65-09802811c65d"],
Cell[1330040, 29466, 422, 10, 28, "Message",ExpressionUUID->"bb981fc4-abc5-4f53-a0c2-202dac243b21"],
Cell[1330465, 29478, 462, 10, 28, "Message",ExpressionUUID->"3a214e07-ea2d-4a0b-a3b7-c7004ab64240"],
Cell[1330930, 29490, 1549, 26, 46, "Message",ExpressionUUID->"21d3a782-0d94-4a29-ba0a-8ce588af2b74"],
Cell[1332482, 29518, 7396, 126, 338, "Output",ExpressionUUID->"85d2d5f1-9af0-4e41-89dd-2066e14a0695"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1339915, 29649, 592, 15, 52, "Input",ExpressionUUID->"71b48ad0-4374-4d00-ab83-2a7d7996ebd5"],
Cell[1340510, 29666, 4815, 93, 263, "Output",ExpressionUUID->"29aa516f-0264-4e98-86ef-0c7a77c6e208"]
}, Open  ]],
Cell[1345340, 29762, 81, 0, 30, "Input",ExpressionUUID->"1b6d7cc6-7822-4ee8-b5e6-586263c327a0"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1345470, 29768, 217, 4, 67, "Section",ExpressionUUID->"9cfeceee-578b-479e-9e2b-6bb082aed526"],
Cell[CellGroupData[{
Cell[1345712, 29776, 166, 3, 54, "Subsection",ExpressionUUID->"23ccf5ee-bcae-4dce-ad62-cf12062b8105"],
Cell[1345881, 29781, 751, 19, 81, "Text",ExpressionUUID->"6b2ba3af-bd0c-404b-9a30-d5bc7bfff9d7"],
Cell[1346635, 29802, 2758, 65, 157, "Input",ExpressionUUID->"7d247cef-d508-4632-b82d-0c996ff173ab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1349430, 29872, 215, 4, 54, "Subsection",ExpressionUUID->"cd9d058a-068e-49c5-a54a-179c014ccdab"],
Cell[CellGroupData[{
Cell[1349670, 29880, 221, 4, 45, "Subsubsection",ExpressionUUID->"919c1118-c19d-49c2-b1cb-cdc52c16953a"],
Cell[1349894, 29886, 351, 7, 35, "Text",ExpressionUUID->"358fc56b-581c-400b-a2cb-e1fe47c98ca6"],
Cell[CellGroupData[{
Cell[1350270, 29897, 742, 13, 52, "Input",ExpressionUUID->"e494084e-deed-4ffe-a42a-57f607634d26"],
Cell[1351015, 29912, 97952, 1761, 62, "Output",ExpressionUUID->"8760048f-3fe5-4e14-a39e-6f70a260874a"],
Cell[1448970, 31675, 143952, 2742, 554, "Output",ExpressionUUID->"763a43e4-2808-4f39-84b2-9c41a55787b1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1592959, 34422, 1571, 37, 115, "Input",ExpressionUUID->"f50b7281-5b28-4bee-886b-6e43d141e559"],
Cell[1594533, 34461, 514, 11, 24, "Print",ExpressionUUID->"fb1c6c22-a9d6-46c0-8150-22d71ecec140"],
Cell[1595050, 34474, 37956, 977, 253, "Output",ExpressionUUID->"62337a55-d7f5-4a0c-b8e0-3ef74c017060"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1633055, 35457, 226, 4, 45, "Subsubsection",ExpressionUUID->"f53d6bbd-1785-4c17-836e-57829fcc4856"],
Cell[1633284, 35463, 324, 6, 35, "Text",ExpressionUUID->"032cc1ba-9cd4-4b67-9266-120a6c713934"],
Cell[CellGroupData[{
Cell[1633633, 35473, 744, 13, 52, "Input",ExpressionUUID->"bfdaded8-2093-4087-9ae1-340f7ee79d36"],
Cell[1634380, 35488, 321065, 5528, 62, "Output",ExpressionUUID->"47d2b1d0-4266-4efd-a786-d0026177e5f2"],
Cell[1955448, 41018, 368765, 6509, 552, "Output",ExpressionUUID->"3a35db6f-462c-4bbd-b850-fa89b5fb577a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2324250, 47532, 1571, 37, 115, "Input",ExpressionUUID->"c6d61c84-957f-4aed-afc0-70d0ed8abe2a"],
Cell[2325824, 47571, 528, 12, 24, "Print",ExpressionUUID->"eba7d79d-1c61-4125-b540-85c69a223950"],
Cell[2326355, 47585, 37399, 963, 253, "Output",ExpressionUUID->"087b0d5b-b83e-4608-8d7d-f49d3ad52d0a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2363803, 48554, 262, 4, 45, "Subsubsection",ExpressionUUID->"af039915-bf9f-4d39-af0a-2865838c6fc3"],
Cell[2364068, 48560, 323, 6, 35, "Text",ExpressionUUID->"accec003-1c7f-4fff-8f86-6d6171f252b3"],
Cell[CellGroupData[{
Cell[2364416, 48570, 744, 14, 52, "Input",ExpressionUUID->"6853ef91-287f-4ced-be7c-af92b49c909c"],
Cell[2365163, 48586, 210139, 3571, 62, "Output",ExpressionUUID->"ae6ce56a-a135-4d43-acc3-2ba1e901dba6"],
Cell[2575305, 52159, 231407, 4019, 551, "Output",ExpressionUUID->"27c452b9-df69-43e4-8b3a-9c241ef5ecca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2806749, 56183, 1589, 38, 115, "Input",ExpressionUUID->"99020af7-66ff-4247-b63c-5a1edaef53dc"],
Cell[2808341, 56223, 538, 12, 24, "Print",ExpressionUUID->"9d2feec3-b4d5-45f8-9920-8f14c30d5554"],
Cell[2808882, 56237, 37422, 963, 253, "Output",ExpressionUUID->"c6e87123-6884-4bbc-a209-f8479dcf8fd4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2846353, 57206, 224, 4, 45, "Subsubsection",ExpressionUUID->"707033d6-fc97-4519-873d-86d56ff114d1"],
Cell[2846580, 57212, 289, 4, 35, "Text",ExpressionUUID->"072a572c-19ec-4e50-8160-bd35294883af"],
Cell[CellGroupData[{
Cell[2846894, 57220, 730, 14, 52, "Input",ExpressionUUID->"0ad5282a-88fd-4696-b81a-c71cc5893931"],
Cell[2847627, 57236, 13164, 269, 84, "Output",ExpressionUUID->"12288c2d-67d2-4c59-a005-68c44af668bf"],
Cell[2860794, 57507, 53232, 1106, 550, "Output",ExpressionUUID->"1be49ab5-133a-4fec-9ba6-e44e37ecf3e7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2914063, 58618, 1603, 38, 115, "Input",ExpressionUUID->"21382602-c388-449e-99f7-a16ab30307db"],
Cell[2915669, 58658, 498, 11, 24, "Print",ExpressionUUID->"e8edba5e-4eda-424c-838b-6db9cbf77e70"],
Cell[2916170, 58671, 37380, 963, 253, "Output",ExpressionUUID->"6ed708d4-f91a-4b46-b795-48555a21a976"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2953599, 59640, 168, 3, 45, "Subsubsection",ExpressionUUID->"9942841c-f629-4f6a-b284-312b9ff53265"],
Cell[2953770, 59645, 241, 4, 35, "Text",ExpressionUUID->"5dfadb55-1804-475e-af67-fd5a3fa3ada6"],
Cell[CellGroupData[{
Cell[2954036, 59653, 698, 14, 52, "Input",ExpressionUUID->"81eb6b46-1115-4683-ad4f-4a7788f50766"],
Cell[2954737, 59669, 179695, 3107, 62, "Output",ExpressionUUID->"4df8f659-35a3-4b1e-949e-0eecf256a52c"],
Cell[3134435, 62778, 199904, 3552, 554, "Output",ExpressionUUID->"3916a230-90c3-4375-8869-6209a12a7f3e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3334376, 66335, 1545, 37, 115, "Input",ExpressionUUID->"5e92e43d-3a8d-417e-8227-9da67103f984"],
Cell[3335924, 66374, 499, 11, 24, "Print",ExpressionUUID->"049ea804-e64c-4588-925f-1d7bd5c1ef04"],
Cell[3336426, 66387, 37375, 963, 253, "Output",ExpressionUUID->"cf499141-a7d5-4311-bef2-56a15f2523ce"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3373862, 67357, 262, 4, 54, "Subsection",ExpressionUUID->"167a82f5-aa47-4220-90ca-39153e030b4f"],
Cell[CellGroupData[{
Cell[3374149, 67365, 163, 3, 45, "Subsubsection",ExpressionUUID->"af6df2e6-1db6-4012-946a-f093b8cea41f"],
Cell[3374315, 67370, 422, 9, 58, "Text",ExpressionUUID->"231b4959-cb15-4d63-a49e-e3c934e96ca1"],
Cell[CellGroupData[{
Cell[3374762, 67383, 1823, 38, 73, "Input",ExpressionUUID->"2e8dbd1c-5f09-4c5e-9338-71b2c43249c3"],
Cell[3376588, 67423, 7248, 145, 63, "Output",ExpressionUUID->"2896e71e-09c7-49af-8aaf-3ceab15d791b"],
Cell[3383839, 67570, 10787, 206, 63, "Output",ExpressionUUID->"08d75599-3e39-4c32-a54d-9a0e35eeb4e0"],
Cell[3394629, 67778, 7834, 152, 63, "Output",ExpressionUUID->"5efe9ce6-1dbf-494c-a16f-7797257eb97e"]
}, Open  ]],
Cell[3402478, 67933, 177, 3, 35, "Text",ExpressionUUID->"4d8415d2-03cc-48ed-aee2-c53a40dd79be"],
Cell[3402658, 67938, 1506, 31, 73, "Input",ExpressionUUID->"0b8e8eb7-f51e-4c87-bb31-bd641db423ae"],
Cell[3404167, 67971, 229, 3, 35, "Text",ExpressionUUID->"a21c5f12-ea36-4f7b-9a81-5804c3f222f8"],
Cell[3404399, 67976, 550, 13, 30, "Input",ExpressionUUID->"c367e224-5d5f-4cad-8e0d-a2c397b5c8a9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3404986, 67994, 217, 4, 45, "Subsubsection",ExpressionUUID->"988cb0f7-88bc-42af-8fce-d6f30b501fca"],
Cell[3405206, 68000, 465, 10, 58, "Text",ExpressionUUID->"8cb8e66e-cdad-4527-820a-8cedc6abee3d"],
Cell[CellGroupData[{
Cell[3405696, 68014, 2635, 56, 157, "Input",ExpressionUUID->"14ea714b-552d-4cab-b1a4-42b227f9b31a"],
Cell[3408334, 68072, 225807, 4553, 588, "Output",ExpressionUUID->"ca991200-de02-49a3-96cd-5fc0e714fae6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3634190, 72631, 167, 3, 45, "Subsubsection",ExpressionUUID->"99246540-7d26-482a-814f-c78318188484"],
Cell[3634360, 72636, 941, 25, 104, "Text",ExpressionUUID->"7be345d5-6033-4892-8119-db0692a1b24f"],
Cell[CellGroupData[{
Cell[3635326, 72665, 1132, 19, 52, "Input",ExpressionUUID->"1f19a39f-3020-4330-b84d-cdd628f2f64c"],
Cell[3636461, 72686, 224948, 4527, 65, "Output",ExpressionUUID->"45048ab9-1c04-447f-bd87-fadd6566df03"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3861458, 77219, 187, 3, 45, "Subsubsection",ExpressionUUID->"d901b0fe-9ce0-49d2-8e3b-639446d55d30"],
Cell[3861648, 77224, 248, 4, 35, "Text",ExpressionUUID->"0f267815-5b34-49df-b044-4d26ff756c83"],
Cell[CellGroupData[{
Cell[3861921, 77232, 1024, 20, 52, "Input",ExpressionUUID->"deb6a3ce-1b71-4899-8dd5-f97cc198ad11"],
Cell[3862948, 77254, 718, 14, 24, "Print",ExpressionUUID->"82e86356-99db-4d03-ba28-b552e359cb0f"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3863727, 77275, 167, 3, 54, "Subsection",ExpressionUUID->"f64bedb0-e15f-4b5c-a1ee-62184bc03531"],
Cell[CellGroupData[{
Cell[3863919, 77282, 679, 13, 30, "Input",ExpressionUUID->"b63792d8-88da-43de-b740-10156776cce8"],
Cell[3864601, 77297, 10074, 245, 191, "Output",ExpressionUUID->"fbdaba6c-7343-443c-97aa-8261c122d24d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3874712, 77547, 177, 2, 30, "Input",ExpressionUUID->"ca04980b-a877-486f-9fa9-c771ae2f2fd9"],
Cell[3874892, 77551, 152, 2, 34, "Output",ExpressionUUID->"4efc0329-4d99-46e4-ab29-b564de6d974d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3875093, 77559, 158, 3, 54, "Subsection",ExpressionUUID->"e6bab7d5-c5c1-47ab-b369-a2847676231e"],
Cell[3875254, 77564, 541, 16, 30, "Input",ExpressionUUID->"8d14ef17-2a6b-4f14-a7c4-a8eba0470d45"],
Cell[CellGroupData[{
Cell[3875820, 77584, 945, 21, 30, "Input",ExpressionUUID->"647f2859-772b-46af-8879-4af283343275"],
Cell[3876768, 77607, 7663, 159, 221, "Output",ExpressionUUID->"1bcd810c-d545-4daf-a3d6-d3e4f67ca5df"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3884468, 77771, 573, 13, 30, "Input",ExpressionUUID->"653e8d7a-0d01-435a-b126-1275645f83b9"],
Cell[3885044, 77786, 7963, 159, 290, "Output",ExpressionUUID->"a53b0030-4151-49c3-89f2-a5fea5287272"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3893044, 77950, 531, 12, 30, "Input",ExpressionUUID->"0e3dbb85-ad49-4db0-917a-547f268aee60"],
Cell[3893578, 77964, 471, 11, 34, "Output",ExpressionUUID->"7a653be9-9c82-4aea-8615-a33c6bb4a487"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3894086, 77980, 497, 14, 30, "Input",ExpressionUUID->"4188413d-fba7-460c-b099-891645e54c40"],
Cell[3894586, 77996, 157, 3, 34, "Output",ExpressionUUID->"4ecb7532-e850-4ad6-8f8f-713a08389583"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3894780, 78004, 1064, 25, 52, "Input",ExpressionUUID->"acaa06dc-acf2-4b81-97b1-ce82054a0354"],
Cell[3895847, 78031, 363, 6, 34, "Output",ExpressionUUID->"d314cb50-54a2-407a-a579-c5e22de84bed"]
}, Open  ]],
Cell[3896225, 78040, 81, 0, 30, "Input",ExpressionUUID->"70747b3a-b508-40a2-9640-a8b321172c60"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3896355, 78046, 161, 3, 67, "Section",ExpressionUUID->"7fc40886-317c-46bc-9e91-a387e2e5c08e"],
Cell[CellGroupData[{
Cell[3896541, 78053, 211, 4, 54, "Subsection",ExpressionUUID->"9706ea5c-35ac-4662-8099-7c9b71df6b15"],
Cell[3896755, 78059, 2145, 43, 220, "Input",ExpressionUUID->"1875fc8d-1248-4c0b-b673-529c5bb9919c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3898937, 78107, 165, 3, 54, "Subsection",ExpressionUUID->"74b8c785-fe21-4065-aa77-8bc63de254c9"],
Cell[CellGroupData[{
Cell[3899127, 78114, 412, 9, 94, "Input",ExpressionUUID->"012a5e82-0346-4d83-9f8e-0ec67cca3446"],
Cell[3899542, 78125, 622, 17, 37, "Output",ExpressionUUID->"87d08bfe-d680-4ccd-93fe-bff4c7265d14"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

